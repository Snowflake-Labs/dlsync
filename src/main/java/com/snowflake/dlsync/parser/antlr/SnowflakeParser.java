// Generated from /Users/yhailu/projects/snowflake_labs/dlsync/src/main/antlr/SnowflakeParser.g4 by ANTLR 4.13.2

package com.snowflake.dlsync.parser.antlr;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class SnowflakeParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.13.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		AAD_PROVISIONER_Q=1, ABORT=2, ABORT_DETACHED_QUERY=3, ABORT_STATEMENT=4, 
		ACCESS=5, ACCOUNT=6, ACCOUNTADMIN=7, ACCOUNTS=8, ACTION=9, ADD=10, ADMIN_NAME=11, 
		ADMIN_PASSWORD=12, AES=13, AFTER=14, ALERT=15, ALERTS=16, ALL=17, ALLOWED_ACCOUNTS=18, 
		ALLOWED_DATABASES=19, ALLOWED_INTEGRATION_TYPES=20, ALLOWED_IP_LIST=21, 
		ALLOWED_SHARES=22, ALLOWED_VALUES=23, ALLOW_CLIENT_MFA_CACHING=24, ALLOW_DUPLICATE=25, 
		ALLOW_ID_TOKEN=26, ALLOW_OVERLAPPING_EXECUTION=27, ALTER=28, AND=29, ANY=30, 
		ANY_VALUE=31, API=32, API_ALLOWED_PREFIXES=33, API_AWS_ROLE_ARN=34, API_BLOCKED_PREFIXES=35, 
		API_INTEGRATION=36, API_KEY=37, API_PROVIDER=38, APPEND=39, APPEND_ONLY=40, 
		APPLY=41, ARRAY_AGG=42, AS=43, ASC=44, ATTACH=45, AT_KEYWORD=46, AUTHORIZATION=47, 
		AUTHORIZATIONS=48, AUTO=49, AUTO_Q=50, AUTOCOMMIT=51, AUTOCOMMIT_API_SUPPORTED=52, 
		AUTOINCREMENT=53, AUTO_COMPRESS=54, AUTO_DETECT=55, AUTO_INGEST=56, AUTO_REFRESH=57, 
		AUTO_RESUME=58, AUTO_SUSPEND=59, AVG=60, AVRO=61, AVRO_Q=62, AWS_KEY_ID=63, 
		AWS_ROLE=64, AWS_SECRET_KEY=65, AWS_SNS=66, AWS_SNS_ROLE_ARN=67, AWS_SNS_TOPIC=68, 
		AWS_SNS_TOPIC_ARN=69, AWS_TOKEN=70, AZURE=71, AZURE_AD_APPLICATION_ID=72, 
		AZURE_CSE_Q=73, AZURE_EVENT_GRID=74, AZURE_EVENT_GRID_TOPIC_ENDPOINT=75, 
		AZURE_Q=76, AZURE_SAS_TOKEN=77, AZURE_STORAGE_QUEUE_PRIMARY_URI=78, AZURE_TENANT_ID=79, 
		BASE64=80, BEFORE=81, BEGIN=82, BERNOULLI=83, BETWEEN=84, BINARY_AS_TEXT=85, 
		BINARY_FORMAT=86, BINARY_INPUT_FORMAT=87, BINARY_OUTPUT_FORMAT=88, BLOCK=89, 
		BLOCKED_IP_LIST=90, BLOCKED_ROLES_LIST=91, BODY=92, BOTH_Q=93, BROTLI=94, 
		BUSINESS_CRITICAL=95, BY=96, BZ2=97, CALL=98, CALLED=99, CALLER=100, CASCADE=101, 
		CASE=102, CASE_INSENSITIVE=103, CASE_SENSITIVE=104, CAST=105, CEIL=106, 
		CHANGES=107, CHANGE_TRACKING=108, CHANNELS=109, CHAR=110, CHARACTER=111, 
		CHARINDEX=112, CHECK=113, CHECKSUM=114, CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS=115, 
		CLIENT_ENCRYPTION_KEY_SIZE=116, CLIENT_MEMORY_LIMIT=117, CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX=118, 
		CLIENT_METADATA_USE_SESSION_DATABASE=119, CLIENT_PREFETCH_THREADS=120, 
		CLIENT_RESULT_CHUNK_SIZE=121, CLIENT_RESULT_COLUMN_CASE_INSENSITIVE=122, 
		CLIENT_SESSION_KEEP_ALIVE=123, CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY=124, 
		CLIENT_TIMESTAMP_TYPE_MAPPING=125, CLONE=126, CLUSTER=127, CLUSTERING=128, 
		COALESCE=129, COLLATE=130, COLLECTION=131, COLUMN=132, COLUMNS=133, COMMENT=134, 
		COMMIT=135, COMPRESSION=136, CONCAT=137, CONCAT_WS=138, CONDITION=139, 
		CONFIGURATION=140, CONNECT=141, CONNECTION=142, CONNECTIONS=143, CONSTRAINT=144, 
		CONTAINS=145, CONTEXT_HEADERS=146, CONTINUE=147, COPY=148, COPY_OPTIONS_=149, 
		COUNT=150, CREATE=151, CREDENTIALS=152, CREDIT_QUOTA=153, CROSS=154, CSV=155, 
		CSV_Q=156, CUBE=157, CURRENT=158, CURRENT_DATE=159, CURRENT_TIME=160, 
		CURRENT_TIMESTAMP=161, CUSTOM=162, DAILY=163, DATA=164, DATABASE=165, 
		DATABASES=166, DATA_RETENTION_TIME_IN_DAYS=167, DATEADD=168, DATEDIFF=169, 
		DATE_FORMAT=170, DATE_INPUT_FORMAT=171, DATE_OUTPUT_FORMAT=172, DATE_PART=173, 
		DAYS=174, DAYS_TO_EXPIRY=175, DEFAULT=176, DEFAULT_DDL_COLLATION_=177, 
		DEFAULT_NAMESPACE=178, DEFAULT_ROLE=179, DEFAULT_WAREHOUSE=180, DEFERRABLE=181, 
		DEFERRED=182, DEFINE=183, DEFINITION=184, DEFLATE=185, DELEGATED=186, 
		DELETE=187, DELTA=188, DENSE_RANK=189, DESC=190, DESCRIBE=191, DIRECTION=192, 
		DIRECTORY=193, DISABLE=194, DISABLED=195, DISABLE_AUTO_CONVERT=196, DISABLE_SNOWFLAKE_DATA=197, 
		DISPLAY_NAME=198, DISTINCT=199, DO=200, DOWNSTREAM=201, DROP=202, DYNAMIC=203, 
		ECONOMY=204, EDITION=205, ELSE=206, EMAIL=207, EMPTY_=208, EMPTY_FIELD_AS_NULL=209, 
		ENABLE=210, ENABLED=211, ENABLE_FOR_PRIVILEGE=212, ENABLE_INTERNAL_STAGES_PRIVATELINK=213, 
		ENABLE_OCTAL=214, ENABLE_QUERY_ACCELERATION=215, ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION=216, 
		ENCODING=217, ENCRYPTION=218, END=219, END_TIMESTAMP=220, ENFORCED=221, 
		ENFORCE_LENGTH=222, ENFORCE_SESSION_POLICY=223, ENTERPRISE=224, EQUAL_NULL=225, 
		EQUALITY=226, ERROR_INTEGRATION=227, ERROR_ON_COLUMN_COUNT_MISMATCH=228, 
		ERROR_ON_NONDETERMINISTIC_MERGE=229, ERROR_ON_NONDETERMINISTIC_UPDATE=230, 
		ESCAPE=231, ESCAPE_UNENCLOSED_FIELD=232, EVENT=233, EXCEPT=234, EXCLUDE=235, 
		EXCHANGE=236, EXECUTE=237, EXECUTION=238, EXISTS=239, EXPIRY_DATE=240, 
		EXPLAIN=241, EXPR=242, EXTERNAL=243, EXTERNAL_OAUTH=244, EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST=245, 
		EXTERNAL_OAUTH_ALLOWED_ROLES_LIST=246, EXTERNAL_OAUTH_ANY_ROLE_MODE=247, 
		EXTERNAL_OAUTH_AUDIENCE_LIST=248, EXTERNAL_OAUTH_BLOCKED_ROLES_LIST=249, 
		EXTERNAL_OAUTH_ISSUER=250, EXTERNAL_OAUTH_JWS_KEYS_URL=251, EXTERNAL_OAUTH_RSA_PUBLIC_KEY=252, 
		EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2=253, EXTERNAL_OAUTH_SCOPE_DELIMITER=254, 
		EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE=255, EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM=256, 
		EXTERNAL_OAUTH_TYPE=257, EXTERNAL_STAGE=258, FAILOVER=259, FALSE=260, 
		FETCH=261, FIELD_DELIMITER=262, FIELD_OPTIONALLY_ENCLOSED_BY=263, FILE=264, 
		FILES=265, FILE_EXTENSION=266, FILE_FORMAT=267, FIRST=268, FIRST_NAME=269, 
		FIRST_VALUE=270, FLATTEN=271, FOR=272, FORCE=273, FOREIGN=274, FORMAT=275, 
		FORMATS=276, FORMAT_NAME=277, FREQUENCY=278, FROM=279, FULL=280, FUNCTION=281, 
		FUNCTIONS=282, FUTURE=283, GCP_PUBSUB=284, GCP_PUBSUB_SUBSCRIPTION_NAME=285, 
		GCP_PUBSUB_TOPIC_NAME=286, GCS=287, GCS_SSE_KMS_Q=288, GENERIC_Q=289, 
		GENERIC_SCIM_PROVISIONER_Q=290, GEO=291, GEOGRAPHY_OUTPUT_FORMAT=292, 
		GEOMETRY_OUTPUT_FORMAT=293, GET=294, GETDATE=295, GLOBAL=296, GOOGLE_AUDIENCE=297, 
		GRANT=298, GRANTS=299, GROUP=300, GROUPING=301, GROUPS=302, GZIP=303, 
		HALF_AWAY_FROM_ZERO_Q=304, HALF_TO_EVEN_Q=305, HANDLER=306, HASH=307, 
		HAVING=308, HEADER=309, HEADERS=310, HEX=311, HIGH=312, HISTORY=313, HOURS=314, 
		IDENTIFIER=315, IDENTITY=316, IF=317, IFF=318, IFNULL=319, IGNORE=320, 
		IGNORE_UTF8_ERRORS=321, ILIKE=322, IMMEDIATE=323, IMMEDIATELY=324, IMMUTABLE=325, 
		IMPLICIT=326, IMPORT=327, IMPORTS=328, IMPORTED=329, IN=330, INCREMENT=331, 
		INCREMENTAL=332, INDEX=333, INFORMATION=334, INITIALIZE=335, INITIALLY=336, 
		INITIALLY_SUSPENDED=337, INITIAL_REPLICATION_SIZE_LIMIT_IN_TB=338, INNER=339, 
		INPUT=340, INSERT=341, INSERT_ONLY=342, INT=343, INTEGRATION=344, INTEGRATIONS=345, 
		INTERSECT=346, INTERVAL=347, INTO=348, IS=349, JAVA=350, JAVASCRIPT=351, 
		JDBC_TREAT_DECIMAL_AS_INT=352, JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC=353, JDBC_USE_SESSION_TIMEZONE=354, 
		JOIN=355, JSON=356, JSON_Q=357, JSON_INDENT=358, JS_TREAT_INTEGER_AS_BIGINT=359, 
		KEY=360, KEYS=361, KMS_KEY_ID=362, LAG=363, LANGUAGE=364, LARGE=365, LAST=366, 
		LAST_NAME=367, LAST_QUERY_ID=368, LAST_VALUE=369, LATERAL=370, LEAD=371, 
		LEFT=372, LEN=373, LENGTH=374, LIKE=375, LIMIT=376, LINEAR=377, LIST=378, 
		LISTING=379, LOCAL=380, LOCATION=381, LOCKS=382, LOCK_TIMEOUT=383, LOGIN_NAME=384, 
		LOOKER=385, LOW=386, LOWER=387, LTRIM=388, LZO=389, MANAGE=390, MANAGED=391, 
		MASKING=392, MASTER_KEY=393, MATCH=394, MATCHED=395, MATCHES=396, MATCH_BY_COLUMN_NAME=397, 
		MATCH_RECOGNIZE=398, MATERIALIZED=399, MAX_BATCH_ROWS=400, MAX_CLUSTER_COUNT=401, 
		MAX_CONCURRENCY_LEVEL=402, MAX_DATA_EXTENSION_TIME_IN_DAYS=403, MAX_SIZE=404, 
		MEASURES=405, MEDIUM=406, MEMOIZABLE=407, MERGE=408, MIDDLE_NAME=409, 
		MIN=410, MINS_TO_BYPASS_MFA=411, MINS_TO_UNLOCK=412, MINUS_=413, MIN_CLUSTER_COUNT=414, 
		MIN_DATA_RETENTION_TIME_IN_DAYS=415, MODE=416, MODIFIED_AFTER=417, MODIFY=418, 
		MONITOR=419, MONITORS=420, MONTHLY=421, MOVE=422, MULTI_STATEMENT_COUNT=423, 
		MUST_CHANGE_PASSWORD=424, NAME=425, NATURAL=426, NETWORK=427, NETWORK_POLICY=428, 
		NEVER=429, NEXT=430, NEXTVAL=431, NO=432, NONE=433, NONE_Q=434, NOORDER=435, 
		NORELY=436, NOT=437, NOTIFICATION=438, NOTIFICATION_INTEGRATION=439, NOTIFICATION_PROVIDER=440, 
		NOTIFY=441, NOTIFY_USERS=442, NOVALIDATE=443, NTILE=444, NULLIF=445, NULLS=446, 
		NULL_=447, NULL_IF=448, NUMBER=449, NVL=450, NVL2=451, OAUTH=452, OAUTH_ALLOW_NON_TLS_REDIRECT_URI=453, 
		OAUTH_CLIENT=454, OAUTH_CLIENT_RSA_PUBLIC_KEY=455, OAUTH_CLIENT_RSA_PUBLIC_KEY_2=456, 
		OAUTH_ENFORCE_PKCE=457, OAUTH_ISSUE_REFRESH_TOKENS=458, OAUTH_REDIRECT_URI=459, 
		OAUTH_REFRESH_TOKEN_VALIDITY=460, OAUTH_USE_SECONDARY_ROLES=461, OBJECT=462, 
		OBJECT_Q=463, OBJECTS=464, OBJECT_TYPES=465, OF=466, OFFSET=467, OKTA=468, 
		OKTA_PROVISIONER_Q=469, OKTA_Q=470, OLD=471, OMIT=472, ON=473, ONE=474, 
		ONLY=475, ON_CREATE=476, ON_ERROR=477, ON_SCHEDULE=478, OPERATE=479, OPTIMIZATION=480, 
		OPTION=481, OR=482, ORC=483, ORC_Q=484, ORDER=485, ORGADMIN=486, ORGANIZATION=487, 
		OUTBOUND=488, OUTER=489, OVER=490, OVERRIDE=491, OVERWRITE=492, OWNER=493, 
		OWNERSHIP=494, PACKAGES=495, PARALLEL=496, PARAMETERS=497, PARQUET=498, 
		PARQUET_Q=499, PARTIAL=500, PARTITION=501, PARTITION_TYPE=502, PASSWORD=503, 
		PASSWORD_HISTORY=504, PASSWORD_LOCKOUT_TIME_MINS=505, PASSWORD_MAX_AGE_DAYS=506, 
		PASSWORD_MAX_LENGTH=507, PASSWORD_MAX_RETRIES=508, PASSWORD_MIN_AGE_DAYS=509, 
		PASSWORD_MIN_LENGTH=510, PASSWORD_MIN_LOWER_CASE_CHARS=511, PASSWORD_MIN_NUMERIC_CHARS=512, 
		PASSWORD_MIN_SPECIAL_CHARS=513, PASSWORD_MIN_UPPER_CASE_CHARS=514, PAST=515, 
		PATH_=516, PATTERN=517, PER=518, PERCENT=519, PERIODIC_DATA_REKEYING=520, 
		PING_FEDERATE=521, PIPE=522, PIPES=523, PIPE_EXECUTION_PAUSED=524, PIVOT=525, 
		POLICIES=526, POLICY=527, PORT=528, PREFIX=529, PRESERVE_SPACE=530, PREVENT_UNLOAD_TO_INLINE_URL=531, 
		PREVENT_UNLOAD_TO_INTERNAL_STAGES=532, PRE_AUTHORIZED_ROLES_LIST=533, 
		PRIMARY=534, PRIOR=535, PRIORITY=536, PRIVILEGES=537, PROCEDURE=538, PROCEDURES=539, 
		PROCEDURE_NAME=540, PROPERTY=541, PROVIDER=542, PUBLIC=543, PURGE=544, 
		PUT=545, PYTHON=546, QUALIFY=547, QUARTER=548, QUERIES=549, QUERY=550, 
		QUERY_ACCELERATION_MAX_SCALE_FACTOR=551, QUERY_TAG=552, QUEUE=553, QUOTED_IDENTIFIERS_IGNORE_CASE=554, 
		RANK=555, RAW_DEFLATE=556, READ=557, READER=558, RECLUSTER=559, RECORD_DELIMITER=560, 
		RECURSIVE=561, REFERENCES=562, REFERENCE_USAGE=563, REFRESH=564, REFRESH_MODE=565, 
		REFRESH_ON_CREATE=566, REGION=567, REGIONS=568, REGION_GROUP=569, RELY=570, 
		REMOVE=571, RENAME=572, REPEATABLE=573, REPLACE=574, REPLACE_INVALID_CHARACTERS=575, 
		REPLICA=576, REPLICATION=577, REPLICATION_SCHEDULE=578, REQUEST_TRANSLATOR=579, 
		REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION=580, REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION=581, 
		RESET=582, RESOURCE=583, RESOURCES=584, RESOURCE_MONITOR=585, RESPECT=586, 
		RESPONSE_TRANSLATOR=587, RESTRICT=588, RESTRICTIONS=589, RESULT=590, RESUME=591, 
		RETURNS=592, RETURN_ALL_ERRORS=593, RETURN_ERRORS=594, RETURN_FAILED_ONLY=595, 
		RETURN_N_ROWS=596, RETURN_ROWS=597, REVOKE=598, RIGHT=599, RLIKE=600, 
		ROLE=601, ROLES=602, ROLLBACK=603, ROLLUP=604, ROUND=605, ROUNDING_MODE=606, 
		ROW=607, ROWS=608, ROWS_PER_RESULTSET=609, ROW_NUMBER=610, RSA_PUBLIC_KEY=611, 
		RSA_PUBLIC_KEY_2=612, RTRIM=613, RUN_AS_ROLE=614, RUNTIME_VERSION=615, 
		S3=616, SAML2=617, SAML2_ENABLE_SP_INITIATED=618, SAML2_FORCE_AUTHN=619, 
		SAML2_ISSUER=620, SAML2_POST_LOGOUT_REDIRECT_URL=621, SAML2_PROVIDER=622, 
		SAML2_REQUESTED_NAMEID_FORMAT=623, SAML2_SIGN_REQUEST=624, SAML2_SNOWFLAKE_ACS_URL=625, 
		SAML2_SNOWFLAKE_ISSUER_URL=626, SAML2_SNOWFLAKE_X509_CERT=627, SAML2_SP_INITIATED_LOGIN_PAGE_LABEL=628, 
		SAML2_SSO_URL=629, SAML2_X509_CERT=630, SAML_IDENTITY_PROVIDER=631, SAMPLE=632, 
		SAVE_OLD_URL=633, SCALE=634, SCALING_POLICY=635, SCHEDULE=636, SCHEMA=637, 
		SCHEMAS=638, SCIM=639, SCIM_CLIENT=640, SEARCH=641, SECONDARY=642, SECURE=643, 
		SECURITY=644, SECURITYADMIN=645, SEED=646, SELECT=647, SEQUENCE=648, SEQUENCES=649, 
		SESSION=650, SESSION_IDLE_TIMEOUT_MINS=651, SESSION_POLICY=652, SESSION_UI_IDLE_TIMEOUT_MINS=653, 
		SET=654, SETS=655, SHARE=656, SHARES=657, SHARE_RESTRICTIONS=658, SHOW=659, 
		SHOW_INITIAL_ROWS=660, SIMPLE=661, SIMULATED_DATA_SHARING_CONSUMER=662, 
		SIZE_LIMIT=663, SKIP_=664, SKIP_BLANK_LINES=665, SKIP_BYTE_ORDER_MARK=666, 
		SKIP_FILE=667, SKIP_FILE_N=668, SKIP_HEADER=669, SMALL=670, SNAPPY=671, 
		SNAPPY_COMPRESSION=672, SNOWFLAKE_FULL=673, SNOWFLAKE_SSE=674, SNOWPARK_OPTIMIZED=675, 
		SOME=676, SOURCE=677, SOURCE_COMPRESSION=678, SPLIT=679, SPLIT_PART=680, 
		SPLIT_TO_TABLE=681, SQL=682, SSO_LOGIN_PAGE=683, STAGE=684, STAGES=685, 
		STAGE_COPY_OPTIONS=686, STAGE_FILE_FORMAT=687, STANDARD=688, START=689, 
		STARTS=690, START_DATE=691, START_TIMESTAMP=692, STATE=693, STATEMENT=694, 
		STATEMENT_QUEUED_TIMEOUT_IN_SECONDS=695, STATEMENT_TIMEOUT_IN_SECONDS=696, 
		STATS=697, STATUS=698, STORAGE=699, STORAGE_ALLOWED_LOCATIONS=700, STORAGE_AWS_OBJECT_ACL=701, 
		STORAGE_AWS_ROLE_ARN=702, STORAGE_BLOCKED_LOCATIONS=703, STORAGE_INTEGRATION=704, 
		STORAGE_PROVIDER=705, STREAM=706, STREAMS=707, STRICT=708, STRICT_JSON_OUTPUT=709, 
		STRIP_NULL_VALUES=710, STRIP_OUTER_ARRAY=711, STRIP_OUTER_ELEMENT=712, 
		SUBSTR=713, SUBSTRING=714, SUM=715, SUSPEND=716, SUSPENDED=717, SUSPEND_IMMEDIATE=718, 
		SUSPEND_TASK_AFTER_NUM_FAILURES=719, SWAP=720, SYNC_PASSWORD=721, SYSADMIN=722, 
		SYSTEM=723, TABLE=724, TABLEAU_DESKTOP=725, TABLEAU_SERVER=726, TABLES=727, 
		TABLESAMPLE=728, TABLE_FORMAT=729, TABULAR=730, TAG=731, TAGS=732, TARGET_LAG=733, 
		TASK=734, TASKS=735, TEMP=736, TEMPORARY=737, TERSE=738, THEN=739, TIME=740, 
		TIMEADD=741, TIMEDIFF=742, TIMESTAMP=743, TIMESTAMP_DAY_IS_ALWAYS_24H=744, 
		TIMESTAMP_FORMAT=745, TIMESTAMP_INPUT_FORMAT=746, TIMESTAMP_LTZ=747, TIMESTAMP_LTZ_OUTPUT_FORMAT=748, 
		TIMESTAMP_NTZ=749, TIMESTAMP_NTZ_OUTPUT_FORMAT=750, TIMESTAMP_OUTPUT_FORMAT=751, 
		TIMESTAMP_TYPE_MAPPING=752, TIMESTAMP_TZ=753, TIMESTAMP_TZ_OUTPUT_FORMAT=754, 
		TIMESTAMPADD=755, TIMESTAMPDIFF=756, TIMEZONE=757, TIME_FORMAT=758, TIME_INPUT_FORMAT=759, 
		TIME_OUTPUT_FORMAT=760, TO=761, TO_BOOLEAN=762, TO_DATE=763, TO_TIMESTAMP=764, 
		TOP=765, TRANSACTION=766, TRANSACTIONS=767, TRANSACTION_ABORT_ON_ERROR=768, 
		TRANSACTION_DEFAULT_ISOLATION_LEVEL=769, TRANSIENT=770, TRIGGERS=771, 
		TRIM=772, TRIM_SPACE=773, TRUE=774, TRUNC=775, TRUNCATE=776, TRUNCATECOLUMNS=777, 
		TRY_CAST=778, TWO_DIGIT_CENTURY_START=779, TYPE=780, UNDROP=781, UNION=782, 
		UNIQUE=783, UNMATCHED=784, UNPIVOT=785, UNSET=786, UNSUPPORTED_DDL_ACTION=787, 
		UPDATE=788, UPPER=789, URL=790, USAGE=791, USE=792, USER=793, USERADMIN=794, 
		USERS=795, USER_SPECIFIED=796, USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE=797, 
		USER_TASK_TIMEOUT_MS=798, USE_ANY_ROLE=799, USE_CACHED_RESULT=800, USING=801, 
		UTF8=802, VALIDATE=803, VALIDATION_MODE=804, VALUE=805, VALUES=806, VARIABLES=807, 
		VERSION=808, VIEW=809, VIEWS=810, VISIBILITY=811, VOLATILE=812, WAREHOUSE=813, 
		WAREHOUSES=814, WAREHOUSE_SIZE=815, WAREHOUSE_TYPE=816, WEEKLY=817, WEEK_OF_YEAR_POLICY=818, 
		WEEK_START=819, WHEN=820, WHERE=821, WITH=822, WITHIN=823, WORK=824, WRITE=825, 
		X4LARGE=826, X5LARGE=827, X6LARGE=828, XLARGE=829, XML=830, XML_Q=831, 
		XSMALL=832, XXLARGE=833, XXXLARGE=834, YEARLY=835, YEAR=836, ZSTD=837, 
		ARRAY=838, ARRAY_Q=839, BIGINT=840, BINARY=841, BOOLEAN=842, BYTEINT=843, 
		CHAR_VARYING=844, DATE=845, DATETIME=846, DECIMAL_=847, DOUBLE=848, DOUBLE_PRECISION=849, 
		FLOAT4=850, FLOAT8=851, FLOAT_=852, FLOOR=853, GEOGRAPHY=854, GEOMETRY=855, 
		INTEGER=856, NCHAR=857, NCHAR_VARYING=858, NUMERIC=859, NVARCHAR2=860, 
		NVARCHAR=861, REAL_=862, SMALLINT=863, STRING_=864, TEXT=865, TINYINT=866, 
		VARBINARY=867, VARCHAR=868, VARIANT=869, LISTAGG=870, DUMMY=871, SPACE=872, 
		SQL_COMMENT=873, LINE_COMMENT=874, LINE_COMMENT_2=875, DOUBLE_QUOTE_ID=876, 
		DOUBLE_QUOTE_BLANK=877, SINGLE_QUOTE=878, ID=879, ID2=880, S3_PATH=881, 
		S3GOV_PATH=882, GCS_PATH=883, AZURE_PATH=884, FILE_PATH=885, DBL_DOLLAR=886, 
		STRING=887, DECIMAL=888, FLOAT=889, REAL=890, CHAR_LITERAL=891, ARROW=892, 
		ASSOC=893, NE=894, LTGT=895, EQ=896, GT=897, GE=898, LT=899, LE=900, PIPE_PIPE=901, 
		DOT=902, AT=903, AT_Q=904, DOLLAR=905, LR_BRACKET=906, RR_BRACKET=907, 
		LSB=908, RSB=909, LCB=910, RCB=911, COMMA=912, SEMI=913, COLON=914, COLON_COLON=915, 
		STAR=916, DIVIDE=917, MODULE=918, PLUS=919, MINUS=920, TILDA=921;
	public static final int
		RULE_snowflake_file = 0, RULE_batch = 1, RULE_sql_command = 2, RULE_ddl_command = 3, 
		RULE_dml_command = 4, RULE_insert_statement = 5, RULE_insert_multi_table_statement = 6, 
		RULE_into_clause2 = 7, RULE_values_list = 8, RULE_value_item = 9, RULE_merge_statement = 10, 
		RULE_merge_matches = 11, RULE_merge_cond = 12, RULE_merge_update_delete = 13, 
		RULE_merge_insert = 14, RULE_update_statement = 15, RULE_table_or_query = 16, 
		RULE_delete_statement = 17, RULE_values_builder = 18, RULE_other_command = 19, 
		RULE_begin_txn = 20, RULE_copy_into_table = 21, RULE_external_location = 22, 
		RULE_files = 23, RULE_file_format = 24, RULE_format_name = 25, RULE_format_type = 26, 
		RULE_stage_file_format = 27, RULE_copy_into_location = 28, RULE_comment = 29, 
		RULE_function_signature = 30, RULE_commit = 31, RULE_execute_immediate = 32, 
		RULE_execute_task = 33, RULE_explain = 34, RULE_parallel = 35, RULE_get_dml = 36, 
		RULE_grant_ownership = 37, RULE_grant_to_role = 38, RULE_global_privileges = 39, 
		RULE_global_privilege = 40, RULE_account_object_privileges = 41, RULE_account_object_privilege = 42, 
		RULE_schema_privileges = 43, RULE_schema_privilege = 44, RULE_schema_object_privileges = 45, 
		RULE_schema_object_privilege = 46, RULE_grant_to_share = 47, RULE_object_privilege = 48, 
		RULE_grant_role = 49, RULE_role_name = 50, RULE_system_defined_role = 51, 
		RULE_list = 52, RULE_user_stage = 53, RULE_table_stage = 54, RULE_named_stage = 55, 
		RULE_stage_path = 56, RULE_put = 57, RULE_remove = 58, RULE_revoke_from_role = 59, 
		RULE_revoke_from_share = 60, RULE_revoke_role = 61, RULE_rollback = 62, 
		RULE_set = 63, RULE_truncate_materialized_view = 64, RULE_truncate_table = 65, 
		RULE_unset = 66, RULE_alter_command = 67, RULE_account_params = 68, RULE_object_params = 69, 
		RULE_default_ddl_collation = 70, RULE_object_properties = 71, RULE_session_params = 72, 
		RULE_alter_account = 73, RULE_enabled_true_false = 74, RULE_alter_alert = 75, 
		RULE_resume_suspend = 76, RULE_alert_set_clause = 77, RULE_alert_unset_clause = 78, 
		RULE_alter_api_integration = 79, RULE_api_integration_property = 80, RULE_alter_connection = 81, 
		RULE_alter_database = 82, RULE_database_property = 83, RULE_account_id_list = 84, 
		RULE_alter_dynamic_table = 85, RULE_alter_external_table = 86, RULE_ignore_edition_check = 87, 
		RULE_replication_schedule = 88, RULE_db_name_list = 89, RULE_share_name_list = 90, 
		RULE_full_acct_list = 91, RULE_alter_failover_group = 92, RULE_alter_file_format = 93, 
		RULE_alter_function = 94, RULE_alter_function_signature = 95, RULE_data_type_list = 96, 
		RULE_alter_masking_policy = 97, RULE_alter_materialized_view = 98, RULE_alter_network_policy = 99, 
		RULE_alter_notification_integration = 100, RULE_alter_pipe = 101, RULE_alter_procedure = 102, 
		RULE_alter_replication_group = 103, RULE_credit_quota = 104, RULE_frequency = 105, 
		RULE_notify_users = 106, RULE_triggerDefinition = 107, RULE_alter_resource_monitor = 108, 
		RULE_alter_role = 109, RULE_alter_row_access_policy = 110, RULE_alter_schema = 111, 
		RULE_schema_property = 112, RULE_alter_sequence = 113, RULE_alter_security_integration_external_oauth = 114, 
		RULE_security_integration_external_oauth_property = 115, RULE_alter_security_integration_snowflake_oauth = 116, 
		RULE_security_integration_snowflake_oauth_property = 117, RULE_alter_security_integration_saml2 = 118, 
		RULE_alter_security_integration_scim = 119, RULE_security_integration_scim_property = 120, 
		RULE_alter_session = 121, RULE_alter_session_policy = 122, RULE_alter_password_policy = 123, 
		RULE_alter_share = 124, RULE_alter_storage_integration = 125, RULE_alter_stream = 126, 
		RULE_alter_table = 127, RULE_rls_operations = 128, RULE_clustering_action = 129, 
		RULE_table_column_action = 130, RULE_alter_column_clause = 131, RULE_inline_constraint = 132, 
		RULE_enforced_not_enforced = 133, RULE_deferrable_not_deferrable = 134, 
		RULE_initially_deferred_or_immediate = 135, RULE_common_constraint_properties = 136, 
		RULE_on_update = 137, RULE_on_delete = 138, RULE_foreign_key_match = 139, 
		RULE_on_action = 140, RULE_constraint_properties = 141, RULE_ext_table_column_action = 142, 
		RULE_constraint_action = 143, RULE_search_optimization_action = 144, RULE_search_method_with_target = 145, 
		RULE_alter_table_alter_column = 146, RULE_alter_column_decl_list = 147, 
		RULE_alter_column_decl = 148, RULE_alter_column_opts = 149, RULE_column_set_tags = 150, 
		RULE_column_unset_tags = 151, RULE_alter_tag = 152, RULE_alter_task = 153, 
		RULE_alter_user = 154, RULE_alter_view = 155, RULE_alter_modify = 156, 
		RULE_alter_warehouse = 157, RULE_alter_connection_opts = 158, RULE_alter_user_opts = 159, 
		RULE_alter_tag_opts = 160, RULE_alter_network_policy_opts = 161, RULE_alter_warehouse_opts = 162, 
		RULE_alter_account_opts = 163, RULE_set_tags = 164, RULE_tag_decl_list = 165, 
		RULE_unset_tags = 166, RULE_create_command = 167, RULE_create_account = 168, 
		RULE_create_alert = 169, RULE_alert_condition = 170, RULE_alert_action = 171, 
		RULE_create_api_integration = 172, RULE_create_object_clone = 173, RULE_create_connection = 174, 
		RULE_create_database = 175, RULE_clone_at_before = 176, RULE_at_before1 = 177, 
		RULE_header_decl = 178, RULE_compression_type = 179, RULE_compression = 180, 
		RULE_create_dynamic_table = 181, RULE_dynamic_table_params = 182, RULE_dynamic_table_settable_params = 183, 
		RULE_dynamic_table_unsettable_params = 184, RULE_data_retention_params = 185, 
		RULE_set_data_retention_params = 186, RULE_create_event_table = 187, RULE_create_external_function = 188, 
		RULE_create_external_table = 189, RULE_external_table_column_decl = 190, 
		RULE_external_table_column_decl_list = 191, RULE_full_acct = 192, RULE_integration_type_name = 193, 
		RULE_create_failover_group = 194, RULE_type_fileformat = 195, RULE_create_file_format = 196, 
		RULE_arg_decl = 197, RULE_arg_default_value_clause = 198, RULE_col_decl = 199, 
		RULE_virtual_column_decl = 200, RULE_function_definition = 201, RULE_create_function = 202, 
		RULE_create_managed_account = 203, RULE_create_masking_policy = 204, RULE_tag_decl = 205, 
		RULE_column_list_in_parentheses = 206, RULE_create_materialized_view = 207, 
		RULE_create_network_policy = 208, RULE_cloud_provider_params_auto = 209, 
		RULE_cloud_provider_params_push = 210, RULE_create_notification_integration = 211, 
		RULE_create_pipe = 212, RULE_caller_owner = 213, RULE_executa_as = 214, 
		RULE_procedure_definition = 215, RULE_not_null = 216, RULE_create_procedure = 217, 
		RULE_create_replication_group = 218, RULE_create_resource_monitor = 219, 
		RULE_create_role = 220, RULE_create_row_access_policy = 221, RULE_create_schema = 222, 
		RULE_create_security_integration_external_oauth = 223, RULE_implicit_none = 224, 
		RULE_create_security_integration_snowflake_oauth = 225, RULE_create_security_integration_saml2 = 226, 
		RULE_create_security_integration_scim = 227, RULE_network_policy = 228, 
		RULE_partner_application = 229, RULE_start_with = 230, RULE_increment_by = 231, 
		RULE_create_sequence = 232, RULE_create_session_policy = 233, RULE_session_policy_params = 234, 
		RULE_session_policy_param_name = 235, RULE_create_password_policy = 236, 
		RULE_password_policy_params = 237, RULE_password_policy_param_name = 238, 
		RULE_create_share = 239, RULE_character = 240, RULE_format_type_options = 241, 
		RULE_copy_options = 242, RULE_stage_encryption_opts_internal = 243, RULE_stage_type = 244, 
		RULE_stage_master_key = 245, RULE_stage_kms_key = 246, RULE_stage_encryption_opts_aws = 247, 
		RULE_aws_token = 248, RULE_aws_key_id = 249, RULE_aws_secret_key = 250, 
		RULE_aws_role = 251, RULE_azure_encryption_value = 252, RULE_stage_encryption_opts_az = 253, 
		RULE_storage_integration_eq_id = 254, RULE_az_credential_or_storage_integration = 255, 
		RULE_gcp_encryption_value = 256, RULE_stage_encryption_opts_gcp = 257, 
		RULE_aws_credential_or_storage_integration = 258, RULE_external_stage_params = 259, 
		RULE_true_false = 260, RULE_enable = 261, RULE_refresh_on_create = 262, 
		RULE_auto_refresh = 263, RULE_notification_integration = 264, RULE_directory_table_internal_params = 265, 
		RULE_directory_table_external_params = 266, RULE_create_stage = 267, RULE_alter_stage = 268, 
		RULE_drop_stage = 269, RULE_describe_stage = 270, RULE_show_stages = 271, 
		RULE_cloud_provider_params = 272, RULE_cloud_provider_params2 = 273, RULE_cloud_provider_params3 = 274, 
		RULE_create_storage_integration = 275, RULE_copy_grants = 276, RULE_append_only = 277, 
		RULE_insert_only = 278, RULE_show_initial_rows = 279, RULE_stream_time = 280, 
		RULE_create_stream = 281, RULE_temporary = 282, RULE_table_type = 283, 
		RULE_with_tags = 284, RULE_with_row_access_policy = 285, RULE_cluster_by = 286, 
		RULE_change_tracking = 287, RULE_with_masking_policy = 288, RULE_collate = 289, 
		RULE_order_noorder = 290, RULE_default_value = 291, RULE_foreign_key = 292, 
		RULE_primary_key = 293, RULE_out_of_line_constraint = 294, RULE_full_col_decl = 295, 
		RULE_materialized_col_decl = 296, RULE_materialized_col_decl_list = 297, 
		RULE_column_decl_item = 298, RULE_column_decl_item_list = 299, RULE_create_table = 300, 
		RULE_column_decl_item_list_paren = 301, RULE_create_table_clause = 302, 
		RULE_create_table_as_select = 303, RULE_create_table_like = 304, RULE_create_tag = 305, 
		RULE_tag_allowed_values = 306, RULE_session_parameter = 307, RULE_session_parameter_list = 308, 
		RULE_session_params_list = 309, RULE_create_task = 310, RULE_task_parameters = 311, 
		RULE_task_compute = 312, RULE_task_schedule = 313, RULE_task_timeout = 314, 
		RULE_task_suspend_after_failure_number = 315, RULE_task_error_integration = 316, 
		RULE_task_overlap = 317, RULE_sql = 318, RULE_call = 319, RULE_create_user = 320, 
		RULE_view_col = 321, RULE_create_view = 322, RULE_create_warehouse = 323, 
		RULE_wh_common_size = 324, RULE_wh_extra_size = 325, RULE_wh_properties = 326, 
		RULE_wh_params = 327, RULE_trigger_definition = 328, RULE_object_type_name = 329, 
		RULE_object_type_plural = 330, RULE_drop_command = 331, RULE_drop_object = 332, 
		RULE_drop_alert = 333, RULE_drop_connection = 334, RULE_drop_database = 335, 
		RULE_drop_dynamic_table = 336, RULE_drop_external_table = 337, RULE_drop_failover_group = 338, 
		RULE_drop_file_format = 339, RULE_drop_function = 340, RULE_drop_integration = 341, 
		RULE_drop_managed_account = 342, RULE_drop_masking_policy = 343, RULE_drop_materialized_view = 344, 
		RULE_drop_network_policy = 345, RULE_drop_pipe = 346, RULE_drop_procedure = 347, 
		RULE_drop_replication_group = 348, RULE_drop_resource_monitor = 349, RULE_drop_role = 350, 
		RULE_drop_row_access_policy = 351, RULE_drop_schema = 352, RULE_drop_sequence = 353, 
		RULE_drop_session_policy = 354, RULE_drop_password_policy = 355, RULE_drop_share = 356, 
		RULE_drop_stream = 357, RULE_drop_table = 358, RULE_drop_tag = 359, RULE_drop_task = 360, 
		RULE_drop_user = 361, RULE_drop_view = 362, RULE_drop_warehouse = 363, 
		RULE_cascade_restrict = 364, RULE_arg_types = 365, RULE_undrop_command = 366, 
		RULE_undrop_database = 367, RULE_undrop_schema = 368, RULE_undrop_table = 369, 
		RULE_undrop_tag = 370, RULE_use_command = 371, RULE_use_database = 372, 
		RULE_use_role = 373, RULE_use_schema = 374, RULE_use_secondary_roles = 375, 
		RULE_use_warehouse = 376, RULE_comment_clause = 377, RULE_inline_comment_clause = 378, 
		RULE_if_suspended = 379, RULE_if_exists = 380, RULE_if_not_exists = 381, 
		RULE_or_replace = 382, RULE_or_alter = 383, RULE_describe = 384, RULE_describe_command = 385, 
		RULE_describe_alert = 386, RULE_describe_database = 387, RULE_describe_dynamic_table = 388, 
		RULE_describe_event_table = 389, RULE_describe_external_table = 390, RULE_describe_file_format = 391, 
		RULE_describe_function = 392, RULE_describe_integration = 393, RULE_describe_masking_policy = 394, 
		RULE_describe_materialized_view = 395, RULE_describe_network_policy = 396, 
		RULE_describe_pipe = 397, RULE_describe_procedure = 398, RULE_describe_result = 399, 
		RULE_describe_row_access_policy = 400, RULE_describe_schema = 401, RULE_describe_search_optimization = 402, 
		RULE_describe_sequence = 403, RULE_describe_session_policy = 404, RULE_describe_password_policy = 405, 
		RULE_describe_share = 406, RULE_describe_stream = 407, RULE_describe_table = 408, 
		RULE_describe_task = 409, RULE_describe_transaction = 410, RULE_describe_user = 411, 
		RULE_describe_view = 412, RULE_describe_warehouse = 413, RULE_show_command = 414, 
		RULE_show_alerts = 415, RULE_show_channels = 416, RULE_show_columns = 417, 
		RULE_show_connections = 418, RULE_starts_with = 419, RULE_limit_rows = 420, 
		RULE_show_databases = 421, RULE_show_databases_in_failover_group = 422, 
		RULE_show_databases_in_replication_group = 423, RULE_show_delegated_authorizations = 424, 
		RULE_show_dynamic_tables = 425, RULE_show_event_tables = 426, RULE_show_external_functions = 427, 
		RULE_show_external_tables = 428, RULE_show_failover_groups = 429, RULE_show_file_formats = 430, 
		RULE_show_functions = 431, RULE_show_global_accounts = 432, RULE_show_grants = 433, 
		RULE_show_grants_opts = 434, RULE_show_integrations = 435, RULE_show_locks = 436, 
		RULE_show_managed_accounts = 437, RULE_show_masking_policies = 438, RULE_in_obj = 439, 
		RULE_in_obj_2 = 440, RULE_show_materialized_views = 441, RULE_show_network_policies = 442, 
		RULE_show_objects = 443, RULE_show_organization_accounts = 444, RULE_in_for = 445, 
		RULE_show_parameters = 446, RULE_show_pipes = 447, RULE_show_primary_keys = 448, 
		RULE_show_procedures = 449, RULE_show_regions = 450, RULE_show_replication_accounts = 451, 
		RULE_show_replication_databases = 452, RULE_show_replication_groups = 453, 
		RULE_show_resource_monitors = 454, RULE_show_roles = 455, RULE_show_row_access_policies = 456, 
		RULE_show_schemas = 457, RULE_show_sequences = 458, RULE_show_session_policies = 459, 
		RULE_show_password_policies = 460, RULE_show_shares = 461, RULE_show_shares_in_failover_group = 462, 
		RULE_show_shares_in_replication_group = 463, RULE_show_streams = 464, 
		RULE_show_tables = 465, RULE_show_tags = 466, RULE_show_tasks = 467, RULE_show_transactions = 468, 
		RULE_show_user_functions = 469, RULE_show_users = 470, RULE_show_variables = 471, 
		RULE_show_views = 472, RULE_show_warehouses = 473, RULE_like_pattern = 474, 
		RULE_account_identifier = 475, RULE_schema_name = 476, RULE_object_type = 477, 
		RULE_object_type_list = 478, RULE_tag_value = 479, RULE_arg_data_type = 480, 
		RULE_arg_name = 481, RULE_param_name = 482, RULE_region_group_id = 483, 
		RULE_snowflake_region_id = 484, RULE_string = 485, RULE_string_list = 486, 
		RULE_id_fn = 487, RULE_id_ = 488, RULE_keyword = 489, RULE_non_reserved_words = 490, 
		RULE_builtin_function = 491, RULE_unary_or_binary_builtin_function = 492, 
		RULE_binary_builtin_function = 493, RULE_binary_or_ternary_builtin_function = 494, 
		RULE_ternary_builtin_function = 495, RULE_list_function = 496, RULE_pattern = 497, 
		RULE_column_name = 498, RULE_column_list = 499, RULE_column_list_with_comment = 500, 
		RULE_object_name = 501, RULE_id_var = 502, RULE_object_name_or_identifier = 503, 
		RULE_num = 504, RULE_expr_list = 505, RULE_expr_list_sorted = 506, RULE_expr = 507, 
		RULE_iff_expr = 508, RULE_trim_expression = 509, RULE_try_cast_expr = 510, 
		RULE_cast_expr = 511, RULE_json_literal = 512, RULE_kv_pair = 513, RULE_value = 514, 
		RULE_arr_literal = 515, RULE_data_type_size = 516, RULE_data_type = 517, 
		RULE_primitive_expression = 518, RULE_order_by_expr = 519, RULE_asc_desc = 520, 
		RULE_over_clause = 521, RULE_function_call = 522, RULE_param_assoc_list = 523, 
		RULE_param_assoc = 524, RULE_ignore_or_repect_nulls = 525, RULE_ranking_windowed_function = 526, 
		RULE_aggregate_function = 527, RULE_literal = 528, RULE_sign = 529, RULE_full_column_name = 530, 
		RULE_bracket_expression = 531, RULE_case_expression = 532, RULE_switch_search_condition_section = 533, 
		RULE_switch_section = 534, RULE_query_statement = 535, RULE_with_expression = 536, 
		RULE_common_table_expression = 537, RULE_select_statement = 538, RULE_set_operators = 539, 
		RULE_select_statement_in_parentheses = 540, RULE_select_optional_clauses = 541, 
		RULE_select_clause = 542, RULE_select_top_clause = 543, RULE_select_list_no_top = 544, 
		RULE_select_list_top = 545, RULE_select_list = 546, RULE_select_list_elem = 547, 
		RULE_column_elem_star = 548, RULE_column_elem = 549, RULE_object_name_or_alias = 550, 
		RULE_exclude_clause = 551, RULE_as_alias = 552, RULE_expression_elem = 553, 
		RULE_column_position = 554, RULE_all_distinct = 555, RULE_top_clause = 556, 
		RULE_into_clause = 557, RULE_var_list = 558, RULE_var = 559, RULE_from_clause = 560, 
		RULE_table_sources = 561, RULE_table_source = 562, RULE_table_source_item_joined = 563, 
		RULE_object_ref = 564, RULE_flatten_table_option = 565, RULE_flatten_table = 566, 
		RULE_splited_table = 567, RULE_prior_list = 568, RULE_prior_item = 569, 
		RULE_outer_join = 570, RULE_join_type = 571, RULE_join_clause = 572, RULE_at_before = 573, 
		RULE_end = 574, RULE_changes = 575, RULE_default_append_only = 576, RULE_partition_by = 577, 
		RULE_alias = 578, RULE_expr_alias_list = 579, RULE_measures = 580, RULE_match_opts = 581, 
		RULE_row_match = 582, RULE_first_last = 583, RULE_symbol = 584, RULE_after_match = 585, 
		RULE_symbol_list = 586, RULE_define = 587, RULE_match_recognize = 588, 
		RULE_pivot_unpivot = 589, RULE_column_alias_list_in_brackets = 590, RULE_expr_list_in_parentheses = 591, 
		RULE_values_table = 592, RULE_values_table_body = 593, RULE_sample_method = 594, 
		RULE_repeatable_seed = 595, RULE_sample_opts = 596, RULE_sample = 597, 
		RULE_search_condition = 598, RULE_comparison_operator = 599, RULE_null_not_null = 600, 
		RULE_subquery = 601, RULE_predicate = 602, RULE_where_clause = 603, RULE_group_by_elem = 604, 
		RULE_group_by_list = 605, RULE_group_by_clause = 606, RULE_having_clause = 607, 
		RULE_qualify_clause = 608, RULE_order_item = 609, RULE_order_by_clause = 610, 
		RULE_row_rows = 611, RULE_first_next = 612, RULE_limit_clause = 613, RULE_round_mode = 614, 
		RULE_round_expr = 615;
	private static String[] makeRuleNames() {
		return new String[] {
			"snowflake_file", "batch", "sql_command", "ddl_command", "dml_command", 
			"insert_statement", "insert_multi_table_statement", "into_clause2", "values_list", 
			"value_item", "merge_statement", "merge_matches", "merge_cond", "merge_update_delete", 
			"merge_insert", "update_statement", "table_or_query", "delete_statement", 
			"values_builder", "other_command", "begin_txn", "copy_into_table", "external_location", 
			"files", "file_format", "format_name", "format_type", "stage_file_format", 
			"copy_into_location", "comment", "function_signature", "commit", "execute_immediate", 
			"execute_task", "explain", "parallel", "get_dml", "grant_ownership", 
			"grant_to_role", "global_privileges", "global_privilege", "account_object_privileges", 
			"account_object_privilege", "schema_privileges", "schema_privilege", 
			"schema_object_privileges", "schema_object_privilege", "grant_to_share", 
			"object_privilege", "grant_role", "role_name", "system_defined_role", 
			"list", "user_stage", "table_stage", "named_stage", "stage_path", "put", 
			"remove", "revoke_from_role", "revoke_from_share", "revoke_role", "rollback", 
			"set", "truncate_materialized_view", "truncate_table", "unset", "alter_command", 
			"account_params", "object_params", "default_ddl_collation", "object_properties", 
			"session_params", "alter_account", "enabled_true_false", "alter_alert", 
			"resume_suspend", "alert_set_clause", "alert_unset_clause", "alter_api_integration", 
			"api_integration_property", "alter_connection", "alter_database", "database_property", 
			"account_id_list", "alter_dynamic_table", "alter_external_table", "ignore_edition_check", 
			"replication_schedule", "db_name_list", "share_name_list", "full_acct_list", 
			"alter_failover_group", "alter_file_format", "alter_function", "alter_function_signature", 
			"data_type_list", "alter_masking_policy", "alter_materialized_view", 
			"alter_network_policy", "alter_notification_integration", "alter_pipe", 
			"alter_procedure", "alter_replication_group", "credit_quota", "frequency", 
			"notify_users", "triggerDefinition", "alter_resource_monitor", "alter_role", 
			"alter_row_access_policy", "alter_schema", "schema_property", "alter_sequence", 
			"alter_security_integration_external_oauth", "security_integration_external_oauth_property", 
			"alter_security_integration_snowflake_oauth", "security_integration_snowflake_oauth_property", 
			"alter_security_integration_saml2", "alter_security_integration_scim", 
			"security_integration_scim_property", "alter_session", "alter_session_policy", 
			"alter_password_policy", "alter_share", "alter_storage_integration", 
			"alter_stream", "alter_table", "rls_operations", "clustering_action", 
			"table_column_action", "alter_column_clause", "inline_constraint", "enforced_not_enforced", 
			"deferrable_not_deferrable", "initially_deferred_or_immediate", "common_constraint_properties", 
			"on_update", "on_delete", "foreign_key_match", "on_action", "constraint_properties", 
			"ext_table_column_action", "constraint_action", "search_optimization_action", 
			"search_method_with_target", "alter_table_alter_column", "alter_column_decl_list", 
			"alter_column_decl", "alter_column_opts", "column_set_tags", "column_unset_tags", 
			"alter_tag", "alter_task", "alter_user", "alter_view", "alter_modify", 
			"alter_warehouse", "alter_connection_opts", "alter_user_opts", "alter_tag_opts", 
			"alter_network_policy_opts", "alter_warehouse_opts", "alter_account_opts", 
			"set_tags", "tag_decl_list", "unset_tags", "create_command", "create_account", 
			"create_alert", "alert_condition", "alert_action", "create_api_integration", 
			"create_object_clone", "create_connection", "create_database", "clone_at_before", 
			"at_before1", "header_decl", "compression_type", "compression", "create_dynamic_table", 
			"dynamic_table_params", "dynamic_table_settable_params", "dynamic_table_unsettable_params", 
			"data_retention_params", "set_data_retention_params", "create_event_table", 
			"create_external_function", "create_external_table", "external_table_column_decl", 
			"external_table_column_decl_list", "full_acct", "integration_type_name", 
			"create_failover_group", "type_fileformat", "create_file_format", "arg_decl", 
			"arg_default_value_clause", "col_decl", "virtual_column_decl", "function_definition", 
			"create_function", "create_managed_account", "create_masking_policy", 
			"tag_decl", "column_list_in_parentheses", "create_materialized_view", 
			"create_network_policy", "cloud_provider_params_auto", "cloud_provider_params_push", 
			"create_notification_integration", "create_pipe", "caller_owner", "executa_as", 
			"procedure_definition", "not_null", "create_procedure", "create_replication_group", 
			"create_resource_monitor", "create_role", "create_row_access_policy", 
			"create_schema", "create_security_integration_external_oauth", "implicit_none", 
			"create_security_integration_snowflake_oauth", "create_security_integration_saml2", 
			"create_security_integration_scim", "network_policy", "partner_application", 
			"start_with", "increment_by", "create_sequence", "create_session_policy", 
			"session_policy_params", "session_policy_param_name", "create_password_policy", 
			"password_policy_params", "password_policy_param_name", "create_share", 
			"character", "format_type_options", "copy_options", "stage_encryption_opts_internal", 
			"stage_type", "stage_master_key", "stage_kms_key", "stage_encryption_opts_aws", 
			"aws_token", "aws_key_id", "aws_secret_key", "aws_role", "azure_encryption_value", 
			"stage_encryption_opts_az", "storage_integration_eq_id", "az_credential_or_storage_integration", 
			"gcp_encryption_value", "stage_encryption_opts_gcp", "aws_credential_or_storage_integration", 
			"external_stage_params", "true_false", "enable", "refresh_on_create", 
			"auto_refresh", "notification_integration", "directory_table_internal_params", 
			"directory_table_external_params", "create_stage", "alter_stage", "drop_stage", 
			"describe_stage", "show_stages", "cloud_provider_params", "cloud_provider_params2", 
			"cloud_provider_params3", "create_storage_integration", "copy_grants", 
			"append_only", "insert_only", "show_initial_rows", "stream_time", "create_stream", 
			"temporary", "table_type", "with_tags", "with_row_access_policy", "cluster_by", 
			"change_tracking", "with_masking_policy", "collate", "order_noorder", 
			"default_value", "foreign_key", "primary_key", "out_of_line_constraint", 
			"full_col_decl", "materialized_col_decl", "materialized_col_decl_list", 
			"column_decl_item", "column_decl_item_list", "create_table", "column_decl_item_list_paren", 
			"create_table_clause", "create_table_as_select", "create_table_like", 
			"create_tag", "tag_allowed_values", "session_parameter", "session_parameter_list", 
			"session_params_list", "create_task", "task_parameters", "task_compute", 
			"task_schedule", "task_timeout", "task_suspend_after_failure_number", 
			"task_error_integration", "task_overlap", "sql", "call", "create_user", 
			"view_col", "create_view", "create_warehouse", "wh_common_size", "wh_extra_size", 
			"wh_properties", "wh_params", "trigger_definition", "object_type_name", 
			"object_type_plural", "drop_command", "drop_object", "drop_alert", "drop_connection", 
			"drop_database", "drop_dynamic_table", "drop_external_table", "drop_failover_group", 
			"drop_file_format", "drop_function", "drop_integration", "drop_managed_account", 
			"drop_masking_policy", "drop_materialized_view", "drop_network_policy", 
			"drop_pipe", "drop_procedure", "drop_replication_group", "drop_resource_monitor", 
			"drop_role", "drop_row_access_policy", "drop_schema", "drop_sequence", 
			"drop_session_policy", "drop_password_policy", "drop_share", "drop_stream", 
			"drop_table", "drop_tag", "drop_task", "drop_user", "drop_view", "drop_warehouse", 
			"cascade_restrict", "arg_types", "undrop_command", "undrop_database", 
			"undrop_schema", "undrop_table", "undrop_tag", "use_command", "use_database", 
			"use_role", "use_schema", "use_secondary_roles", "use_warehouse", "comment_clause", 
			"inline_comment_clause", "if_suspended", "if_exists", "if_not_exists", 
			"or_replace", "or_alter", "describe", "describe_command", "describe_alert", 
			"describe_database", "describe_dynamic_table", "describe_event_table", 
			"describe_external_table", "describe_file_format", "describe_function", 
			"describe_integration", "describe_masking_policy", "describe_materialized_view", 
			"describe_network_policy", "describe_pipe", "describe_procedure", "describe_result", 
			"describe_row_access_policy", "describe_schema", "describe_search_optimization", 
			"describe_sequence", "describe_session_policy", "describe_password_policy", 
			"describe_share", "describe_stream", "describe_table", "describe_task", 
			"describe_transaction", "describe_user", "describe_view", "describe_warehouse", 
			"show_command", "show_alerts", "show_channels", "show_columns", "show_connections", 
			"starts_with", "limit_rows", "show_databases", "show_databases_in_failover_group", 
			"show_databases_in_replication_group", "show_delegated_authorizations", 
			"show_dynamic_tables", "show_event_tables", "show_external_functions", 
			"show_external_tables", "show_failover_groups", "show_file_formats", 
			"show_functions", "show_global_accounts", "show_grants", "show_grants_opts", 
			"show_integrations", "show_locks", "show_managed_accounts", "show_masking_policies", 
			"in_obj", "in_obj_2", "show_materialized_views", "show_network_policies", 
			"show_objects", "show_organization_accounts", "in_for", "show_parameters", 
			"show_pipes", "show_primary_keys", "show_procedures", "show_regions", 
			"show_replication_accounts", "show_replication_databases", "show_replication_groups", 
			"show_resource_monitors", "show_roles", "show_row_access_policies", "show_schemas", 
			"show_sequences", "show_session_policies", "show_password_policies", 
			"show_shares", "show_shares_in_failover_group", "show_shares_in_replication_group", 
			"show_streams", "show_tables", "show_tags", "show_tasks", "show_transactions", 
			"show_user_functions", "show_users", "show_variables", "show_views", 
			"show_warehouses", "like_pattern", "account_identifier", "schema_name", 
			"object_type", "object_type_list", "tag_value", "arg_data_type", "arg_name", 
			"param_name", "region_group_id", "snowflake_region_id", "string", "string_list", 
			"id_fn", "id_", "keyword", "non_reserved_words", "builtin_function", 
			"unary_or_binary_builtin_function", "binary_builtin_function", "binary_or_ternary_builtin_function", 
			"ternary_builtin_function", "list_function", "pattern", "column_name", 
			"column_list", "column_list_with_comment", "object_name", "id_var", "object_name_or_identifier", 
			"num", "expr_list", "expr_list_sorted", "expr", "iff_expr", "trim_expression", 
			"try_cast_expr", "cast_expr", "json_literal", "kv_pair", "value", "arr_literal", 
			"data_type_size", "data_type", "primitive_expression", "order_by_expr", 
			"asc_desc", "over_clause", "function_call", "param_assoc_list", "param_assoc", 
			"ignore_or_repect_nulls", "ranking_windowed_function", "aggregate_function", 
			"literal", "sign", "full_column_name", "bracket_expression", "case_expression", 
			"switch_search_condition_section", "switch_section", "query_statement", 
			"with_expression", "common_table_expression", "select_statement", "set_operators", 
			"select_statement_in_parentheses", "select_optional_clauses", "select_clause", 
			"select_top_clause", "select_list_no_top", "select_list_top", "select_list", 
			"select_list_elem", "column_elem_star", "column_elem", "object_name_or_alias", 
			"exclude_clause", "as_alias", "expression_elem", "column_position", "all_distinct", 
			"top_clause", "into_clause", "var_list", "var", "from_clause", "table_sources", 
			"table_source", "table_source_item_joined", "object_ref", "flatten_table_option", 
			"flatten_table", "splited_table", "prior_list", "prior_item", "outer_join", 
			"join_type", "join_clause", "at_before", "end", "changes", "default_append_only", 
			"partition_by", "alias", "expr_alias_list", "measures", "match_opts", 
			"row_match", "first_last", "symbol", "after_match", "symbol_list", "define", 
			"match_recognize", "pivot_unpivot", "column_alias_list_in_brackets", 
			"expr_list_in_parentheses", "values_table", "values_table_body", "sample_method", 
			"repeatable_seed", "sample_opts", "sample", "search_condition", "comparison_operator", 
			"null_not_null", "subquery", "predicate", "where_clause", "group_by_elem", 
			"group_by_list", "group_by_clause", "having_clause", "qualify_clause", 
			"order_item", "order_by_clause", "row_rows", "first_next", "limit_clause", 
			"round_mode", "round_expr"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "''AAD_PROVISIONER''", "'ABORT'", "'ABORT_DETACHED_QUERY'", "'ABORT_STATEMENT'", 
			"'ACCESS'", "'ACCOUNT'", "'ACCOUNTADMIN'", "'ACCOUNTS'", "'ACTION'", 
			"'ADD'", "'ADMIN_NAME'", "'ADMIN_PASSWORD'", "'AES'", "'AFTER'", "'ALERT'", 
			"'ALERTS'", "'ALL'", "'ALLOWED_ACCOUNTS'", "'ALLOWED_DATABASES'", "'ALLOWED_INTEGRATION_TYPES'", 
			"'ALLOWED_IP_LIST'", "'ALLOWED_SHARES'", "'ALLOWED_VALUES'", "'ALLOW_CLIENT_MFA_CACHING'", 
			"'ALLOW_DUPLICATE'", "'ALLOW_ID_TOKEN'", "'ALLOW_OVERLAPPING_EXECUTION'", 
			"'ALTER'", "'AND'", "'ANY'", "'ANY_VALUE'", "'API'", "'API_ALLOWED_PREFIXES'", 
			"'API_AWS_ROLE_ARN'", "'API_BLOCKED_PREFIXES'", "'API_INTEGRATION'", 
			"'API_KEY'", "'API_PROVIDER'", "'APPEND'", "'APPEND_ONLY'", "'APPLY'", 
			"'ARRAY_AGG'", "'AS'", "'ASC'", "'ATTACH'", "'AT'", "'AUTHORIZATION'", 
			"'AUTHORIZATIONS'", "'AUTO'", "''AUTO''", "'AUTOCOMMIT'", "'AUTOCOMMIT_API_SUPPORTED'", 
			"'AUTOINCREMENT'", "'AUTO_COMPRESS'", "'AUTO_DETECT'", "'AUTO_INGEST'", 
			"'AUTO_REFRESH'", "'AUTO_RESUME'", "'AUTO_SUSPEND'", "'AVG'", "'AVRO'", 
			"''AVRO''", "'AWS_KEY_ID'", "'AWS_ROLE'", "'AWS_SECRET_KEY'", "'AWS_SNS'", 
			"'AWS_SNS_ROLE_ARN'", "'AWS_SNS_TOPIC'", "'AWS_SNS_TOPIC_ARN'", "'AWS_TOKEN'", 
			"'AZURE'", "'AZURE_AD_APPLICATION_ID'", "''AZURE_CSE''", "'AZURE_EVENT_GRID'", 
			"'AZURE_EVENT_GRID_TOPIC_ENDPOINT'", "''AZURE''", "'AZURE_SAS_TOKEN'", 
			"'AZURE_STORAGE_QUEUE_PRIMARY_URI'", "'AZURE_TENANT_ID'", "'BASE64'", 
			"'BEFORE'", "'BEGIN'", "'BERNOULLI'", "'BETWEEN'", "'BINARY_AS_TEXT'", 
			"'BINARY_FORMAT'", "'BINARY_INPUT_FORMAT'", "'BINARY_OUTPUT_FORMAT'", 
			"'BLOCK'", "'BLOCKED_IP_LIST'", "'BLOCKED_ROLES_LIST'", "'BODY'", "''BOTH''", 
			"'BROTLI'", "'BUSINESS_CRITICAL'", "'BY'", "'BZ2'", "'CALL'", "'CALLED'", 
			"'CALLER'", "'CASCADE'", "'CASE'", "'CASE_INSENSITIVE'", "'CASE_SENSITIVE'", 
			"'CAST'", "'CEIL'", "'CHANGES'", "'CHANGE_TRACKING'", "'CHANNELS'", "'CHAR'", 
			"'CHARACTER'", "'CHARINDEX'", "'CHECK'", "'CHECKSUM'", "'CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS'", 
			"'CLIENT_ENCRYPTION_KEY_SIZE'", "'CLIENT_MEMORY_LIMIT'", "'CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX'", 
			"'CLIENT_METADATA_USE_SESSION_DATABASE'", "'CLIENT_PREFETCH_THREADS'", 
			"'CLIENT_RESULT_CHUNK_SIZE'", "'CLIENT_RESULT_COLUMN_CASE_INSENSITIVE'", 
			"'CLIENT_SESSION_KEEP_ALIVE'", "'CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY'", 
			"'CLIENT_TIMESTAMP_TYPE_MAPPING'", "'CLONE'", "'CLUSTER'", "'CLUSTERING'", 
			"'COALESCE'", "'COLLATE'", "'COLLECTION'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", 
			"'COMMIT'", "'COMPRESSION'", "'CONCAT'", "'CONCAT_WS'", "'CONDITION'", 
			"'CONFIGURATION'", "'CONNECT'", "'CONNECTION'", "'CONNECTIONS'", "'CONSTRAINT'", 
			"'CONTAINS'", "'CONTEXT_HEADERS'", "'CONTINUE'", "'COPY'", "'COPY_OPTIONS'", 
			"'COUNT'", "'CREATE'", "'CREDENTIALS'", "'CREDIT_QUOTA'", "'CROSS'", 
			"'CSV'", "''CSV''", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
			"'CURRENT_TIMESTAMP'", "'CUSTOM'", "'DAILY'", "'DATA'", "'DATABASE'", 
			"'DATABASES'", "'DATA_RETENTION_TIME_IN_DAYS'", "'DATEADD'", "'DATEDIFF'", 
			"'DATE_FORMAT'", "'DATE_INPUT_FORMAT'", "'DATE_OUTPUT_FORMAT'", "'DATE_PART'", 
			"'DAYS'", "'DAYS_TO_EXPIRY'", "'DEFAULT'", "'DEFAULT_DDL_COLLATION'", 
			"'DEFAULT_NAMESPACE'", "'DEFAULT_ROLE'", "'DEFAULT_WAREHOUSE'", "'DEFERRABLE'", 
			"'DEFERRED'", "'DEFINE'", "'DEFINITION'", "'DEFLATE'", "'DELEGATED'", 
			"'DELETE'", "'DELTA'", "'DENSE_RANK'", "'DESC'", "'DESCRIBE'", "'DIRECTION'", 
			"'DIRECTORY'", "'DISABLE'", "'DISABLED'", "'DISABLE_AUTO_CONVERT'", "'DISABLE_SNOWFLAKE_DATA'", 
			"'DISPLAY_NAME'", "'DISTINCT'", "'DO'", "'DOWNSTREAM'", "'DROP'", "'DYNAMIC'", 
			"'ECONOMY'", "'EDITION'", "'ELSE'", "'EMAIL'", "'EMPTY'", "'EMPTY_FIELD_AS_NULL'", 
			"'ENABLE'", "'ENABLED'", "'ENABLE_FOR_PRIVILEGE'", "'ENABLE_INTERNAL_STAGES_PRIVATELINK'", 
			"'ENABLE_OCTAL'", "'ENABLE_QUERY_ACCELERATION'", "'ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION'", 
			"'ENCODING'", "'ENCRYPTION'", "'END'", "'END_TIMESTAMP'", "'ENFORCED'", 
			"'ENFORCE_LENGTH'", "'ENFORCE_SESSION_POLICY'", "'ENTERPRISE'", "'EQUAL_NULL'", 
			"'EQUALITY'", "'ERROR_INTEGRATION'", "'ERROR_ON_COLUMN_COUNT_MISMATCH'", 
			"'ERROR_ON_NONDETERMINISTIC_MERGE'", "'ERROR_ON_NONDETERMINISTIC_UPDATE'", 
			"'ESCAPE'", "'ESCAPE_UNENCLOSED_FIELD'", "'EVENT'", "'EXCEPT'", "'EXCLUDE'", 
			"'EXCHANGE'", null, "'EXECUTION'", "'EXISTS'", "'EXPIRY_DATE'", "'EXPLAIN'", 
			"'EXPR'", "'EXTERNAL'", "'EXTERNAL_OAUTH'", "'EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST'", 
			"'EXTERNAL_OAUTH_ALLOWED_ROLES_LIST'", "'EXTERNAL_OAUTH_ANY_ROLE_MODE'", 
			"'EXTERNAL_OAUTH_AUDIENCE_LIST'", "'EXTERNAL_OAUTH_BLOCKED_ROLES_LIST'", 
			"'EXTERNAL_OAUTH_ISSUER'", "'EXTERNAL_OAUTH_JWS_KEYS_URL'", "'EXTERNAL_OAUTH_RSA_PUBLIC_KEY'", 
			"'EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2'", "'EXTERNAL_OAUTH_SCOPE_DELIMITER'", 
			"'EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE'", "'EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM'", 
			"'EXTERNAL_OAUTH_TYPE'", "'EXTERNAL_STAGE'", "'FAILOVER'", "'FALSE'", 
			"'FETCH'", "'FIELD_DELIMITER'", "'FIELD_OPTIONALLY_ENCLOSED_BY'", "'FILE'", 
			"'FILES'", "'FILE_EXTENSION'", "'FILE_FORMAT'", "'FIRST'", "'FIRST_NAME'", 
			"'FIRST_VALUE'", "'FLATTEN'", "'FOR'", "'FORCE'", "'FOREIGN'", "'FORMAT'", 
			"'FORMATS'", "'FORMAT_NAME'", "'FREQUENCY'", "'FROM'", "'FULL'", "'FUNCTION'", 
			"'FUNCTIONS'", "'FUTURE'", "'GCP_PUBSUB'", "'GCP_PUBSUB_SUBSCRIPTION_NAME'", 
			"'GCP_PUBSUB_TOPIC_NAME'", "'GCS'", "''GCS_SSE_KMS''", "''GENERIC''", 
			"''GENERIC_SCIM_PROVISIONER''", "'GEO'", "'GEOGRAPHY_OUTPUT_FORMAT'", 
			"'GEOMETRY_OUTPUT_FORMAT'", "'GET'", "'GETDATE'", "'GLOBAL'", "'GOOGLE_AUDIENCE'", 
			"'GRANT'", "'GRANTS'", "'GROUP'", "'GROUPING'", "'GROUPS'", "'GZIP'", 
			"''HALF_AWAY_FROM_ZERO''", "''HALF_TO_EVEN''", "'HANDLER'", "'HASH'", 
			"'HAVING'", "'HEADER'", "'HEADERS'", "'HEX'", "'HIGH'", "'HISTORY'", 
			"'HOURS'", "'IDENTIFIER'", "'IDENTITY'", "'IF'", "'IFF'", "'IFNULL'", 
			"'IGNORE'", "'IGNORE_UTF8_ERRORS'", "'ILIKE'", "'IMMEDIATE'", "'IMMEDIATELY'", 
			"'IMMUTABLE'", "'IMPLICIT'", "'IMPORT'", "'IMPORTS'", "'IMPORTED'", "'IN'", 
			"'INCREMENT'", "'INCREMENTAL'", "'INDEX'", "'INFORMATION'", "'INITIALIZE'", 
			"'INITIALLY'", "'INITIALLY_SUSPENDED'", "'INITIAL_REPLICATION_SIZE_LIMIT_IN_TB'", 
			"'INNER'", "'INPUT'", "'INSERT'", "'INSERT_ONLY'", "'INT'", "'INTEGRATION'", 
			"'INTEGRATIONS'", "'INTERSECT'", "'INTERVAL'", "'INTO'", "'IS'", "'JAVA'", 
			"'JAVASCRIPT'", "'JDBC_TREAT_DECIMAL_AS_INT'", "'JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC'", 
			"'JDBC_USE_SESSION_TIMEZONE'", "'JOIN'", "'JSON'", "''JSON''", "'JSON_INDENT'", 
			"'JS_TREAT_INTEGER_AS_BIGINT'", "'KEY'", "'KEYS'", "'KMS_KEY_ID'", "'LAG'", 
			"'LANGUAGE'", "'LARGE'", "'LAST'", "'LAST_NAME'", "'LAST_QUERY_ID'", 
			"'LAST_VALUE'", "'LATERAL'", "'LEAD'", "'LEFT'", "'LEN'", "'LENGTH'", 
			"'LIKE'", "'LIMIT'", "'LINEAR'", "'LIST'", "'LISTING'", "'LOCAL'", "'LOCATION'", 
			"'LOCKS'", "'LOCK_TIMEOUT'", "'LOGIN_NAME'", "'LOOKER'", "'LOW'", "'LOWER'", 
			"'LTRIM'", "'LZO'", "'MANAGE'", "'MANAGED'", "'MASKING'", "'MASTER_KEY'", 
			"'MATCH'", "'MATCHED'", "'MATCHES'", "'MATCH_BY_COLUMN_NAME'", "'MATCH_RECOGNIZE'", 
			"'MATERIALIZED'", "'MAX_BATCH_ROWS'", "'MAX_CLUSTER_COUNT'", "'MAX_CONCURRENCY_LEVEL'", 
			"'MAX_DATA_EXTENSION_TIME_IN_DAYS'", "'MAX_SIZE'", "'MEASURES'", "'MEDIUM'", 
			"'MEMOIZABLE'", "'MERGE'", "'MIDDLE_NAME'", "'MIN'", "'MINS_TO_BYPASS_MFA'", 
			"'MINS_TO_UNLOCK'", "'MINUS'", "'MIN_CLUSTER_COUNT'", "'MIN_DATA_RETENTION_TIME_IN_DAYS'", 
			"'MODE'", "'MODIFIED_AFTER'", "'MODIFY'", "'MONITOR'", "'MONITORS'", 
			"'MONTHLY'", "'MOVE'", "'MULTI_STATEMENT_COUNT'", "'MUST_CHANGE_PASSWORD'", 
			"'NAME'", "'NATURAL'", "'NETWORK'", "'NETWORK_POLICY'", "'NEVER'", "'NEXT'", 
			"'NEXTVAL'", "'NO'", "'NONE'", "''NONE''", "'NOORDER'", "'NORELY'", "'NOT'", 
			"'NOTIFICATION'", "'NOTIFICATION_INTEGRATION'", "'NOTIFICATION_PROVIDER'", 
			"'NOTIFY'", "'NOTIFY_USERS'", "'NOVALIDATE'", "'NTILE'", "'NULLIF'", 
			"'NULLS'", "'NULL'", "'NULL_IF'", "'NUMBER'", "'NVL'", "'NVL2'", "'OAUTH'", 
			"'OAUTH_ALLOW_NON_TLS_REDIRECT_URI'", "'OAUTH_CLIENT'", "'OAUTH_CLIENT_RSA_PUBLIC_KEY'", 
			"'OAUTH_CLIENT_RSA_PUBLIC_KEY_2'", "'OAUTH_ENFORCE_PKCE'", "'OAUTH_ISSUE_REFRESH_TOKENS'", 
			"'OAUTH_REDIRECT_URI'", "'OAUTH_REFRESH_TOKEN_VALIDITY'", "'OAUTH_USE_SECONDARY_ROLES'", 
			"'OBJECT'", "''OBJECT''", "'OBJECTS'", "'OBJECT_TYPES'", "'OF'", "'OFFSET'", 
			"'OKTA'", "''OKTA_PROVISIONER''", "''OKTA''", "'OLD'", "'OMIT'", "'ON'", 
			"'ONE'", "'ONLY'", "'ON_CREATE'", "'ON_ERROR'", "'ON_SCHEDULE'", "'OPERATE'", 
			"'OPTIMIZATION'", "'OPTION'", "'OR'", "'ORC'", "''ORC''", "'ORDER'", 
			"'ORGADMIN'", "'ORGANIZATION'", "'OUTBOUND'", "'OUTER'", "'OVER'", "'OVERRIDE'", 
			"'OVERWRITE'", "'OWNER'", "'OWNERSHIP'", "'PACKAGES'", "'PARALLEL'", 
			"'PARAMETERS'", "'PARQUET'", "''PARQUET''", "'PARTIAL'", "'PARTITION'", 
			"'PARTITION_TYPE'", "'PASSWORD'", "'PASSWORD_HISTORY'", "'PASSWORD_LOCKOUT_TIME_MINS'", 
			"'PASSWORD_MAX_AGE_DAYS'", "'PASSWORD_MAX_LENGTH'", "'PASSWORD_MAX_RETRIES'", 
			"'PASSWORD_MIN_AGE_DAYS'", "'PASSWORD_MIN_LENGTH'", "'PASSWORD_MIN_LOWER_CASE_CHARS'", 
			"'PASSWORD_MIN_NUMERIC_CHARS'", "'PASSWORD_MIN_SPECIAL_CHARS'", "'PASSWORD_MIN_UPPER_CASE_CHARS'", 
			"'PAST'", "'PATH'", "'PATTERN'", "'PER'", "'PERCENT'", "'PERIODIC_DATA_REKEYING'", 
			"'PING_FEDERATE'", "'PIPE'", "'PIPES'", "'PIPE_EXECUTION_PAUSED'", "'PIVOT'", 
			"'POLICIES'", "'POLICY'", "'PORT'", "'PREFIX'", "'PRESERVE_SPACE'", "'PREVENT_UNLOAD_TO_INLINE_URL'", 
			"'PREVENT_UNLOAD_TO_INTERNAL_STAGES'", "'PRE_AUTHORIZED_ROLES_LIST'", 
			"'PRIMARY'", "'PRIOR'", "'PRIORITY'", "'PRIVILEGES'", "'PROCEDURE'", 
			"'PROCEDURES'", "'PROCEDURE_NAME'", "'PROPERTY'", "'PROVIDER'", "'PUBLIC'", 
			"'PURGE'", "'PUT'", "'PYTHON'", "'QUALIFY'", "'QUARTER'", "'QUERIES'", 
			"'QUERY'", "'QUERY_ACCELERATION_MAX_SCALE_FACTOR'", "'QUERY_TAG'", "'QUEUE'", 
			"'QUOTED_IDENTIFIERS_IGNORE_CASE'", "'RANK'", "'RAW_DEFLATE'", "'READ'", 
			"'READER'", "'RECLUSTER'", "'RECORD_DELIMITER'", "'RECURSIVE'", "'REFERENCES'", 
			"'REFERENCE_USAGE'", "'REFRESH'", "'REFRESH_MODE'", "'REFRESH_ON_CREATE'", 
			"'REGION'", "'REGIONS'", "'REGION_GROUP'", "'RELY'", "'REMOVE'", "'RENAME'", 
			"'REPEATABLE'", "'REPLACE'", "'REPLACE_INVALID_CHARACTERS'", "'REPLICA'", 
			"'REPLICATION'", "'REPLICATION_SCHEDULE'", "'REQUEST_TRANSLATOR'", "'REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION'", 
			"'REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION'", "'RESET'", "'RESOURCE'", 
			"'RESOURCES'", "'RESOURCE_MONITOR'", "'RESPECT'", "'RESPONSE_TRANSLATOR'", 
			"'RESTRICT'", "'RESTRICTIONS'", "'RESULT'", "'RESUME'", "'RETURNS'", 
			"'RETURN_ALL_ERRORS'", "'RETURN_ERRORS'", "'RETURN_FAILED_ONLY'", null, 
			"'RETURN_ROWS'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'ROLE'", "'ROLES'", 
			"'ROLLBACK'", "'ROLLUP'", "'ROUND'", "'ROUNDING_MODE'", "'ROW'", "'ROWS'", 
			"'ROWS_PER_RESULTSET'", "'ROW_NUMBER'", "'RSA_PUBLIC_KEY'", "'RSA_PUBLIC_KEY_2'", 
			"'RTRIM'", "'RUN_AS_ROLE'", "'RUNTIME_VERSION'", "''S3''", "'SAML2'", 
			"'SAML2_ENABLE_SP_INITIATED'", "'SAML2_FORCE_AUTHN'", "'SAML2_ISSUER'", 
			"'SAML2_POST_LOGOUT_REDIRECT_URL'", "'SAML2_PROVIDER'", "'SAML2_REQUESTED_NAMEID_FORMAT'", 
			"'SAML2_SIGN_REQUEST'", "'SAML2_SNOWFLAKE_ACS_URL'", "'SAML2_SNOWFLAKE_ISSUER_URL'", 
			"'SAML2_SNOWFLAKE_X509_CERT'", "'SAML2_SP_INITIATED_LOGIN_PAGE_LABEL'", 
			"'SAML2_SSO_URL'", "'SAML2_X509_CERT'", "'SAML_IDENTITY_PROVIDER'", "'SAMPLE'", 
			"'SAVE_OLD_URL'", "'SCALE'", "'SCALING_POLICY'", "'SCHEDULE'", "'SCHEMA'", 
			"'SCHEMAS'", "'SCIM'", "'SCIM_CLIENT'", "'SEARCH'", "'SECONDARY'", "'SECURE'", 
			"'SECURITY'", "'SECURITYADMIN'", "'SEED'", "'SELECT'", "'SEQUENCE'", 
			"'SEQUENCES'", "'SESSION'", "'SESSION_IDLE_TIMEOUT_MINS'", "'SESSION_POLICY'", 
			"'SESSION_UI_IDLE_TIMEOUT_MINS'", "'SET'", "'SETS'", "'SHARE'", "'SHARES'", 
			"'SHARE_RESTRICTIONS'", "'SHOW'", "'SHOW_INITIAL_ROWS'", "'SIMPLE'", 
			"'SIMULATED_DATA_SHARING_CONSUMER'", "'SIZE_LIMIT'", "'SKIP'", "'SKIP_BLANK_LINES'", 
			"'SKIP_BYTE_ORDER_MARK'", "'SKIP_FILE'", null, "'SKIP_HEADER'", "'SMALL'", 
			"'SNAPPY'", "'SNAPPY_COMPRESSION'", "'SNOWFLAKE_FULL'", "'SNOWFLAKE_SSE'", 
			"''SNOWPARK-OPTIMIZED''", "'SOME'", "'SOURCE'", "'SOURCE_COMPRESSION'", 
			"'SPLIT'", "'SPLIT_PART'", "'SPLIT_TO_TABLE'", "'SQL'", "'SSO_LOGIN_PAGE'", 
			"'STAGE'", "'STAGES'", "'STAGE_COPY_OPTIONS'", "'STAGE_FILE_FORMAT'", 
			"'STANDARD'", "'START'", "'STARTS'", "'START_DATE'", "'START_TIMESTAMP'", 
			"'STATE'", "'STATEMENT'", "'STATEMENT_QUEUED_TIMEOUT_IN_SECONDS'", "'STATEMENT_TIMEOUT_IN_SECONDS'", 
			"'STATS'", "'STATUS'", "'STORAGE'", "'STORAGE_ALLOWED_LOCATIONS'", "'STORAGE_AWS_OBJECT_ACL'", 
			"'STORAGE_AWS_ROLE_ARN'", "'STORAGE_BLOCKED_LOCATIONS'", "'STORAGE_INTEGRATION'", 
			"'STORAGE_PROVIDER'", "'STREAM'", "'STREAMS'", "'STRICT'", "'STRICT_JSON_OUTPUT'", 
			"'STRIP_NULL_VALUES'", "'STRIP_OUTER_ARRAY'", "'STRIP_OUTER_ELEMENT'", 
			"'SUBSTR'", "'SUBSTRING'", "'SUM'", "'SUSPEND'", "'SUSPENDED'", "'SUSPEND_IMMEDIATE'", 
			"'SUSPEND_TASK_AFTER_NUM_FAILURES'", "'SWAP'", "'SYNC_PASSWORD'", "'SYSADMIN'", 
			"'SYSTEM'", "'TABLE'", "'TABLEAU_DESKTOP'", "'TABLEAU_SERVER'", "'TABLES'", 
			"'TABLESAMPLE'", "'TABLE_FORMAT'", "'TABULAR'", "'TAG'", "'TAGS'", "'TARGET_LAG'", 
			"'TASK'", "'TASKS'", "'TEMP'", "'TEMPORARY'", "'TERSE'", "'THEN'", "'TIME'", 
			"'TIMEADD'", "'TIMEDIFF'", "'TIMESTAMP'", "'TIMESTAMP_DAY_IS_ALWAYS_24H'", 
			"'TIMESTAMP_FORMAT'", "'TIMESTAMP_INPUT_FORMAT'", null, "'TIMESTAMP_LTZ_OUTPUT_FORMAT'", 
			null, "'TIMESTAMP_NTZ_OUTPUT_FORMAT'", "'TIMESTAMP_OUTPUT_FORMAT'", "'TIMESTAMP_TYPE_MAPPING'", 
			null, "'TIMESTAMP_TZ_OUTPUT_FORMAT'", "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", 
			"'TIMEZONE'", "'TIME_FORMAT'", "'TIME_INPUT_FORMAT'", "'TIME_OUTPUT_FORMAT'", 
			"'TO'", "'TO_BOOLEAN'", "'TO_DATE'", "'TO_TIMESTAMP'", "'TOP'", "'TRANSACTION'", 
			"'TRANSACTIONS'", "'TRANSACTION_ABORT_ON_ERROR'", "'TRANSACTION_DEFAULT_ISOLATION_LEVEL'", 
			"'TRANSIENT'", "'TRIGGERS'", "'TRIM'", "'TRIM_SPACE'", "'TRUE'", "'TRUNC'", 
			"'TRUNCATE'", "'TRUNCATECOLUMNS'", "'TRY_CAST'", "'TWO_DIGIT_CENTURY_START'", 
			"'TYPE'", "'UNDROP'", "'UNION'", "'UNIQUE'", "'UNMATCHED'", "'UNPIVOT'", 
			"'UNSET'", "'UNSUPPORTED_DDL_ACTION'", "'UPDATE'", "'UPPER'", "'URL'", 
			"'USAGE'", "'USE'", "'USER'", "'USERADMIN'", "'USERS'", "'USER_SPECIFIED'", 
			"'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE'", "'USER_TASK_TIMEOUT_MS'", 
			"'USE_ANY_ROLE'", "'USE_CACHED_RESULT'", "'USING'", "'UTF8'", "'VALIDATE'", 
			"'VALIDATION_MODE'", "'VALUE'", "'VALUES'", "'VARIABLES'", "'VERSION'", 
			"'VIEW'", "'VIEWS'", "'VISIBILITY'", "'VOLATILE'", "'WAREHOUSE'", "'WAREHOUSES'", 
			"'WAREHOUSE_SIZE'", "'WAREHOUSE_TYPE'", "'WEEKLY'", "'WEEK_OF_YEAR_POLICY'", 
			"'WEEK_START'", "'WHEN'", "'WHERE'", "'WITH'", "'WITHIN'", "'WORK'", 
			"'WRITE'", "'X4LARGE'", "'X5LARGE'", "'X6LARGE'", "'XLARGE'", "'XML'", 
			"''XML''", "'XSMALL'", "'XXLARGE'", "'XXXLARGE'", "'YEARLY'", "'YEAR'", 
			"'ZSTD'", "'ARRAY'", "''ARRAY''", "'BIGINT'", "'BINARY'", "'BOOLEAN'", 
			"'BYTEINT'", "'CHAR VARYING'", "'DATE'", "'DATETIME'", "'DECIMAL'", "'DOUBLE'", 
			"'DOUBLE PRECISION'", "'FLOAT4'", "'FLOAT8'", "'FLOAT'", "'FLOOR'", "'GEOGRAPHY'", 
			"'GEOMETRY'", "'INTEGER'", "'NCHAR'", "'NCHAR VARYING'", "'NUMERIC'", 
			"'NVARCHAR2'", "'NVARCHAR'", "'REAL'", "'SMALLINT'", "'STRING'", "'TEXT'", 
			"'TINYINT'", "'VARBINARY'", "'VARCHAR'", "'VARIANT'", "'LISTAGG'", "'DUMMY'", 
			null, null, null, null, null, "'\"\"'", "'''", null, null, null, null, 
			null, null, null, null, null, null, null, null, null, "'->'", "'=>'", 
			"'!='", "'<>'", "'='", "'>'", "'>='", "'<'", "'<='", "'||'", "'.'", "'@'", 
			"''@''", "'$'", "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "';'", 
			"':'", "'::'", "'*'", "'/'", "'%'", "'+'", "'-'", "'~'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "AAD_PROVISIONER_Q", "ABORT", "ABORT_DETACHED_QUERY", "ABORT_STATEMENT", 
			"ACCESS", "ACCOUNT", "ACCOUNTADMIN", "ACCOUNTS", "ACTION", "ADD", "ADMIN_NAME", 
			"ADMIN_PASSWORD", "AES", "AFTER", "ALERT", "ALERTS", "ALL", "ALLOWED_ACCOUNTS", 
			"ALLOWED_DATABASES", "ALLOWED_INTEGRATION_TYPES", "ALLOWED_IP_LIST", 
			"ALLOWED_SHARES", "ALLOWED_VALUES", "ALLOW_CLIENT_MFA_CACHING", "ALLOW_DUPLICATE", 
			"ALLOW_ID_TOKEN", "ALLOW_OVERLAPPING_EXECUTION", "ALTER", "AND", "ANY", 
			"ANY_VALUE", "API", "API_ALLOWED_PREFIXES", "API_AWS_ROLE_ARN", "API_BLOCKED_PREFIXES", 
			"API_INTEGRATION", "API_KEY", "API_PROVIDER", "APPEND", "APPEND_ONLY", 
			"APPLY", "ARRAY_AGG", "AS", "ASC", "ATTACH", "AT_KEYWORD", "AUTHORIZATION", 
			"AUTHORIZATIONS", "AUTO", "AUTO_Q", "AUTOCOMMIT", "AUTOCOMMIT_API_SUPPORTED", 
			"AUTOINCREMENT", "AUTO_COMPRESS", "AUTO_DETECT", "AUTO_INGEST", "AUTO_REFRESH", 
			"AUTO_RESUME", "AUTO_SUSPEND", "AVG", "AVRO", "AVRO_Q", "AWS_KEY_ID", 
			"AWS_ROLE", "AWS_SECRET_KEY", "AWS_SNS", "AWS_SNS_ROLE_ARN", "AWS_SNS_TOPIC", 
			"AWS_SNS_TOPIC_ARN", "AWS_TOKEN", "AZURE", "AZURE_AD_APPLICATION_ID", 
			"AZURE_CSE_Q", "AZURE_EVENT_GRID", "AZURE_EVENT_GRID_TOPIC_ENDPOINT", 
			"AZURE_Q", "AZURE_SAS_TOKEN", "AZURE_STORAGE_QUEUE_PRIMARY_URI", "AZURE_TENANT_ID", 
			"BASE64", "BEFORE", "BEGIN", "BERNOULLI", "BETWEEN", "BINARY_AS_TEXT", 
			"BINARY_FORMAT", "BINARY_INPUT_FORMAT", "BINARY_OUTPUT_FORMAT", "BLOCK", 
			"BLOCKED_IP_LIST", "BLOCKED_ROLES_LIST", "BODY", "BOTH_Q", "BROTLI", 
			"BUSINESS_CRITICAL", "BY", "BZ2", "CALL", "CALLED", "CALLER", "CASCADE", 
			"CASE", "CASE_INSENSITIVE", "CASE_SENSITIVE", "CAST", "CEIL", "CHANGES", 
			"CHANGE_TRACKING", "CHANNELS", "CHAR", "CHARACTER", "CHARINDEX", "CHECK", 
			"CHECKSUM", "CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS", "CLIENT_ENCRYPTION_KEY_SIZE", 
			"CLIENT_MEMORY_LIMIT", "CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX", 
			"CLIENT_METADATA_USE_SESSION_DATABASE", "CLIENT_PREFETCH_THREADS", "CLIENT_RESULT_CHUNK_SIZE", 
			"CLIENT_RESULT_COLUMN_CASE_INSENSITIVE", "CLIENT_SESSION_KEEP_ALIVE", 
			"CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY", "CLIENT_TIMESTAMP_TYPE_MAPPING", 
			"CLONE", "CLUSTER", "CLUSTERING", "COALESCE", "COLLATE", "COLLECTION", 
			"COLUMN", "COLUMNS", "COMMENT", "COMMIT", "COMPRESSION", "CONCAT", "CONCAT_WS", 
			"CONDITION", "CONFIGURATION", "CONNECT", "CONNECTION", "CONNECTIONS", 
			"CONSTRAINT", "CONTAINS", "CONTEXT_HEADERS", "CONTINUE", "COPY", "COPY_OPTIONS_", 
			"COUNT", "CREATE", "CREDENTIALS", "CREDIT_QUOTA", "CROSS", "CSV", "CSV_Q", 
			"CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"CUSTOM", "DAILY", "DATA", "DATABASE", "DATABASES", "DATA_RETENTION_TIME_IN_DAYS", 
			"DATEADD", "DATEDIFF", "DATE_FORMAT", "DATE_INPUT_FORMAT", "DATE_OUTPUT_FORMAT", 
			"DATE_PART", "DAYS", "DAYS_TO_EXPIRY", "DEFAULT", "DEFAULT_DDL_COLLATION_", 
			"DEFAULT_NAMESPACE", "DEFAULT_ROLE", "DEFAULT_WAREHOUSE", "DEFERRABLE", 
			"DEFERRED", "DEFINE", "DEFINITION", "DEFLATE", "DELEGATED", "DELETE", 
			"DELTA", "DENSE_RANK", "DESC", "DESCRIBE", "DIRECTION", "DIRECTORY", 
			"DISABLE", "DISABLED", "DISABLE_AUTO_CONVERT", "DISABLE_SNOWFLAKE_DATA", 
			"DISPLAY_NAME", "DISTINCT", "DO", "DOWNSTREAM", "DROP", "DYNAMIC", "ECONOMY", 
			"EDITION", "ELSE", "EMAIL", "EMPTY_", "EMPTY_FIELD_AS_NULL", "ENABLE", 
			"ENABLED", "ENABLE_FOR_PRIVILEGE", "ENABLE_INTERNAL_STAGES_PRIVATELINK", 
			"ENABLE_OCTAL", "ENABLE_QUERY_ACCELERATION", "ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION", 
			"ENCODING", "ENCRYPTION", "END", "END_TIMESTAMP", "ENFORCED", "ENFORCE_LENGTH", 
			"ENFORCE_SESSION_POLICY", "ENTERPRISE", "EQUAL_NULL", "EQUALITY", "ERROR_INTEGRATION", 
			"ERROR_ON_COLUMN_COUNT_MISMATCH", "ERROR_ON_NONDETERMINISTIC_MERGE", 
			"ERROR_ON_NONDETERMINISTIC_UPDATE", "ESCAPE", "ESCAPE_UNENCLOSED_FIELD", 
			"EVENT", "EXCEPT", "EXCLUDE", "EXCHANGE", "EXECUTE", "EXECUTION", "EXISTS", 
			"EXPIRY_DATE", "EXPLAIN", "EXPR", "EXTERNAL", "EXTERNAL_OAUTH", "EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST", 
			"EXTERNAL_OAUTH_ALLOWED_ROLES_LIST", "EXTERNAL_OAUTH_ANY_ROLE_MODE", 
			"EXTERNAL_OAUTH_AUDIENCE_LIST", "EXTERNAL_OAUTH_BLOCKED_ROLES_LIST", 
			"EXTERNAL_OAUTH_ISSUER", "EXTERNAL_OAUTH_JWS_KEYS_URL", "EXTERNAL_OAUTH_RSA_PUBLIC_KEY", 
			"EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2", "EXTERNAL_OAUTH_SCOPE_DELIMITER", 
			"EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE", "EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM", 
			"EXTERNAL_OAUTH_TYPE", "EXTERNAL_STAGE", "FAILOVER", "FALSE", "FETCH", 
			"FIELD_DELIMITER", "FIELD_OPTIONALLY_ENCLOSED_BY", "FILE", "FILES", "FILE_EXTENSION", 
			"FILE_FORMAT", "FIRST", "FIRST_NAME", "FIRST_VALUE", "FLATTEN", "FOR", 
			"FORCE", "FOREIGN", "FORMAT", "FORMATS", "FORMAT_NAME", "FREQUENCY", 
			"FROM", "FULL", "FUNCTION", "FUNCTIONS", "FUTURE", "GCP_PUBSUB", "GCP_PUBSUB_SUBSCRIPTION_NAME", 
			"GCP_PUBSUB_TOPIC_NAME", "GCS", "GCS_SSE_KMS_Q", "GENERIC_Q", "GENERIC_SCIM_PROVISIONER_Q", 
			"GEO", "GEOGRAPHY_OUTPUT_FORMAT", "GEOMETRY_OUTPUT_FORMAT", "GET", "GETDATE", 
			"GLOBAL", "GOOGLE_AUDIENCE", "GRANT", "GRANTS", "GROUP", "GROUPING", 
			"GROUPS", "GZIP", "HALF_AWAY_FROM_ZERO_Q", "HALF_TO_EVEN_Q", "HANDLER", 
			"HASH", "HAVING", "HEADER", "HEADERS", "HEX", "HIGH", "HISTORY", "HOURS", 
			"IDENTIFIER", "IDENTITY", "IF", "IFF", "IFNULL", "IGNORE", "IGNORE_UTF8_ERRORS", 
			"ILIKE", "IMMEDIATE", "IMMEDIATELY", "IMMUTABLE", "IMPLICIT", "IMPORT", 
			"IMPORTS", "IMPORTED", "IN", "INCREMENT", "INCREMENTAL", "INDEX", "INFORMATION", 
			"INITIALIZE", "INITIALLY", "INITIALLY_SUSPENDED", "INITIAL_REPLICATION_SIZE_LIMIT_IN_TB", 
			"INNER", "INPUT", "INSERT", "INSERT_ONLY", "INT", "INTEGRATION", "INTEGRATIONS", 
			"INTERSECT", "INTERVAL", "INTO", "IS", "JAVA", "JAVASCRIPT", "JDBC_TREAT_DECIMAL_AS_INT", 
			"JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC", "JDBC_USE_SESSION_TIMEZONE", "JOIN", 
			"JSON", "JSON_Q", "JSON_INDENT", "JS_TREAT_INTEGER_AS_BIGINT", "KEY", 
			"KEYS", "KMS_KEY_ID", "LAG", "LANGUAGE", "LARGE", "LAST", "LAST_NAME", 
			"LAST_QUERY_ID", "LAST_VALUE", "LATERAL", "LEAD", "LEFT", "LEN", "LENGTH", 
			"LIKE", "LIMIT", "LINEAR", "LIST", "LISTING", "LOCAL", "LOCATION", "LOCKS", 
			"LOCK_TIMEOUT", "LOGIN_NAME", "LOOKER", "LOW", "LOWER", "LTRIM", "LZO", 
			"MANAGE", "MANAGED", "MASKING", "MASTER_KEY", "MATCH", "MATCHED", "MATCHES", 
			"MATCH_BY_COLUMN_NAME", "MATCH_RECOGNIZE", "MATERIALIZED", "MAX_BATCH_ROWS", 
			"MAX_CLUSTER_COUNT", "MAX_CONCURRENCY_LEVEL", "MAX_DATA_EXTENSION_TIME_IN_DAYS", 
			"MAX_SIZE", "MEASURES", "MEDIUM", "MEMOIZABLE", "MERGE", "MIDDLE_NAME", 
			"MIN", "MINS_TO_BYPASS_MFA", "MINS_TO_UNLOCK", "MINUS_", "MIN_CLUSTER_COUNT", 
			"MIN_DATA_RETENTION_TIME_IN_DAYS", "MODE", "MODIFIED_AFTER", "MODIFY", 
			"MONITOR", "MONITORS", "MONTHLY", "MOVE", "MULTI_STATEMENT_COUNT", "MUST_CHANGE_PASSWORD", 
			"NAME", "NATURAL", "NETWORK", "NETWORK_POLICY", "NEVER", "NEXT", "NEXTVAL", 
			"NO", "NONE", "NONE_Q", "NOORDER", "NORELY", "NOT", "NOTIFICATION", "NOTIFICATION_INTEGRATION", 
			"NOTIFICATION_PROVIDER", "NOTIFY", "NOTIFY_USERS", "NOVALIDATE", "NTILE", 
			"NULLIF", "NULLS", "NULL_", "NULL_IF", "NUMBER", "NVL", "NVL2", "OAUTH", 
			"OAUTH_ALLOW_NON_TLS_REDIRECT_URI", "OAUTH_CLIENT", "OAUTH_CLIENT_RSA_PUBLIC_KEY", 
			"OAUTH_CLIENT_RSA_PUBLIC_KEY_2", "OAUTH_ENFORCE_PKCE", "OAUTH_ISSUE_REFRESH_TOKENS", 
			"OAUTH_REDIRECT_URI", "OAUTH_REFRESH_TOKEN_VALIDITY", "OAUTH_USE_SECONDARY_ROLES", 
			"OBJECT", "OBJECT_Q", "OBJECTS", "OBJECT_TYPES", "OF", "OFFSET", "OKTA", 
			"OKTA_PROVISIONER_Q", "OKTA_Q", "OLD", "OMIT", "ON", "ONE", "ONLY", "ON_CREATE", 
			"ON_ERROR", "ON_SCHEDULE", "OPERATE", "OPTIMIZATION", "OPTION", "OR", 
			"ORC", "ORC_Q", "ORDER", "ORGADMIN", "ORGANIZATION", "OUTBOUND", "OUTER", 
			"OVER", "OVERRIDE", "OVERWRITE", "OWNER", "OWNERSHIP", "PACKAGES", "PARALLEL", 
			"PARAMETERS", "PARQUET", "PARQUET_Q", "PARTIAL", "PARTITION", "PARTITION_TYPE", 
			"PASSWORD", "PASSWORD_HISTORY", "PASSWORD_LOCKOUT_TIME_MINS", "PASSWORD_MAX_AGE_DAYS", 
			"PASSWORD_MAX_LENGTH", "PASSWORD_MAX_RETRIES", "PASSWORD_MIN_AGE_DAYS", 
			"PASSWORD_MIN_LENGTH", "PASSWORD_MIN_LOWER_CASE_CHARS", "PASSWORD_MIN_NUMERIC_CHARS", 
			"PASSWORD_MIN_SPECIAL_CHARS", "PASSWORD_MIN_UPPER_CASE_CHARS", "PAST", 
			"PATH_", "PATTERN", "PER", "PERCENT", "PERIODIC_DATA_REKEYING", "PING_FEDERATE", 
			"PIPE", "PIPES", "PIPE_EXECUTION_PAUSED", "PIVOT", "POLICIES", "POLICY", 
			"PORT", "PREFIX", "PRESERVE_SPACE", "PREVENT_UNLOAD_TO_INLINE_URL", "PREVENT_UNLOAD_TO_INTERNAL_STAGES", 
			"PRE_AUTHORIZED_ROLES_LIST", "PRIMARY", "PRIOR", "PRIORITY", "PRIVILEGES", 
			"PROCEDURE", "PROCEDURES", "PROCEDURE_NAME", "PROPERTY", "PROVIDER", 
			"PUBLIC", "PURGE", "PUT", "PYTHON", "QUALIFY", "QUARTER", "QUERIES", 
			"QUERY", "QUERY_ACCELERATION_MAX_SCALE_FACTOR", "QUERY_TAG", "QUEUE", 
			"QUOTED_IDENTIFIERS_IGNORE_CASE", "RANK", "RAW_DEFLATE", "READ", "READER", 
			"RECLUSTER", "RECORD_DELIMITER", "RECURSIVE", "REFERENCES", "REFERENCE_USAGE", 
			"REFRESH", "REFRESH_MODE", "REFRESH_ON_CREATE", "REGION", "REGIONS", 
			"REGION_GROUP", "RELY", "REMOVE", "RENAME", "REPEATABLE", "REPLACE", 
			"REPLACE_INVALID_CHARACTERS", "REPLICA", "REPLICATION", "REPLICATION_SCHEDULE", 
			"REQUEST_TRANSLATOR", "REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION", 
			"REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION", "RESET", "RESOURCE", 
			"RESOURCES", "RESOURCE_MONITOR", "RESPECT", "RESPONSE_TRANSLATOR", "RESTRICT", 
			"RESTRICTIONS", "RESULT", "RESUME", "RETURNS", "RETURN_ALL_ERRORS", "RETURN_ERRORS", 
			"RETURN_FAILED_ONLY", "RETURN_N_ROWS", "RETURN_ROWS", "REVOKE", "RIGHT", 
			"RLIKE", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROUND", "ROUNDING_MODE", 
			"ROW", "ROWS", "ROWS_PER_RESULTSET", "ROW_NUMBER", "RSA_PUBLIC_KEY", 
			"RSA_PUBLIC_KEY_2", "RTRIM", "RUN_AS_ROLE", "RUNTIME_VERSION", "S3", 
			"SAML2", "SAML2_ENABLE_SP_INITIATED", "SAML2_FORCE_AUTHN", "SAML2_ISSUER", 
			"SAML2_POST_LOGOUT_REDIRECT_URL", "SAML2_PROVIDER", "SAML2_REQUESTED_NAMEID_FORMAT", 
			"SAML2_SIGN_REQUEST", "SAML2_SNOWFLAKE_ACS_URL", "SAML2_SNOWFLAKE_ISSUER_URL", 
			"SAML2_SNOWFLAKE_X509_CERT", "SAML2_SP_INITIATED_LOGIN_PAGE_LABEL", "SAML2_SSO_URL", 
			"SAML2_X509_CERT", "SAML_IDENTITY_PROVIDER", "SAMPLE", "SAVE_OLD_URL", 
			"SCALE", "SCALING_POLICY", "SCHEDULE", "SCHEMA", "SCHEMAS", "SCIM", "SCIM_CLIENT", 
			"SEARCH", "SECONDARY", "SECURE", "SECURITY", "SECURITYADMIN", "SEED", 
			"SELECT", "SEQUENCE", "SEQUENCES", "SESSION", "SESSION_IDLE_TIMEOUT_MINS", 
			"SESSION_POLICY", "SESSION_UI_IDLE_TIMEOUT_MINS", "SET", "SETS", "SHARE", 
			"SHARES", "SHARE_RESTRICTIONS", "SHOW", "SHOW_INITIAL_ROWS", "SIMPLE", 
			"SIMULATED_DATA_SHARING_CONSUMER", "SIZE_LIMIT", "SKIP_", "SKIP_BLANK_LINES", 
			"SKIP_BYTE_ORDER_MARK", "SKIP_FILE", "SKIP_FILE_N", "SKIP_HEADER", "SMALL", 
			"SNAPPY", "SNAPPY_COMPRESSION", "SNOWFLAKE_FULL", "SNOWFLAKE_SSE", "SNOWPARK_OPTIMIZED", 
			"SOME", "SOURCE", "SOURCE_COMPRESSION", "SPLIT", "SPLIT_PART", "SPLIT_TO_TABLE", 
			"SQL", "SSO_LOGIN_PAGE", "STAGE", "STAGES", "STAGE_COPY_OPTIONS", "STAGE_FILE_FORMAT", 
			"STANDARD", "START", "STARTS", "START_DATE", "START_TIMESTAMP", "STATE", 
			"STATEMENT", "STATEMENT_QUEUED_TIMEOUT_IN_SECONDS", "STATEMENT_TIMEOUT_IN_SECONDS", 
			"STATS", "STATUS", "STORAGE", "STORAGE_ALLOWED_LOCATIONS", "STORAGE_AWS_OBJECT_ACL", 
			"STORAGE_AWS_ROLE_ARN", "STORAGE_BLOCKED_LOCATIONS", "STORAGE_INTEGRATION", 
			"STORAGE_PROVIDER", "STREAM", "STREAMS", "STRICT", "STRICT_JSON_OUTPUT", 
			"STRIP_NULL_VALUES", "STRIP_OUTER_ARRAY", "STRIP_OUTER_ELEMENT", "SUBSTR", 
			"SUBSTRING", "SUM", "SUSPEND", "SUSPENDED", "SUSPEND_IMMEDIATE", "SUSPEND_TASK_AFTER_NUM_FAILURES", 
			"SWAP", "SYNC_PASSWORD", "SYSADMIN", "SYSTEM", "TABLE", "TABLEAU_DESKTOP", 
			"TABLEAU_SERVER", "TABLES", "TABLESAMPLE", "TABLE_FORMAT", "TABULAR", 
			"TAG", "TAGS", "TARGET_LAG", "TASK", "TASKS", "TEMP", "TEMPORARY", "TERSE", 
			"THEN", "TIME", "TIMEADD", "TIMEDIFF", "TIMESTAMP", "TIMESTAMP_DAY_IS_ALWAYS_24H", 
			"TIMESTAMP_FORMAT", "TIMESTAMP_INPUT_FORMAT", "TIMESTAMP_LTZ", "TIMESTAMP_LTZ_OUTPUT_FORMAT", 
			"TIMESTAMP_NTZ", "TIMESTAMP_NTZ_OUTPUT_FORMAT", "TIMESTAMP_OUTPUT_FORMAT", 
			"TIMESTAMP_TYPE_MAPPING", "TIMESTAMP_TZ", "TIMESTAMP_TZ_OUTPUT_FORMAT", 
			"TIMESTAMPADD", "TIMESTAMPDIFF", "TIMEZONE", "TIME_FORMAT", "TIME_INPUT_FORMAT", 
			"TIME_OUTPUT_FORMAT", "TO", "TO_BOOLEAN", "TO_DATE", "TO_TIMESTAMP", 
			"TOP", "TRANSACTION", "TRANSACTIONS", "TRANSACTION_ABORT_ON_ERROR", "TRANSACTION_DEFAULT_ISOLATION_LEVEL", 
			"TRANSIENT", "TRIGGERS", "TRIM", "TRIM_SPACE", "TRUE", "TRUNC", "TRUNCATE", 
			"TRUNCATECOLUMNS", "TRY_CAST", "TWO_DIGIT_CENTURY_START", "TYPE", "UNDROP", 
			"UNION", "UNIQUE", "UNMATCHED", "UNPIVOT", "UNSET", "UNSUPPORTED_DDL_ACTION", 
			"UPDATE", "UPPER", "URL", "USAGE", "USE", "USER", "USERADMIN", "USERS", 
			"USER_SPECIFIED", "USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE", "USER_TASK_TIMEOUT_MS", 
			"USE_ANY_ROLE", "USE_CACHED_RESULT", "USING", "UTF8", "VALIDATE", "VALIDATION_MODE", 
			"VALUE", "VALUES", "VARIABLES", "VERSION", "VIEW", "VIEWS", "VISIBILITY", 
			"VOLATILE", "WAREHOUSE", "WAREHOUSES", "WAREHOUSE_SIZE", "WAREHOUSE_TYPE", 
			"WEEKLY", "WEEK_OF_YEAR_POLICY", "WEEK_START", "WHEN", "WHERE", "WITH", 
			"WITHIN", "WORK", "WRITE", "X4LARGE", "X5LARGE", "X6LARGE", "XLARGE", 
			"XML", "XML_Q", "XSMALL", "XXLARGE", "XXXLARGE", "YEARLY", "YEAR", "ZSTD", 
			"ARRAY", "ARRAY_Q", "BIGINT", "BINARY", "BOOLEAN", "BYTEINT", "CHAR_VARYING", 
			"DATE", "DATETIME", "DECIMAL_", "DOUBLE", "DOUBLE_PRECISION", "FLOAT4", 
			"FLOAT8", "FLOAT_", "FLOOR", "GEOGRAPHY", "GEOMETRY", "INTEGER", "NCHAR", 
			"NCHAR_VARYING", "NUMERIC", "NVARCHAR2", "NVARCHAR", "REAL_", "SMALLINT", 
			"STRING_", "TEXT", "TINYINT", "VARBINARY", "VARCHAR", "VARIANT", "LISTAGG", 
			"DUMMY", "SPACE", "SQL_COMMENT", "LINE_COMMENT", "LINE_COMMENT_2", "DOUBLE_QUOTE_ID", 
			"DOUBLE_QUOTE_BLANK", "SINGLE_QUOTE", "ID", "ID2", "S3_PATH", "S3GOV_PATH", 
			"GCS_PATH", "AZURE_PATH", "FILE_PATH", "DBL_DOLLAR", "STRING", "DECIMAL", 
			"FLOAT", "REAL", "CHAR_LITERAL", "ARROW", "ASSOC", "NE", "LTGT", "EQ", 
			"GT", "GE", "LT", "LE", "PIPE_PIPE", "DOT", "AT", "AT_Q", "DOLLAR", "LR_BRACKET", 
			"RR_BRACKET", "LSB", "RSB", "LCB", "RCB", "COMMA", "SEMI", "COLON", "COLON_COLON", 
			"STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", "TILDA"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "SnowflakeParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public SnowflakeParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Snowflake_fileContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(SnowflakeParser.EOF, 0); }
		public BatchContext batch() {
			return getRuleContext(BatchContext.class,0);
		}
		public Snowflake_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_snowflake_file; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSnowflake_file(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSnowflake_file(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSnowflake_file(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Snowflake_fileContext snowflake_file() throws RecognitionException {
		Snowflake_fileContext _localctx = new Snowflake_fileContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_snowflake_file);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1233);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALTER || _la==BEGIN || ((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 10133305320013825L) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & 19140298416357401L) != 0) || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & 140737488355345L) != 0) || _la==LIST || _la==MERGE || ((((_la - 545)) & ~0x3f) == 0 && ((1L << (_la - 545)) & 297237575473561601L) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & 4398046515329L) != 0) || ((((_la - 776)) & ~0x3f) == 0 && ((1L << (_la - 776)) & 70368744248353L) != 0) || _la==LR_BRACKET) {
				{
				setState(1232);
				batch();
				}
			}

			setState(1235);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BatchContext extends ParserRuleContext {
		public List<Sql_commandContext> sql_command() {
			return getRuleContexts(Sql_commandContext.class);
		}
		public Sql_commandContext sql_command(int i) {
			return getRuleContext(Sql_commandContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(SnowflakeParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(SnowflakeParser.SEMI, i);
		}
		public BatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_batch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterBatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitBatch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitBatch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BatchContext batch() throws RecognitionException {
		BatchContext _localctx = new BatchContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_batch);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1237);
			sql_command();
			setState(1242);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1238);
					match(SEMI);
					setState(1239);
					sql_command();
					}
					} 
				}
				setState(1244);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1,_ctx);
			}
			setState(1246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(1245);
				match(SEMI);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sql_commandContext extends ParserRuleContext {
		public Ddl_commandContext ddl_command() {
			return getRuleContext(Ddl_commandContext.class,0);
		}
		public Dml_commandContext dml_command() {
			return getRuleContext(Dml_commandContext.class,0);
		}
		public Show_commandContext show_command() {
			return getRuleContext(Show_commandContext.class,0);
		}
		public Use_commandContext use_command() {
			return getRuleContext(Use_commandContext.class,0);
		}
		public Describe_commandContext describe_command() {
			return getRuleContext(Describe_commandContext.class,0);
		}
		public Other_commandContext other_command() {
			return getRuleContext(Other_commandContext.class,0);
		}
		public Sql_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSql_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSql_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSql_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_commandContext sql_command() throws RecognitionException {
		Sql_commandContext _localctx = new Sql_commandContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_command);
		try {
			setState(1254);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
			case CREATE:
			case DROP:
			case UNDROP:
				enterOuterAlt(_localctx, 1);
				{
				setState(1248);
				ddl_command();
				}
				break;
			case DELETE:
			case INSERT:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1249);
				dml_command();
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 3);
				{
				setState(1250);
				show_command();
				}
				break;
			case USE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1251);
				use_command();
				}
				break;
			case DESC:
			case DESCRIBE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1252);
				describe_command();
				}
				break;
			case BEGIN:
			case CALL:
			case COMMENT:
			case COMMIT:
			case COPY:
			case EXECUTE:
			case EXPLAIN:
			case GET:
			case GRANT:
			case LIST:
			case PUT:
			case REMOVE:
			case REVOKE:
			case ROLLBACK:
			case SET:
			case START:
			case TRUNCATE:
			case UNSET:
				enterOuterAlt(_localctx, 6);
				{
				setState(1253);
				other_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Ddl_commandContext extends ParserRuleContext {
		public Alter_commandContext alter_command() {
			return getRuleContext(Alter_commandContext.class,0);
		}
		public Create_commandContext create_command() {
			return getRuleContext(Create_commandContext.class,0);
		}
		public Drop_commandContext drop_command() {
			return getRuleContext(Drop_commandContext.class,0);
		}
		public Undrop_commandContext undrop_command() {
			return getRuleContext(Undrop_commandContext.class,0);
		}
		public Ddl_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDdl_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDdl_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDdl_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_commandContext ddl_command() throws RecognitionException {
		Ddl_commandContext _localctx = new Ddl_commandContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_ddl_command);
		try {
			setState(1260);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1256);
				alter_command();
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1257);
				create_command();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 3);
				{
				setState(1258);
				drop_command();
				}
				break;
			case UNDROP:
				enterOuterAlt(_localctx, 4);
				{
				setState(1259);
				undrop_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dml_commandContext extends ParserRuleContext {
		public Query_statementContext query_statement() {
			return getRuleContext(Query_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Insert_multi_table_statementContext insert_multi_table_statement() {
			return getRuleContext(Insert_multi_table_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Dml_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDml_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDml_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDml_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_commandContext dml_command() throws RecognitionException {
		Dml_commandContext _localctx = new Dml_commandContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_dml_command);
		try {
			setState(1268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1262);
				query_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1263);
				insert_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1264);
				insert_multi_table_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1265);
				update_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1266);
				delete_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1267);
				merge_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(SnowflakeParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(SnowflakeParser.INTO, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Values_builderContext values_builder() {
			return getRuleContext(Values_builderContext.class,0);
		}
		public Query_statementContext query_statement() {
			return getRuleContext(Query_statementContext.class,0);
		}
		public TerminalNode OVERWRITE() { return getToken(SnowflakeParser.OVERWRITE, 0); }
		public Column_list_in_parenthesesContext column_list_in_parentheses() {
			return getRuleContext(Column_list_in_parenthesesContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_insert_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1270);
			match(INSERT);
			setState(1272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVERWRITE) {
				{
				setState(1271);
				match(OVERWRITE);
				}
			}

			setState(1274);
			match(INTO);
			setState(1275);
			object_name();
			setState(1277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				setState(1276);
				column_list_in_parentheses();
				}
				break;
			}
			setState(1281);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(1279);
				values_builder();
				}
				break;
			case SELECT:
			case WITH:
			case LR_BRACKET:
				{
				setState(1280);
				query_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_multi_table_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(SnowflakeParser.INSERT, 0); }
		public TerminalNode ALL() { return getToken(SnowflakeParser.ALL, 0); }
		public List<Into_clause2Context> into_clause2() {
			return getRuleContexts(Into_clause2Context.class);
		}
		public Into_clause2Context into_clause2(int i) {
			return getRuleContext(Into_clause2Context.class,i);
		}
		public TerminalNode OVERWRITE() { return getToken(SnowflakeParser.OVERWRITE, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(SnowflakeParser.FIRST, 0); }
		public List<TerminalNode> WHEN() { return getTokens(SnowflakeParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(SnowflakeParser.WHEN, i);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(SnowflakeParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(SnowflakeParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(SnowflakeParser.ELSE, 0); }
		public Insert_multi_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_multi_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterInsert_multi_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitInsert_multi_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitInsert_multi_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_multi_table_statementContext insert_multi_table_statement() throws RecognitionException {
		Insert_multi_table_statementContext _localctx = new Insert_multi_table_statementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_insert_multi_table_statement);
		int _la;
		try {
			setState(1312);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1283);
				match(INSERT);
				setState(1285);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OVERWRITE) {
					{
					setState(1284);
					match(OVERWRITE);
					}
				}

				setState(1287);
				match(ALL);
				setState(1288);
				into_clause2();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1289);
				match(INSERT);
				setState(1291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OVERWRITE) {
					{
					setState(1290);
					match(OVERWRITE);
					}
				}

				setState(1293);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1302); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1294);
					match(WHEN);
					setState(1295);
					predicate();
					setState(1296);
					match(THEN);
					setState(1298); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1297);
						into_clause2();
						}
						}
						setState(1300); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==INTO );
					}
					}
					setState(1304); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(1308);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(1306);
					match(ELSE);
					setState(1307);
					into_clause2();
					}
				}

				setState(1310);
				subquery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Into_clause2Context extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(SnowflakeParser.INTO, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Values_listContext values_list() {
			return getRuleContext(Values_listContext.class,0);
		}
		public Into_clause2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterInto_clause2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitInto_clause2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitInto_clause2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clause2Context into_clause2() throws RecognitionException {
		Into_clause2Context _localctx = new Into_clause2Context(_ctx, getState());
		enterRule(_localctx, 14, RULE_into_clause2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1314);
			match(INTO);
			setState(1315);
			object_name();
			setState(1320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				setState(1316);
				match(LR_BRACKET);
				setState(1317);
				column_list();
				setState(1318);
				match(RR_BRACKET);
				}
				break;
			}
			setState(1323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(1322);
				values_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Values_listContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(SnowflakeParser.VALUES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public List<Value_itemContext> value_item() {
			return getRuleContexts(Value_itemContext.class);
		}
		public Value_itemContext value_item(int i) {
			return getRuleContext(Value_itemContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Values_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterValues_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitValues_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitValues_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_listContext values_list() throws RecognitionException {
		Values_listContext _localctx = new Values_listContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_values_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1325);
			match(VALUES);
			setState(1326);
			match(LR_BRACKET);
			setState(1327);
			value_item();
			setState(1332);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1328);
				match(COMMA);
				setState(1329);
				value_item();
				}
				}
				setState(1334);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1335);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Value_itemContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SnowflakeParser.DEFAULT, 0); }
		public TerminalNode NULL_() { return getToken(SnowflakeParser.NULL_, 0); }
		public Value_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterValue_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitValue_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitValue_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Value_itemContext value_item() throws RecognitionException {
		Value_itemContext _localctx = new Value_itemContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_value_item);
		try {
			setState(1340);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCOUNT:
			case ACCOUNTADMIN:
			case ACTION:
			case AES:
			case ALERT:
			case ALERTS:
			case ALLOW_OVERLAPPING_EXECUTION:
			case ANY_VALUE:
			case ARRAY_AGG:
			case AT_KEYWORD:
			case AVG:
			case CAST:
			case CEIL:
			case CHAR:
			case CHARACTER:
			case CHARINDEX:
			case CHECKSUM:
			case CLUSTER:
			case COLLATE:
			case COLLECTION:
			case COMMENT:
			case CONDITION:
			case CONFIGURATION:
			case CONTAINS:
			case COPY_OPTIONS_:
			case COUNT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASES:
			case DATEADD:
			case DATEDIFF:
			case DATE_PART:
			case DAYS:
			case DEFINITION:
			case DELTA:
			case DIRECTION:
			case DISPLAY_NAME:
			case DOWNSTREAM:
			case DYNAMIC:
			case EDITION:
			case EMAIL:
			case EMPTY_:
			case ENABLED:
			case EQUAL_NULL:
			case ERROR_INTEGRATION:
			case EVENT:
			case EXCHANGE:
			case EXPIRY_DATE:
			case EXPR:
			case FILE:
			case FILES:
			case FIRST_NAME:
			case FIRST_VALUE:
			case FLATTEN:
			case FREQUENCY:
			case FUNCTION:
			case GET:
			case GETDATE:
			case GLOBAL:
			case HIGH:
			case HOURS:
			case IDENTIFIER:
			case IDENTITY:
			case IF:
			case IFF:
			case IFNULL:
			case ILIKE:
			case IMPORTED:
			case INCREMENTAL:
			case INDEX:
			case INITIALIZE:
			case INPUT:
			case INT:
			case INTEGRATIONS:
			case INTERVAL:
			case JAVASCRIPT:
			case JOIN:
			case KEY:
			case LAG:
			case LANGUAGE:
			case LAST_NAME:
			case LAST_QUERY_ID:
			case LEAD:
			case LEFT:
			case LENGTH:
			case LIKE:
			case LOCAL:
			case LOW:
			case LOWER:
			case MAX_CONCURRENCY_LEVEL:
			case MEDIUM:
			case MIN:
			case MODE:
			case NAME:
			case NETWORK:
			case NOORDER:
			case NULLIF:
			case NUMBER:
			case NVL:
			case NVL2:
			case OBJECT:
			case OFFSET:
			case OLD:
			case ON_CREATE:
			case ON_ERROR:
			case ON_SCHEDULE:
			case OPTION:
			case ORDER:
			case ORGADMIN:
			case OUTBOUND:
			case OUTER:
			case OWNER:
			case PARTITION:
			case PASSWORD:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCKOUT_TIME_MINS:
			case PASSWORD_MAX_AGE_DAYS:
			case PASSWORD_MAX_LENGTH:
			case PASSWORD_MAX_RETRIES:
			case PASSWORD_MIN_AGE_DAYS:
			case PASSWORD_MIN_LENGTH:
			case PASSWORD_MIN_LOWER_CASE_CHARS:
			case PASSWORD_MIN_NUMERIC_CHARS:
			case PASSWORD_MIN_SPECIAL_CHARS:
			case PASSWORD_MIN_UPPER_CASE_CHARS:
			case PATH_:
			case PATTERN:
			case POLICIES:
			case POLICY:
			case PORT:
			case PRIORITY:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PUBLIC:
			case QUARTER:
			case QUERY:
			case QUERY_TAG:
			case RANK:
			case RECURSIVE:
			case REFERENCES:
			case REFRESH_MODE:
			case REGION:
			case REPLACE:
			case RESOURCE:
			case RESOURCES:
			case RESPECT:
			case RESTRICT:
			case RESULT:
			case RIGHT:
			case ROLE:
			case ROLES:
			case ROLLUP:
			case ROUND:
			case ROUNDING_MODE:
			case ROW_NUMBER:
			case SCALE:
			case SCHEDULE:
			case SCHEMAS:
			case SECURITYADMIN:
			case SEQUENCE:
			case SESSION:
			case SOURCE:
			case SPLIT:
			case SPLIT_PART:
			case SPLIT_TO_TABLE:
			case STAGE:
			case STAGES:
			case START_DATE:
			case STATE:
			case STATS:
			case STATUS:
			case STREAMS:
			case SUBSTR:
			case SUBSTRING:
			case SUM:
			case SYSADMIN:
			case TABLES:
			case TAG:
			case TAGS:
			case TARGET_LAG:
			case TASKS:
			case TEMP:
			case TIME:
			case TIMEADD:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMP_LTZ:
			case TIMESTAMP_NTZ:
			case TIMESTAMP_TZ:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMEZONE:
			case TO_BOOLEAN:
			case TO_DATE:
			case TO_TIMESTAMP:
			case TRUNC:
			case TRUNCATE:
			case TRY_CAST:
			case TYPE:
			case UPPER:
			case URL:
			case USER:
			case USERADMIN:
			case USERS:
			case VALUE:
			case VALUES:
			case VERSION:
			case VIEWS:
			case VISIBILITY:
			case WAREHOUSE:
			case WAREHOUSES:
			case WAREHOUSE_TYPE:
			case YEAR:
			case ARRAY:
			case BIGINT:
			case BINARY:
			case BOOLEAN:
			case BYTEINT:
			case CHAR_VARYING:
			case DATE:
			case DATETIME:
			case DECIMAL_:
			case DOUBLE:
			case DOUBLE_PRECISION:
			case FLOAT4:
			case FLOAT8:
			case FLOAT_:
			case FLOOR:
			case GEOGRAPHY:
			case GEOMETRY:
			case INTEGER:
			case NCHAR:
			case NCHAR_VARYING:
			case NUMERIC:
			case NVARCHAR2:
			case NVARCHAR:
			case REAL_:
			case SMALLINT:
			case STRING_:
			case TEXT:
			case TINYINT:
			case VARBINARY:
			case VARCHAR:
			case VARIANT:
			case DOUBLE_QUOTE_ID:
			case DOUBLE_QUOTE_BLANK:
			case ID:
			case ID2:
				enterOuterAlt(_localctx, 1);
				{
				setState(1337);
				column_name();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1338);
				match(DEFAULT);
				}
				break;
			case NULL_:
				enterOuterAlt(_localctx, 3);
				{
				setState(1339);
				match(NULL_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(SnowflakeParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(SnowflakeParser.INTO, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SnowflakeParser.USING, 0); }
		public Table_sourceContext table_source() {
			return getRuleContext(Table_sourceContext.class,0);
		}
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Merge_matchesContext merge_matches() {
			return getRuleContext(Merge_matchesContext.class,0);
		}
		public As_aliasContext as_alias() {
			return getRuleContext(As_aliasContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1342);
			match(MERGE);
			setState(1343);
			match(INTO);
			setState(1344);
			object_name();
			setState(1346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1153005069772366528L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
				{
				setState(1345);
				as_alias();
				}
			}

			setState(1348);
			match(USING);
			setState(1349);
			table_source();
			setState(1350);
			match(ON);
			setState(1351);
			search_condition(0);
			setState(1352);
			merge_matches();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_matchesContext extends ParserRuleContext {
		public List<Merge_condContext> merge_cond() {
			return getRuleContexts(Merge_condContext.class);
		}
		public Merge_condContext merge_cond(int i) {
			return getRuleContext(Merge_condContext.class,i);
		}
		public Merge_matchesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_matches; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterMerge_matches(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitMerge_matches(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitMerge_matches(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_matchesContext merge_matches() throws RecognitionException {
		Merge_matchesContext _localctx = new Merge_matchesContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_merge_matches);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1355); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1354);
				merge_cond();
				}
				}
				setState(1357); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_condContext extends ParserRuleContext {
		public List<TerminalNode> WHEN() { return getTokens(SnowflakeParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(SnowflakeParser.WHEN, i);
		}
		public List<TerminalNode> MATCHED() { return getTokens(SnowflakeParser.MATCHED); }
		public TerminalNode MATCHED(int i) {
			return getToken(SnowflakeParser.MATCHED, i);
		}
		public List<TerminalNode> THEN() { return getTokens(SnowflakeParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(SnowflakeParser.THEN, i);
		}
		public List<Merge_update_deleteContext> merge_update_delete() {
			return getRuleContexts(Merge_update_deleteContext.class);
		}
		public Merge_update_deleteContext merge_update_delete(int i) {
			return getRuleContext(Merge_update_deleteContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(SnowflakeParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(SnowflakeParser.AND, i);
		}
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(SnowflakeParser.NOT, 0); }
		public Merge_insertContext merge_insert() {
			return getRuleContext(Merge_insertContext.class,0);
		}
		public Merge_condContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_cond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterMerge_cond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitMerge_cond(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitMerge_cond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_condContext merge_cond() throws RecognitionException {
		Merge_condContext _localctx = new Merge_condContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_merge_cond);
		int _la;
		try {
			int _alt;
			setState(1380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1367); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1359);
						match(WHEN);
						setState(1360);
						match(MATCHED);
						setState(1363);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AND) {
							{
							setState(1361);
							match(AND);
							setState(1362);
							search_condition(0);
							}
						}

						setState(1365);
						match(THEN);
						setState(1366);
						merge_update_delete();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1369); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1371);
				match(WHEN);
				setState(1372);
				match(NOT);
				setState(1373);
				match(MATCHED);
				setState(1376);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(1374);
					match(AND);
					setState(1375);
					search_condition(0);
					}
				}

				setState(1378);
				match(THEN);
				setState(1379);
				merge_insert();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_update_deleteContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(SnowflakeParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode DELETE() { return getToken(SnowflakeParser.DELETE, 0); }
		public Merge_update_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterMerge_update_delete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitMerge_update_delete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitMerge_update_delete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_deleteContext merge_update_delete() throws RecognitionException {
		Merge_update_deleteContext _localctx = new Merge_update_deleteContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_merge_update_delete);
		int _la;
		try {
			setState(1398);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1382);
				match(UPDATE);
				setState(1383);
				match(SET);
				setState(1384);
				column_name();
				setState(1385);
				match(EQ);
				setState(1386);
				expr(0);
				setState(1394);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1387);
					match(COMMA);
					setState(1388);
					column_name();
					setState(1389);
					match(EQ);
					setState(1390);
					expr(0);
					}
					}
					setState(1396);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1397);
				match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Merge_insertContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(SnowflakeParser.INSERT, 0); }
		public TerminalNode VALUES() { return getToken(SnowflakeParser.VALUES, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public Merge_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterMerge_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitMerge_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitMerge_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_insertContext merge_insert() throws RecognitionException {
		Merge_insertContext _localctx = new Merge_insertContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_merge_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1400);
			match(INSERT);
			setState(1405);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(1401);
				match(LR_BRACKET);
				setState(1402);
				column_list();
				setState(1403);
				match(RR_BRACKET);
				}
			}

			setState(1407);
			match(VALUES);
			setState(1408);
			match(LR_BRACKET);
			setState(1409);
			expr_list();
			setState(1410);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(SnowflakeParser.UPDATE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public As_aliasContext as_alias() {
			return getRuleContext(As_aliasContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode FROM() { return getToken(SnowflakeParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(SnowflakeParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1412);
			match(UPDATE);
			setState(1413);
			object_name();
			setState(1415);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1153005069772366528L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
				{
				setState(1414);
				as_alias();
				}
			}

			setState(1417);
			match(SET);
			setState(1418);
			column_name();
			setState(1419);
			match(EQ);
			setState(1420);
			expr(0);
			setState(1428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1421);
				match(COMMA);
				setState(1422);
				column_name();
				setState(1423);
				match(EQ);
				setState(1424);
				expr(0);
				}
				}
				setState(1430);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1431);
				match(FROM);
				setState(1432);
				table_sources();
				}
			}

			setState(1437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1435);
				match(WHERE);
				setState(1436);
				search_condition(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_or_queryContext extends ParserRuleContext {
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public As_aliasContext as_alias() {
			return getRuleContext(As_aliasContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Table_or_queryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_or_query; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTable_or_query(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTable_or_query(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTable_or_query(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_or_queryContext table_or_query() throws RecognitionException {
		Table_or_queryContext _localctx = new Table_or_queryContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_table_or_query);
		int _la;
		try {
			setState(1449);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCOUNT:
			case ACCOUNTADMIN:
			case ACTION:
			case AES:
			case ALERT:
			case ALERTS:
			case ALLOW_OVERLAPPING_EXECUTION:
			case ANY_VALUE:
			case ARRAY_AGG:
			case AT_KEYWORD:
			case AVG:
			case CAST:
			case CEIL:
			case CHAR:
			case CHARACTER:
			case CHARINDEX:
			case CHECKSUM:
			case CLUSTER:
			case COLLATE:
			case COLLECTION:
			case COMMENT:
			case CONDITION:
			case CONFIGURATION:
			case CONTAINS:
			case COPY_OPTIONS_:
			case COUNT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASES:
			case DATEADD:
			case DATEDIFF:
			case DATE_PART:
			case DAYS:
			case DEFINITION:
			case DELTA:
			case DIRECTION:
			case DISPLAY_NAME:
			case DOWNSTREAM:
			case DYNAMIC:
			case EDITION:
			case EMAIL:
			case EMPTY_:
			case ENABLED:
			case EQUAL_NULL:
			case ERROR_INTEGRATION:
			case EVENT:
			case EXCHANGE:
			case EXPIRY_DATE:
			case EXPR:
			case FILE:
			case FILES:
			case FIRST_NAME:
			case FIRST_VALUE:
			case FLATTEN:
			case FREQUENCY:
			case FUNCTION:
			case GET:
			case GETDATE:
			case GLOBAL:
			case HIGH:
			case HOURS:
			case IDENTIFIER:
			case IDENTITY:
			case IF:
			case IFF:
			case IFNULL:
			case ILIKE:
			case IMPORTED:
			case INCREMENTAL:
			case INDEX:
			case INITIALIZE:
			case INPUT:
			case INT:
			case INTEGRATIONS:
			case INTERVAL:
			case JAVASCRIPT:
			case JOIN:
			case KEY:
			case LAG:
			case LANGUAGE:
			case LAST_NAME:
			case LAST_QUERY_ID:
			case LEAD:
			case LEFT:
			case LENGTH:
			case LIKE:
			case LOCAL:
			case LOW:
			case LOWER:
			case MAX_CONCURRENCY_LEVEL:
			case MEDIUM:
			case MIN:
			case MODE:
			case NAME:
			case NETWORK:
			case NOORDER:
			case NULLIF:
			case NUMBER:
			case NVL:
			case NVL2:
			case OBJECT:
			case OFFSET:
			case OLD:
			case ON_CREATE:
			case ON_ERROR:
			case ON_SCHEDULE:
			case OPTION:
			case ORDER:
			case ORGADMIN:
			case OUTBOUND:
			case OUTER:
			case OWNER:
			case PARTITION:
			case PASSWORD:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCKOUT_TIME_MINS:
			case PASSWORD_MAX_AGE_DAYS:
			case PASSWORD_MAX_LENGTH:
			case PASSWORD_MAX_RETRIES:
			case PASSWORD_MIN_AGE_DAYS:
			case PASSWORD_MIN_LENGTH:
			case PASSWORD_MIN_LOWER_CASE_CHARS:
			case PASSWORD_MIN_NUMERIC_CHARS:
			case PASSWORD_MIN_SPECIAL_CHARS:
			case PASSWORD_MIN_UPPER_CASE_CHARS:
			case PATH_:
			case PATTERN:
			case POLICIES:
			case POLICY:
			case PORT:
			case PRIORITY:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PUBLIC:
			case QUARTER:
			case QUERY:
			case QUERY_TAG:
			case RANK:
			case RECURSIVE:
			case REFERENCES:
			case REFRESH_MODE:
			case REGION:
			case REPLACE:
			case RESOURCE:
			case RESOURCES:
			case RESPECT:
			case RESTRICT:
			case RESULT:
			case RIGHT:
			case ROLE:
			case ROLES:
			case ROLLUP:
			case ROUND:
			case ROUNDING_MODE:
			case ROW_NUMBER:
			case SCALE:
			case SCHEDULE:
			case SCHEMAS:
			case SECURITYADMIN:
			case SEQUENCE:
			case SESSION:
			case SOURCE:
			case SPLIT:
			case SPLIT_PART:
			case SPLIT_TO_TABLE:
			case STAGE:
			case STAGES:
			case START_DATE:
			case STATE:
			case STATS:
			case STATUS:
			case STREAMS:
			case SUBSTR:
			case SUBSTRING:
			case SUM:
			case SYSADMIN:
			case TABLES:
			case TAG:
			case TAGS:
			case TARGET_LAG:
			case TASKS:
			case TEMP:
			case TIME:
			case TIMEADD:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMP_LTZ:
			case TIMESTAMP_NTZ:
			case TIMESTAMP_TZ:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMEZONE:
			case TO_BOOLEAN:
			case TO_DATE:
			case TO_TIMESTAMP:
			case TRUNC:
			case TRUNCATE:
			case TRY_CAST:
			case TYPE:
			case UPPER:
			case URL:
			case USER:
			case USERADMIN:
			case USERS:
			case VALUE:
			case VALUES:
			case VERSION:
			case VIEWS:
			case VISIBILITY:
			case WAREHOUSE:
			case WAREHOUSES:
			case WAREHOUSE_TYPE:
			case YEAR:
			case ARRAY:
			case BIGINT:
			case BINARY:
			case BOOLEAN:
			case BYTEINT:
			case CHAR_VARYING:
			case DATE:
			case DATETIME:
			case DECIMAL_:
			case DOUBLE:
			case DOUBLE_PRECISION:
			case FLOAT4:
			case FLOAT8:
			case FLOAT_:
			case FLOOR:
			case GEOGRAPHY:
			case GEOMETRY:
			case INTEGER:
			case NCHAR:
			case NCHAR_VARYING:
			case NUMERIC:
			case NVARCHAR2:
			case NVARCHAR:
			case REAL_:
			case SMALLINT:
			case STRING_:
			case TEXT:
			case TINYINT:
			case VARBINARY:
			case VARCHAR:
			case VARIANT:
			case DOUBLE_QUOTE_ID:
			case DOUBLE_QUOTE_BLANK:
			case ID:
			case ID2:
			case DOLLAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(1439);
				object_name();
				setState(1441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1153005069772366528L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(1440);
					as_alias();
					}
				}

				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1443);
				match(LR_BRACKET);
				setState(1444);
				subquery();
				setState(1445);
				match(RR_BRACKET);
				setState(1447);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1153005069772366528L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(1446);
					as_alias();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(SnowflakeParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(SnowflakeParser.FROM, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public As_aliasContext as_alias() {
			return getRuleContext(As_aliasContext.class,0);
		}
		public TerminalNode USING() { return getToken(SnowflakeParser.USING, 0); }
		public List<Table_or_queryContext> table_or_query() {
			return getRuleContexts(Table_or_queryContext.class);
		}
		public Table_or_queryContext table_or_query(int i) {
			return getRuleContext(Table_or_queryContext.class,i);
		}
		public TerminalNode WHERE() { return getToken(SnowflakeParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(SnowflakeParser.COMMA, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1451);
			match(DELETE);
			setState(1452);
			match(FROM);
			setState(1453);
			object_name();
			setState(1455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1153005069772366528L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
				{
				setState(1454);
				as_alias();
				}
			}

			setState(1463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1457);
				match(USING);
				setState(1458);
				table_or_query();
				setState(1461);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1459);
					match(COMMA);
					setState(1460);
					table_or_query();
					}
				}

				}
			}

			setState(1467);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1465);
				match(WHERE);
				setState(1466);
				search_condition(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Values_builderContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(SnowflakeParser.VALUES, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<Expr_listContext> expr_list() {
			return getRuleContexts(Expr_listContext.class);
		}
		public Expr_listContext expr_list(int i) {
			return getRuleContext(Expr_listContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public TerminalNode COMMA() { return getToken(SnowflakeParser.COMMA, 0); }
		public Values_builderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_builder; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterValues_builder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitValues_builder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitValues_builder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_builderContext values_builder() throws RecognitionException {
		Values_builderContext _localctx = new Values_builderContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_values_builder);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1469);
			match(VALUES);
			setState(1470);
			match(LR_BRACKET);
			setState(1471);
			expr_list();
			setState(1472);
			match(RR_BRACKET);
			setState(1478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1473);
				match(COMMA);
				setState(1474);
				match(LR_BRACKET);
				setState(1475);
				expr_list();
				setState(1476);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Other_commandContext extends ParserRuleContext {
		public Copy_into_tableContext copy_into_table() {
			return getRuleContext(Copy_into_tableContext.class,0);
		}
		public Copy_into_locationContext copy_into_location() {
			return getRuleContext(Copy_into_locationContext.class,0);
		}
		public CommentContext comment() {
			return getRuleContext(CommentContext.class,0);
		}
		public CommitContext commit() {
			return getRuleContext(CommitContext.class,0);
		}
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		public Execute_taskContext execute_task() {
			return getRuleContext(Execute_taskContext.class,0);
		}
		public ExplainContext explain() {
			return getRuleContext(ExplainContext.class,0);
		}
		public Get_dmlContext get_dml() {
			return getRuleContext(Get_dmlContext.class,0);
		}
		public Grant_ownershipContext grant_ownership() {
			return getRuleContext(Grant_ownershipContext.class,0);
		}
		public Grant_to_roleContext grant_to_role() {
			return getRuleContext(Grant_to_roleContext.class,0);
		}
		public Grant_to_shareContext grant_to_share() {
			return getRuleContext(Grant_to_shareContext.class,0);
		}
		public Grant_roleContext grant_role() {
			return getRuleContext(Grant_roleContext.class,0);
		}
		public ListContext list() {
			return getRuleContext(ListContext.class,0);
		}
		public PutContext put() {
			return getRuleContext(PutContext.class,0);
		}
		public RemoveContext remove() {
			return getRuleContext(RemoveContext.class,0);
		}
		public Revoke_from_roleContext revoke_from_role() {
			return getRuleContext(Revoke_from_roleContext.class,0);
		}
		public Revoke_from_shareContext revoke_from_share() {
			return getRuleContext(Revoke_from_shareContext.class,0);
		}
		public Revoke_roleContext revoke_role() {
			return getRuleContext(Revoke_roleContext.class,0);
		}
		public RollbackContext rollback() {
			return getRuleContext(RollbackContext.class,0);
		}
		public SetContext set() {
			return getRuleContext(SetContext.class,0);
		}
		public Truncate_materialized_viewContext truncate_materialized_view() {
			return getRuleContext(Truncate_materialized_viewContext.class,0);
		}
		public Truncate_tableContext truncate_table() {
			return getRuleContext(Truncate_tableContext.class,0);
		}
		public UnsetContext unset() {
			return getRuleContext(UnsetContext.class,0);
		}
		public CallContext call() {
			return getRuleContext(CallContext.class,0);
		}
		public Begin_txnContext begin_txn() {
			return getRuleContext(Begin_txnContext.class,0);
		}
		public Other_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_other_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterOther_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitOther_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitOther_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Other_commandContext other_command() throws RecognitionException {
		Other_commandContext _localctx = new Other_commandContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_other_command);
		try {
			setState(1505);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1480);
				copy_into_table();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1481);
				copy_into_location();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1482);
				comment();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1483);
				commit();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1484);
				execute_immediate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1485);
				execute_task();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1486);
				explain();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1487);
				get_dml();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1488);
				grant_ownership();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1489);
				grant_to_role();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1490);
				grant_to_share();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1491);
				grant_role();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1492);
				list();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1493);
				put();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1494);
				remove();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1495);
				revoke_from_role();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1496);
				revoke_from_share();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1497);
				revoke_role();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1498);
				rollback();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1499);
				set();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1500);
				truncate_materialized_view();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1501);
				truncate_table();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1502);
				unset();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1503);
				call();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1504);
				begin_txn();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Begin_txnContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(SnowflakeParser.BEGIN, 0); }
		public TerminalNode NAME() { return getToken(SnowflakeParser.NAME, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode WORK() { return getToken(SnowflakeParser.WORK, 0); }
		public TerminalNode TRANSACTION() { return getToken(SnowflakeParser.TRANSACTION, 0); }
		public TerminalNode START() { return getToken(SnowflakeParser.START, 0); }
		public Begin_txnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_txn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterBegin_txn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitBegin_txn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitBegin_txn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Begin_txnContext begin_txn() throws RecognitionException {
		Begin_txnContext _localctx = new Begin_txnContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_begin_txn);
		int _la;
		try {
			setState(1521);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1507);
				match(BEGIN);
				setState(1509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					setState(1508);
					_la = _input.LA(1);
					if ( !(_la==TRANSACTION || _la==WORK) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1513);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NAME) {
					{
					setState(1511);
					match(NAME);
					setState(1512);
					id_();
					}
				}

				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(1515);
				match(START);
				setState(1516);
				match(TRANSACTION);
				setState(1519);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NAME) {
					{
					setState(1517);
					match(NAME);
					setState(1518);
					id_();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_into_tableContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(SnowflakeParser.COPY, 0); }
		public TerminalNode INTO() { return getToken(SnowflakeParser.INTO, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public List<TerminalNode> FROM() { return getTokens(SnowflakeParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(SnowflakeParser.FROM, i);
		}
		public Table_stageContext table_stage() {
			return getRuleContext(Table_stageContext.class,0);
		}
		public User_stageContext user_stage() {
			return getRuleContext(User_stageContext.class,0);
		}
		public Named_stageContext named_stage() {
			return getRuleContext(Named_stageContext.class,0);
		}
		public External_locationContext external_location() {
			return getRuleContext(External_locationContext.class,0);
		}
		public FilesContext files() {
			return getRuleContext(FilesContext.class,0);
		}
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public File_formatContext file_format() {
			return getRuleContext(File_formatContext.class,0);
		}
		public List<Copy_optionsContext> copy_options() {
			return getRuleContexts(Copy_optionsContext.class);
		}
		public Copy_optionsContext copy_options(int i) {
			return getRuleContext(Copy_optionsContext.class,i);
		}
		public TerminalNode VALIDATION_MODE() { return getToken(SnowflakeParser.VALIDATION_MODE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode RETURN_N_ROWS() { return getToken(SnowflakeParser.RETURN_N_ROWS, 0); }
		public TerminalNode RETURN_ERRORS() { return getToken(SnowflakeParser.RETURN_ERRORS, 0); }
		public TerminalNode RETURN_ALL_ERRORS() { return getToken(SnowflakeParser.RETURN_ALL_ERRORS, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public TerminalNode SELECT() { return getToken(SnowflakeParser.SELECT, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public Copy_into_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_into_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCopy_into_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCopy_into_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCopy_into_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_into_tableContext copy_into_table() throws RecognitionException {
		Copy_into_tableContext _localctx = new Copy_into_tableContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_copy_into_table);
		int _la;
		try {
			setState(1588);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1523);
				match(COPY);
				setState(1524);
				match(INTO);
				setState(1525);
				object_name();
				setState(1526);
				match(FROM);
				setState(1531);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					setState(1527);
					table_stage();
					}
					break;
				case 2:
					{
					setState(1528);
					user_stage();
					}
					break;
				case 3:
					{
					setState(1529);
					named_stage();
					}
					break;
				case 4:
					{
					setState(1530);
					external_location();
					}
					break;
				}
				setState(1534);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILES) {
					{
					setState(1533);
					files();
					}
				}

				setState(1537);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATTERN) {
					{
					setState(1536);
					pattern();
					}
				}

				setState(1540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILE_FORMAT) {
					{
					setState(1539);
					file_format();
					}
				}

				setState(1545);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==CASE_INSENSITIVE || _la==ENFORCE_LENGTH || _la==FORCE || _la==MATCH_BY_COLUMN_NAME || _la==NONE || _la==ON_ERROR || _la==PURGE || _la==RETURN_FAILED_ONLY || _la==SIZE_LIMIT || _la==TRUNCATECOLUMNS) {
					{
					{
					setState(1542);
					copy_options();
					}
					}
					setState(1547);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1551);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALIDATION_MODE) {
					{
					setState(1548);
					match(VALIDATION_MODE);
					setState(1549);
					match(EQ);
					setState(1550);
					_la = _input.LA(1);
					if ( !(((((_la - 593)) & ~0x3f) == 0 && ((1L << (_la - 593)) & 11L) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1553);
				match(COPY);
				setState(1554);
				match(INTO);
				setState(1555);
				object_name();
				setState(1560);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1556);
					match(LR_BRACKET);
					setState(1557);
					column_list();
					setState(1558);
					match(RR_BRACKET);
					}
				}

				setState(1562);
				match(FROM);
				setState(1563);
				match(LR_BRACKET);
				setState(1564);
				match(SELECT);
				setState(1565);
				select_list();
				setState(1566);
				match(FROM);
				setState(1570);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
				case 1:
					{
					setState(1567);
					table_stage();
					}
					break;
				case 2:
					{
					setState(1568);
					user_stage();
					}
					break;
				case 3:
					{
					setState(1569);
					named_stage();
					}
					break;
				}
				setState(1572);
				match(RR_BRACKET);
				setState(1574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILES) {
					{
					setState(1573);
					files();
					}
				}

				setState(1577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATTERN) {
					{
					setState(1576);
					pattern();
					}
				}

				setState(1580);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILE_FORMAT) {
					{
					setState(1579);
					file_format();
					}
				}

				setState(1585);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==CASE_INSENSITIVE || _la==ENFORCE_LENGTH || _la==FORCE || _la==MATCH_BY_COLUMN_NAME || _la==NONE || _la==ON_ERROR || _la==PURGE || _la==RETURN_FAILED_ONLY || _la==SIZE_LIMIT || _la==TRUNCATECOLUMNS) {
					{
					{
					setState(1582);
					copy_options();
					}
					}
					setState(1587);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class External_locationContext extends ParserRuleContext {
		public TerminalNode S3_PATH() { return getToken(SnowflakeParser.S3_PATH, 0); }
		public TerminalNode GCS_PATH() { return getToken(SnowflakeParser.GCS_PATH, 0); }
		public TerminalNode AZURE_PATH() { return getToken(SnowflakeParser.AZURE_PATH, 0); }
		public External_locationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_location; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterExternal_location(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitExternal_location(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitExternal_location(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_locationContext external_location() throws RecognitionException {
		External_locationContext _localctx = new External_locationContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_external_location);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1590);
			_la = _input.LA(1);
			if ( !(((((_la - 881)) & ~0x3f) == 0 && ((1L << (_la - 881)) & 13L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FilesContext extends ParserRuleContext {
		public TerminalNode FILES() { return getToken(SnowflakeParser.FILES, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public FilesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_files; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFiles(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFiles(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFiles(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilesContext files() throws RecognitionException {
		FilesContext _localctx = new FilesContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_files);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1592);
			match(FILES);
			setState(1593);
			match(EQ);
			setState(1594);
			match(LR_BRACKET);
			setState(1595);
			string();
			setState(1600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1596);
				match(COMMA);
				setState(1597);
				string();
				}
				}
				setState(1602);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1603);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class File_formatContext extends ParserRuleContext {
		public TerminalNode FILE_FORMAT() { return getToken(SnowflakeParser.FILE_FORMAT, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Format_nameContext format_name() {
			return getRuleContext(Format_nameContext.class,0);
		}
		public Format_typeContext format_type() {
			return getRuleContext(Format_typeContext.class,0);
		}
		public File_formatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_format; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFile_format(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFile_format(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFile_format(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_formatContext file_format() throws RecognitionException {
		File_formatContext _localctx = new File_formatContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_file_format);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1605);
			match(FILE_FORMAT);
			setState(1606);
			match(EQ);
			setState(1607);
			match(LR_BRACKET);
			setState(1610);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FORMAT_NAME:
				{
				setState(1608);
				format_name();
				}
				break;
			case TYPE:
				{
				setState(1609);
				format_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1612);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Format_nameContext extends ParserRuleContext {
		public TerminalNode FORMAT_NAME() { return getToken(SnowflakeParser.FORMAT_NAME, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Format_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_format_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFormat_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFormat_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFormat_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Format_nameContext format_name() throws RecognitionException {
		Format_nameContext _localctx = new Format_nameContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_format_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1614);
			match(FORMAT_NAME);
			setState(1615);
			match(EQ);
			setState(1616);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Format_typeContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public Type_fileformatContext type_fileformat() {
			return getRuleContext(Type_fileformatContext.class,0);
		}
		public List<Format_type_optionsContext> format_type_options() {
			return getRuleContexts(Format_type_optionsContext.class);
		}
		public Format_type_optionsContext format_type_options(int i) {
			return getRuleContext(Format_type_optionsContext.class,i);
		}
		public Format_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_format_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFormat_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFormat_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFormat_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Format_typeContext format_type() throws RecognitionException {
		Format_typeContext _localctx = new Format_typeContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_format_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1618);
			match(TYPE);
			setState(1619);
			match(EQ);
			setState(1620);
			type_fileformat();
			setState(1624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALLOW_DUPLICATE || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 2251799813689859L) != 0) || ((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 7205918283424366593L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & 576462951326679059L) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 576478344489467905L) != 0) || ((((_la - 530)) & ~0x3f) == 0 && ((1L << (_la - 530)) & 35185512939521L) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & 246290604622035L) != 0) || ((((_la - 745)) & ~0x3f) == 0 && ((1L << (_la - 745)) & 268443649L) != 0) || _la==ZSTD) {
				{
				{
				setState(1621);
				format_type_options();
				}
				}
				setState(1626);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stage_file_formatContext extends ParserRuleContext {
		public TerminalNode STAGE_FILE_FORMAT() { return getToken(SnowflakeParser.STAGE_FILE_FORMAT, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode FORMAT_NAME() { return getToken(SnowflakeParser.FORMAT_NAME, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public Type_fileformatContext type_fileformat() {
			return getRuleContext(Type_fileformatContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public List<Format_type_optionsContext> format_type_options() {
			return getRuleContexts(Format_type_optionsContext.class);
		}
		public Format_type_optionsContext format_type_options(int i) {
			return getRuleContext(Format_type_optionsContext.class,i);
		}
		public Stage_file_formatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stage_file_format; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterStage_file_format(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitStage_file_format(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitStage_file_format(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stage_file_formatContext stage_file_format() throws RecognitionException {
		Stage_file_formatContext _localctx = new Stage_file_formatContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_stage_file_format);
		int _la;
		try {
			setState(1643);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAGE_FILE_FORMAT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1627);
				match(STAGE_FILE_FORMAT);
				setState(1628);
				match(EQ);
				setState(1629);
				match(LR_BRACKET);
				setState(1630);
				match(FORMAT_NAME);
				setState(1631);
				match(EQ);
				setState(1632);
				string();
				}
				break;
			case TYPE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1633);
				match(TYPE);
				setState(1634);
				match(EQ);
				setState(1635);
				type_fileformat();
				setState(1637); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1636);
					format_type_options();
					}
					}
					setState(1639); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ALLOW_DUPLICATE || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 2251799813689859L) != 0) || ((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 7205918283424366593L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & 576462951326679059L) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 576478344489467905L) != 0) || ((((_la - 530)) & ~0x3f) == 0 && ((1L << (_la - 530)) & 35185512939521L) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & 246290604622035L) != 0) || ((((_la - 745)) & ~0x3f) == 0 && ((1L << (_la - 745)) & 268443649L) != 0) || _la==ZSTD );
				setState(1641);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_into_locationContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(SnowflakeParser.COPY, 0); }
		public TerminalNode INTO() { return getToken(SnowflakeParser.INTO, 0); }
		public TerminalNode FROM() { return getToken(SnowflakeParser.FROM, 0); }
		public Table_stageContext table_stage() {
			return getRuleContext(Table_stageContext.class,0);
		}
		public User_stageContext user_stage() {
			return getRuleContext(User_stageContext.class,0);
		}
		public Named_stageContext named_stage() {
			return getRuleContext(Named_stageContext.class,0);
		}
		public External_locationContext external_location() {
			return getRuleContext(External_locationContext.class,0);
		}
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Query_statementContext query_statement() {
			return getRuleContext(Query_statementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Partition_byContext partition_by() {
			return getRuleContext(Partition_byContext.class,0);
		}
		public File_formatContext file_format() {
			return getRuleContext(File_formatContext.class,0);
		}
		public Copy_optionsContext copy_options() {
			return getRuleContext(Copy_optionsContext.class,0);
		}
		public TerminalNode VALIDATION_MODE() { return getToken(SnowflakeParser.VALIDATION_MODE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode RETURN_ROWS() { return getToken(SnowflakeParser.RETURN_ROWS, 0); }
		public TerminalNode HEADER() { return getToken(SnowflakeParser.HEADER, 0); }
		public Copy_into_locationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_into_location; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCopy_into_location(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCopy_into_location(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCopy_into_location(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_into_locationContext copy_into_location() throws RecognitionException {
		Copy_into_locationContext _localctx = new Copy_into_locationContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_copy_into_location);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1645);
			match(COPY);
			setState(1646);
			match(INTO);
			setState(1651);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				setState(1647);
				table_stage();
				}
				break;
			case 2:
				{
				setState(1648);
				user_stage();
				}
				break;
			case 3:
				{
				setState(1649);
				named_stage();
				}
				break;
			case 4:
				{
				setState(1650);
				external_location();
				}
				break;
			}
			setState(1653);
			match(FROM);
			setState(1659);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCOUNT:
			case ACCOUNTADMIN:
			case ACTION:
			case AES:
			case ALERT:
			case ALERTS:
			case ALLOW_OVERLAPPING_EXECUTION:
			case ANY_VALUE:
			case ARRAY_AGG:
			case AT_KEYWORD:
			case AVG:
			case CAST:
			case CEIL:
			case CHAR:
			case CHARACTER:
			case CHARINDEX:
			case CHECKSUM:
			case CLUSTER:
			case COLLATE:
			case COLLECTION:
			case COMMENT:
			case CONDITION:
			case CONFIGURATION:
			case CONTAINS:
			case COPY_OPTIONS_:
			case COUNT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASES:
			case DATEADD:
			case DATEDIFF:
			case DATE_PART:
			case DAYS:
			case DEFINITION:
			case DELTA:
			case DIRECTION:
			case DISPLAY_NAME:
			case DOWNSTREAM:
			case DYNAMIC:
			case EDITION:
			case EMAIL:
			case EMPTY_:
			case ENABLED:
			case EQUAL_NULL:
			case ERROR_INTEGRATION:
			case EVENT:
			case EXCHANGE:
			case EXPIRY_DATE:
			case EXPR:
			case FILE:
			case FILES:
			case FIRST_NAME:
			case FIRST_VALUE:
			case FLATTEN:
			case FREQUENCY:
			case FUNCTION:
			case GET:
			case GETDATE:
			case GLOBAL:
			case HIGH:
			case HOURS:
			case IDENTIFIER:
			case IDENTITY:
			case IF:
			case IFF:
			case IFNULL:
			case ILIKE:
			case IMPORTED:
			case INCREMENTAL:
			case INDEX:
			case INITIALIZE:
			case INPUT:
			case INT:
			case INTEGRATIONS:
			case INTERVAL:
			case JAVASCRIPT:
			case JOIN:
			case KEY:
			case LAG:
			case LANGUAGE:
			case LAST_NAME:
			case LAST_QUERY_ID:
			case LEAD:
			case LEFT:
			case LENGTH:
			case LIKE:
			case LOCAL:
			case LOW:
			case LOWER:
			case MAX_CONCURRENCY_LEVEL:
			case MEDIUM:
			case MIN:
			case MODE:
			case NAME:
			case NETWORK:
			case NOORDER:
			case NULLIF:
			case NUMBER:
			case NVL:
			case NVL2:
			case OBJECT:
			case OFFSET:
			case OLD:
			case ON_CREATE:
			case ON_ERROR:
			case ON_SCHEDULE:
			case OPTION:
			case ORDER:
			case ORGADMIN:
			case OUTBOUND:
			case OUTER:
			case OWNER:
			case PARTITION:
			case PASSWORD:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCKOUT_TIME_MINS:
			case PASSWORD_MAX_AGE_DAYS:
			case PASSWORD_MAX_LENGTH:
			case PASSWORD_MAX_RETRIES:
			case PASSWORD_MIN_AGE_DAYS:
			case PASSWORD_MIN_LENGTH:
			case PASSWORD_MIN_LOWER_CASE_CHARS:
			case PASSWORD_MIN_NUMERIC_CHARS:
			case PASSWORD_MIN_SPECIAL_CHARS:
			case PASSWORD_MIN_UPPER_CASE_CHARS:
			case PATH_:
			case PATTERN:
			case POLICIES:
			case POLICY:
			case PORT:
			case PRIORITY:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PUBLIC:
			case QUARTER:
			case QUERY:
			case QUERY_TAG:
			case RANK:
			case RECURSIVE:
			case REFERENCES:
			case REFRESH_MODE:
			case REGION:
			case REPLACE:
			case RESOURCE:
			case RESOURCES:
			case RESPECT:
			case RESTRICT:
			case RESULT:
			case RIGHT:
			case ROLE:
			case ROLES:
			case ROLLUP:
			case ROUND:
			case ROUNDING_MODE:
			case ROW_NUMBER:
			case SCALE:
			case SCHEDULE:
			case SCHEMAS:
			case SECURITYADMIN:
			case SEQUENCE:
			case SESSION:
			case SOURCE:
			case SPLIT:
			case SPLIT_PART:
			case SPLIT_TO_TABLE:
			case STAGE:
			case STAGES:
			case START_DATE:
			case STATE:
			case STATS:
			case STATUS:
			case STREAMS:
			case SUBSTR:
			case SUBSTRING:
			case SUM:
			case SYSADMIN:
			case TABLES:
			case TAG:
			case TAGS:
			case TARGET_LAG:
			case TASKS:
			case TEMP:
			case TIME:
			case TIMEADD:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMP_LTZ:
			case TIMESTAMP_NTZ:
			case TIMESTAMP_TZ:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMEZONE:
			case TO_BOOLEAN:
			case TO_DATE:
			case TO_TIMESTAMP:
			case TRUNC:
			case TRUNCATE:
			case TRY_CAST:
			case TYPE:
			case UPPER:
			case URL:
			case USER:
			case USERADMIN:
			case USERS:
			case VALUE:
			case VALUES:
			case VERSION:
			case VIEWS:
			case VISIBILITY:
			case WAREHOUSE:
			case WAREHOUSES:
			case WAREHOUSE_TYPE:
			case YEAR:
			case ARRAY:
			case BIGINT:
			case BINARY:
			case BOOLEAN:
			case BYTEINT:
			case CHAR_VARYING:
			case DATE:
			case DATETIME:
			case DECIMAL_:
			case DOUBLE:
			case DOUBLE_PRECISION:
			case FLOAT4:
			case FLOAT8:
			case FLOAT_:
			case FLOOR:
			case GEOGRAPHY:
			case GEOMETRY:
			case INTEGER:
			case NCHAR:
			case NCHAR_VARYING:
			case NUMERIC:
			case NVARCHAR2:
			case NVARCHAR:
			case REAL_:
			case SMALLINT:
			case STRING_:
			case TEXT:
			case TINYINT:
			case VARBINARY:
			case VARCHAR:
			case VARIANT:
			case DOUBLE_QUOTE_ID:
			case DOUBLE_QUOTE_BLANK:
			case ID:
			case ID2:
			case DOLLAR:
				{
				setState(1654);
				object_name();
				}
				break;
			case LR_BRACKET:
				{
				setState(1655);
				match(LR_BRACKET);
				setState(1656);
				query_statement();
				setState(1657);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1662);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1661);
				partition_by();
				}
			}

			setState(1665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILE_FORMAT) {
				{
				setState(1664);
				file_format();
				}
			}

			setState(1668);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASE_INSENSITIVE || _la==ENFORCE_LENGTH || _la==FORCE || _la==MATCH_BY_COLUMN_NAME || _la==NONE || _la==ON_ERROR || _la==PURGE || _la==RETURN_FAILED_ONLY || _la==SIZE_LIMIT || _la==TRUNCATECOLUMNS) {
				{
				setState(1667);
				copy_options();
				}
			}

			setState(1673);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALIDATION_MODE) {
				{
				setState(1670);
				match(VALIDATION_MODE);
				setState(1671);
				match(EQ);
				setState(1672);
				match(RETURN_ROWS);
				}
			}

			setState(1676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HEADER) {
				{
				setState(1675);
				match(HEADER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommentContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(SnowflakeParser.IS, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Function_signatureContext function_signature() {
			return getRuleContext(Function_signatureContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(SnowflakeParser.COLUMN, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public CommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentContext comment() throws RecognitionException {
		CommentContext _localctx = new CommentContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_comment);
		int _la;
		try {
			setState(1701);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1678);
				match(COMMENT);
				setState(1680);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1679);
					if_exists();
					}
				}

				setState(1682);
				match(ON);
				setState(1683);
				object_type_name();
				setState(1684);
				object_name();
				setState(1686);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1685);
					function_signature();
					}
				}

				setState(1688);
				match(IS);
				setState(1689);
				string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1691);
				match(COMMENT);
				setState(1693);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1692);
					if_exists();
					}
				}

				setState(1695);
				match(ON);
				setState(1696);
				match(COLUMN);
				setState(1697);
				full_column_name();
				setState(1698);
				match(IS);
				setState(1699);
				string();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_signatureContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Data_type_listContext data_type_list() {
			return getRuleContext(Data_type_listContext.class,0);
		}
		public Function_signatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_signature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFunction_signature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFunction_signature(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFunction_signature(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_signatureContext function_signature() throws RecognitionException {
		Function_signatureContext _localctx = new Function_signatureContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_function_signature);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1703);
			match(LR_BRACKET);
			setState(1705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHAR || _la==CHARACTER || _la==INT || _la==NUMBER || _la==OBJECT || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & 8841L) != 0) || ((((_la - 838)) & ~0x3f) == 0 && ((1L << (_la - 838)) & 4294934525L) != 0)) {
				{
				setState(1704);
				data_type_list();
				}
			}

			setState(1707);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommitContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(SnowflakeParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(SnowflakeParser.WORK, 0); }
		public CommitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCommit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCommit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCommit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommitContext commit() throws RecognitionException {
		CommitContext _localctx = new CommitContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_commit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1709);
			match(COMMIT);
			setState(1711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(1710);
				match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Execute_immediateContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(SnowflakeParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SnowflakeParser.IMMEDIATE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ID2() { return getToken(SnowflakeParser.ID2, 0); }
		public TerminalNode USING() { return getToken(SnowflakeParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode DBL_DOLLAR() { return getToken(SnowflakeParser.DBL_DOLLAR, 0); }
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterExecute_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitExecute_immediate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitExecute_immediate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_execute_immediate);
		int _la;
		try {
			setState(1737);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1713);
				match(EXECUTE);
				setState(1714);
				match(IMMEDIATE);
				setState(1718);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
				case 1:
					{
					setState(1715);
					string();
					}
					break;
				case 2:
					{
					setState(1716);
					id_();
					}
					break;
				case 3:
					{
					setState(1717);
					match(ID2);
					}
					break;
				}
				setState(1732);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1720);
					match(USING);
					setState(1721);
					match(LR_BRACKET);
					setState(1722);
					id_();
					setState(1727);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1723);
						match(COMMA);
						setState(1724);
						id_();
						}
						}
						setState(1729);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1730);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1734);
				match(EXECUTE);
				setState(1735);
				match(IMMEDIATE);
				setState(1736);
				match(DBL_DOLLAR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Execute_taskContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(SnowflakeParser.EXECUTE, 0); }
		public TerminalNode TASK() { return getToken(SnowflakeParser.TASK, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Execute_taskContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_task; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterExecute_task(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitExecute_task(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitExecute_task(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_taskContext execute_task() throws RecognitionException {
		Execute_taskContext _localctx = new Execute_taskContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_execute_task);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1739);
			match(EXECUTE);
			setState(1740);
			match(TASK);
			setState(1741);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExplainContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(SnowflakeParser.EXPLAIN, 0); }
		public Sql_commandContext sql_command() {
			return getRuleContext(Sql_commandContext.class,0);
		}
		public TerminalNode USING() { return getToken(SnowflakeParser.USING, 0); }
		public TerminalNode TABULAR() { return getToken(SnowflakeParser.TABULAR, 0); }
		public TerminalNode JSON() { return getToken(SnowflakeParser.JSON, 0); }
		public TerminalNode TEXT() { return getToken(SnowflakeParser.TEXT, 0); }
		public ExplainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterExplain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitExplain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitExplain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainContext explain() throws RecognitionException {
		ExplainContext _localctx = new ExplainContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_explain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1743);
			match(EXPLAIN);
			setState(1746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1744);
				match(USING);
				setState(1745);
				_la = _input.LA(1);
				if ( !(_la==JSON || _la==TABULAR || _la==TEXT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1748);
			sql_command();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParallelContext extends ParserRuleContext {
		public TerminalNode PARALLEL() { return getToken(SnowflakeParser.PARALLEL, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public ParallelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterParallel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitParallel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitParallel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParallelContext parallel() throws RecognitionException {
		ParallelContext _localctx = new ParallelContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_parallel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1750);
			match(PARALLEL);
			setState(1751);
			match(EQ);
			setState(1752);
			num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Get_dmlContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(SnowflakeParser.GET, 0); }
		public TerminalNode FILE_PATH() { return getToken(SnowflakeParser.FILE_PATH, 0); }
		public Named_stageContext named_stage() {
			return getRuleContext(Named_stageContext.class,0);
		}
		public User_stageContext user_stage() {
			return getRuleContext(User_stageContext.class,0);
		}
		public Table_stageContext table_stage() {
			return getRuleContext(Table_stageContext.class,0);
		}
		public ParallelContext parallel() {
			return getRuleContext(ParallelContext.class,0);
		}
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public Get_dmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_dml; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterGet_dml(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitGet_dml(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitGet_dml(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_dmlContext get_dml() throws RecognitionException {
		Get_dmlContext _localctx = new Get_dmlContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_get_dml);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1754);
			match(GET);
			setState(1758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				{
				setState(1755);
				named_stage();
				}
				break;
			case 2:
				{
				setState(1756);
				user_stage();
				}
				break;
			case 3:
				{
				setState(1757);
				table_stage();
				}
				break;
			}
			setState(1760);
			match(FILE_PATH);
			setState(1762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARALLEL) {
				{
				setState(1761);
				parallel();
				}
			}

			setState(1765);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PATTERN) {
				{
				setState(1764);
				pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_ownershipContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(SnowflakeParser.GRANT, 0); }
		public TerminalNode OWNERSHIP() { return getToken(SnowflakeParser.OWNERSHIP, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public TerminalNode ROLE() { return getToken(SnowflakeParser.ROLE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public TerminalNode FUTURE() { return getToken(SnowflakeParser.FUTURE, 0); }
		public Object_type_pluralContext object_type_plural() {
			return getRuleContext(Object_type_pluralContext.class,0);
		}
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode CURRENT() { return getToken(SnowflakeParser.CURRENT, 0); }
		public TerminalNode GRANTS() { return getToken(SnowflakeParser.GRANTS, 0); }
		public Object_type_nameContext object_type_name() {
			return getRuleContext(Object_type_nameContext.class,0);
		}
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SnowflakeParser.ALL, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(SnowflakeParser.REVOKE, 0); }
		public TerminalNode COPY() { return getToken(SnowflakeParser.COPY, 0); }
		public Grant_ownershipContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_ownership; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterGrant_ownership(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitGrant_ownership(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitGrant_ownership(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_ownershipContext grant_ownership() throws RecognitionException {
		Grant_ownershipContext _localctx = new Grant_ownershipContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_grant_ownership);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1767);
			match(GRANT);
			setState(1768);
			match(OWNERSHIP);
			setState(1794);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				setState(1769);
				match(ON);
				setState(1782);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
				case FILE:
				case FUNCTION:
				case INTEGRATION:
				case MASKING:
				case NETWORK:
				case PIPE:
				case PROCEDURE:
				case ROLE:
				case ROW:
				case SCHEMA:
				case SEQUENCE:
				case SESSION:
				case STAGE:
				case STREAM:
				case TABLE:
				case TAG:
				case TASK:
				case USER:
				case VIEW:
				case WAREHOUSE:
					{
					setState(1770);
					object_type_name();
					setState(1771);
					object_name();
					}
					break;
				case ALL:
					{
					setState(1773);
					match(ALL);
					setState(1774);
					object_type_plural();
					setState(1775);
					match(IN);
					setState(1780);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DATABASE:
						{
						setState(1776);
						match(DATABASE);
						setState(1777);
						id_();
						}
						break;
					case SCHEMA:
						{
						setState(1778);
						match(SCHEMA);
						setState(1779);
						schema_name();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(1784);
				match(ON);
				setState(1785);
				match(FUTURE);
				setState(1786);
				object_type_plural();
				setState(1787);
				match(IN);
				setState(1792);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
					{
					setState(1788);
					match(DATABASE);
					setState(1789);
					id_();
					}
					break;
				case SCHEMA:
					{
					setState(1790);
					match(SCHEMA);
					setState(1791);
					schema_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(1796);
			match(TO);
			setState(1797);
			match(ROLE);
			setState(1798);
			id_();
			setState(1802);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COPY || _la==REVOKE) {
				{
				setState(1799);
				_la = _input.LA(1);
				if ( !(_la==COPY || _la==REVOKE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1800);
				match(CURRENT);
				setState(1801);
				match(GRANTS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_to_roleContext extends ParserRuleContext {
		public List<TerminalNode> GRANT() { return getTokens(SnowflakeParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(SnowflakeParser.GRANT, i);
		}
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode FUTURE() { return getToken(SnowflakeParser.FUTURE, 0); }
		public TerminalNode SCHEMAS() { return getToken(SnowflakeParser.SCHEMAS, 0); }
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Object_type_pluralContext object_type_plural() {
			return getRuleContext(Object_type_pluralContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(SnowflakeParser.ROLE, 0); }
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(SnowflakeParser.OPTION, 0); }
		public Global_privilegesContext global_privileges() {
			return getRuleContext(Global_privilegesContext.class,0);
		}
		public List<TerminalNode> ALL() { return getTokens(SnowflakeParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(SnowflakeParser.ALL, i);
		}
		public Account_object_privilegesContext account_object_privileges() {
			return getRuleContext(Account_object_privilegesContext.class,0);
		}
		public TerminalNode USER() { return getToken(SnowflakeParser.USER, 0); }
		public TerminalNode RESOURCE() { return getToken(SnowflakeParser.RESOURCE, 0); }
		public TerminalNode MONITOR() { return getToken(SnowflakeParser.MONITOR, 0); }
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Schema_privilegesContext schema_privileges() {
			return getRuleContext(Schema_privilegesContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Schema_object_privilegesContext schema_object_privileges() {
			return getRuleContext(Schema_object_privilegesContext.class,0);
		}
		public Object_typeContext object_type() {
			return getRuleContext(Object_typeContext.class,0);
		}
		public TerminalNode PRIVILEGES() { return getToken(SnowflakeParser.PRIVILEGES, 0); }
		public Grant_to_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_to_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterGrant_to_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitGrant_to_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitGrant_to_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_to_roleContext grant_to_role() throws RecognitionException {
		Grant_to_roleContext _localctx = new Grant_to_roleContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_grant_to_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1804);
			match(GRANT);
			setState(1900);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				setState(1810);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case APPLY:
				case ATTACH:
				case CREATE:
				case EXECUTE:
				case IMPORT:
				case MANAGE:
				case MONITOR:
				case OVERRIDE:
					{
					setState(1805);
					global_privileges();
					}
					break;
				case ALL:
					{
					setState(1806);
					match(ALL);
					setState(1808);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1807);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1812);
				match(ON);
				setState(1813);
				match(ACCOUNT);
				}
				break;
			case 2:
				{
				setState(1819);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CREATE:
				case IMPORTED:
				case MODIFY:
				case MONITOR:
				case OPERATE:
				case USAGE:
				case USE_ANY_ROLE:
					{
					setState(1814);
					account_object_privileges();
					}
					break;
				case ALL:
					{
					setState(1815);
					match(ALL);
					setState(1817);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1816);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1821);
				match(ON);
				setState(1828);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case USER:
					{
					setState(1822);
					match(USER);
					}
					break;
				case RESOURCE:
					{
					setState(1823);
					match(RESOURCE);
					setState(1824);
					match(MONITOR);
					}
					break;
				case WAREHOUSE:
					{
					setState(1825);
					match(WAREHOUSE);
					}
					break;
				case DATABASE:
					{
					setState(1826);
					match(DATABASE);
					}
					break;
				case INTEGRATION:
					{
					setState(1827);
					match(INTEGRATION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1830);
				object_name();
				}
				break;
			case 3:
				{
				setState(1836);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case CREATE:
				case MODIFY:
				case MONITOR:
				case USAGE:
					{
					setState(1831);
					schema_privileges();
					}
					break;
				case ALL:
					{
					setState(1832);
					match(ALL);
					setState(1834);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1833);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1838);
				match(ON);
				setState(1846);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SCHEMA:
					{
					setState(1839);
					match(SCHEMA);
					setState(1840);
					schema_name();
					}
					break;
				case ALL:
					{
					setState(1841);
					match(ALL);
					setState(1842);
					match(SCHEMAS);
					setState(1843);
					match(IN);
					setState(1844);
					match(DATABASE);
					setState(1845);
					id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				{
				setState(1853);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case CREATE:
				case MODIFY:
				case MONITOR:
				case USAGE:
					{
					setState(1848);
					schema_privileges();
					}
					break;
				case ALL:
					{
					setState(1849);
					match(ALL);
					setState(1851);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1850);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1855);
				match(ON);
				setState(1856);
				match(FUTURE);
				setState(1857);
				match(SCHEMAS);
				setState(1858);
				match(IN);
				setState(1859);
				match(DATABASE);
				setState(1860);
				id_();
				}
				break;
			case 5:
				{
				setState(1866);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case APPLY:
				case DELETE:
				case INSERT:
				case MONITOR:
				case OPERATE:
				case READ:
				case REFERENCES:
				case SELECT:
				case TRUNCATE:
				case UPDATE:
				case USAGE:
					{
					setState(1861);
					schema_object_privileges();
					}
					break;
				case ALL:
					{
					setState(1862);
					match(ALL);
					setState(1864);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1863);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1868);
				match(ON);
				setState(1881);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACCOUNT:
				case DATABASES:
				case INTEGRATIONS:
				case NETWORK:
				case RESOURCE:
				case ROLES:
				case SHARES:
				case USERS:
				case WAREHOUSES:
					{
					setState(1869);
					object_type();
					setState(1870);
					object_name();
					}
					break;
				case ALL:
					{
					setState(1872);
					match(ALL);
					setState(1873);
					object_type_plural();
					setState(1874);
					match(IN);
					setState(1879);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DATABASE:
						{
						setState(1875);
						match(DATABASE);
						setState(1876);
						id_();
						}
						break;
					case SCHEMA:
						{
						setState(1877);
						match(SCHEMA);
						setState(1878);
						schema_name();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				{
				setState(1888);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case APPLY:
				case DELETE:
				case INSERT:
				case MONITOR:
				case OPERATE:
				case READ:
				case REFERENCES:
				case SELECT:
				case TRUNCATE:
				case UPDATE:
				case USAGE:
					{
					setState(1883);
					schema_object_privileges();
					}
					break;
				case ALL:
					{
					setState(1884);
					match(ALL);
					setState(1886);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1885);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1890);
				match(ON);
				setState(1891);
				match(FUTURE);
				setState(1892);
				object_type_plural();
				setState(1893);
				match(IN);
				setState(1898);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
					{
					setState(1894);
					match(DATABASE);
					setState(1895);
					id_();
					}
					break;
				case SCHEMA:
					{
					setState(1896);
					match(SCHEMA);
					setState(1897);
					schema_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(1902);
			match(TO);
			setState(1904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				{
				setState(1903);
				match(ROLE);
				}
				break;
			}
			setState(1906);
			id_();
			setState(1910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1907);
				match(WITH);
				setState(1908);
				match(GRANT);
				setState(1909);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Global_privilegesContext extends ParserRuleContext {
		public List<Global_privilegeContext> global_privilege() {
			return getRuleContexts(Global_privilegeContext.class);
		}
		public Global_privilegeContext global_privilege(int i) {
			return getRuleContext(Global_privilegeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Global_privilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_global_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterGlobal_privileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitGlobal_privileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitGlobal_privileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Global_privilegesContext global_privileges() throws RecognitionException {
		Global_privilegesContext _localctx = new Global_privilegesContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_global_privileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1912);
			global_privilege();
			setState(1917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1913);
				match(COMMA);
				setState(1914);
				global_privilege();
				}
				}
				setState(1919);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Global_privilegeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode DATA() { return getToken(SnowflakeParser.DATA, 0); }
		public TerminalNode EXCHANGE() { return getToken(SnowflakeParser.EXCHANGE, 0); }
		public TerminalNode LISTING() { return getToken(SnowflakeParser.LISTING, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public TerminalNode NETWORK() { return getToken(SnowflakeParser.NETWORK, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public TerminalNode ROLE() { return getToken(SnowflakeParser.ROLE, 0); }
		public TerminalNode SHARE() { return getToken(SnowflakeParser.SHARE, 0); }
		public TerminalNode USER() { return getToken(SnowflakeParser.USER, 0); }
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public TerminalNode APPLY() { return getToken(SnowflakeParser.APPLY, 0); }
		public TerminalNode MASKING() { return getToken(SnowflakeParser.MASKING, 0); }
		public TerminalNode ROW() { return getToken(SnowflakeParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(SnowflakeParser.ACCESS, 0); }
		public TerminalNode SESSION() { return getToken(SnowflakeParser.SESSION, 0); }
		public TerminalNode TAG() { return getToken(SnowflakeParser.TAG, 0); }
		public TerminalNode ATTACH() { return getToken(SnowflakeParser.ATTACH, 0); }
		public TerminalNode EXECUTE() { return getToken(SnowflakeParser.EXECUTE, 0); }
		public TerminalNode TASK() { return getToken(SnowflakeParser.TASK, 0); }
		public TerminalNode IMPORT() { return getToken(SnowflakeParser.IMPORT, 0); }
		public TerminalNode MANAGE() { return getToken(SnowflakeParser.MANAGE, 0); }
		public TerminalNode GRANTS() { return getToken(SnowflakeParser.GRANTS, 0); }
		public TerminalNode MONITOR() { return getToken(SnowflakeParser.MONITOR, 0); }
		public TerminalNode OVERRIDE() { return getToken(SnowflakeParser.OVERRIDE, 0); }
		public TerminalNode RESTRICTIONS() { return getToken(SnowflakeParser.RESTRICTIONS, 0); }
		public TerminalNode EXECUTION() { return getToken(SnowflakeParser.EXECUTION, 0); }
		public TerminalNode USAGE() { return getToken(SnowflakeParser.USAGE, 0); }
		public Global_privilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_global_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterGlobal_privilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitGlobal_privilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitGlobal_privilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Global_privilegeContext global_privilege() throws RecognitionException {
		Global_privilegeContext _localctx = new Global_privilegeContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_global_privilege);
		int _la;
		try {
			setState(1964);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1920);
				match(CREATE);
				setState(1933);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACCOUNT:
					{
					setState(1921);
					match(ACCOUNT);
					}
					break;
				case DATA:
					{
					setState(1922);
					match(DATA);
					setState(1923);
					match(EXCHANGE);
					setState(1924);
					match(LISTING);
					}
					break;
				case DATABASE:
					{
					setState(1925);
					match(DATABASE);
					}
					break;
				case INTEGRATION:
					{
					setState(1926);
					match(INTEGRATION);
					}
					break;
				case NETWORK:
					{
					setState(1927);
					match(NETWORK);
					setState(1928);
					match(POLICY);
					}
					break;
				case ROLE:
					{
					setState(1929);
					match(ROLE);
					}
					break;
				case SHARE:
					{
					setState(1930);
					match(SHARE);
					}
					break;
				case USER:
					{
					setState(1931);
					match(USER);
					}
					break;
				case WAREHOUSE:
					{
					setState(1932);
					match(WAREHOUSE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case APPLY:
			case ATTACH:
				enterOuterAlt(_localctx, 2);
				{
				setState(1949);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					setState(1935);
					match(APPLY);
					setState(1936);
					match(MASKING);
					setState(1937);
					match(POLICY);
					}
					break;
				case 2:
					{
					setState(1938);
					match(APPLY);
					setState(1939);
					match(ROW);
					setState(1940);
					match(ACCESS);
					setState(1941);
					match(POLICY);
					}
					break;
				case 3:
					{
					setState(1942);
					match(APPLY);
					setState(1943);
					match(SESSION);
					setState(1944);
					match(POLICY);
					}
					break;
				case 4:
					{
					setState(1945);
					match(APPLY);
					setState(1946);
					match(TAG);
					}
					break;
				case 5:
					{
					setState(1947);
					match(ATTACH);
					setState(1948);
					match(POLICY);
					}
					break;
				}
				}
				break;
			case EXECUTE:
			case IMPORT:
			case MANAGE:
			case MONITOR:
			case OVERRIDE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1962);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EXECUTE:
					{
					setState(1951);
					match(EXECUTE);
					setState(1952);
					match(TASK);
					}
					break;
				case IMPORT:
					{
					setState(1953);
					match(IMPORT);
					setState(1954);
					match(SHARE);
					}
					break;
				case MANAGE:
					{
					setState(1955);
					match(MANAGE);
					setState(1956);
					match(GRANTS);
					}
					break;
				case MONITOR:
					{
					setState(1957);
					match(MONITOR);
					setState(1958);
					_la = _input.LA(1);
					if ( !(_la==EXECUTION || _la==USAGE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case OVERRIDE:
					{
					setState(1959);
					match(OVERRIDE);
					setState(1960);
					match(SHARE);
					setState(1961);
					match(RESTRICTIONS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Account_object_privilegesContext extends ParserRuleContext {
		public List<Account_object_privilegeContext> account_object_privilege() {
			return getRuleContexts(Account_object_privilegeContext.class);
		}
		public Account_object_privilegeContext account_object_privilege(int i) {
			return getRuleContext(Account_object_privilegeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Account_object_privilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_account_object_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAccount_object_privileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAccount_object_privileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAccount_object_privileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Account_object_privilegesContext account_object_privileges() throws RecognitionException {
		Account_object_privilegesContext _localctx = new Account_object_privilegesContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_account_object_privileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1966);
			account_object_privilege();
			setState(1971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1967);
				match(COMMA);
				setState(1968);
				account_object_privilege();
				}
				}
				setState(1973);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Account_object_privilegeContext extends ParserRuleContext {
		public TerminalNode MONITOR() { return getToken(SnowflakeParser.MONITOR, 0); }
		public TerminalNode MODIFY() { return getToken(SnowflakeParser.MODIFY, 0); }
		public TerminalNode USAGE() { return getToken(SnowflakeParser.USAGE, 0); }
		public TerminalNode OPERATE() { return getToken(SnowflakeParser.OPERATE, 0); }
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public TerminalNode IMPORTED() { return getToken(SnowflakeParser.IMPORTED, 0); }
		public TerminalNode PRIVILEGES() { return getToken(SnowflakeParser.PRIVILEGES, 0); }
		public TerminalNode USE_ANY_ROLE() { return getToken(SnowflakeParser.USE_ANY_ROLE, 0); }
		public Account_object_privilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_account_object_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAccount_object_privilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAccount_object_privilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAccount_object_privilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Account_object_privilegeContext account_object_privilege() throws RecognitionException {
		Account_object_privilegeContext _localctx = new Account_object_privilegeContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_account_object_privilege);
		try {
			setState(1983);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MONITOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(1974);
				match(MONITOR);
				}
				break;
			case MODIFY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1975);
				match(MODIFY);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1976);
				match(USAGE);
				}
				break;
			case OPERATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1977);
				match(OPERATE);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1978);
				match(CREATE);
				setState(1979);
				match(SCHEMA);
				}
				break;
			case IMPORTED:
				enterOuterAlt(_localctx, 6);
				{
				setState(1980);
				match(IMPORTED);
				setState(1981);
				match(PRIVILEGES);
				}
				break;
			case USE_ANY_ROLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1982);
				match(USE_ANY_ROLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Schema_privilegesContext extends ParserRuleContext {
		public List<Schema_privilegeContext> schema_privilege() {
			return getRuleContexts(Schema_privilegeContext.class);
		}
		public Schema_privilegeContext schema_privilege(int i) {
			return getRuleContext(Schema_privilegeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Schema_privilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSchema_privileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSchema_privileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSchema_privileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_privilegesContext schema_privileges() throws RecognitionException {
		Schema_privilegesContext _localctx = new Schema_privilegesContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_schema_privileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1985);
			schema_privilege();
			setState(1990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1986);
				match(COMMA);
				setState(1987);
				schema_privilege();
				}
				}
				setState(1992);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Schema_privilegeContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(SnowflakeParser.MODIFY, 0); }
		public TerminalNode MONITOR() { return getToken(SnowflakeParser.MONITOR, 0); }
		public TerminalNode USAGE() { return getToken(SnowflakeParser.USAGE, 0); }
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public TerminalNode EXTERNAL() { return getToken(SnowflakeParser.EXTERNAL, 0); }
		public TerminalNode VIEW() { return getToken(SnowflakeParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(SnowflakeParser.MATERIALIZED, 0); }
		public TerminalNode MASKING() { return getToken(SnowflakeParser.MASKING, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public TerminalNode ROW() { return getToken(SnowflakeParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(SnowflakeParser.ACCESS, 0); }
		public TerminalNode SESSION() { return getToken(SnowflakeParser.SESSION, 0); }
		public TerminalNode TAG() { return getToken(SnowflakeParser.TAG, 0); }
		public TerminalNode SEQUENCE() { return getToken(SnowflakeParser.SEQUENCE, 0); }
		public TerminalNode FUNCTION() { return getToken(SnowflakeParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(SnowflakeParser.PROCEDURE, 0); }
		public TerminalNode FILE() { return getToken(SnowflakeParser.FILE, 0); }
		public TerminalNode FORMAT() { return getToken(SnowflakeParser.FORMAT, 0); }
		public TerminalNode STAGE() { return getToken(SnowflakeParser.STAGE, 0); }
		public TerminalNode PIPE() { return getToken(SnowflakeParser.PIPE, 0); }
		public TerminalNode STREAM() { return getToken(SnowflakeParser.STREAM, 0); }
		public TerminalNode TASK() { return getToken(SnowflakeParser.TASK, 0); }
		public TerminalNode ADD() { return getToken(SnowflakeParser.ADD, 0); }
		public TerminalNode SEARCH() { return getToken(SnowflakeParser.SEARCH, 0); }
		public TerminalNode OPTIMIZATION() { return getToken(SnowflakeParser.OPTIMIZATION, 0); }
		public Schema_privilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSchema_privilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSchema_privilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSchema_privilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_privilegeContext schema_privilege() throws RecognitionException {
		Schema_privilegeContext _localctx = new Schema_privilegeContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_schema_privilege);
		try {
			setState(2025);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODIFY:
				enterOuterAlt(_localctx, 1);
				{
				setState(1993);
				match(MODIFY);
				}
				break;
			case MONITOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1994);
				match(MONITOR);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1995);
				match(USAGE);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1996);
				match(CREATE);
				setState(2020);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TABLE:
					{
					setState(1997);
					match(TABLE);
					}
					break;
				case EXTERNAL:
					{
					setState(1998);
					match(EXTERNAL);
					setState(1999);
					match(TABLE);
					}
					break;
				case VIEW:
					{
					setState(2000);
					match(VIEW);
					}
					break;
				case MATERIALIZED:
					{
					setState(2001);
					match(MATERIALIZED);
					setState(2002);
					match(VIEW);
					}
					break;
				case MASKING:
					{
					setState(2003);
					match(MASKING);
					setState(2004);
					match(POLICY);
					}
					break;
				case ROW:
					{
					setState(2005);
					match(ROW);
					setState(2006);
					match(ACCESS);
					setState(2007);
					match(POLICY);
					}
					break;
				case SESSION:
					{
					setState(2008);
					match(SESSION);
					setState(2009);
					match(POLICY);
					}
					break;
				case TAG:
					{
					setState(2010);
					match(TAG);
					}
					break;
				case SEQUENCE:
					{
					setState(2011);
					match(SEQUENCE);
					}
					break;
				case FUNCTION:
					{
					setState(2012);
					match(FUNCTION);
					}
					break;
				case PROCEDURE:
					{
					setState(2013);
					match(PROCEDURE);
					}
					break;
				case FILE:
					{
					setState(2014);
					match(FILE);
					setState(2015);
					match(FORMAT);
					}
					break;
				case STAGE:
					{
					setState(2016);
					match(STAGE);
					}
					break;
				case PIPE:
					{
					setState(2017);
					match(PIPE);
					}
					break;
				case STREAM:
					{
					setState(2018);
					match(STREAM);
					}
					break;
				case TASK:
					{
					setState(2019);
					match(TASK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ADD:
				enterOuterAlt(_localctx, 5);
				{
				setState(2022);
				match(ADD);
				setState(2023);
				match(SEARCH);
				setState(2024);
				match(OPTIMIZATION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Schema_object_privilegesContext extends ParserRuleContext {
		public List<Schema_object_privilegeContext> schema_object_privilege() {
			return getRuleContexts(Schema_object_privilegeContext.class);
		}
		public Schema_object_privilegeContext schema_object_privilege(int i) {
			return getRuleContext(Schema_object_privilegeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Schema_object_privilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_object_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSchema_object_privileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSchema_object_privileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSchema_object_privileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_object_privilegesContext schema_object_privileges() throws RecognitionException {
		Schema_object_privilegesContext _localctx = new Schema_object_privilegesContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_schema_object_privileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2027);
			schema_object_privilege();
			setState(2032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2028);
				match(COMMA);
				setState(2029);
				schema_object_privilege();
				}
				}
				setState(2034);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Schema_object_privilegeContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(SnowflakeParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(SnowflakeParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(SnowflakeParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(SnowflakeParser.DELETE, 0); }
		public TerminalNode TRUNCATE() { return getToken(SnowflakeParser.TRUNCATE, 0); }
		public TerminalNode REFERENCES() { return getToken(SnowflakeParser.REFERENCES, 0); }
		public TerminalNode USAGE() { return getToken(SnowflakeParser.USAGE, 0); }
		public TerminalNode READ() { return getToken(SnowflakeParser.READ, 0); }
		public TerminalNode COMMA() { return getToken(SnowflakeParser.COMMA, 0); }
		public TerminalNode WRITE() { return getToken(SnowflakeParser.WRITE, 0); }
		public TerminalNode MONITOR() { return getToken(SnowflakeParser.MONITOR, 0); }
		public TerminalNode OPERATE() { return getToken(SnowflakeParser.OPERATE, 0); }
		public TerminalNode APPLY() { return getToken(SnowflakeParser.APPLY, 0); }
		public Schema_object_privilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_object_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSchema_object_privilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSchema_object_privilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSchema_object_privilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_object_privilegeContext schema_object_privilege() throws RecognitionException {
		Schema_object_privilegeContext _localctx = new Schema_object_privilegeContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_schema_object_privilege);
		try {
			setState(2050);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2035);
				match(SELECT);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2036);
				match(INSERT);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2037);
				match(UPDATE);
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2038);
				match(DELETE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2039);
				match(TRUNCATE);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 6);
				{
				setState(2040);
				match(REFERENCES);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2041);
				match(USAGE);
				}
				break;
			case READ:
				enterOuterAlt(_localctx, 8);
				{
				setState(2042);
				match(READ);
				setState(2045);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
				case 1:
					{
					setState(2043);
					match(COMMA);
					setState(2044);
					match(WRITE);
					}
					break;
				}
				}
				break;
			case MONITOR:
				enterOuterAlt(_localctx, 9);
				{
				setState(2047);
				match(MONITOR);
				}
				break;
			case OPERATE:
				enterOuterAlt(_localctx, 10);
				{
				setState(2048);
				match(OPERATE);
				}
				break;
			case APPLY:
				enterOuterAlt(_localctx, 11);
				{
				setState(2049);
				match(APPLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_to_shareContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(SnowflakeParser.GRANT, 0); }
		public Object_privilegeContext object_privilege() {
			return getRuleContext(Object_privilegeContext.class,0);
		}
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public TerminalNode SHARE() { return getToken(SnowflakeParser.SHARE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public TerminalNode FUNCTION() { return getToken(SnowflakeParser.FUNCTION, 0); }
		public TerminalNode VIEW() { return getToken(SnowflakeParser.VIEW, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SnowflakeParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(SnowflakeParser.TABLES, 0); }
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Grant_to_shareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_to_share; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterGrant_to_share(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitGrant_to_share(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitGrant_to_share(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_to_shareContext grant_to_share() throws RecognitionException {
		Grant_to_shareContext _localctx = new Grant_to_shareContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_grant_to_share);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2052);
			match(GRANT);
			setState(2053);
			object_privilege();
			setState(2054);
			match(ON);
			setState(2072);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
				{
				setState(2055);
				match(DATABASE);
				setState(2056);
				id_();
				}
				break;
			case SCHEMA:
				{
				setState(2057);
				match(SCHEMA);
				setState(2058);
				id_();
				}
				break;
			case FUNCTION:
				{
				setState(2059);
				match(FUNCTION);
				setState(2060);
				id_();
				}
				break;
			case ALL:
			case TABLE:
				{
				setState(2068);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TABLE:
					{
					setState(2061);
					match(TABLE);
					setState(2062);
					object_name();
					}
					break;
				case ALL:
					{
					setState(2063);
					match(ALL);
					setState(2064);
					match(TABLES);
					setState(2065);
					match(IN);
					setState(2066);
					match(SCHEMA);
					setState(2067);
					schema_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case VIEW:
				{
				setState(2070);
				match(VIEW);
				setState(2071);
				id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2074);
			match(TO);
			setState(2075);
			match(SHARE);
			setState(2076);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_privilegeContext extends ParserRuleContext {
		public TerminalNode USAGE() { return getToken(SnowflakeParser.USAGE, 0); }
		public TerminalNode SELECT() { return getToken(SnowflakeParser.SELECT, 0); }
		public TerminalNode REFERENCE_USAGE() { return getToken(SnowflakeParser.REFERENCE_USAGE, 0); }
		public Object_privilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterObject_privilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitObject_privilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitObject_privilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_privilegeContext object_privilege() throws RecognitionException {
		Object_privilegeContext _localctx = new Object_privilegeContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_object_privilege);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2078);
			_la = _input.LA(1);
			if ( !(_la==REFERENCE_USAGE || _la==SELECT || _la==USAGE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Grant_roleContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(SnowflakeParser.GRANT, 0); }
		public List<TerminalNode> ROLE() { return getTokens(SnowflakeParser.ROLE); }
		public TerminalNode ROLE(int i) {
			return getToken(SnowflakeParser.ROLE, i);
		}
		public List<Role_nameContext> role_name() {
			return getRuleContexts(Role_nameContext.class);
		}
		public Role_nameContext role_name(int i) {
			return getRuleContext(Role_nameContext.class,i);
		}
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public TerminalNode USER() { return getToken(SnowflakeParser.USER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Grant_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterGrant_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitGrant_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitGrant_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grant_roleContext grant_role() throws RecognitionException {
		Grant_roleContext _localctx = new Grant_roleContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_grant_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2080);
			match(GRANT);
			setState(2081);
			match(ROLE);
			setState(2082);
			role_name();
			setState(2083);
			match(TO);
			setState(2088);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
				{
				setState(2084);
				match(ROLE);
				setState(2085);
				role_name();
				}
				break;
			case USER:
				{
				setState(2086);
				match(USER);
				setState(2087);
				id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Role_nameContext extends ParserRuleContext {
		public System_defined_roleContext system_defined_role() {
			return getRuleContext(System_defined_roleContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Role_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterRole_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitRole_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitRole_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Role_nameContext role_name() throws RecognitionException {
		Role_nameContext _localctx = new Role_nameContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_role_name);
		try {
			setState(2092);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2090);
				system_defined_role();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2091);
				id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class System_defined_roleContext extends ParserRuleContext {
		public TerminalNode ORGADMIN() { return getToken(SnowflakeParser.ORGADMIN, 0); }
		public TerminalNode ACCOUNTADMIN() { return getToken(SnowflakeParser.ACCOUNTADMIN, 0); }
		public TerminalNode SECURITYADMIN() { return getToken(SnowflakeParser.SECURITYADMIN, 0); }
		public TerminalNode USERADMIN() { return getToken(SnowflakeParser.USERADMIN, 0); }
		public TerminalNode SYSADMIN() { return getToken(SnowflakeParser.SYSADMIN, 0); }
		public TerminalNode PUBLIC() { return getToken(SnowflakeParser.PUBLIC, 0); }
		public System_defined_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_system_defined_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSystem_defined_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSystem_defined_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSystem_defined_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final System_defined_roleContext system_defined_role() throws RecognitionException {
		System_defined_roleContext _localctx = new System_defined_roleContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_system_defined_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2094);
			_la = _input.LA(1);
			if ( !(_la==ACCOUNTADMIN || _la==ORGADMIN || _la==PUBLIC || _la==SECURITYADMIN || _la==SYSADMIN || _la==USERADMIN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListContext extends ParserRuleContext {
		public TerminalNode LIST() { return getToken(SnowflakeParser.LIST, 0); }
		public User_stageContext user_stage() {
			return getRuleContext(User_stageContext.class,0);
		}
		public Table_stageContext table_stage() {
			return getRuleContext(Table_stageContext.class,0);
		}
		public Named_stageContext named_stage() {
			return getRuleContext(Named_stageContext.class,0);
		}
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public ListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListContext list() throws RecognitionException {
		ListContext _localctx = new ListContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2096);
			match(LIST);
			setState(2100);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				setState(2097);
				user_stage();
				}
				break;
			case 2:
				{
				setState(2098);
				table_stage();
				}
				break;
			case 3:
				{
				setState(2099);
				named_stage();
				}
				break;
			}
			setState(2103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PATTERN) {
				{
				setState(2102);
				pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class User_stageContext extends ParserRuleContext {
		public TerminalNode AT() { return getToken(SnowflakeParser.AT, 0); }
		public TerminalNode TILDA() { return getToken(SnowflakeParser.TILDA, 0); }
		public Stage_pathContext stage_path() {
			return getRuleContext(Stage_pathContext.class,0);
		}
		public User_stageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_stage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterUser_stage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitUser_stage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitUser_stage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final User_stageContext user_stage() throws RecognitionException {
		User_stageContext _localctx = new User_stageContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_user_stage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2105);
			match(AT);
			setState(2106);
			match(TILDA);
			setState(2108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DIVIDE) {
				{
				setState(2107);
				stage_path();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_stageContext extends ParserRuleContext {
		public TerminalNode AT() { return getToken(SnowflakeParser.AT, 0); }
		public TerminalNode MODULE() { return getToken(SnowflakeParser.MODULE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Stage_pathContext stage_path() {
			return getRuleContext(Stage_pathContext.class,0);
		}
		public Table_stageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_stage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTable_stage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTable_stage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTable_stage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_stageContext table_stage() throws RecognitionException {
		Table_stageContext _localctx = new Table_stageContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_table_stage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2110);
			match(AT);
			setState(2112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
				{
				setState(2111);
				schema_name();
				}
			}

			setState(2114);
			match(MODULE);
			setState(2115);
			id_();
			setState(2117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DIVIDE) {
				{
				setState(2116);
				stage_path();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Named_stageContext extends ParserRuleContext {
		public TerminalNode AT() { return getToken(SnowflakeParser.AT, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Stage_pathContext stage_path() {
			return getRuleContext(Stage_pathContext.class,0);
		}
		public Named_stageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_named_stage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterNamed_stage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitNamed_stage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitNamed_stage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Named_stageContext named_stage() throws RecognitionException {
		Named_stageContext _localctx = new Named_stageContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_named_stage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2119);
			match(AT);
			setState(2120);
			object_name();
			setState(2122);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DIVIDE) {
				{
				setState(2121);
				stage_path();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stage_pathContext extends ParserRuleContext {
		public List<TerminalNode> DIVIDE() { return getTokens(SnowflakeParser.DIVIDE); }
		public TerminalNode DIVIDE(int i) {
			return getToken(SnowflakeParser.DIVIDE, i);
		}
		public List<TerminalNode> ID() { return getTokens(SnowflakeParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(SnowflakeParser.ID, i);
		}
		public Stage_pathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stage_path; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterStage_path(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitStage_path(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitStage_path(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stage_pathContext stage_path() throws RecognitionException {
		Stage_pathContext _localctx = new Stage_pathContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_stage_path);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2124);
			match(DIVIDE);
			setState(2136);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ID) {
				{
				setState(2125);
				match(ID);
				setState(2130);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,132,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2126);
						match(DIVIDE);
						setState(2127);
						match(ID);
						}
						} 
					}
					setState(2132);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,132,_ctx);
				}
				setState(2134);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DIVIDE) {
					{
					setState(2133);
					match(DIVIDE);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PutContext extends ParserRuleContext {
		public TerminalNode PUT() { return getToken(SnowflakeParser.PUT, 0); }
		public TerminalNode FILE_PATH() { return getToken(SnowflakeParser.FILE_PATH, 0); }
		public Table_stageContext table_stage() {
			return getRuleContext(Table_stageContext.class,0);
		}
		public User_stageContext user_stage() {
			return getRuleContext(User_stageContext.class,0);
		}
		public Named_stageContext named_stage() {
			return getRuleContext(Named_stageContext.class,0);
		}
		public TerminalNode PARALLEL() { return getToken(SnowflakeParser.PARALLEL, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode AUTO_COMPRESS() { return getToken(SnowflakeParser.AUTO_COMPRESS, 0); }
		public List<True_falseContext> true_false() {
			return getRuleContexts(True_falseContext.class);
		}
		public True_falseContext true_false(int i) {
			return getRuleContext(True_falseContext.class,i);
		}
		public TerminalNode SOURCE_COMPRESSION() { return getToken(SnowflakeParser.SOURCE_COMPRESSION, 0); }
		public TerminalNode OVERWRITE() { return getToken(SnowflakeParser.OVERWRITE, 0); }
		public TerminalNode AUTO_DETECT() { return getToken(SnowflakeParser.AUTO_DETECT, 0); }
		public TerminalNode GZIP() { return getToken(SnowflakeParser.GZIP, 0); }
		public TerminalNode BZ2() { return getToken(SnowflakeParser.BZ2, 0); }
		public TerminalNode BROTLI() { return getToken(SnowflakeParser.BROTLI, 0); }
		public TerminalNode ZSTD() { return getToken(SnowflakeParser.ZSTD, 0); }
		public TerminalNode DEFLATE() { return getToken(SnowflakeParser.DEFLATE, 0); }
		public TerminalNode RAW_DEFLATE() { return getToken(SnowflakeParser.RAW_DEFLATE, 0); }
		public TerminalNode NONE() { return getToken(SnowflakeParser.NONE, 0); }
		public PutContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_put; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterPut(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitPut(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitPut(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PutContext put() throws RecognitionException {
		PutContext _localctx = new PutContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_put);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2138);
			match(PUT);
			setState(2139);
			match(FILE_PATH);
			setState(2143);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				setState(2140);
				table_stage();
				}
				break;
			case 2:
				{
				setState(2141);
				user_stage();
				}
				break;
			case 3:
				{
				setState(2142);
				named_stage();
				}
				break;
			}
			setState(2148);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARALLEL) {
				{
				setState(2145);
				match(PARALLEL);
				setState(2146);
				match(EQ);
				setState(2147);
				num();
				}
			}

			setState(2153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTO_COMPRESS) {
				{
				setState(2150);
				match(AUTO_COMPRESS);
				setState(2151);
				match(EQ);
				setState(2152);
				true_false();
				}
			}

			setState(2158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SOURCE_COMPRESSION) {
				{
				setState(2155);
				match(SOURCE_COMPRESSION);
				setState(2156);
				match(EQ);
				setState(2157);
				_la = _input.LA(1);
				if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & 4947802324993L) != 0) || _la==DEFLATE || _la==GZIP || _la==NONE || _la==RAW_DEFLATE || _la==ZSTD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVERWRITE) {
				{
				setState(2160);
				match(OVERWRITE);
				setState(2161);
				match(EQ);
				setState(2162);
				true_false();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemoveContext extends ParserRuleContext {
		public TerminalNode REMOVE() { return getToken(SnowflakeParser.REMOVE, 0); }
		public Table_stageContext table_stage() {
			return getRuleContext(Table_stageContext.class,0);
		}
		public User_stageContext user_stage() {
			return getRuleContext(User_stageContext.class,0);
		}
		public Named_stageContext named_stage() {
			return getRuleContext(Named_stageContext.class,0);
		}
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public RemoveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_remove; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterRemove(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitRemove(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitRemove(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RemoveContext remove() throws RecognitionException {
		RemoveContext _localctx = new RemoveContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_remove);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2165);
			match(REMOVE);
			setState(2169);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
			case 1:
				{
				setState(2166);
				table_stage();
				}
				break;
			case 2:
				{
				setState(2167);
				user_stage();
				}
				break;
			case 3:
				{
				setState(2168);
				named_stage();
				}
				break;
			}
			setState(2172);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PATTERN) {
				{
				setState(2171);
				pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_from_roleContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(SnowflakeParser.REVOKE, 0); }
		public TerminalNode FROM() { return getToken(SnowflakeParser.FROM, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode FUTURE() { return getToken(SnowflakeParser.FUTURE, 0); }
		public Object_type_pluralContext object_type_plural() {
			return getRuleContext(Object_type_pluralContext.class,0);
		}
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode GRANT() { return getToken(SnowflakeParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(SnowflakeParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(SnowflakeParser.FOR, 0); }
		public TerminalNode ROLE() { return getToken(SnowflakeParser.ROLE, 0); }
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Global_privilegeContext global_privilege() {
			return getRuleContext(Global_privilegeContext.class,0);
		}
		public List<TerminalNode> ALL() { return getTokens(SnowflakeParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(SnowflakeParser.ALL, i);
		}
		public Account_object_privilegesContext account_object_privileges() {
			return getRuleContext(Account_object_privilegesContext.class,0);
		}
		public TerminalNode RESOURCE() { return getToken(SnowflakeParser.RESOURCE, 0); }
		public TerminalNode MONITOR() { return getToken(SnowflakeParser.MONITOR, 0); }
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Schema_privilegesContext schema_privileges() {
			return getRuleContext(Schema_privilegesContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode SCHEMAS() { return getToken(SnowflakeParser.SCHEMAS, 0); }
		public Schema_object_privilegesContext schema_object_privileges() {
			return getRuleContext(Schema_object_privilegesContext.class,0);
		}
		public Object_typeContext object_type() {
			return getRuleContext(Object_typeContext.class,0);
		}
		public TerminalNode PRIVILEGES() { return getToken(SnowflakeParser.PRIVILEGES, 0); }
		public Revoke_from_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_from_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterRevoke_from_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitRevoke_from_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitRevoke_from_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_from_roleContext revoke_from_role() throws RecognitionException {
		Revoke_from_roleContext _localctx = new Revoke_from_roleContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_revoke_from_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2174);
			match(REVOKE);
			setState(2178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GRANT) {
				{
				setState(2175);
				match(GRANT);
				setState(2176);
				match(OPTION);
				setState(2177);
				match(FOR);
				}
			}

			setState(2270);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				setState(2185);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case APPLY:
				case ATTACH:
				case CREATE:
				case EXECUTE:
				case IMPORT:
				case MANAGE:
				case MONITOR:
				case OVERRIDE:
					{
					setState(2180);
					global_privilege();
					}
					break;
				case ALL:
					{
					setState(2181);
					match(ALL);
					setState(2183);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2182);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2187);
				match(ON);
				setState(2188);
				match(ACCOUNT);
				}
				break;
			case 2:
				{
				setState(2194);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CREATE:
				case IMPORTED:
				case MODIFY:
				case MONITOR:
				case OPERATE:
				case USAGE:
				case USE_ANY_ROLE:
					{
					setState(2189);
					account_object_privileges();
					}
					break;
				case ALL:
					{
					setState(2190);
					match(ALL);
					setState(2192);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2191);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2196);
				match(ON);
				setState(2202);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RESOURCE:
					{
					setState(2197);
					match(RESOURCE);
					setState(2198);
					match(MONITOR);
					}
					break;
				case WAREHOUSE:
					{
					setState(2199);
					match(WAREHOUSE);
					}
					break;
				case DATABASE:
					{
					setState(2200);
					match(DATABASE);
					}
					break;
				case INTEGRATION:
					{
					setState(2201);
					match(INTEGRATION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2204);
				object_name();
				}
				break;
			case 3:
				{
				setState(2210);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case CREATE:
				case MODIFY:
				case MONITOR:
				case USAGE:
					{
					setState(2205);
					schema_privileges();
					}
					break;
				case ALL:
					{
					setState(2206);
					match(ALL);
					setState(2208);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2207);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2212);
				match(ON);
				setState(2220);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SCHEMA:
					{
					setState(2213);
					match(SCHEMA);
					setState(2214);
					schema_name();
					}
					break;
				case ALL:
					{
					setState(2215);
					match(ALL);
					setState(2216);
					match(SCHEMAS);
					setState(2217);
					match(IN);
					setState(2218);
					match(DATABASE);
					setState(2219);
					id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				{
				setState(2227);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
				case CREATE:
				case MODIFY:
				case MONITOR:
				case USAGE:
					{
					setState(2222);
					schema_privileges();
					}
					break;
				case ALL:
					{
					setState(2223);
					match(ALL);
					setState(2225);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2224);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2229);
				match(ON);
				{
				setState(2230);
				match(FUTURE);
				setState(2231);
				match(SCHEMAS);
				setState(2232);
				match(IN);
				setState(2233);
				match(DATABASE);
				}
				}
				break;
			case 5:
				{
				setState(2239);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case APPLY:
				case DELETE:
				case INSERT:
				case MONITOR:
				case OPERATE:
				case READ:
				case REFERENCES:
				case SELECT:
				case TRUNCATE:
				case UPDATE:
				case USAGE:
					{
					setState(2234);
					schema_object_privileges();
					}
					break;
				case ALL:
					{
					setState(2235);
					match(ALL);
					setState(2237);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2236);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2241);
				match(ON);
				setState(2251);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACCOUNT:
				case DATABASES:
				case INTEGRATIONS:
				case NETWORK:
				case RESOURCE:
				case ROLES:
				case SHARES:
				case USERS:
				case WAREHOUSES:
					{
					setState(2242);
					object_type();
					setState(2243);
					object_name();
					}
					break;
				case ALL:
					{
					setState(2245);
					match(ALL);
					setState(2246);
					object_type_plural();
					setState(2247);
					match(IN);
					setState(2248);
					match(SCHEMA);
					setState(2249);
					schema_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				{
				setState(2258);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case APPLY:
				case DELETE:
				case INSERT:
				case MONITOR:
				case OPERATE:
				case READ:
				case REFERENCES:
				case SELECT:
				case TRUNCATE:
				case UPDATE:
				case USAGE:
					{
					setState(2253);
					schema_object_privileges();
					}
					break;
				case ALL:
					{
					setState(2254);
					match(ALL);
					setState(2256);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2255);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2260);
				match(ON);
				setState(2261);
				match(FUTURE);
				setState(2262);
				object_type_plural();
				setState(2263);
				match(IN);
				setState(2268);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATABASE:
					{
					setState(2264);
					match(DATABASE);
					setState(2265);
					id_();
					}
					break;
				case SCHEMA:
					{
					setState(2266);
					match(SCHEMA);
					setState(2267);
					schema_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(2272);
			match(FROM);
			setState(2274);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				setState(2273);
				match(ROLE);
				}
				break;
			}
			setState(2276);
			id_();
			setState(2278);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2277);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_from_shareContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(SnowflakeParser.REVOKE, 0); }
		public Object_privilegeContext object_privilege() {
			return getRuleContext(Object_privilegeContext.class,0);
		}
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public TerminalNode FROM() { return getToken(SnowflakeParser.FROM, 0); }
		public TerminalNode SHARE() { return getToken(SnowflakeParser.SHARE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SnowflakeParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(SnowflakeParser.TABLES, 0); }
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode VIEW() { return getToken(SnowflakeParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(SnowflakeParser.VIEWS, 0); }
		public Revoke_from_shareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_from_share; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterRevoke_from_share(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitRevoke_from_share(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitRevoke_from_share(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_from_shareContext revoke_from_share() throws RecognitionException {
		Revoke_from_shareContext _localctx = new Revoke_from_shareContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_revoke_from_share);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2280);
			match(REVOKE);
			setState(2281);
			object_privilege();
			setState(2282);
			match(ON);
			setState(2305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				{
				setState(2283);
				match(DATABASE);
				setState(2284);
				id_();
				}
				break;
			case 2:
				{
				setState(2285);
				match(SCHEMA);
				setState(2286);
				schema_name();
				}
				break;
			case 3:
				{
				setState(2294);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TABLE:
					{
					setState(2287);
					match(TABLE);
					setState(2288);
					object_name();
					}
					break;
				case ALL:
					{
					setState(2289);
					match(ALL);
					setState(2290);
					match(TABLES);
					setState(2291);
					match(IN);
					setState(2292);
					match(SCHEMA);
					setState(2293);
					schema_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				{
				setState(2303);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VIEW:
					{
					setState(2296);
					match(VIEW);
					setState(2297);
					object_name();
					}
					break;
				case ALL:
					{
					setState(2298);
					match(ALL);
					setState(2299);
					match(VIEWS);
					setState(2300);
					match(IN);
					setState(2301);
					match(SCHEMA);
					setState(2302);
					schema_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(2307);
			match(FROM);
			setState(2308);
			match(SHARE);
			setState(2309);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Revoke_roleContext extends ParserRuleContext {
		public TerminalNode REVOKE() { return getToken(SnowflakeParser.REVOKE, 0); }
		public List<TerminalNode> ROLE() { return getTokens(SnowflakeParser.ROLE); }
		public TerminalNode ROLE(int i) {
			return getToken(SnowflakeParser.ROLE, i);
		}
		public List<Role_nameContext> role_name() {
			return getRuleContexts(Role_nameContext.class);
		}
		public Role_nameContext role_name(int i) {
			return getRuleContext(Role_nameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(SnowflakeParser.FROM, 0); }
		public TerminalNode USER() { return getToken(SnowflakeParser.USER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Revoke_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterRevoke_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitRevoke_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitRevoke_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Revoke_roleContext revoke_role() throws RecognitionException {
		Revoke_roleContext _localctx = new Revoke_roleContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_revoke_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2311);
			match(REVOKE);
			setState(2312);
			match(ROLE);
			setState(2313);
			role_name();
			setState(2314);
			match(FROM);
			setState(2319);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
				{
				setState(2315);
				match(ROLE);
				setState(2316);
				role_name();
				}
				break;
			case USER:
				{
				setState(2317);
				match(USER);
				setState(2318);
				id_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RollbackContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(SnowflakeParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(SnowflakeParser.WORK, 0); }
		public RollbackContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterRollback(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitRollback(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitRollback(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollbackContext rollback() throws RecognitionException {
		RollbackContext _localctx = new RollbackContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_rollback);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2321);
			match(ROLLBACK);
			setState(2323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2322);
				match(WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public SetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetContext set() throws RecognitionException {
		SetContext _localctx = new SetContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_set);
		int _la;
		try {
			setState(2353);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2325);
				match(SET);
				setState(2326);
				id_();
				setState(2327);
				match(EQ);
				setState(2328);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2330);
				match(SET);
				setState(2331);
				match(LR_BRACKET);
				setState(2332);
				id_();
				setState(2337);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2333);
					match(COMMA);
					setState(2334);
					id_();
					}
					}
					setState(2339);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2340);
				match(RR_BRACKET);
				setState(2341);
				match(EQ);
				setState(2342);
				match(LR_BRACKET);
				setState(2343);
				expr(0);
				setState(2348);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2344);
					match(COMMA);
					setState(2345);
					expr(0);
					}
					}
					setState(2350);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2351);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Truncate_materialized_viewContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(SnowflakeParser.TRUNCATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(SnowflakeParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(SnowflakeParser.VIEW, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Truncate_materialized_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_materialized_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTruncate_materialized_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTruncate_materialized_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTruncate_materialized_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truncate_materialized_viewContext truncate_materialized_view() throws RecognitionException {
		Truncate_materialized_viewContext _localctx = new Truncate_materialized_viewContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_truncate_materialized_view);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2355);
			match(TRUNCATE);
			setState(2356);
			match(MATERIALIZED);
			setState(2357);
			match(VIEW);
			setState(2358);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Truncate_tableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(SnowflakeParser.TRUNCATE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Truncate_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTruncate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTruncate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTruncate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truncate_tableContext truncate_table() throws RecognitionException {
		Truncate_tableContext _localctx = new Truncate_tableContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_truncate_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2360);
			match(TRUNCATE);
			setState(2362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(2361);
				match(TABLE);
				}
			}

			setState(2365);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				setState(2364);
				if_exists();
				}
				break;
			}
			setState(2367);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnsetContext extends ParserRuleContext {
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public UnsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterUnset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitUnset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitUnset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnsetContext unset() throws RecognitionException {
		UnsetContext _localctx = new UnsetContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_unset);
		int _la;
		try {
			setState(2383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2369);
				match(UNSET);
				setState(2370);
				id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2371);
				match(UNSET);
				setState(2372);
				match(LR_BRACKET);
				setState(2373);
				id_();
				setState(2378);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2374);
					match(COMMA);
					setState(2375);
					id_();
					}
					}
					setState(2380);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2381);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_commandContext extends ParserRuleContext {
		public Alter_accountContext alter_account() {
			return getRuleContext(Alter_accountContext.class,0);
		}
		public Alter_alertContext alter_alert() {
			return getRuleContext(Alter_alertContext.class,0);
		}
		public Alter_api_integrationContext alter_api_integration() {
			return getRuleContext(Alter_api_integrationContext.class,0);
		}
		public Alter_connectionContext alter_connection() {
			return getRuleContext(Alter_connectionContext.class,0);
		}
		public Alter_databaseContext alter_database() {
			return getRuleContext(Alter_databaseContext.class,0);
		}
		public Alter_dynamic_tableContext alter_dynamic_table() {
			return getRuleContext(Alter_dynamic_tableContext.class,0);
		}
		public Alter_external_tableContext alter_external_table() {
			return getRuleContext(Alter_external_tableContext.class,0);
		}
		public Alter_failover_groupContext alter_failover_group() {
			return getRuleContext(Alter_failover_groupContext.class,0);
		}
		public Alter_file_formatContext alter_file_format() {
			return getRuleContext(Alter_file_formatContext.class,0);
		}
		public Alter_functionContext alter_function() {
			return getRuleContext(Alter_functionContext.class,0);
		}
		public Alter_masking_policyContext alter_masking_policy() {
			return getRuleContext(Alter_masking_policyContext.class,0);
		}
		public Alter_materialized_viewContext alter_materialized_view() {
			return getRuleContext(Alter_materialized_viewContext.class,0);
		}
		public Alter_network_policyContext alter_network_policy() {
			return getRuleContext(Alter_network_policyContext.class,0);
		}
		public Alter_notification_integrationContext alter_notification_integration() {
			return getRuleContext(Alter_notification_integrationContext.class,0);
		}
		public Alter_password_policyContext alter_password_policy() {
			return getRuleContext(Alter_password_policyContext.class,0);
		}
		public Alter_pipeContext alter_pipe() {
			return getRuleContext(Alter_pipeContext.class,0);
		}
		public Alter_procedureContext alter_procedure() {
			return getRuleContext(Alter_procedureContext.class,0);
		}
		public Alter_replication_groupContext alter_replication_group() {
			return getRuleContext(Alter_replication_groupContext.class,0);
		}
		public Alter_resource_monitorContext alter_resource_monitor() {
			return getRuleContext(Alter_resource_monitorContext.class,0);
		}
		public Alter_roleContext alter_role() {
			return getRuleContext(Alter_roleContext.class,0);
		}
		public Alter_row_access_policyContext alter_row_access_policy() {
			return getRuleContext(Alter_row_access_policyContext.class,0);
		}
		public Alter_schemaContext alter_schema() {
			return getRuleContext(Alter_schemaContext.class,0);
		}
		public Alter_security_integration_external_oauthContext alter_security_integration_external_oauth() {
			return getRuleContext(Alter_security_integration_external_oauthContext.class,0);
		}
		public Alter_security_integration_snowflake_oauthContext alter_security_integration_snowflake_oauth() {
			return getRuleContext(Alter_security_integration_snowflake_oauthContext.class,0);
		}
		public Alter_security_integration_saml2Context alter_security_integration_saml2() {
			return getRuleContext(Alter_security_integration_saml2Context.class,0);
		}
		public Alter_security_integration_scimContext alter_security_integration_scim() {
			return getRuleContext(Alter_security_integration_scimContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_sessionContext alter_session() {
			return getRuleContext(Alter_sessionContext.class,0);
		}
		public Alter_session_policyContext alter_session_policy() {
			return getRuleContext(Alter_session_policyContext.class,0);
		}
		public Alter_shareContext alter_share() {
			return getRuleContext(Alter_shareContext.class,0);
		}
		public Alter_stageContext alter_stage() {
			return getRuleContext(Alter_stageContext.class,0);
		}
		public Alter_storage_integrationContext alter_storage_integration() {
			return getRuleContext(Alter_storage_integrationContext.class,0);
		}
		public Alter_streamContext alter_stream() {
			return getRuleContext(Alter_streamContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Alter_table_alter_columnContext alter_table_alter_column() {
			return getRuleContext(Alter_table_alter_columnContext.class,0);
		}
		public Alter_tagContext alter_tag() {
			return getRuleContext(Alter_tagContext.class,0);
		}
		public Alter_taskContext alter_task() {
			return getRuleContext(Alter_taskContext.class,0);
		}
		public Alter_userContext alter_user() {
			return getRuleContext(Alter_userContext.class,0);
		}
		public Alter_viewContext alter_view() {
			return getRuleContext(Alter_viewContext.class,0);
		}
		public Alter_warehouseContext alter_warehouse() {
			return getRuleContext(Alter_warehouseContext.class,0);
		}
		public Alter_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_commandContext alter_command() throws RecognitionException {
		Alter_commandContext _localctx = new Alter_commandContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_alter_command);
		try {
			setState(2425);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2385);
				alter_account();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2386);
				alter_alert();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2387);
				alter_api_integration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2388);
				alter_connection();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2389);
				alter_database();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2390);
				alter_dynamic_table();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2391);
				alter_external_table();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2392);
				alter_failover_group();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2393);
				alter_file_format();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2394);
				alter_function();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2395);
				alter_masking_policy();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2396);
				alter_materialized_view();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2397);
				alter_network_policy();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2398);
				alter_notification_integration();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2399);
				alter_password_policy();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2400);
				alter_pipe();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2401);
				alter_procedure();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2402);
				alter_replication_group();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2403);
				alter_resource_monitor();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2404);
				alter_role();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2405);
				alter_row_access_policy();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2406);
				alter_schema();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2407);
				alter_security_integration_external_oauth();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2408);
				alter_security_integration_snowflake_oauth();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2409);
				alter_security_integration_saml2();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2410);
				alter_security_integration_scim();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2411);
				alter_sequence();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(2412);
				alter_session();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(2413);
				alter_session_policy();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(2414);
				alter_share();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(2415);
				alter_stage();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(2416);
				alter_storage_integration();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(2417);
				alter_stream();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(2418);
				alter_table();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(2419);
				alter_table_alter_column();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(2420);
				alter_tag();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(2421);
				alter_task();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(2422);
				alter_user();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(2423);
				alter_view();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(2424);
				alter_warehouse();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Account_paramsContext extends ParserRuleContext {
		public TerminalNode ALLOW_ID_TOKEN() { return getToken(SnowflakeParser.ALLOW_ID_TOKEN, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode CLIENT_ENCRYPTION_KEY_SIZE() { return getToken(SnowflakeParser.CLIENT_ENCRYPTION_KEY_SIZE, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode ENFORCE_SESSION_POLICY() { return getToken(SnowflakeParser.ENFORCE_SESSION_POLICY, 0); }
		public TerminalNode EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST, 0); }
		public TerminalNode INITIAL_REPLICATION_SIZE_LIMIT_IN_TB() { return getToken(SnowflakeParser.INITIAL_REPLICATION_SIZE_LIMIT_IN_TB, 0); }
		public TerminalNode NETWORK_POLICY() { return getToken(SnowflakeParser.NETWORK_POLICY, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode PERIODIC_DATA_REKEYING() { return getToken(SnowflakeParser.PERIODIC_DATA_REKEYING, 0); }
		public TerminalNode PREVENT_UNLOAD_TO_INLINE_URL() { return getToken(SnowflakeParser.PREVENT_UNLOAD_TO_INLINE_URL, 0); }
		public TerminalNode PREVENT_UNLOAD_TO_INTERNAL_STAGES() { return getToken(SnowflakeParser.PREVENT_UNLOAD_TO_INTERNAL_STAGES, 0); }
		public TerminalNode REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION() { return getToken(SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION, 0); }
		public TerminalNode REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION() { return getToken(SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION, 0); }
		public TerminalNode SAML_IDENTITY_PROVIDER() { return getToken(SnowflakeParser.SAML_IDENTITY_PROVIDER, 0); }
		public Json_literalContext json_literal() {
			return getRuleContext(Json_literalContext.class,0);
		}
		public TerminalNode SESSION_POLICY() { return getToken(SnowflakeParser.SESSION_POLICY, 0); }
		public TerminalNode SSO_LOGIN_PAGE() { return getToken(SnowflakeParser.SSO_LOGIN_PAGE, 0); }
		public Account_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_account_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAccount_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAccount_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAccount_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Account_paramsContext account_params() throws RecognitionException {
		Account_paramsContext _localctx = new Account_paramsContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_account_params);
		try {
			setState(2469);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALLOW_ID_TOKEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(2427);
				match(ALLOW_ID_TOKEN);
				setState(2428);
				match(EQ);
				setState(2429);
				true_false();
				}
				break;
			case CLIENT_ENCRYPTION_KEY_SIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2430);
				match(CLIENT_ENCRYPTION_KEY_SIZE);
				setState(2431);
				match(EQ);
				setState(2432);
				num();
				}
				break;
			case ENFORCE_SESSION_POLICY:
				enterOuterAlt(_localctx, 3);
				{
				setState(2433);
				match(ENFORCE_SESSION_POLICY);
				setState(2434);
				match(EQ);
				setState(2435);
				true_false();
				}
				break;
			case EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST:
				enterOuterAlt(_localctx, 4);
				{
				setState(2436);
				match(EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST);
				setState(2437);
				match(EQ);
				setState(2438);
				true_false();
				}
				break;
			case INITIAL_REPLICATION_SIZE_LIMIT_IN_TB:
				enterOuterAlt(_localctx, 5);
				{
				setState(2439);
				match(INITIAL_REPLICATION_SIZE_LIMIT_IN_TB);
				setState(2440);
				match(EQ);
				setState(2441);
				num();
				}
				break;
			case NETWORK_POLICY:
				enterOuterAlt(_localctx, 6);
				{
				setState(2442);
				match(NETWORK_POLICY);
				setState(2443);
				match(EQ);
				setState(2444);
				string();
				}
				break;
			case PERIODIC_DATA_REKEYING:
				enterOuterAlt(_localctx, 7);
				{
				setState(2445);
				match(PERIODIC_DATA_REKEYING);
				setState(2446);
				match(EQ);
				setState(2447);
				true_false();
				}
				break;
			case PREVENT_UNLOAD_TO_INLINE_URL:
				enterOuterAlt(_localctx, 8);
				{
				setState(2448);
				match(PREVENT_UNLOAD_TO_INLINE_URL);
				setState(2449);
				match(EQ);
				setState(2450);
				true_false();
				}
				break;
			case PREVENT_UNLOAD_TO_INTERNAL_STAGES:
				enterOuterAlt(_localctx, 9);
				{
				setState(2451);
				match(PREVENT_UNLOAD_TO_INTERNAL_STAGES);
				setState(2452);
				match(EQ);
				setState(2453);
				true_false();
				}
				break;
			case REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION:
				enterOuterAlt(_localctx, 10);
				{
				setState(2454);
				match(REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION);
				setState(2455);
				match(EQ);
				setState(2456);
				true_false();
				}
				break;
			case REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION:
				enterOuterAlt(_localctx, 11);
				{
				setState(2457);
				match(REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION);
				setState(2458);
				match(EQ);
				setState(2459);
				true_false();
				}
				break;
			case SAML_IDENTITY_PROVIDER:
				enterOuterAlt(_localctx, 12);
				{
				setState(2460);
				match(SAML_IDENTITY_PROVIDER);
				setState(2461);
				match(EQ);
				setState(2462);
				json_literal();
				}
				break;
			case SESSION_POLICY:
				enterOuterAlt(_localctx, 13);
				{
				setState(2463);
				match(SESSION_POLICY);
				setState(2464);
				match(EQ);
				setState(2465);
				string();
				}
				break;
			case SSO_LOGIN_PAGE:
				enterOuterAlt(_localctx, 14);
				{
				setState(2466);
				match(SSO_LOGIN_PAGE);
				setState(2467);
				match(EQ);
				setState(2468);
				true_false();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_paramsContext extends ParserRuleContext {
		public TerminalNode DATA_RETENTION_TIME_IN_DAYS() { return getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode MAX_DATA_EXTENSION_TIME_IN_DAYS() { return getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0); }
		public Default_ddl_collationContext default_ddl_collation() {
			return getRuleContext(Default_ddl_collationContext.class,0);
		}
		public TerminalNode MAX_CONCURRENCY_LEVEL() { return getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0); }
		public TerminalNode NETWORK_POLICY() { return getToken(SnowflakeParser.NETWORK_POLICY, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode PIPE_EXECUTION_PAUSED() { return getToken(SnowflakeParser.PIPE_EXECUTION_PAUSED, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode SESSION_POLICY() { return getToken(SnowflakeParser.SESSION_POLICY, 0); }
		public TerminalNode STATEMENT_QUEUED_TIMEOUT_IN_SECONDS() { return getToken(SnowflakeParser.STATEMENT_QUEUED_TIMEOUT_IN_SECONDS, 0); }
		public TerminalNode STATEMENT_TIMEOUT_IN_SECONDS() { return getToken(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS, 0); }
		public Object_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterObject_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitObject_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitObject_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_paramsContext object_params() throws RecognitionException {
		Object_paramsContext _localctx = new Object_paramsContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_object_params);
		try {
			setState(2496);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATA_RETENTION_TIME_IN_DAYS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2471);
				match(DATA_RETENTION_TIME_IN_DAYS);
				setState(2472);
				match(EQ);
				setState(2473);
				num();
				}
				break;
			case MAX_DATA_EXTENSION_TIME_IN_DAYS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2474);
				match(MAX_DATA_EXTENSION_TIME_IN_DAYS);
				setState(2475);
				match(EQ);
				setState(2476);
				num();
				}
				break;
			case DEFAULT_DDL_COLLATION_:
				enterOuterAlt(_localctx, 3);
				{
				setState(2477);
				default_ddl_collation();
				}
				break;
			case MAX_CONCURRENCY_LEVEL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2478);
				match(MAX_CONCURRENCY_LEVEL);
				setState(2479);
				match(EQ);
				setState(2480);
				num();
				}
				break;
			case NETWORK_POLICY:
				enterOuterAlt(_localctx, 5);
				{
				setState(2481);
				match(NETWORK_POLICY);
				setState(2482);
				match(EQ);
				setState(2483);
				string();
				}
				break;
			case PIPE_EXECUTION_PAUSED:
				enterOuterAlt(_localctx, 6);
				{
				setState(2484);
				match(PIPE_EXECUTION_PAUSED);
				setState(2485);
				match(EQ);
				setState(2486);
				true_false();
				}
				break;
			case SESSION_POLICY:
				enterOuterAlt(_localctx, 7);
				{
				setState(2487);
				match(SESSION_POLICY);
				setState(2488);
				match(EQ);
				setState(2489);
				string();
				}
				break;
			case STATEMENT_QUEUED_TIMEOUT_IN_SECONDS:
				enterOuterAlt(_localctx, 8);
				{
				setState(2490);
				match(STATEMENT_QUEUED_TIMEOUT_IN_SECONDS);
				setState(2491);
				match(EQ);
				setState(2492);
				num();
				}
				break;
			case STATEMENT_TIMEOUT_IN_SECONDS:
				enterOuterAlt(_localctx, 9);
				{
				setState(2493);
				match(STATEMENT_TIMEOUT_IN_SECONDS);
				setState(2494);
				match(EQ);
				setState(2495);
				num();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Default_ddl_collationContext extends ParserRuleContext {
		public TerminalNode DEFAULT_DDL_COLLATION_() { return getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Default_ddl_collationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_ddl_collation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDefault_ddl_collation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDefault_ddl_collation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDefault_ddl_collation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_ddl_collationContext default_ddl_collation() throws RecognitionException {
		Default_ddl_collationContext _localctx = new Default_ddl_collationContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_default_ddl_collation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2498);
			match(DEFAULT_DDL_COLLATION_);
			setState(2499);
			match(EQ);
			setState(2500);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_propertiesContext extends ParserRuleContext {
		public TerminalNode PASSWORD() { return getToken(SnowflakeParser.PASSWORD, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode LOGIN_NAME() { return getToken(SnowflakeParser.LOGIN_NAME, 0); }
		public TerminalNode DISPLAY_NAME() { return getToken(SnowflakeParser.DISPLAY_NAME, 0); }
		public TerminalNode FIRST_NAME() { return getToken(SnowflakeParser.FIRST_NAME, 0); }
		public TerminalNode MIDDLE_NAME() { return getToken(SnowflakeParser.MIDDLE_NAME, 0); }
		public TerminalNode LAST_NAME() { return getToken(SnowflakeParser.LAST_NAME, 0); }
		public TerminalNode EMAIL() { return getToken(SnowflakeParser.EMAIL, 0); }
		public TerminalNode MUST_CHANGE_PASSWORD() { return getToken(SnowflakeParser.MUST_CHANGE_PASSWORD, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode DISABLED() { return getToken(SnowflakeParser.DISABLED, 0); }
		public TerminalNode DAYS_TO_EXPIRY() { return getToken(SnowflakeParser.DAYS_TO_EXPIRY, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode MINS_TO_UNLOCK() { return getToken(SnowflakeParser.MINS_TO_UNLOCK, 0); }
		public TerminalNode DEFAULT_WAREHOUSE() { return getToken(SnowflakeParser.DEFAULT_WAREHOUSE, 0); }
		public TerminalNode DEFAULT_NAMESPACE() { return getToken(SnowflakeParser.DEFAULT_NAMESPACE, 0); }
		public TerminalNode DEFAULT_ROLE() { return getToken(SnowflakeParser.DEFAULT_ROLE, 0); }
		public TerminalNode MINS_TO_BYPASS_MFA() { return getToken(SnowflakeParser.MINS_TO_BYPASS_MFA, 0); }
		public TerminalNode RSA_PUBLIC_KEY() { return getToken(SnowflakeParser.RSA_PUBLIC_KEY, 0); }
		public TerminalNode RSA_PUBLIC_KEY_2() { return getToken(SnowflakeParser.RSA_PUBLIC_KEY_2, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Object_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterObject_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitObject_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitObject_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_propertiesContext object_properties() throws RecognitionException {
		Object_propertiesContext _localctx = new Object_propertiesContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_object_properties);
		try {
			setState(2554);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PASSWORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2502);
				match(PASSWORD);
				setState(2503);
				match(EQ);
				setState(2504);
				string();
				}
				break;
			case LOGIN_NAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(2505);
				match(LOGIN_NAME);
				setState(2506);
				match(EQ);
				setState(2507);
				string();
				}
				break;
			case DISPLAY_NAME:
				enterOuterAlt(_localctx, 3);
				{
				setState(2508);
				match(DISPLAY_NAME);
				setState(2509);
				match(EQ);
				setState(2510);
				string();
				}
				break;
			case FIRST_NAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(2511);
				match(FIRST_NAME);
				setState(2512);
				match(EQ);
				setState(2513);
				string();
				}
				break;
			case MIDDLE_NAME:
				enterOuterAlt(_localctx, 5);
				{
				setState(2514);
				match(MIDDLE_NAME);
				setState(2515);
				match(EQ);
				setState(2516);
				string();
				}
				break;
			case LAST_NAME:
				enterOuterAlt(_localctx, 6);
				{
				setState(2517);
				match(LAST_NAME);
				setState(2518);
				match(EQ);
				setState(2519);
				string();
				}
				break;
			case EMAIL:
				enterOuterAlt(_localctx, 7);
				{
				setState(2520);
				match(EMAIL);
				setState(2521);
				match(EQ);
				setState(2522);
				string();
				}
				break;
			case MUST_CHANGE_PASSWORD:
				enterOuterAlt(_localctx, 8);
				{
				setState(2523);
				match(MUST_CHANGE_PASSWORD);
				setState(2524);
				match(EQ);
				setState(2525);
				true_false();
				}
				break;
			case DISABLED:
				enterOuterAlt(_localctx, 9);
				{
				setState(2526);
				match(DISABLED);
				setState(2527);
				match(EQ);
				setState(2528);
				true_false();
				}
				break;
			case DAYS_TO_EXPIRY:
				enterOuterAlt(_localctx, 10);
				{
				setState(2529);
				match(DAYS_TO_EXPIRY);
				setState(2530);
				match(EQ);
				setState(2531);
				num();
				}
				break;
			case MINS_TO_UNLOCK:
				enterOuterAlt(_localctx, 11);
				{
				setState(2532);
				match(MINS_TO_UNLOCK);
				setState(2533);
				match(EQ);
				setState(2534);
				num();
				}
				break;
			case DEFAULT_WAREHOUSE:
				enterOuterAlt(_localctx, 12);
				{
				setState(2535);
				match(DEFAULT_WAREHOUSE);
				setState(2536);
				match(EQ);
				setState(2537);
				string();
				}
				break;
			case DEFAULT_NAMESPACE:
				enterOuterAlt(_localctx, 13);
				{
				setState(2538);
				match(DEFAULT_NAMESPACE);
				setState(2539);
				match(EQ);
				setState(2540);
				string();
				}
				break;
			case DEFAULT_ROLE:
				enterOuterAlt(_localctx, 14);
				{
				setState(2541);
				match(DEFAULT_ROLE);
				setState(2542);
				match(EQ);
				setState(2543);
				string();
				}
				break;
			case MINS_TO_BYPASS_MFA:
				enterOuterAlt(_localctx, 15);
				{
				setState(2544);
				match(MINS_TO_BYPASS_MFA);
				setState(2545);
				match(EQ);
				setState(2546);
				num();
				}
				break;
			case RSA_PUBLIC_KEY:
				enterOuterAlt(_localctx, 16);
				{
				setState(2547);
				match(RSA_PUBLIC_KEY);
				setState(2548);
				match(EQ);
				setState(2549);
				string();
				}
				break;
			case RSA_PUBLIC_KEY_2:
				enterOuterAlt(_localctx, 17);
				{
				setState(2550);
				match(RSA_PUBLIC_KEY_2);
				setState(2551);
				match(EQ);
				setState(2552);
				string();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 18);
				{
				setState(2553);
				comment_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Session_paramsContext extends ParserRuleContext {
		public TerminalNode ABORT_DETACHED_QUERY() { return getToken(SnowflakeParser.ABORT_DETACHED_QUERY, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode AUTOCOMMIT() { return getToken(SnowflakeParser.AUTOCOMMIT, 0); }
		public TerminalNode BINARY_INPUT_FORMAT() { return getToken(SnowflakeParser.BINARY_INPUT_FORMAT, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode BINARY_OUTPUT_FORMAT() { return getToken(SnowflakeParser.BINARY_OUTPUT_FORMAT, 0); }
		public TerminalNode DATE_INPUT_FORMAT() { return getToken(SnowflakeParser.DATE_INPUT_FORMAT, 0); }
		public TerminalNode DATE_OUTPUT_FORMAT() { return getToken(SnowflakeParser.DATE_OUTPUT_FORMAT, 0); }
		public TerminalNode ERROR_ON_NONDETERMINISTIC_MERGE() { return getToken(SnowflakeParser.ERROR_ON_NONDETERMINISTIC_MERGE, 0); }
		public TerminalNode ERROR_ON_NONDETERMINISTIC_UPDATE() { return getToken(SnowflakeParser.ERROR_ON_NONDETERMINISTIC_UPDATE, 0); }
		public TerminalNode JSON_INDENT() { return getToken(SnowflakeParser.JSON_INDENT, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode LOCK_TIMEOUT() { return getToken(SnowflakeParser.LOCK_TIMEOUT, 0); }
		public TerminalNode QUERY_TAG() { return getToken(SnowflakeParser.QUERY_TAG, 0); }
		public TerminalNode ROWS_PER_RESULTSET() { return getToken(SnowflakeParser.ROWS_PER_RESULTSET, 0); }
		public TerminalNode SIMULATED_DATA_SHARING_CONSUMER() { return getToken(SnowflakeParser.SIMULATED_DATA_SHARING_CONSUMER, 0); }
		public TerminalNode STATEMENT_TIMEOUT_IN_SECONDS() { return getToken(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS, 0); }
		public TerminalNode STRICT_JSON_OUTPUT() { return getToken(SnowflakeParser.STRICT_JSON_OUTPUT, 0); }
		public TerminalNode TIMESTAMP_DAY_IS_ALWAYS_24H() { return getToken(SnowflakeParser.TIMESTAMP_DAY_IS_ALWAYS_24H, 0); }
		public TerminalNode TIMESTAMP_INPUT_FORMAT() { return getToken(SnowflakeParser.TIMESTAMP_INPUT_FORMAT, 0); }
		public TerminalNode TIMESTAMP_LTZ_OUTPUT_FORMAT() { return getToken(SnowflakeParser.TIMESTAMP_LTZ_OUTPUT_FORMAT, 0); }
		public TerminalNode TIMESTAMP_NTZ_OUTPUT_FORMAT() { return getToken(SnowflakeParser.TIMESTAMP_NTZ_OUTPUT_FORMAT, 0); }
		public TerminalNode TIMESTAMP_OUTPUT_FORMAT() { return getToken(SnowflakeParser.TIMESTAMP_OUTPUT_FORMAT, 0); }
		public TerminalNode TIMESTAMP_TYPE_MAPPING() { return getToken(SnowflakeParser.TIMESTAMP_TYPE_MAPPING, 0); }
		public TerminalNode TIMESTAMP_TZ_OUTPUT_FORMAT() { return getToken(SnowflakeParser.TIMESTAMP_TZ_OUTPUT_FORMAT, 0); }
		public TerminalNode TIMEZONE() { return getToken(SnowflakeParser.TIMEZONE, 0); }
		public TerminalNode TIME_INPUT_FORMAT() { return getToken(SnowflakeParser.TIME_INPUT_FORMAT, 0); }
		public TerminalNode TIME_OUTPUT_FORMAT() { return getToken(SnowflakeParser.TIME_OUTPUT_FORMAT, 0); }
		public TerminalNode TRANSACTION_DEFAULT_ISOLATION_LEVEL() { return getToken(SnowflakeParser.TRANSACTION_DEFAULT_ISOLATION_LEVEL, 0); }
		public TerminalNode TWO_DIGIT_CENTURY_START() { return getToken(SnowflakeParser.TWO_DIGIT_CENTURY_START, 0); }
		public TerminalNode UNSUPPORTED_DDL_ACTION() { return getToken(SnowflakeParser.UNSUPPORTED_DDL_ACTION, 0); }
		public TerminalNode USE_CACHED_RESULT() { return getToken(SnowflakeParser.USE_CACHED_RESULT, 0); }
		public TerminalNode WEEK_OF_YEAR_POLICY() { return getToken(SnowflakeParser.WEEK_OF_YEAR_POLICY, 0); }
		public TerminalNode WEEK_START() { return getToken(SnowflakeParser.WEEK_START, 0); }
		public Session_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_session_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSession_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSession_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSession_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Session_paramsContext session_params() throws RecognitionException {
		Session_paramsContext _localctx = new Session_paramsContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_session_params);
		try {
			setState(2649);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT_DETACHED_QUERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(2556);
				match(ABORT_DETACHED_QUERY);
				setState(2557);
				match(EQ);
				setState(2558);
				true_false();
				}
				break;
			case AUTOCOMMIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2559);
				match(AUTOCOMMIT);
				setState(2560);
				match(EQ);
				setState(2561);
				true_false();
				}
				break;
			case BINARY_INPUT_FORMAT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2562);
				match(BINARY_INPUT_FORMAT);
				setState(2563);
				match(EQ);
				setState(2564);
				string();
				}
				break;
			case BINARY_OUTPUT_FORMAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(2565);
				match(BINARY_OUTPUT_FORMAT);
				setState(2566);
				match(EQ);
				setState(2567);
				string();
				}
				break;
			case DATE_INPUT_FORMAT:
				enterOuterAlt(_localctx, 5);
				{
				setState(2568);
				match(DATE_INPUT_FORMAT);
				setState(2569);
				match(EQ);
				setState(2570);
				string();
				}
				break;
			case DATE_OUTPUT_FORMAT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2571);
				match(DATE_OUTPUT_FORMAT);
				setState(2572);
				match(EQ);
				setState(2573);
				string();
				}
				break;
			case ERROR_ON_NONDETERMINISTIC_MERGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2574);
				match(ERROR_ON_NONDETERMINISTIC_MERGE);
				setState(2575);
				match(EQ);
				setState(2576);
				true_false();
				}
				break;
			case ERROR_ON_NONDETERMINISTIC_UPDATE:
				enterOuterAlt(_localctx, 8);
				{
				setState(2577);
				match(ERROR_ON_NONDETERMINISTIC_UPDATE);
				setState(2578);
				match(EQ);
				setState(2579);
				true_false();
				}
				break;
			case JSON_INDENT:
				enterOuterAlt(_localctx, 9);
				{
				setState(2580);
				match(JSON_INDENT);
				setState(2581);
				match(EQ);
				setState(2582);
				num();
				}
				break;
			case LOCK_TIMEOUT:
				enterOuterAlt(_localctx, 10);
				{
				setState(2583);
				match(LOCK_TIMEOUT);
				setState(2584);
				match(EQ);
				setState(2585);
				num();
				}
				break;
			case QUERY_TAG:
				enterOuterAlt(_localctx, 11);
				{
				setState(2586);
				match(QUERY_TAG);
				setState(2587);
				match(EQ);
				setState(2588);
				string();
				}
				break;
			case ROWS_PER_RESULTSET:
				enterOuterAlt(_localctx, 12);
				{
				setState(2589);
				match(ROWS_PER_RESULTSET);
				setState(2590);
				match(EQ);
				setState(2591);
				num();
				}
				break;
			case SIMULATED_DATA_SHARING_CONSUMER:
				enterOuterAlt(_localctx, 13);
				{
				setState(2592);
				match(SIMULATED_DATA_SHARING_CONSUMER);
				setState(2593);
				match(EQ);
				setState(2594);
				string();
				}
				break;
			case STATEMENT_TIMEOUT_IN_SECONDS:
				enterOuterAlt(_localctx, 14);
				{
				setState(2595);
				match(STATEMENT_TIMEOUT_IN_SECONDS);
				setState(2596);
				match(EQ);
				setState(2597);
				num();
				}
				break;
			case STRICT_JSON_OUTPUT:
				enterOuterAlt(_localctx, 15);
				{
				setState(2598);
				match(STRICT_JSON_OUTPUT);
				setState(2599);
				match(EQ);
				setState(2600);
				true_false();
				}
				break;
			case TIMESTAMP_DAY_IS_ALWAYS_24H:
				enterOuterAlt(_localctx, 16);
				{
				setState(2601);
				match(TIMESTAMP_DAY_IS_ALWAYS_24H);
				setState(2602);
				match(EQ);
				setState(2603);
				true_false();
				}
				break;
			case TIMESTAMP_INPUT_FORMAT:
				enterOuterAlt(_localctx, 17);
				{
				setState(2604);
				match(TIMESTAMP_INPUT_FORMAT);
				setState(2605);
				match(EQ);
				setState(2606);
				string();
				}
				break;
			case TIMESTAMP_LTZ_OUTPUT_FORMAT:
				enterOuterAlt(_localctx, 18);
				{
				setState(2607);
				match(TIMESTAMP_LTZ_OUTPUT_FORMAT);
				setState(2608);
				match(EQ);
				setState(2609);
				string();
				}
				break;
			case TIMESTAMP_NTZ_OUTPUT_FORMAT:
				enterOuterAlt(_localctx, 19);
				{
				setState(2610);
				match(TIMESTAMP_NTZ_OUTPUT_FORMAT);
				setState(2611);
				match(EQ);
				setState(2612);
				string();
				}
				break;
			case TIMESTAMP_OUTPUT_FORMAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(2613);
				match(TIMESTAMP_OUTPUT_FORMAT);
				setState(2614);
				match(EQ);
				setState(2615);
				string();
				}
				break;
			case TIMESTAMP_TYPE_MAPPING:
				enterOuterAlt(_localctx, 21);
				{
				setState(2616);
				match(TIMESTAMP_TYPE_MAPPING);
				setState(2617);
				match(EQ);
				setState(2618);
				string();
				}
				break;
			case TIMESTAMP_TZ_OUTPUT_FORMAT:
				enterOuterAlt(_localctx, 22);
				{
				setState(2619);
				match(TIMESTAMP_TZ_OUTPUT_FORMAT);
				setState(2620);
				match(EQ);
				setState(2621);
				string();
				}
				break;
			case TIMEZONE:
				enterOuterAlt(_localctx, 23);
				{
				setState(2622);
				match(TIMEZONE);
				setState(2623);
				match(EQ);
				setState(2624);
				string();
				}
				break;
			case TIME_INPUT_FORMAT:
				enterOuterAlt(_localctx, 24);
				{
				setState(2625);
				match(TIME_INPUT_FORMAT);
				setState(2626);
				match(EQ);
				setState(2627);
				string();
				}
				break;
			case TIME_OUTPUT_FORMAT:
				enterOuterAlt(_localctx, 25);
				{
				setState(2628);
				match(TIME_OUTPUT_FORMAT);
				setState(2629);
				match(EQ);
				setState(2630);
				string();
				}
				break;
			case TRANSACTION_DEFAULT_ISOLATION_LEVEL:
				enterOuterAlt(_localctx, 26);
				{
				setState(2631);
				match(TRANSACTION_DEFAULT_ISOLATION_LEVEL);
				setState(2632);
				match(EQ);
				setState(2633);
				string();
				}
				break;
			case TWO_DIGIT_CENTURY_START:
				enterOuterAlt(_localctx, 27);
				{
				setState(2634);
				match(TWO_DIGIT_CENTURY_START);
				setState(2635);
				match(EQ);
				setState(2636);
				num();
				}
				break;
			case UNSUPPORTED_DDL_ACTION:
				enterOuterAlt(_localctx, 28);
				{
				setState(2637);
				match(UNSUPPORTED_DDL_ACTION);
				setState(2638);
				match(EQ);
				setState(2639);
				string();
				}
				break;
			case USE_CACHED_RESULT:
				enterOuterAlt(_localctx, 29);
				{
				setState(2640);
				match(USE_CACHED_RESULT);
				setState(2641);
				match(EQ);
				setState(2642);
				true_false();
				}
				break;
			case WEEK_OF_YEAR_POLICY:
				enterOuterAlt(_localctx, 30);
				{
				setState(2643);
				match(WEEK_OF_YEAR_POLICY);
				setState(2644);
				match(EQ);
				setState(2645);
				num();
				}
				break;
			case WEEK_START:
				enterOuterAlt(_localctx, 31);
				{
				setState(2646);
				match(WEEK_START);
				setState(2647);
				match(EQ);
				setState(2648);
				num();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_accountContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public Alter_account_optsContext alter_account_opts() {
			return getRuleContext(Alter_account_optsContext.class,0);
		}
		public Alter_accountContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_account; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_account(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_account(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_account(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_accountContext alter_account() throws RecognitionException {
		Alter_accountContext _localctx = new Alter_accountContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_alter_account);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2651);
			match(ALTER);
			setState(2652);
			match(ACCOUNT);
			setState(2653);
			alter_account_opts();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Enabled_true_falseContext extends ParserRuleContext {
		public TerminalNode ENABLED() { return getToken(SnowflakeParser.ENABLED, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public Enabled_true_falseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enabled_true_false; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterEnabled_true_false(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitEnabled_true_false(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitEnabled_true_false(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enabled_true_falseContext enabled_true_false() throws RecognitionException {
		Enabled_true_falseContext _localctx = new Enabled_true_falseContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_enabled_true_false);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2655);
			match(ENABLED);
			setState(2656);
			match(EQ);
			setState(2657);
			true_false();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_alertContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode ALERT() { return getToken(SnowflakeParser.ALERT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Resume_suspendContext resume_suspend() {
			return getRuleContext(Resume_suspendContext.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode MODIFY() { return getToken(SnowflakeParser.MODIFY, 0); }
		public TerminalNode CONDITION() { return getToken(SnowflakeParser.CONDITION, 0); }
		public TerminalNode EXISTS() { return getToken(SnowflakeParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Alert_conditionContext alert_condition() {
			return getRuleContext(Alert_conditionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode ACTION() { return getToken(SnowflakeParser.ACTION, 0); }
		public Alert_actionContext alert_action() {
			return getRuleContext(Alert_actionContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public List<Alert_set_clauseContext> alert_set_clause() {
			return getRuleContexts(Alert_set_clauseContext.class);
		}
		public Alert_set_clauseContext alert_set_clause(int i) {
			return getRuleContext(Alert_set_clauseContext.class,i);
		}
		public List<Alert_unset_clauseContext> alert_unset_clause() {
			return getRuleContexts(Alert_unset_clauseContext.class);
		}
		public Alert_unset_clauseContext alert_unset_clause(int i) {
			return getRuleContext(Alert_unset_clauseContext.class,i);
		}
		public Alter_alertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_alert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_alert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_alert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_alert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_alertContext alter_alert() throws RecognitionException {
		Alter_alertContext _localctx = new Alter_alertContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_alter_alert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2659);
			match(ALTER);
			setState(2660);
			match(ALERT);
			setState(2662);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				setState(2661);
				if_exists();
				}
				break;
			}
			setState(2664);
			id_();
			setState(2688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				setState(2665);
				resume_suspend();
				}
				break;
			case 2:
				{
				setState(2666);
				match(SET);
				setState(2668); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2667);
					alert_set_clause();
					}
					}
					setState(2670); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMENT || _la==SCHEDULE || _la==WAREHOUSE );
				}
				break;
			case 3:
				{
				setState(2672);
				match(UNSET);
				setState(2674); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2673);
					alert_unset_clause();
					}
					}
					setState(2676); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMENT || _la==SCHEDULE || _la==WAREHOUSE );
				}
				break;
			case 4:
				{
				setState(2678);
				match(MODIFY);
				setState(2679);
				match(CONDITION);
				setState(2680);
				match(EXISTS);
				setState(2681);
				match(LR_BRACKET);
				setState(2682);
				alert_condition();
				setState(2683);
				match(RR_BRACKET);
				}
				break;
			case 5:
				{
				setState(2685);
				match(MODIFY);
				setState(2686);
				match(ACTION);
				setState(2687);
				alert_action();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Resume_suspendContext extends ParserRuleContext {
		public TerminalNode RESUME() { return getToken(SnowflakeParser.RESUME, 0); }
		public TerminalNode SUSPEND() { return getToken(SnowflakeParser.SUSPEND, 0); }
		public Resume_suspendContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resume_suspend; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterResume_suspend(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitResume_suspend(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitResume_suspend(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Resume_suspendContext resume_suspend() throws RecognitionException {
		Resume_suspendContext _localctx = new Resume_suspendContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_resume_suspend);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2690);
			_la = _input.LA(1);
			if ( !(_la==RESUME || _la==SUSPEND) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alert_set_clauseContext extends ParserRuleContext {
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SCHEDULE() { return getToken(SnowflakeParser.SCHEDULE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Alert_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alert_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlert_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlert_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlert_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alert_set_clauseContext alert_set_clause() throws RecognitionException {
		Alert_set_clauseContext _localctx = new Alert_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_alert_set_clause);
		try {
			setState(2699);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAREHOUSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2692);
				match(WAREHOUSE);
				setState(2693);
				match(EQ);
				setState(2694);
				id_();
				}
				break;
			case SCHEDULE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2695);
				match(SCHEDULE);
				setState(2696);
				match(EQ);
				setState(2697);
				string();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2698);
				comment_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alert_unset_clauseContext extends ParserRuleContext {
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public TerminalNode SCHEDULE() { return getToken(SnowflakeParser.SCHEDULE, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Alert_unset_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alert_unset_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlert_unset_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlert_unset_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlert_unset_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alert_unset_clauseContext alert_unset_clause() throws RecognitionException {
		Alert_unset_clauseContext _localctx = new Alert_unset_clauseContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_alert_unset_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2701);
			_la = _input.LA(1);
			if ( !(_la==COMMENT || _la==SCHEDULE || _la==WAREHOUSE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_api_integrationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode API() { return getToken(SnowflakeParser.API, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode API_AWS_ROLE_ARN() { return getToken(SnowflakeParser.API_AWS_ROLE_ARN, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode AZURE_AD_APPLICATION_ID() { return getToken(SnowflakeParser.AZURE_AD_APPLICATION_ID, 0); }
		public TerminalNode API_KEY() { return getToken(SnowflakeParser.API_KEY, 0); }
		public Enabled_true_falseContext enabled_true_false() {
			return getRuleContext(Enabled_true_falseContext.class,0);
		}
		public TerminalNode API_ALLOWED_PREFIXES() { return getToken(SnowflakeParser.API_ALLOWED_PREFIXES, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public TerminalNode API_BLOCKED_PREFIXES() { return getToken(SnowflakeParser.API_BLOCKED_PREFIXES, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public List<Api_integration_propertyContext> api_integration_property() {
			return getRuleContexts(Api_integration_propertyContext.class);
		}
		public Api_integration_propertyContext api_integration_property(int i) {
			return getRuleContext(Api_integration_propertyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Alter_api_integrationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_api_integration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_api_integration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_api_integration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_api_integration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_api_integrationContext alter_api_integration() throws RecognitionException {
		Alter_api_integrationContext _localctx = new Alter_api_integrationContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_alter_api_integration);
		int _la;
		try {
			setState(2784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2703);
				match(ALTER);
				setState(2705);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==API) {
					{
					setState(2704);
					match(API);
					}
				}

				setState(2707);
				match(INTEGRATION);
				setState(2709);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
				case 1:
					{
					setState(2708);
					if_exists();
					}
					break;
				}
				setState(2711);
				id_();
				setState(2712);
				match(SET);
				setState(2716);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==API_AWS_ROLE_ARN) {
					{
					setState(2713);
					match(API_AWS_ROLE_ARN);
					setState(2714);
					match(EQ);
					setState(2715);
					string();
					}
				}

				setState(2721);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AZURE_AD_APPLICATION_ID) {
					{
					setState(2718);
					match(AZURE_AD_APPLICATION_ID);
					setState(2719);
					match(EQ);
					setState(2720);
					string();
					}
				}

				setState(2726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==API_KEY) {
					{
					setState(2723);
					match(API_KEY);
					setState(2724);
					match(EQ);
					setState(2725);
					string();
					}
				}

				setState(2729);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENABLED) {
					{
					setState(2728);
					enabled_true_false();
					}
				}

				setState(2737);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==API_ALLOWED_PREFIXES) {
					{
					setState(2731);
					match(API_ALLOWED_PREFIXES);
					setState(2732);
					match(EQ);
					setState(2733);
					match(LR_BRACKET);
					setState(2734);
					string();
					setState(2735);
					match(RR_BRACKET);
					}
				}

				setState(2745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==API_BLOCKED_PREFIXES) {
					{
					setState(2739);
					match(API_BLOCKED_PREFIXES);
					setState(2740);
					match(EQ);
					setState(2741);
					match(LR_BRACKET);
					setState(2742);
					string();
					setState(2743);
					match(RR_BRACKET);
					}
				}

				setState(2748);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(2747);
					comment_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2750);
				match(ALTER);
				setState(2752);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==API) {
					{
					setState(2751);
					match(API);
					}
				}

				setState(2754);
				match(INTEGRATION);
				setState(2755);
				id_();
				setState(2756);
				set_tags();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2758);
				match(ALTER);
				setState(2760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==API) {
					{
					setState(2759);
					match(API);
					}
				}

				setState(2762);
				match(INTEGRATION);
				setState(2763);
				id_();
				setState(2764);
				unset_tags();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2766);
				match(ALTER);
				setState(2768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==API) {
					{
					setState(2767);
					match(API);
					}
				}

				setState(2770);
				match(INTEGRATION);
				setState(2772);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
				case 1:
					{
					setState(2771);
					if_exists();
					}
					break;
				}
				setState(2774);
				id_();
				setState(2775);
				match(UNSET);
				setState(2776);
				api_integration_property();
				setState(2781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2777);
					match(COMMA);
					setState(2778);
					api_integration_property();
					}
					}
					setState(2783);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Api_integration_propertyContext extends ParserRuleContext {
		public TerminalNode API_KEY() { return getToken(SnowflakeParser.API_KEY, 0); }
		public TerminalNode ENABLED() { return getToken(SnowflakeParser.ENABLED, 0); }
		public TerminalNode API_BLOCKED_PREFIXES() { return getToken(SnowflakeParser.API_BLOCKED_PREFIXES, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Api_integration_propertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_api_integration_property; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterApi_integration_property(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitApi_integration_property(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitApi_integration_property(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Api_integration_propertyContext api_integration_property() throws RecognitionException {
		Api_integration_propertyContext _localctx = new Api_integration_propertyContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_api_integration_property);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2786);
			_la = _input.LA(1);
			if ( !(_la==API_BLOCKED_PREFIXES || _la==API_KEY || _la==COMMENT || _la==ENABLED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_connectionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode CONNECTION() { return getToken(SnowflakeParser.CONNECTION, 0); }
		public Alter_connection_optsContext alter_connection_opts() {
			return getRuleContext(Alter_connection_optsContext.class,0);
		}
		public Alter_connectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_connection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_connection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_connection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_connection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_connectionContext alter_connection() throws RecognitionException {
		Alter_connectionContext _localctx = new Alter_connectionContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_alter_connection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2788);
			match(ALTER);
			setState(2789);
			match(CONNECTION);
			setState(2790);
			alter_connection_opts();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_databaseContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode SWAP() { return getToken(SnowflakeParser.SWAP, 0); }
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode DATA_RETENTION_TIME_IN_DAYS() { return getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<NumContext> num() {
			return getRuleContexts(NumContext.class);
		}
		public NumContext num(int i) {
			return getRuleContext(NumContext.class,i);
		}
		public TerminalNode MAX_DATA_EXTENSION_TIME_IN_DAYS() { return getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0); }
		public Default_ddl_collationContext default_ddl_collation() {
			return getRuleContext(Default_ddl_collationContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public List<Database_propertyContext> database_property() {
			return getRuleContexts(Database_propertyContext.class);
		}
		public Database_propertyContext database_property(int i) {
			return getRuleContext(Database_propertyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode ENABLE() { return getToken(SnowflakeParser.ENABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(SnowflakeParser.REPLICATION, 0); }
		public TerminalNode ACCOUNTS() { return getToken(SnowflakeParser.ACCOUNTS, 0); }
		public Account_id_listContext account_id_list() {
			return getRuleContext(Account_id_listContext.class,0);
		}
		public TerminalNode IGNORE() { return getToken(SnowflakeParser.IGNORE, 0); }
		public TerminalNode EDITION() { return getToken(SnowflakeParser.EDITION, 0); }
		public TerminalNode CHECK() { return getToken(SnowflakeParser.CHECK, 0); }
		public TerminalNode DISABLE() { return getToken(SnowflakeParser.DISABLE, 0); }
		public TerminalNode REFRESH() { return getToken(SnowflakeParser.REFRESH, 0); }
		public TerminalNode FAILOVER() { return getToken(SnowflakeParser.FAILOVER, 0); }
		public TerminalNode PRIMARY() { return getToken(SnowflakeParser.PRIMARY, 0); }
		public Alter_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_databaseContext alter_database() throws RecognitionException {
		Alter_databaseContext _localctx = new Alter_databaseContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_alter_database);
		int _la;
		try {
			setState(2912);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2792);
				match(ALTER);
				setState(2793);
				match(DATABASE);
				setState(2795);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
				case 1:
					{
					setState(2794);
					if_exists();
					}
					break;
				}
				setState(2797);
				id_();
				setState(2798);
				match(RENAME);
				setState(2799);
				match(TO);
				setState(2800);
				id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2802);
				match(ALTER);
				setState(2803);
				match(DATABASE);
				setState(2805);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
				case 1:
					{
					setState(2804);
					if_exists();
					}
					break;
				}
				setState(2807);
				id_();
				setState(2808);
				match(SWAP);
				setState(2809);
				match(WITH);
				setState(2810);
				id_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2812);
				match(ALTER);
				setState(2813);
				match(DATABASE);
				setState(2815);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
				case 1:
					{
					setState(2814);
					if_exists();
					}
					break;
				}
				setState(2817);
				id_();
				setState(2818);
				match(SET);
				setState(2822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATA_RETENTION_TIME_IN_DAYS) {
					{
					setState(2819);
					match(DATA_RETENTION_TIME_IN_DAYS);
					setState(2820);
					match(EQ);
					setState(2821);
					num();
					}
				}

				setState(2827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MAX_DATA_EXTENSION_TIME_IN_DAYS) {
					{
					setState(2824);
					match(MAX_DATA_EXTENSION_TIME_IN_DAYS);
					setState(2825);
					match(EQ);
					setState(2826);
					num();
					}
				}

				setState(2830);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT_DDL_COLLATION_) {
					{
					setState(2829);
					default_ddl_collation();
					}
				}

				setState(2833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(2832);
					comment_clause();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2835);
				match(ALTER);
				setState(2836);
				match(DATABASE);
				setState(2837);
				id_();
				setState(2838);
				set_tags();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2840);
				match(ALTER);
				setState(2841);
				match(DATABASE);
				setState(2842);
				id_();
				setState(2843);
				unset_tags();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2845);
				match(ALTER);
				setState(2846);
				match(DATABASE);
				setState(2848);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
				case 1:
					{
					setState(2847);
					if_exists();
					}
					break;
				}
				setState(2850);
				id_();
				setState(2851);
				match(UNSET);
				setState(2852);
				database_property();
				setState(2857);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2853);
					match(COMMA);
					setState(2854);
					database_property();
					}
					}
					setState(2859);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2860);
				match(ALTER);
				setState(2861);
				match(DATABASE);
				setState(2862);
				id_();
				setState(2863);
				match(ENABLE);
				setState(2864);
				match(REPLICATION);
				setState(2865);
				match(TO);
				setState(2866);
				match(ACCOUNTS);
				setState(2867);
				account_id_list();
				setState(2871);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(2868);
					match(IGNORE);
					setState(2869);
					match(EDITION);
					setState(2870);
					match(CHECK);
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2873);
				match(ALTER);
				setState(2874);
				match(DATABASE);
				setState(2875);
				id_();
				setState(2876);
				match(DISABLE);
				setState(2877);
				match(REPLICATION);
				setState(2881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(2878);
					match(TO);
					setState(2879);
					match(ACCOUNTS);
					setState(2880);
					account_id_list();
					}
				}

				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2883);
				match(ALTER);
				setState(2884);
				match(DATABASE);
				setState(2885);
				id_();
				setState(2886);
				match(REFRESH);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2888);
				match(ALTER);
				setState(2889);
				match(DATABASE);
				setState(2890);
				id_();
				setState(2891);
				match(ENABLE);
				setState(2892);
				match(FAILOVER);
				setState(2893);
				match(TO);
				setState(2894);
				match(ACCOUNTS);
				setState(2895);
				account_id_list();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2897);
				match(ALTER);
				setState(2898);
				match(DATABASE);
				setState(2899);
				id_();
				setState(2900);
				match(DISABLE);
				setState(2901);
				match(FAILOVER);
				setState(2905);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(2902);
					match(TO);
					setState(2903);
					match(ACCOUNTS);
					setState(2904);
					account_id_list();
					}
				}

				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2907);
				match(ALTER);
				setState(2908);
				match(DATABASE);
				setState(2909);
				id_();
				setState(2910);
				match(PRIMARY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Database_propertyContext extends ParserRuleContext {
		public TerminalNode DATA_RETENTION_TIME_IN_DAYS() { return getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0); }
		public TerminalNode MAX_DATA_EXTENSION_TIME_IN_DAYS() { return getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0); }
		public TerminalNode DEFAULT_DDL_COLLATION_() { return getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Database_propertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_property; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDatabase_property(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDatabase_property(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDatabase_property(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_propertyContext database_property() throws RecognitionException {
		Database_propertyContext _localctx = new Database_propertyContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_database_property);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2914);
			_la = _input.LA(1);
			if ( !(((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 8804682956801L) != 0) || _la==MAX_DATA_EXTENSION_TIME_IN_DAYS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Account_id_listContext extends ParserRuleContext {
		public List<Account_identifierContext> account_identifier() {
			return getRuleContexts(Account_identifierContext.class);
		}
		public Account_identifierContext account_identifier(int i) {
			return getRuleContext(Account_identifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Account_id_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_account_id_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAccount_id_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAccount_id_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAccount_id_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Account_id_listContext account_id_list() throws RecognitionException {
		Account_id_listContext _localctx = new Account_id_listContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_account_id_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2916);
			account_identifier();
			setState(2921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2917);
				match(COMMA);
				setState(2918);
				account_identifier();
				}
				}
				setState(2923);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_dynamic_tableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode DYNAMIC() { return getToken(SnowflakeParser.DYNAMIC, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public List<Object_nameContext> object_name() {
			return getRuleContexts(Object_nameContext.class);
		}
		public Object_nameContext object_name(int i) {
			return getRuleContext(Object_nameContext.class,i);
		}
		public Resume_suspendContext resume_suspend() {
			return getRuleContext(Resume_suspendContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(SnowflakeParser.REFRESH, 0); }
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public List<Dynamic_table_settable_paramsContext> dynamic_table_settable_params() {
			return getRuleContexts(Dynamic_table_settable_paramsContext.class);
		}
		public Dynamic_table_settable_paramsContext dynamic_table_settable_params(int i) {
			return getRuleContext(Dynamic_table_settable_paramsContext.class,i);
		}
		public TerminalNode SWAP() { return getToken(SnowflakeParser.SWAP, 0); }
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public Search_optimization_actionContext search_optimization_action() {
			return getRuleContext(Search_optimization_actionContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public List<Dynamic_table_unsettable_paramsContext> dynamic_table_unsettable_params() {
			return getRuleContexts(Dynamic_table_unsettable_paramsContext.class);
		}
		public Dynamic_table_unsettable_paramsContext dynamic_table_unsettable_params(int i) {
			return getRuleContext(Dynamic_table_unsettable_paramsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Rls_operationsContext rls_operations() {
			return getRuleContext(Rls_operationsContext.class,0);
		}
		public Alter_dynamic_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_dynamic_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_dynamic_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_dynamic_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_dynamic_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_dynamic_tableContext alter_dynamic_table() throws RecognitionException {
		Alter_dynamic_tableContext _localctx = new Alter_dynamic_tableContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_alter_dynamic_table);
		int _la;
		try {
			setState(3001);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2924);
				match(ALTER);
				setState(2925);
				match(DYNAMIC);
				setState(2926);
				match(TABLE);
				setState(2928);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
				case 1:
					{
					setState(2927);
					if_exists();
					}
					break;
				}
				setState(2930);
				object_name();
				setState(2939);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RESUME:
				case SUSPEND:
					{
					setState(2931);
					resume_suspend();
					}
					break;
				case REFRESH:
					{
					setState(2932);
					match(REFRESH);
					}
					break;
				case SET:
					{
					setState(2933);
					match(SET);
					setState(2935); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2934);
						dynamic_table_settable_params();
						}
						}
						setState(2937); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 8804682956801L) != 0) || _la==LAG || _la==MAX_DATA_EXTENSION_TIME_IN_DAYS || _la==TARGET_LAG || _la==WAREHOUSE );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2941);
				match(ALTER);
				setState(2942);
				match(DYNAMIC);
				setState(2943);
				match(TABLE);
				setState(2945);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
				case 1:
					{
					setState(2944);
					if_exists();
					}
					break;
				}
				setState(2947);
				object_name();
				setState(2952);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SWAP:
					{
					setState(2948);
					match(SWAP);
					setState(2949);
					match(WITH);
					}
					break;
				case RENAME:
					{
					setState(2950);
					match(RENAME);
					setState(2951);
					match(TO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2954);
				object_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2956);
				match(ALTER);
				setState(2957);
				match(DYNAMIC);
				setState(2958);
				match(TABLE);
				setState(2960);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
				case 1:
					{
					setState(2959);
					if_exists();
					}
					break;
				}
				setState(2962);
				object_name();
				setState(2965);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(2963);
					set_tags();
					}
					break;
				case UNSET:
					{
					setState(2964);
					unset_tags();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2967);
				match(ALTER);
				setState(2968);
				match(DYNAMIC);
				setState(2969);
				match(TABLE);
				setState(2971);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
				case 1:
					{
					setState(2970);
					if_exists();
					}
					break;
				}
				setState(2973);
				object_name();
				setState(2974);
				search_optimization_action();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2976);
				match(ALTER);
				setState(2977);
				match(DYNAMIC);
				setState(2978);
				match(TABLE);
				setState(2980);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
				case 1:
					{
					setState(2979);
					if_exists();
					}
					break;
				}
				setState(2982);
				object_name();
				setState(2983);
				match(UNSET);
				setState(2984);
				dynamic_table_unsettable_params();
				setState(2989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2985);
					match(COMMA);
					setState(2986);
					dynamic_table_unsettable_params();
					}
					}
					setState(2991);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2992);
				match(ALTER);
				setState(2993);
				match(DYNAMIC);
				setState(2994);
				match(TABLE);
				setState(2996);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
				case 1:
					{
					setState(2995);
					if_exists();
					}
					break;
				}
				setState(2998);
				object_name();
				setState(2999);
				rls_operations();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_external_tableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode EXTERNAL() { return getToken(SnowflakeParser.EXTERNAL, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(SnowflakeParser.REFRESH, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode ADD() { return getToken(SnowflakeParser.ADD, 0); }
		public TerminalNode FILES() { return getToken(SnowflakeParser.FILES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public String_listContext string_list() {
			return getRuleContext(String_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode REMOVE() { return getToken(SnowflakeParser.REMOVE, 0); }
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode AUTO_REFRESH() { return getToken(SnowflakeParser.AUTO_REFRESH, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public Tag_decl_listContext tag_decl_list() {
			return getRuleContext(Tag_decl_listContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(SnowflakeParser.PARTITION, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode LOCATION() { return getToken(SnowflakeParser.LOCATION, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public Alter_external_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_external_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_external_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_external_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_external_tableContext alter_external_table() throws RecognitionException {
		Alter_external_tableContext _localctx = new Alter_external_tableContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_alter_external_table);
		int _la;
		try {
			setState(3104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3003);
				match(ALTER);
				setState(3004);
				match(EXTERNAL);
				setState(3005);
				match(TABLE);
				setState(3007);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
				case 1:
					{
					setState(3006);
					if_exists();
					}
					break;
				}
				setState(3009);
				object_name();
				setState(3010);
				match(REFRESH);
				setState(3012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STRING) {
					{
					setState(3011);
					string();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3014);
				match(ALTER);
				setState(3015);
				match(EXTERNAL);
				setState(3016);
				match(TABLE);
				setState(3018);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
				case 1:
					{
					setState(3017);
					if_exists();
					}
					break;
				}
				setState(3020);
				object_name();
				setState(3021);
				match(ADD);
				setState(3022);
				match(FILES);
				setState(3023);
				match(LR_BRACKET);
				setState(3024);
				string_list();
				setState(3025);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3027);
				match(ALTER);
				setState(3028);
				match(EXTERNAL);
				setState(3029);
				match(TABLE);
				setState(3031);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
				case 1:
					{
					setState(3030);
					if_exists();
					}
					break;
				}
				setState(3033);
				object_name();
				setState(3034);
				match(REMOVE);
				setState(3035);
				match(FILES);
				setState(3036);
				match(LR_BRACKET);
				setState(3037);
				string_list();
				setState(3038);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3040);
				match(ALTER);
				setState(3041);
				match(EXTERNAL);
				setState(3042);
				match(TABLE);
				setState(3044);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
				case 1:
					{
					setState(3043);
					if_exists();
					}
					break;
				}
				setState(3046);
				object_name();
				setState(3047);
				match(SET);
				setState(3051);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO_REFRESH) {
					{
					setState(3048);
					match(AUTO_REFRESH);
					setState(3049);
					match(EQ);
					setState(3050);
					true_false();
					}
				}

				setState(3054);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TAG) {
					{
					setState(3053);
					tag_decl_list();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3056);
				match(ALTER);
				setState(3057);
				match(EXTERNAL);
				setState(3058);
				match(TABLE);
				setState(3060);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
				case 1:
					{
					setState(3059);
					if_exists();
					}
					break;
				}
				setState(3062);
				object_name();
				setState(3063);
				unset_tags();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3065);
				match(ALTER);
				setState(3066);
				match(EXTERNAL);
				setState(3067);
				match(TABLE);
				setState(3068);
				object_name();
				setState(3070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(3069);
					if_exists();
					}
				}

				setState(3072);
				match(ADD);
				setState(3073);
				match(PARTITION);
				setState(3074);
				match(LR_BRACKET);
				setState(3075);
				column_name();
				setState(3076);
				match(EQ);
				setState(3077);
				string();
				setState(3085);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3078);
					match(COMMA);
					setState(3079);
					column_name();
					setState(3080);
					match(EQ);
					setState(3081);
					string();
					}
					}
					setState(3087);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3088);
				match(RR_BRACKET);
				setState(3089);
				match(LOCATION);
				setState(3090);
				string();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3092);
				match(ALTER);
				setState(3093);
				match(EXTERNAL);
				setState(3094);
				match(TABLE);
				setState(3095);
				object_name();
				setState(3097);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(3096);
					if_exists();
					}
				}

				setState(3099);
				match(DROP);
				setState(3100);
				match(PARTITION);
				setState(3101);
				match(LOCATION);
				setState(3102);
				string();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Ignore_edition_checkContext extends ParserRuleContext {
		public TerminalNode IGNORE() { return getToken(SnowflakeParser.IGNORE, 0); }
		public TerminalNode EDITION() { return getToken(SnowflakeParser.EDITION, 0); }
		public TerminalNode CHECK() { return getToken(SnowflakeParser.CHECK, 0); }
		public Ignore_edition_checkContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignore_edition_check; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterIgnore_edition_check(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitIgnore_edition_check(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitIgnore_edition_check(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ignore_edition_checkContext ignore_edition_check() throws RecognitionException {
		Ignore_edition_checkContext _localctx = new Ignore_edition_checkContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_ignore_edition_check);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3106);
			match(IGNORE);
			setState(3107);
			match(EDITION);
			setState(3108);
			match(CHECK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Replication_scheduleContext extends ParserRuleContext {
		public TerminalNode REPLICATION_SCHEDULE() { return getToken(SnowflakeParser.REPLICATION_SCHEDULE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Replication_scheduleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replication_schedule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterReplication_schedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitReplication_schedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitReplication_schedule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Replication_scheduleContext replication_schedule() throws RecognitionException {
		Replication_scheduleContext _localctx = new Replication_scheduleContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_replication_schedule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3110);
			match(REPLICATION_SCHEDULE);
			setState(3111);
			match(EQ);
			setState(3112);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Db_name_listContext extends ParserRuleContext {
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Db_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDb_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDb_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDb_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_name_listContext db_name_list() throws RecognitionException {
		Db_name_listContext _localctx = new Db_name_listContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_db_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3114);
			id_();
			setState(3119);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3115);
				match(COMMA);
				setState(3116);
				id_();
				}
				}
				setState(3121);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Share_name_listContext extends ParserRuleContext {
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Share_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_share_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShare_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShare_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShare_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Share_name_listContext share_name_list() throws RecognitionException {
		Share_name_listContext _localctx = new Share_name_listContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_share_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3122);
			id_();
			setState(3127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3123);
				match(COMMA);
				setState(3124);
				id_();
				}
				}
				setState(3129);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Full_acct_listContext extends ParserRuleContext {
		public List<Full_acctContext> full_acct() {
			return getRuleContexts(Full_acctContext.class);
		}
		public Full_acctContext full_acct(int i) {
			return getRuleContext(Full_acctContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Full_acct_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_acct_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFull_acct_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFull_acct_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFull_acct_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_acct_listContext full_acct_list() throws RecognitionException {
		Full_acct_listContext _localctx = new Full_acct_listContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_full_acct_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3130);
			full_acct();
			setState(3135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3131);
				match(COMMA);
				setState(3132);
				full_acct();
				}
				}
				setState(3137);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_failover_groupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public List<TerminalNode> FAILOVER() { return getTokens(SnowflakeParser.FAILOVER); }
		public TerminalNode FAILOVER(int i) {
			return getToken(SnowflakeParser.FAILOVER, i);
		}
		public List<TerminalNode> GROUP() { return getTokens(SnowflakeParser.GROUP); }
		public TerminalNode GROUP(int i) {
			return getToken(SnowflakeParser.GROUP, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode OBJECT_TYPES() { return getToken(SnowflakeParser.OBJECT_TYPES, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public Object_type_listContext object_type_list() {
			return getRuleContext(Object_type_listContext.class,0);
		}
		public Replication_scheduleContext replication_schedule() {
			return getRuleContext(Replication_scheduleContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SnowflakeParser.ADD, 0); }
		public Db_name_listContext db_name_list() {
			return getRuleContext(Db_name_listContext.class,0);
		}
		public TerminalNode ALLOWED_DATABASES() { return getToken(SnowflakeParser.ALLOWED_DATABASES, 0); }
		public TerminalNode MOVE() { return getToken(SnowflakeParser.MOVE, 0); }
		public TerminalNode DATABASES() { return getToken(SnowflakeParser.DATABASES, 0); }
		public TerminalNode REMOVE() { return getToken(SnowflakeParser.REMOVE, 0); }
		public TerminalNode FROM() { return getToken(SnowflakeParser.FROM, 0); }
		public Share_name_listContext share_name_list() {
			return getRuleContext(Share_name_listContext.class,0);
		}
		public TerminalNode ALLOWED_SHARES() { return getToken(SnowflakeParser.ALLOWED_SHARES, 0); }
		public TerminalNode SHARES() { return getToken(SnowflakeParser.SHARES, 0); }
		public Full_acct_listContext full_acct_list() {
			return getRuleContext(Full_acct_listContext.class,0);
		}
		public TerminalNode ALLOWED_ACCOUNTS() { return getToken(SnowflakeParser.ALLOWED_ACCOUNTS, 0); }
		public Ignore_edition_checkContext ignore_edition_check() {
			return getRuleContext(Ignore_edition_checkContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(SnowflakeParser.REFRESH, 0); }
		public TerminalNode PRIMARY() { return getToken(SnowflakeParser.PRIMARY, 0); }
		public TerminalNode SUSPEND() { return getToken(SnowflakeParser.SUSPEND, 0); }
		public TerminalNode RESUME() { return getToken(SnowflakeParser.RESUME, 0); }
		public Alter_failover_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_failover_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_failover_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_failover_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_failover_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_failover_groupContext alter_failover_group() throws RecognitionException {
		Alter_failover_groupContext _localctx = new Alter_failover_groupContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_alter_failover_group);
		int _la;
		try {
			setState(3292);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3138);
				match(ALTER);
				setState(3139);
				match(FAILOVER);
				setState(3140);
				match(GROUP);
				setState(3142);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
				case 1:
					{
					setState(3141);
					if_exists();
					}
					break;
				}
				setState(3144);
				id_();
				setState(3145);
				match(RENAME);
				setState(3146);
				match(TO);
				setState(3147);
				id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3149);
				match(ALTER);
				setState(3150);
				match(FAILOVER);
				setState(3151);
				match(GROUP);
				setState(3153);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
				case 1:
					{
					setState(3152);
					if_exists();
					}
					break;
				}
				setState(3155);
				id_();
				setState(3156);
				match(SET);
				setState(3160);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OBJECT_TYPES) {
					{
					setState(3157);
					match(OBJECT_TYPES);
					setState(3158);
					match(EQ);
					setState(3159);
					object_type_list();
					}
				}

				setState(3163);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REPLICATION_SCHEDULE) {
					{
					setState(3162);
					replication_schedule();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3165);
				match(ALTER);
				setState(3166);
				match(FAILOVER);
				setState(3167);
				match(GROUP);
				setState(3169);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
				case 1:
					{
					setState(3168);
					if_exists();
					}
					break;
				}
				setState(3171);
				id_();
				setState(3172);
				match(SET);
				setState(3173);
				match(OBJECT_TYPES);
				setState(3174);
				match(EQ);
				setState(3175);
				object_type_list();
				setState(3177);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REPLICATION_SCHEDULE) {
					{
					setState(3176);
					replication_schedule();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3179);
				match(ALTER);
				setState(3180);
				match(FAILOVER);
				setState(3181);
				match(GROUP);
				setState(3183);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					setState(3182);
					if_exists();
					}
					break;
				}
				setState(3185);
				id_();
				setState(3186);
				match(ADD);
				setState(3187);
				db_name_list();
				setState(3188);
				match(TO);
				setState(3189);
				match(ALLOWED_DATABASES);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3191);
				match(ALTER);
				setState(3192);
				match(FAILOVER);
				setState(3193);
				match(GROUP);
				setState(3195);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					setState(3194);
					if_exists();
					}
					break;
				}
				setState(3197);
				id_();
				setState(3198);
				match(MOVE);
				setState(3199);
				match(DATABASES);
				setState(3200);
				db_name_list();
				setState(3201);
				match(TO);
				setState(3202);
				match(FAILOVER);
				setState(3203);
				match(GROUP);
				setState(3204);
				id_();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3206);
				match(ALTER);
				setState(3207);
				match(FAILOVER);
				setState(3208);
				match(GROUP);
				setState(3210);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					setState(3209);
					if_exists();
					}
					break;
				}
				setState(3212);
				id_();
				setState(3213);
				match(REMOVE);
				setState(3214);
				db_name_list();
				setState(3215);
				match(FROM);
				setState(3216);
				match(ALLOWED_DATABASES);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3218);
				match(ALTER);
				setState(3219);
				match(FAILOVER);
				setState(3220);
				match(GROUP);
				setState(3222);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					setState(3221);
					if_exists();
					}
					break;
				}
				setState(3224);
				id_();
				setState(3225);
				match(ADD);
				setState(3226);
				share_name_list();
				setState(3227);
				match(TO);
				setState(3228);
				match(ALLOWED_SHARES);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3230);
				match(ALTER);
				setState(3231);
				match(FAILOVER);
				setState(3232);
				match(GROUP);
				setState(3234);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
				case 1:
					{
					setState(3233);
					if_exists();
					}
					break;
				}
				setState(3236);
				id_();
				setState(3237);
				match(MOVE);
				setState(3238);
				match(SHARES);
				setState(3239);
				share_name_list();
				setState(3240);
				match(TO);
				setState(3241);
				match(FAILOVER);
				setState(3242);
				match(GROUP);
				setState(3243);
				id_();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3245);
				match(ALTER);
				setState(3246);
				match(FAILOVER);
				setState(3247);
				match(GROUP);
				setState(3249);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					setState(3248);
					if_exists();
					}
					break;
				}
				setState(3251);
				id_();
				setState(3252);
				match(REMOVE);
				setState(3253);
				share_name_list();
				setState(3254);
				match(FROM);
				setState(3255);
				match(ALLOWED_SHARES);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3257);
				match(ALTER);
				setState(3258);
				match(FAILOVER);
				setState(3259);
				match(GROUP);
				setState(3261);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
				case 1:
					{
					setState(3260);
					if_exists();
					}
					break;
				}
				setState(3263);
				id_();
				setState(3264);
				match(ADD);
				setState(3265);
				full_acct_list();
				setState(3266);
				match(TO);
				setState(3267);
				match(ALLOWED_ACCOUNTS);
				setState(3269);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(3268);
					ignore_edition_check();
					}
				}

				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3271);
				match(ALTER);
				setState(3272);
				match(FAILOVER);
				setState(3273);
				match(GROUP);
				setState(3275);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					setState(3274);
					if_exists();
					}
					break;
				}
				setState(3277);
				id_();
				setState(3278);
				match(REMOVE);
				setState(3279);
				full_acct_list();
				setState(3280);
				match(FROM);
				setState(3281);
				match(ALLOWED_ACCOUNTS);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3283);
				match(ALTER);
				setState(3284);
				match(FAILOVER);
				setState(3285);
				match(GROUP);
				setState(3287);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
				case 1:
					{
					setState(3286);
					if_exists();
					}
					break;
				}
				setState(3289);
				id_();
				setState(3290);
				_la = _input.LA(1);
				if ( !(((((_la - 534)) & ~0x3f) == 0 && ((1L << (_la - 534)) & 144115189149597697L) != 0) || _la==SUSPEND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_file_formatContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode FILE() { return getToken(SnowflakeParser.FILE, 0); }
		public TerminalNode FORMAT() { return getToken(SnowflakeParser.FORMAT, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public List<Format_type_optionsContext> format_type_options() {
			return getRuleContexts(Format_type_optionsContext.class);
		}
		public Format_type_optionsContext format_type_options(int i) {
			return getRuleContext(Format_type_optionsContext.class,i);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Alter_file_formatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_file_format; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_file_format(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_file_format(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_file_format(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_file_formatContext alter_file_format() throws RecognitionException {
		Alter_file_formatContext _localctx = new Alter_file_formatContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_alter_file_format);
		int _la;
		try {
			setState(3322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3294);
				match(ALTER);
				setState(3295);
				match(FILE);
				setState(3296);
				match(FORMAT);
				setState(3298);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					setState(3297);
					if_exists();
					}
					break;
				}
				setState(3300);
				id_();
				setState(3301);
				match(RENAME);
				setState(3302);
				match(TO);
				setState(3303);
				id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3305);
				match(ALTER);
				setState(3306);
				match(FILE);
				setState(3307);
				match(FORMAT);
				setState(3309);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					setState(3308);
					if_exists();
					}
					break;
				}
				setState(3311);
				id_();
				setState(3312);
				match(SET);
				{
				setState(3316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ALLOW_DUPLICATE || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 2251799813689859L) != 0) || ((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 7205918283424366593L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & 576462951326679059L) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 576478344489467905L) != 0) || ((((_la - 530)) & ~0x3f) == 0 && ((1L << (_la - 530)) & 35185512939521L) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & 246290604622035L) != 0) || ((((_la - 745)) & ~0x3f) == 0 && ((1L << (_la - 745)) & 268443649L) != 0) || _la==ZSTD) {
					{
					{
					setState(3313);
					format_type_options();
					}
					}
					setState(3318);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3320);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(3319);
					comment_clause();
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_functionContext extends ParserRuleContext {
		public Alter_function_signatureContext alter_function_signature() {
			return getRuleContext(Alter_function_signatureContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode SECURE() { return getToken(SnowflakeParser.SECURE, 0); }
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public TerminalNode API_INTEGRATION() { return getToken(SnowflakeParser.API_INTEGRATION, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode HEADERS() { return getToken(SnowflakeParser.HEADERS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public List<Header_declContext> header_decl() {
			return getRuleContexts(Header_declContext.class);
		}
		public Header_declContext header_decl(int i) {
			return getRuleContext(Header_declContext.class,i);
		}
		public TerminalNode CONTEXT_HEADERS() { return getToken(SnowflakeParser.CONTEXT_HEADERS, 0); }
		public TerminalNode MAX_BATCH_ROWS() { return getToken(SnowflakeParser.MAX_BATCH_ROWS, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode COMPRESSION() { return getToken(SnowflakeParser.COMPRESSION, 0); }
		public Compression_typeContext compression_type() {
			return getRuleContext(Compression_typeContext.class,0);
		}
		public TerminalNode REQUEST_TRANSLATOR() { return getToken(SnowflakeParser.REQUEST_TRANSLATOR, 0); }
		public TerminalNode RESPONSE_TRANSLATOR() { return getToken(SnowflakeParser.RESPONSE_TRANSLATOR, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_functionContext alter_function() throws RecognitionException {
		Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_alter_function);
		int _la;
		try {
			setState(3395);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3324);
				alter_function_signature();
				setState(3325);
				match(RENAME);
				setState(3326);
				match(TO);
				setState(3327);
				id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3329);
				alter_function_signature();
				setState(3330);
				match(SET);
				setState(3331);
				comment_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3333);
				alter_function_signature();
				setState(3334);
				match(SET);
				setState(3335);
				match(SECURE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3337);
				alter_function_signature();
				setState(3338);
				match(UNSET);
				setState(3339);
				_la = _input.LA(1);
				if ( !(_la==COMMENT || _la==SECURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3341);
				alter_function_signature();
				setState(3342);
				match(SET);
				setState(3343);
				match(API_INTEGRATION);
				setState(3344);
				match(EQ);
				setState(3345);
				id_();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3347);
				alter_function_signature();
				setState(3348);
				match(SET);
				setState(3349);
				match(HEADERS);
				setState(3350);
				match(EQ);
				setState(3351);
				match(LR_BRACKET);
				setState(3355);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==STRING) {
					{
					{
					setState(3352);
					header_decl();
					}
					}
					setState(3357);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3358);
				match(RR_BRACKET);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3360);
				alter_function_signature();
				setState(3361);
				match(SET);
				setState(3362);
				match(CONTEXT_HEADERS);
				setState(3363);
				match(EQ);
				setState(3364);
				match(LR_BRACKET);
				setState(3368);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					{
					setState(3365);
					id_();
					}
					}
					setState(3370);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3371);
				match(RR_BRACKET);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3373);
				alter_function_signature();
				setState(3374);
				match(SET);
				setState(3375);
				match(MAX_BATCH_ROWS);
				setState(3376);
				match(EQ);
				setState(3377);
				num();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3379);
				alter_function_signature();
				setState(3380);
				match(SET);
				setState(3381);
				match(COMPRESSION);
				setState(3382);
				match(EQ);
				setState(3383);
				compression_type();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3385);
				alter_function_signature();
				setState(3386);
				match(SET);
				setState(3387);
				_la = _input.LA(1);
				if ( !(_la==REQUEST_TRANSLATOR || _la==RESPONSE_TRANSLATOR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3388);
				match(EQ);
				setState(3389);
				id_();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3391);
				alter_function_signature();
				setState(3392);
				match(UNSET);
				setState(3393);
				_la = _input.LA(1);
				if ( !(((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 4101L) != 0) || _la==HEADERS || _la==MAX_BATCH_ROWS || _la==REQUEST_TRANSLATOR || _la==RESPONSE_TRANSLATOR || _la==SECURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_function_signatureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(SnowflakeParser.FUNCTION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Data_type_listContext data_type_list() {
			return getRuleContext(Data_type_listContext.class,0);
		}
		public Alter_function_signatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function_signature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_function_signature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_function_signature(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_function_signature(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_function_signatureContext alter_function_signature() throws RecognitionException {
		Alter_function_signatureContext _localctx = new Alter_function_signatureContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_alter_function_signature);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3397);
			match(ALTER);
			setState(3398);
			match(FUNCTION);
			setState(3400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
			case 1:
				{
				setState(3399);
				if_exists();
				}
				break;
			}
			setState(3402);
			id_();
			setState(3403);
			match(LR_BRACKET);
			setState(3405);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHAR || _la==CHARACTER || _la==INT || _la==NUMBER || _la==OBJECT || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & 8841L) != 0) || ((((_la - 838)) & ~0x3f) == 0 && ((1L << (_la - 838)) & 4294934525L) != 0)) {
				{
				setState(3404);
				data_type_list();
				}
			}

			setState(3407);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Data_type_listContext extends ParserRuleContext {
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Data_type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterData_type_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitData_type_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitData_type_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_type_listContext data_type_list() throws RecognitionException {
		Data_type_listContext _localctx = new Data_type_listContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_data_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3409);
			data_type();
			setState(3414);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3410);
				match(COMMA);
				setState(3411);
				data_type();
				}
				}
				setState(3416);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_masking_policyContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode MASKING() { return getToken(SnowflakeParser.MASKING, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode BODY() { return getToken(SnowflakeParser.BODY, 0); }
		public TerminalNode ARROW() { return getToken(SnowflakeParser.ARROW, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Alter_masking_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_masking_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_masking_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_masking_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_masking_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_masking_policyContext alter_masking_policy() throws RecognitionException {
		Alter_masking_policyContext _localctx = new Alter_masking_policyContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_alter_masking_policy);
		try {
			setState(3450);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3417);
				match(ALTER);
				setState(3418);
				match(MASKING);
				setState(3419);
				match(POLICY);
				setState(3421);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
				case 1:
					{
					setState(3420);
					if_exists();
					}
					break;
				}
				setState(3423);
				id_();
				setState(3424);
				match(SET);
				setState(3425);
				match(BODY);
				setState(3426);
				match(ARROW);
				setState(3427);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3429);
				match(ALTER);
				setState(3430);
				match(MASKING);
				setState(3431);
				match(POLICY);
				setState(3433);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
				case 1:
					{
					setState(3432);
					if_exists();
					}
					break;
				}
				setState(3435);
				id_();
				setState(3436);
				match(RENAME);
				setState(3437);
				match(TO);
				setState(3438);
				id_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3440);
				match(ALTER);
				setState(3441);
				match(MASKING);
				setState(3442);
				match(POLICY);
				setState(3444);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
				case 1:
					{
					setState(3443);
					if_exists();
					}
					break;
				}
				setState(3446);
				id_();
				setState(3447);
				match(SET);
				setState(3448);
				comment_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_materialized_viewContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode MATERIALIZED() { return getToken(SnowflakeParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(SnowflakeParser.VIEW, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public TerminalNode CLUSTER() { return getToken(SnowflakeParser.CLUSTER, 0); }
		public TerminalNode BY() { return getToken(SnowflakeParser.BY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode CLUSTERING() { return getToken(SnowflakeParser.CLUSTERING, 0); }
		public TerminalNode KEY() { return getToken(SnowflakeParser.KEY, 0); }
		public Resume_suspendContext resume_suspend() {
			return getRuleContext(Resume_suspendContext.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode SECURE() { return getToken(SnowflakeParser.SECURE, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public TerminalNode RECLUSTER() { return getToken(SnowflakeParser.RECLUSTER, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Alter_materialized_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_materialized_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_materialized_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_materialized_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_materialized_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_materialized_viewContext alter_materialized_view() throws RecognitionException {
		Alter_materialized_viewContext _localctx = new Alter_materialized_viewContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_alter_materialized_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3452);
			match(ALTER);
			setState(3453);
			match(MATERIALIZED);
			setState(3454);
			match(VIEW);
			setState(3455);
			id_();
			setState(3481);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(3456);
				match(RENAME);
				setState(3457);
				match(TO);
				setState(3458);
				id_();
				}
				break;
			case CLUSTER:
				{
				setState(3459);
				match(CLUSTER);
				setState(3460);
				match(BY);
				setState(3461);
				match(LR_BRACKET);
				setState(3462);
				expr_list();
				setState(3463);
				match(RR_BRACKET);
				}
				break;
			case DROP:
				{
				setState(3465);
				match(DROP);
				setState(3466);
				match(CLUSTERING);
				setState(3467);
				match(KEY);
				}
				break;
			case RESUME:
			case SUSPEND:
				{
				setState(3468);
				resume_suspend();
				setState(3470);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RECLUSTER) {
					{
					setState(3469);
					match(RECLUSTER);
					}
				}

				}
				break;
			case SET:
				{
				setState(3472);
				match(SET);
				{
				setState(3474);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURE) {
					{
					setState(3473);
					match(SECURE);
					}
				}

				setState(3477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(3476);
					comment_clause();
					}
				}

				}
				}
				break;
			case UNSET:
				{
				setState(3479);
				match(UNSET);
				setState(3480);
				_la = _input.LA(1);
				if ( !(_la==COMMENT || _la==SECURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_network_policyContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode NETWORK() { return getToken(SnowflakeParser.NETWORK, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Alter_network_policy_optsContext alter_network_policy_opts() {
			return getRuleContext(Alter_network_policy_optsContext.class,0);
		}
		public Alter_network_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_network_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_network_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_network_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_network_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_network_policyContext alter_network_policy() throws RecognitionException {
		Alter_network_policyContext _localctx = new Alter_network_policyContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_alter_network_policy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3483);
			match(ALTER);
			setState(3484);
			match(NETWORK);
			setState(3485);
			match(POLICY);
			setState(3486);
			alter_network_policy_opts();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_notification_integrationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public Cloud_provider_params_autoContext cloud_provider_params_auto() {
			return getRuleContext(Cloud_provider_params_autoContext.class,0);
		}
		public TerminalNode NOTIFICATION() { return getToken(SnowflakeParser.NOTIFICATION, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Enabled_true_falseContext enabled_true_false() {
			return getRuleContext(Enabled_true_falseContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Cloud_provider_params_pushContext cloud_provider_params_push() {
			return getRuleContext(Cloud_provider_params_pushContext.class,0);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode ENABLED() { return getToken(SnowflakeParser.ENABLED, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Alter_notification_integrationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_notification_integration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_notification_integration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_notification_integration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_notification_integration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_notification_integrationContext alter_notification_integration() throws RecognitionException {
		Alter_notification_integrationContext _localctx = new Alter_notification_integrationContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_alter_notification_integration);
		int _la;
		try {
			setState(3548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3488);
				match(ALTER);
				setState(3490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOTIFICATION) {
					{
					setState(3489);
					match(NOTIFICATION);
					}
				}

				setState(3492);
				match(INTEGRATION);
				setState(3494);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
				case 1:
					{
					setState(3493);
					if_exists();
					}
					break;
				}
				setState(3496);
				id_();
				setState(3497);
				match(SET);
				setState(3499);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENABLED) {
					{
					setState(3498);
					enabled_true_false();
					}
				}

				setState(3501);
				cloud_provider_params_auto();
				setState(3503);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(3502);
					comment_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3505);
				match(ALTER);
				setState(3507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOTIFICATION) {
					{
					setState(3506);
					match(NOTIFICATION);
					}
				}

				setState(3509);
				match(INTEGRATION);
				setState(3511);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
				case 1:
					{
					setState(3510);
					if_exists();
					}
					break;
				}
				setState(3513);
				id_();
				setState(3514);
				match(SET);
				setState(3516);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENABLED) {
					{
					setState(3515);
					enabled_true_false();
					}
				}

				setState(3518);
				cloud_provider_params_push();
				setState(3520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(3519);
					comment_clause();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3522);
				match(ALTER);
				setState(3524);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOTIFICATION) {
					{
					setState(3523);
					match(NOTIFICATION);
					}
				}

				setState(3526);
				match(INTEGRATION);
				setState(3527);
				id_();
				setState(3528);
				set_tags();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3530);
				match(ALTER);
				setState(3532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOTIFICATION) {
					{
					setState(3531);
					match(NOTIFICATION);
					}
				}

				setState(3534);
				match(INTEGRATION);
				setState(3535);
				id_();
				setState(3536);
				unset_tags();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3538);
				match(ALTER);
				setState(3540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOTIFICATION) {
					{
					setState(3539);
					match(NOTIFICATION);
					}
				}

				setState(3542);
				match(INTEGRATION);
				setState(3543);
				if_exists();
				setState(3544);
				id_();
				setState(3545);
				match(UNSET);
				setState(3546);
				_la = _input.LA(1);
				if ( !(_la==COMMENT || _la==ENABLED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_pipeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode PIPE() { return getToken(SnowflakeParser.PIPE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Object_propertiesContext object_properties() {
			return getRuleContext(Object_propertiesContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode PIPE_EXECUTION_PAUSED() { return getToken(SnowflakeParser.PIPE_EXECUTION_PAUSED, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public TerminalNode REFRESH() { return getToken(SnowflakeParser.REFRESH, 0); }
		public TerminalNode PREFIX() { return getToken(SnowflakeParser.PREFIX, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode MODIFIED_AFTER() { return getToken(SnowflakeParser.MODIFIED_AFTER, 0); }
		public Alter_pipeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_pipe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_pipe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_pipe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_pipe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_pipeContext alter_pipe() throws RecognitionException {
		Alter_pipeContext _localctx = new Alter_pipeContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_alter_pipe);
		int _la;
		try {
			setState(3610);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3550);
				match(ALTER);
				setState(3551);
				match(PIPE);
				setState(3553);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
				case 1:
					{
					setState(3552);
					if_exists();
					}
					break;
				}
				setState(3555);
				id_();
				setState(3556);
				match(SET);
				{
				setState(3558);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					setState(3557);
					object_properties();
					}
					break;
				}
				setState(3561);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(3560);
					comment_clause();
					}
				}

				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3563);
				match(ALTER);
				setState(3564);
				match(PIPE);
				setState(3565);
				id_();
				setState(3566);
				set_tags();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3568);
				match(ALTER);
				setState(3569);
				match(PIPE);
				setState(3570);
				id_();
				setState(3571);
				unset_tags();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3573);
				match(ALTER);
				setState(3574);
				match(PIPE);
				setState(3576);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					setState(3575);
					if_exists();
					}
					break;
				}
				setState(3578);
				id_();
				setState(3579);
				match(UNSET);
				setState(3580);
				match(PIPE_EXECUTION_PAUSED);
				setState(3581);
				match(EQ);
				setState(3582);
				true_false();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3584);
				match(ALTER);
				setState(3585);
				match(PIPE);
				setState(3587);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
				case 1:
					{
					setState(3586);
					if_exists();
					}
					break;
				}
				setState(3589);
				id_();
				setState(3590);
				match(UNSET);
				setState(3591);
				match(COMMENT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3593);
				match(ALTER);
				setState(3594);
				match(PIPE);
				setState(3596);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
				case 1:
					{
					setState(3595);
					if_exists();
					}
					break;
				}
				setState(3598);
				id_();
				setState(3599);
				match(REFRESH);
				setState(3603);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PREFIX) {
					{
					setState(3600);
					match(PREFIX);
					setState(3601);
					match(EQ);
					setState(3602);
					string();
					}
				}

				setState(3608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MODIFIED_AFTER) {
					{
					setState(3605);
					match(MODIFIED_AFTER);
					setState(3606);
					match(EQ);
					setState(3607);
					string();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_procedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(SnowflakeParser.PROCEDURE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Data_type_listContext data_type_list() {
			return getRuleContext(Data_type_listContext.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public TerminalNode EXECUTE() { return getToken(SnowflakeParser.EXECUTE, 0); }
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public Caller_ownerContext caller_owner() {
			return getRuleContext(Caller_ownerContext.class,0);
		}
		public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_procedureContext alter_procedure() throws RecognitionException {
		Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_alter_procedure);
		int _la;
		try {
			setState(3670);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3612);
				match(ALTER);
				setState(3613);
				match(PROCEDURE);
				setState(3615);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
				case 1:
					{
					setState(3614);
					if_exists();
					}
					break;
				}
				setState(3617);
				id_();
				setState(3618);
				match(LR_BRACKET);
				setState(3620);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR || _la==CHARACTER || _la==INT || _la==NUMBER || _la==OBJECT || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & 8841L) != 0) || ((((_la - 838)) & ~0x3f) == 0 && ((1L << (_la - 838)) & 4294934525L) != 0)) {
					{
					setState(3619);
					data_type_list();
					}
				}

				setState(3622);
				match(RR_BRACKET);
				setState(3623);
				match(RENAME);
				setState(3624);
				match(TO);
				setState(3625);
				id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3627);
				match(ALTER);
				setState(3628);
				match(PROCEDURE);
				setState(3630);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
				case 1:
					{
					setState(3629);
					if_exists();
					}
					break;
				}
				setState(3632);
				id_();
				setState(3633);
				match(LR_BRACKET);
				setState(3635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR || _la==CHARACTER || _la==INT || _la==NUMBER || _la==OBJECT || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & 8841L) != 0) || ((((_la - 838)) & ~0x3f) == 0 && ((1L << (_la - 838)) & 4294934525L) != 0)) {
					{
					setState(3634);
					data_type_list();
					}
				}

				setState(3637);
				match(RR_BRACKET);
				setState(3638);
				match(SET);
				setState(3639);
				comment_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3641);
				match(ALTER);
				setState(3642);
				match(PROCEDURE);
				setState(3644);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
				case 1:
					{
					setState(3643);
					if_exists();
					}
					break;
				}
				setState(3646);
				id_();
				setState(3647);
				match(LR_BRACKET);
				setState(3649);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR || _la==CHARACTER || _la==INT || _la==NUMBER || _la==OBJECT || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & 8841L) != 0) || ((((_la - 838)) & ~0x3f) == 0 && ((1L << (_la - 838)) & 4294934525L) != 0)) {
					{
					setState(3648);
					data_type_list();
					}
				}

				setState(3651);
				match(RR_BRACKET);
				setState(3652);
				match(UNSET);
				setState(3653);
				match(COMMENT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3655);
				match(ALTER);
				setState(3656);
				match(PROCEDURE);
				setState(3658);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
				case 1:
					{
					setState(3657);
					if_exists();
					}
					break;
				}
				setState(3660);
				id_();
				setState(3661);
				match(LR_BRACKET);
				setState(3663);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR || _la==CHARACTER || _la==INT || _la==NUMBER || _la==OBJECT || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & 8841L) != 0) || ((((_la - 838)) & ~0x3f) == 0 && ((1L << (_la - 838)) & 4294934525L) != 0)) {
					{
					setState(3662);
					data_type_list();
					}
				}

				setState(3665);
				match(RR_BRACKET);
				setState(3666);
				match(EXECUTE);
				setState(3667);
				match(AS);
				setState(3668);
				caller_owner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_replication_groupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public List<TerminalNode> REPLICATION() { return getTokens(SnowflakeParser.REPLICATION); }
		public TerminalNode REPLICATION(int i) {
			return getToken(SnowflakeParser.REPLICATION, i);
		}
		public List<TerminalNode> GROUP() { return getTokens(SnowflakeParser.GROUP); }
		public TerminalNode GROUP(int i) {
			return getToken(SnowflakeParser.GROUP, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode OBJECT_TYPES() { return getToken(SnowflakeParser.OBJECT_TYPES, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public Object_type_listContext object_type_list() {
			return getRuleContext(Object_type_listContext.class,0);
		}
		public TerminalNode REPLICATION_SCHEDULE() { return getToken(SnowflakeParser.REPLICATION_SCHEDULE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode ALLOWED_INTEGRATION_TYPES() { return getToken(SnowflakeParser.ALLOWED_INTEGRATION_TYPES, 0); }
		public List<Integration_type_nameContext> integration_type_name() {
			return getRuleContexts(Integration_type_nameContext.class);
		}
		public Integration_type_nameContext integration_type_name(int i) {
			return getRuleContext(Integration_type_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode ADD() { return getToken(SnowflakeParser.ADD, 0); }
		public Db_name_listContext db_name_list() {
			return getRuleContext(Db_name_listContext.class,0);
		}
		public TerminalNode ALLOWED_DATABASES() { return getToken(SnowflakeParser.ALLOWED_DATABASES, 0); }
		public TerminalNode MOVE() { return getToken(SnowflakeParser.MOVE, 0); }
		public TerminalNode DATABASES() { return getToken(SnowflakeParser.DATABASES, 0); }
		public TerminalNode REMOVE() { return getToken(SnowflakeParser.REMOVE, 0); }
		public TerminalNode FROM() { return getToken(SnowflakeParser.FROM, 0); }
		public Share_name_listContext share_name_list() {
			return getRuleContext(Share_name_listContext.class,0);
		}
		public TerminalNode ALLOWED_SHARES() { return getToken(SnowflakeParser.ALLOWED_SHARES, 0); }
		public TerminalNode SHARES() { return getToken(SnowflakeParser.SHARES, 0); }
		public Account_id_listContext account_id_list() {
			return getRuleContext(Account_id_listContext.class,0);
		}
		public TerminalNode ALLOWED_ACCOUNTS() { return getToken(SnowflakeParser.ALLOWED_ACCOUNTS, 0); }
		public Ignore_edition_checkContext ignore_edition_check() {
			return getRuleContext(Ignore_edition_checkContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(SnowflakeParser.REFRESH, 0); }
		public TerminalNode SUSPEND() { return getToken(SnowflakeParser.SUSPEND, 0); }
		public TerminalNode RESUME() { return getToken(SnowflakeParser.RESUME, 0); }
		public Alter_replication_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_replication_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_replication_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_replication_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_replication_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_replication_groupContext alter_replication_group() throws RecognitionException {
		Alter_replication_groupContext _localctx = new Alter_replication_groupContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_alter_replication_group);
		int _la;
		try {
			setState(3858);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3672);
				match(ALTER);
				setState(3673);
				match(REPLICATION);
				setState(3674);
				match(GROUP);
				setState(3676);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
				case 1:
					{
					setState(3675);
					if_exists();
					}
					break;
				}
				setState(3678);
				id_();
				setState(3679);
				match(RENAME);
				setState(3680);
				match(TO);
				setState(3681);
				id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3683);
				match(ALTER);
				setState(3684);
				match(REPLICATION);
				setState(3685);
				match(GROUP);
				setState(3687);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					setState(3686);
					if_exists();
					}
					break;
				}
				setState(3689);
				id_();
				setState(3690);
				match(SET);
				setState(3694);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OBJECT_TYPES) {
					{
					setState(3691);
					match(OBJECT_TYPES);
					setState(3692);
					match(EQ);
					setState(3693);
					object_type_list();
					}
				}

				setState(3699);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REPLICATION_SCHEDULE) {
					{
					setState(3696);
					match(REPLICATION_SCHEDULE);
					setState(3697);
					match(EQ);
					setState(3698);
					string();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3701);
				match(ALTER);
				setState(3702);
				match(REPLICATION);
				setState(3703);
				match(GROUP);
				setState(3705);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
				case 1:
					{
					setState(3704);
					if_exists();
					}
					break;
				}
				setState(3707);
				id_();
				setState(3708);
				match(SET);
				setState(3709);
				match(OBJECT_TYPES);
				setState(3710);
				match(EQ);
				setState(3711);
				object_type_list();
				setState(3712);
				match(ALLOWED_INTEGRATION_TYPES);
				setState(3713);
				match(EQ);
				setState(3714);
				integration_type_name();
				setState(3719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3715);
					match(COMMA);
					setState(3716);
					integration_type_name();
					}
					}
					setState(3721);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3725);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REPLICATION_SCHEDULE) {
					{
					setState(3722);
					match(REPLICATION_SCHEDULE);
					setState(3723);
					match(EQ);
					setState(3724);
					string();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3727);
				match(ALTER);
				setState(3728);
				match(REPLICATION);
				setState(3729);
				match(GROUP);
				setState(3731);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
				case 1:
					{
					setState(3730);
					if_exists();
					}
					break;
				}
				setState(3733);
				id_();
				setState(3734);
				match(ADD);
				setState(3735);
				db_name_list();
				setState(3736);
				match(TO);
				setState(3737);
				match(ALLOWED_DATABASES);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3739);
				match(ALTER);
				setState(3740);
				match(REPLICATION);
				setState(3741);
				match(GROUP);
				setState(3743);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
				case 1:
					{
					setState(3742);
					if_exists();
					}
					break;
				}
				setState(3745);
				id_();
				setState(3746);
				match(MOVE);
				setState(3747);
				match(DATABASES);
				setState(3748);
				db_name_list();
				setState(3749);
				match(TO);
				setState(3750);
				match(REPLICATION);
				setState(3751);
				match(GROUP);
				setState(3752);
				id_();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3754);
				match(ALTER);
				setState(3755);
				match(REPLICATION);
				setState(3756);
				match(GROUP);
				setState(3758);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					setState(3757);
					if_exists();
					}
					break;
				}
				setState(3760);
				id_();
				setState(3761);
				match(REMOVE);
				setState(3762);
				db_name_list();
				setState(3763);
				match(FROM);
				setState(3764);
				match(ALLOWED_DATABASES);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3766);
				match(ALTER);
				setState(3767);
				match(REPLICATION);
				setState(3768);
				match(GROUP);
				setState(3770);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
				case 1:
					{
					setState(3769);
					if_exists();
					}
					break;
				}
				setState(3772);
				id_();
				setState(3773);
				match(ADD);
				setState(3774);
				share_name_list();
				setState(3775);
				match(TO);
				setState(3776);
				match(ALLOWED_SHARES);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3778);
				match(ALTER);
				setState(3779);
				match(REPLICATION);
				setState(3780);
				match(GROUP);
				setState(3782);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
				case 1:
					{
					setState(3781);
					if_exists();
					}
					break;
				}
				setState(3784);
				id_();
				setState(3785);
				match(MOVE);
				setState(3786);
				match(SHARES);
				setState(3787);
				share_name_list();
				setState(3788);
				match(TO);
				setState(3789);
				match(REPLICATION);
				setState(3790);
				match(GROUP);
				setState(3791);
				id_();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3793);
				match(ALTER);
				setState(3794);
				match(REPLICATION);
				setState(3795);
				match(GROUP);
				setState(3797);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
				case 1:
					{
					setState(3796);
					if_exists();
					}
					break;
				}
				setState(3799);
				id_();
				setState(3800);
				match(REMOVE);
				setState(3801);
				share_name_list();
				setState(3802);
				match(FROM);
				setState(3803);
				match(ALLOWED_SHARES);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3805);
				match(ALTER);
				setState(3806);
				match(REPLICATION);
				setState(3807);
				match(GROUP);
				setState(3809);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
				case 1:
					{
					setState(3808);
					if_exists();
					}
					break;
				}
				setState(3811);
				id_();
				setState(3812);
				match(ADD);
				setState(3813);
				account_id_list();
				setState(3814);
				match(TO);
				setState(3815);
				match(ALLOWED_ACCOUNTS);
				setState(3817);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(3816);
					ignore_edition_check();
					}
				}

				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3819);
				match(ALTER);
				setState(3820);
				match(REPLICATION);
				setState(3821);
				match(GROUP);
				setState(3823);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
				case 1:
					{
					setState(3822);
					if_exists();
					}
					break;
				}
				setState(3825);
				id_();
				setState(3826);
				match(REMOVE);
				setState(3827);
				account_id_list();
				setState(3828);
				match(FROM);
				setState(3829);
				match(ALLOWED_ACCOUNTS);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3831);
				match(ALTER);
				setState(3832);
				match(REPLICATION);
				setState(3833);
				match(GROUP);
				setState(3835);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
				case 1:
					{
					setState(3834);
					if_exists();
					}
					break;
				}
				setState(3837);
				id_();
				setState(3838);
				match(REFRESH);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3840);
				match(ALTER);
				setState(3841);
				match(REPLICATION);
				setState(3842);
				match(GROUP);
				setState(3844);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
				case 1:
					{
					setState(3843);
					if_exists();
					}
					break;
				}
				setState(3846);
				id_();
				setState(3847);
				match(SUSPEND);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3849);
				match(ALTER);
				setState(3850);
				match(REPLICATION);
				setState(3851);
				match(GROUP);
				setState(3853);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
				case 1:
					{
					setState(3852);
					if_exists();
					}
					break;
				}
				setState(3855);
				id_();
				setState(3856);
				match(RESUME);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Credit_quotaContext extends ParserRuleContext {
		public TerminalNode CREDIT_QUOTA() { return getToken(SnowflakeParser.CREDIT_QUOTA, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public Credit_quotaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_credit_quota; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCredit_quota(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCredit_quota(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCredit_quota(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Credit_quotaContext credit_quota() throws RecognitionException {
		Credit_quotaContext _localctx = new Credit_quotaContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_credit_quota);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3860);
			match(CREDIT_QUOTA);
			setState(3861);
			match(EQ);
			setState(3862);
			num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FrequencyContext extends ParserRuleContext {
		public TerminalNode FREQUENCY() { return getToken(SnowflakeParser.FREQUENCY, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode MONTHLY() { return getToken(SnowflakeParser.MONTHLY, 0); }
		public TerminalNode DAILY() { return getToken(SnowflakeParser.DAILY, 0); }
		public TerminalNode WEEKLY() { return getToken(SnowflakeParser.WEEKLY, 0); }
		public TerminalNode YEARLY() { return getToken(SnowflakeParser.YEARLY, 0); }
		public TerminalNode NEVER() { return getToken(SnowflakeParser.NEVER, 0); }
		public FrequencyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frequency; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFrequency(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFrequency(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFrequency(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrequencyContext frequency() throws RecognitionException {
		FrequencyContext _localctx = new FrequencyContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_frequency);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3864);
			match(FREQUENCY);
			setState(3865);
			match(EQ);
			setState(3866);
			_la = _input.LA(1);
			if ( !(_la==DAILY || _la==MONTHLY || _la==NEVER || _la==WEEKLY || _la==YEARLY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Notify_usersContext extends ParserRuleContext {
		public TerminalNode NOTIFY_USERS() { return getToken(SnowflakeParser.NOTIFY_USERS, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Notify_usersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notify_users; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterNotify_users(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitNotify_users(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitNotify_users(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Notify_usersContext notify_users() throws RecognitionException {
		Notify_usersContext _localctx = new Notify_usersContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_notify_users);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3868);
			match(NOTIFY_USERS);
			setState(3869);
			match(EQ);
			setState(3870);
			match(LR_BRACKET);
			setState(3871);
			id_();
			setState(3876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3872);
				match(COMMA);
				setState(3873);
				id_();
				}
				}
				setState(3878);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3879);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TriggerDefinitionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(SnowflakeParser.PERCENT, 0); }
		public TerminalNode DO() { return getToken(SnowflakeParser.DO, 0); }
		public TerminalNode SUSPEND() { return getToken(SnowflakeParser.SUSPEND, 0); }
		public TerminalNode SUSPEND_IMMEDIATE() { return getToken(SnowflakeParser.SUSPEND_IMMEDIATE, 0); }
		public TerminalNode NOTIFY() { return getToken(SnowflakeParser.NOTIFY, 0); }
		public TriggerDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTriggerDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTriggerDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTriggerDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerDefinitionContext triggerDefinition() throws RecognitionException {
		TriggerDefinitionContext _localctx = new TriggerDefinitionContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_triggerDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3881);
			match(ON);
			setState(3882);
			num();
			setState(3883);
			match(PERCENT);
			setState(3884);
			match(DO);
			setState(3885);
			_la = _input.LA(1);
			if ( !(_la==NOTIFY || _la==SUSPEND || _la==SUSPEND_IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_resource_monitorContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode RESOURCE() { return getToken(SnowflakeParser.RESOURCE, 0); }
		public TerminalNode MONITOR() { return getToken(SnowflakeParser.MONITOR, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public Notify_usersContext notify_users() {
			return getRuleContext(Notify_usersContext.class,0);
		}
		public Credit_quotaContext credit_quota() {
			return getRuleContext(Credit_quotaContext.class,0);
		}
		public FrequencyContext frequency() {
			return getRuleContext(FrequencyContext.class,0);
		}
		public TerminalNode START_TIMESTAMP() { return getToken(SnowflakeParser.START_TIMESTAMP, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode IMMEDIATELY() { return getToken(SnowflakeParser.IMMEDIATELY, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode END_TIMESTAMP() { return getToken(SnowflakeParser.END_TIMESTAMP, 0); }
		public TerminalNode TRIGGERS() { return getToken(SnowflakeParser.TRIGGERS, 0); }
		public List<TriggerDefinitionContext> triggerDefinition() {
			return getRuleContexts(TriggerDefinitionContext.class);
		}
		public TriggerDefinitionContext triggerDefinition(int i) {
			return getRuleContext(TriggerDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Alter_resource_monitorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_resource_monitor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_resource_monitor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_resource_monitor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_resource_monitor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_resource_monitorContext alter_resource_monitor() throws RecognitionException {
		Alter_resource_monitorContext _localctx = new Alter_resource_monitorContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_alter_resource_monitor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3887);
			match(ALTER);
			setState(3888);
			match(RESOURCE);
			setState(3889);
			match(MONITOR);
			setState(3891);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				{
				setState(3890);
				if_exists();
				}
				break;
			}
			setState(3893);
			id_();
			setState(3914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(3894);
				match(SET);
				setState(3896);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CREDIT_QUOTA) {
					{
					setState(3895);
					credit_quota();
					}
				}

				setState(3899);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FREQUENCY) {
					{
					setState(3898);
					frequency();
					}
				}

				setState(3907);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case START_TIMESTAMP:
					{
					setState(3901);
					match(START_TIMESTAMP);
					setState(3902);
					match(EQ);
					setState(3903);
					match(LR_BRACKET);
					setState(3904);
					string();
					}
					break;
				case IMMEDIATELY:
					{
					setState(3905);
					match(IMMEDIATELY);
					setState(3906);
					match(RR_BRACKET);
					}
					break;
				case EOF:
				case END_TIMESTAMP:
				case NOTIFY_USERS:
				case SEMI:
					break;
				default:
					break;
				}
				setState(3912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==END_TIMESTAMP) {
					{
					setState(3909);
					match(END_TIMESTAMP);
					setState(3910);
					match(EQ);
					setState(3911);
					string();
					}
				}

				}
			}

			setState(3928);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOTIFY_USERS) {
				{
				setState(3916);
				notify_users();
				setState(3926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TRIGGERS) {
					{
					setState(3917);
					match(TRIGGERS);
					setState(3918);
					triggerDefinition();
					setState(3923);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3919);
						match(COMMA);
						setState(3920);
						triggerDefinition();
						}
						}
						setState(3925);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_roleContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(SnowflakeParser.ROLE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public Alter_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_roleContext alter_role() throws RecognitionException {
		Alter_roleContext _localctx = new Alter_roleContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_alter_role);
		try {
			setState(3974);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3930);
				match(ALTER);
				setState(3931);
				match(ROLE);
				setState(3933);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
				case 1:
					{
					setState(3932);
					if_exists();
					}
					break;
				}
				setState(3935);
				id_();
				setState(3936);
				match(RENAME);
				setState(3937);
				match(TO);
				setState(3938);
				id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3940);
				match(ALTER);
				setState(3941);
				match(ROLE);
				setState(3943);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
				case 1:
					{
					setState(3942);
					if_exists();
					}
					break;
				}
				setState(3945);
				id_();
				setState(3946);
				match(SET);
				setState(3947);
				comment_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3949);
				match(ALTER);
				setState(3950);
				match(ROLE);
				setState(3952);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
				case 1:
					{
					setState(3951);
					if_exists();
					}
					break;
				}
				setState(3954);
				id_();
				setState(3955);
				match(UNSET);
				setState(3956);
				match(COMMENT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3958);
				match(ALTER);
				setState(3959);
				match(ROLE);
				setState(3961);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
				case 1:
					{
					setState(3960);
					if_exists();
					}
					break;
				}
				setState(3963);
				id_();
				setState(3964);
				set_tags();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3966);
				match(ALTER);
				setState(3967);
				match(ROLE);
				setState(3969);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
				case 1:
					{
					setState(3968);
					if_exists();
					}
					break;
				}
				setState(3971);
				id_();
				setState(3972);
				unset_tags();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_row_access_policyContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode ROW() { return getToken(SnowflakeParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(SnowflakeParser.ACCESS, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode BODY() { return getToken(SnowflakeParser.BODY, 0); }
		public TerminalNode ARROW() { return getToken(SnowflakeParser.ARROW, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Alter_row_access_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_row_access_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_row_access_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_row_access_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_row_access_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_row_access_policyContext alter_row_access_policy() throws RecognitionException {
		Alter_row_access_policyContext _localctx = new Alter_row_access_policyContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_alter_row_access_policy);
		try {
			setState(4012);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3976);
				match(ALTER);
				setState(3977);
				match(ROW);
				setState(3978);
				match(ACCESS);
				setState(3979);
				match(POLICY);
				setState(3981);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
				case 1:
					{
					setState(3980);
					if_exists();
					}
					break;
				}
				setState(3983);
				id_();
				setState(3984);
				match(SET);
				setState(3985);
				match(BODY);
				setState(3986);
				match(ARROW);
				setState(3987);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3989);
				match(ALTER);
				setState(3990);
				match(ROW);
				setState(3991);
				match(ACCESS);
				setState(3992);
				match(POLICY);
				setState(3994);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
				case 1:
					{
					setState(3993);
					if_exists();
					}
					break;
				}
				setState(3996);
				id_();
				setState(3997);
				match(RENAME);
				setState(3998);
				match(TO);
				setState(3999);
				id_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4001);
				match(ALTER);
				setState(4002);
				match(ROW);
				setState(4003);
				match(ACCESS);
				setState(4004);
				match(POLICY);
				setState(4006);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
				case 1:
					{
					setState(4005);
					if_exists();
					}
					break;
				}
				setState(4008);
				id_();
				setState(4009);
				match(SET);
				setState(4010);
				comment_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_schemaContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public List<Schema_nameContext> schema_name() {
			return getRuleContexts(Schema_nameContext.class);
		}
		public Schema_nameContext schema_name(int i) {
			return getRuleContext(Schema_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode SWAP() { return getToken(SnowflakeParser.SWAP, 0); }
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode DATA_RETENTION_TIME_IN_DAYS() { return getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<NumContext> num() {
			return getRuleContexts(NumContext.class);
		}
		public NumContext num(int i) {
			return getRuleContext(NumContext.class,i);
		}
		public TerminalNode MAX_DATA_EXTENSION_TIME_IN_DAYS() { return getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0); }
		public Default_ddl_collationContext default_ddl_collation() {
			return getRuleContext(Default_ddl_collationContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public List<Schema_propertyContext> schema_property() {
			return getRuleContexts(Schema_propertyContext.class);
		}
		public Schema_propertyContext schema_property(int i) {
			return getRuleContext(Schema_propertyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode MANAGED() { return getToken(SnowflakeParser.MANAGED, 0); }
		public TerminalNode ACCESS() { return getToken(SnowflakeParser.ACCESS, 0); }
		public TerminalNode ENABLE() { return getToken(SnowflakeParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(SnowflakeParser.DISABLE, 0); }
		public Alter_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_schemaContext alter_schema() throws RecognitionException {
		Alter_schemaContext _localctx = new Alter_schemaContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_alter_schema);
		int _la;
		try {
			setState(4098);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4014);
				match(ALTER);
				setState(4015);
				match(SCHEMA);
				setState(4017);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
				case 1:
					{
					setState(4016);
					if_exists();
					}
					break;
				}
				setState(4019);
				schema_name();
				setState(4020);
				match(RENAME);
				setState(4021);
				match(TO);
				setState(4022);
				schema_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4024);
				match(ALTER);
				setState(4025);
				match(SCHEMA);
				setState(4027);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
				case 1:
					{
					setState(4026);
					if_exists();
					}
					break;
				}
				setState(4029);
				schema_name();
				setState(4030);
				match(SWAP);
				setState(4031);
				match(WITH);
				setState(4032);
				schema_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4034);
				match(ALTER);
				setState(4035);
				match(SCHEMA);
				setState(4037);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
				case 1:
					{
					setState(4036);
					if_exists();
					}
					break;
				}
				setState(4039);
				schema_name();
				setState(4040);
				match(SET);
				{
				setState(4044);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATA_RETENTION_TIME_IN_DAYS) {
					{
					setState(4041);
					match(DATA_RETENTION_TIME_IN_DAYS);
					setState(4042);
					match(EQ);
					setState(4043);
					num();
					}
				}

				setState(4049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MAX_DATA_EXTENSION_TIME_IN_DAYS) {
					{
					setState(4046);
					match(MAX_DATA_EXTENSION_TIME_IN_DAYS);
					setState(4047);
					match(EQ);
					setState(4048);
					num();
					}
				}

				setState(4052);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT_DDL_COLLATION_) {
					{
					setState(4051);
					default_ddl_collation();
					}
				}

				setState(4055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(4054);
					comment_clause();
					}
				}

				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4057);
				match(ALTER);
				setState(4058);
				match(SCHEMA);
				setState(4060);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
				case 1:
					{
					setState(4059);
					if_exists();
					}
					break;
				}
				setState(4062);
				schema_name();
				setState(4063);
				set_tags();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4065);
				match(ALTER);
				setState(4066);
				match(SCHEMA);
				setState(4068);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
				case 1:
					{
					setState(4067);
					if_exists();
					}
					break;
				}
				setState(4070);
				schema_name();
				setState(4071);
				unset_tags();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4073);
				match(ALTER);
				setState(4074);
				match(SCHEMA);
				setState(4076);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
				case 1:
					{
					setState(4075);
					if_exists();
					}
					break;
				}
				setState(4078);
				schema_name();
				setState(4079);
				match(UNSET);
				setState(4080);
				schema_property();
				setState(4085);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4081);
					match(COMMA);
					setState(4082);
					schema_property();
					}
					}
					setState(4087);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4088);
				match(ALTER);
				setState(4089);
				match(SCHEMA);
				setState(4091);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
				case 1:
					{
					setState(4090);
					if_exists();
					}
					break;
				}
				setState(4093);
				schema_name();
				setState(4094);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4095);
				match(MANAGED);
				setState(4096);
				match(ACCESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Schema_propertyContext extends ParserRuleContext {
		public TerminalNode DATA_RETENTION_TIME_IN_DAYS() { return getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0); }
		public TerminalNode MAX_DATA_EXTENSION_TIME_IN_DAYS() { return getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0); }
		public TerminalNode DEFAULT_DDL_COLLATION_() { return getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Schema_propertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_property; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSchema_property(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSchema_property(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSchema_property(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_propertyContext schema_property() throws RecognitionException {
		Schema_propertyContext _localctx = new Schema_propertyContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_schema_property);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4100);
			_la = _input.LA(1);
			if ( !(((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 8804682956801L) != 0) || _la==MAX_DATA_EXTENSION_TIME_IN_DAYS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_sequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(SnowflakeParser.SEQUENCE, 0); }
		public List<Object_nameContext> object_name() {
			return getRuleContexts(Object_nameContext.class);
		}
		public Object_nameContext object_name(int i) {
			return getRuleContext(Object_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode INCREMENT() { return getToken(SnowflakeParser.INCREMENT, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode BY() { return getToken(SnowflakeParser.BY, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Order_noorderContext order_noorder() {
			return getRuleContext(Order_noorderContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_alter_sequence);
		int _la;
		try {
			setState(4154);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4102);
				match(ALTER);
				setState(4103);
				match(SEQUENCE);
				setState(4105);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
				case 1:
					{
					setState(4104);
					if_exists();
					}
					break;
				}
				setState(4107);
				object_name();
				setState(4108);
				match(RENAME);
				setState(4109);
				match(TO);
				setState(4110);
				object_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4112);
				match(ALTER);
				setState(4113);
				match(SEQUENCE);
				setState(4115);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
				case 1:
					{
					setState(4114);
					if_exists();
					}
					break;
				}
				setState(4117);
				object_name();
				setState(4119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(4118);
					match(SET);
					}
				}

				setState(4129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INCREMENT) {
					{
					setState(4121);
					match(INCREMENT);
					setState(4123);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BY) {
						{
						setState(4122);
						match(BY);
						}
					}

					setState(4126);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EQ) {
						{
						setState(4125);
						match(EQ);
						}
					}

					setState(4128);
					num();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4131);
				match(ALTER);
				setState(4132);
				match(SEQUENCE);
				setState(4134);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
				case 1:
					{
					setState(4133);
					if_exists();
					}
					break;
				}
				setState(4136);
				object_name();
				setState(4137);
				match(SET);
				setState(4143);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					setState(4139);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOORDER || _la==ORDER) {
						{
						setState(4138);
						order_noorder();
						}
					}

					setState(4141);
					comment_clause();
					}
					break;
				case 2:
					{
					setState(4142);
					order_noorder();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4145);
				match(ALTER);
				setState(4146);
				match(SEQUENCE);
				setState(4148);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
				case 1:
					{
					setState(4147);
					if_exists();
					}
					break;
				}
				setState(4150);
				object_name();
				setState(4151);
				match(UNSET);
				setState(4152);
				match(COMMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_security_integration_external_oauthContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode SECURITY() { return getToken(SnowflakeParser.SECURITY, 0); }
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode EXTERNAL_OAUTH() { return getToken(SnowflakeParser.EXTERNAL_OAUTH, 0); }
		public TerminalNode ENABLED() { return getToken(SnowflakeParser.ENABLED, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode EXTERNAL_OAUTH_TYPE() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_TYPE, 0); }
		public TerminalNode EXTERNAL_OAUTH_ISSUER() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_ISSUER, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM, 0); }
		public TerminalNode EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE, 0); }
		public List<TerminalNode> EXTERNAL_OAUTH_JWS_KEYS_URL() { return getTokens(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL); }
		public TerminalNode EXTERNAL_OAUTH_JWS_KEYS_URL(int i) {
			return getToken(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL, i);
		}
		public TerminalNode EXTERNAL_OAUTH_RSA_PUBLIC_KEY() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY, 0); }
		public TerminalNode EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2, 0); }
		public TerminalNode EXTERNAL_OAUTH_BLOCKED_ROLES_LIST() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_BLOCKED_ROLES_LIST, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<String_listContext> string_list() {
			return getRuleContexts(String_listContext.class);
		}
		public String_listContext string_list(int i) {
			return getRuleContext(String_listContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public TerminalNode EXTERNAL_OAUTH_ALLOWED_ROLES_LIST() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_ALLOWED_ROLES_LIST, 0); }
		public TerminalNode EXTERNAL_OAUTH_AUDIENCE_LIST() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST, 0); }
		public List<TerminalNode> EXTERNAL_OAUTH_ANY_ROLE_MODE() { return getTokens(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE); }
		public TerminalNode EXTERNAL_OAUTH_ANY_ROLE_MODE(int i) {
			return getToken(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE, i);
		}
		public TerminalNode OKTA() { return getToken(SnowflakeParser.OKTA, 0); }
		public TerminalNode AZURE() { return getToken(SnowflakeParser.AZURE, 0); }
		public TerminalNode PING_FEDERATE() { return getToken(SnowflakeParser.PING_FEDERATE, 0); }
		public TerminalNode CUSTOM() { return getToken(SnowflakeParser.CUSTOM, 0); }
		public TerminalNode DISABLE() { return getToken(SnowflakeParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(SnowflakeParser.ENABLE, 0); }
		public TerminalNode ENABLE_FOR_PRIVILEGE() { return getToken(SnowflakeParser.ENABLE_FOR_PRIVILEGE, 0); }
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public List<Security_integration_external_oauth_propertyContext> security_integration_external_oauth_property() {
			return getRuleContexts(Security_integration_external_oauth_propertyContext.class);
		}
		public Security_integration_external_oauth_propertyContext security_integration_external_oauth_property(int i) {
			return getRuleContext(Security_integration_external_oauth_propertyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public Alter_security_integration_external_oauthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_security_integration_external_oauth; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_security_integration_external_oauth(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_security_integration_external_oauth(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_security_integration_external_oauth(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_security_integration_external_oauthContext alter_security_integration_external_oauth() throws RecognitionException {
		Alter_security_integration_external_oauthContext _localctx = new Alter_security_integration_external_oauthContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_alter_security_integration_external_oauth);
		int _la;
		try {
			setState(4294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4156);
				match(ALTER);
				setState(4158);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURITY) {
					{
					setState(4157);
					match(SECURITY);
					}
				}

				setState(4160);
				match(INTEGRATION);
				setState(4161);
				if_exists();
				setState(4162);
				id_();
				setState(4163);
				match(SET);
				setState(4167);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE) {
					{
					setState(4164);
					match(TYPE);
					setState(4165);
					match(EQ);
					setState(4166);
					match(EXTERNAL_OAUTH);
					}
				}

				setState(4172);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENABLED) {
					{
					setState(4169);
					match(ENABLED);
					setState(4170);
					match(EQ);
					setState(4171);
					true_false();
					}
				}

				setState(4177);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_TYPE) {
					{
					setState(4174);
					match(EXTERNAL_OAUTH_TYPE);
					setState(4175);
					match(EQ);
					setState(4176);
					_la = _input.LA(1);
					if ( !(_la==AZURE || _la==CUSTOM || _la==OKTA || _la==PING_FEDERATE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4182);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_ISSUER) {
					{
					setState(4179);
					match(EXTERNAL_OAUTH_ISSUER);
					setState(4180);
					match(EQ);
					setState(4181);
					string();
					}
				}

				setState(4193);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM) {
					{
					setState(4184);
					match(EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM);
					setState(4185);
					match(EQ);
					setState(4191);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(4186);
						string();
						}
						break;
					case LR_BRACKET:
						{
						setState(4187);
						match(LR_BRACKET);
						setState(4188);
						string_list();
						setState(4189);
						match(RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4198);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE) {
					{
					setState(4195);
					match(EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE);
					setState(4196);
					match(EQ);
					setState(4197);
					string();
					}
				}

				setState(4203);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					setState(4200);
					match(EXTERNAL_OAUTH_JWS_KEYS_URL);
					setState(4201);
					match(EQ);
					setState(4202);
					string();
					}
					break;
				}
				setState(4214);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_JWS_KEYS_URL) {
					{
					setState(4205);
					match(EXTERNAL_OAUTH_JWS_KEYS_URL);
					setState(4206);
					match(EQ);
					setState(4212);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(4207);
						string();
						}
						break;
					case LR_BRACKET:
						{
						setState(4208);
						match(LR_BRACKET);
						setState(4209);
						string_list();
						setState(4210);
						match(RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4219);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_RSA_PUBLIC_KEY) {
					{
					setState(4216);
					match(EXTERNAL_OAUTH_RSA_PUBLIC_KEY);
					setState(4217);
					match(EQ);
					setState(4218);
					string();
					}
				}

				setState(4224);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2) {
					{
					setState(4221);
					match(EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2);
					setState(4222);
					match(EQ);
					setState(4223);
					string();
					}
				}

				setState(4232);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_BLOCKED_ROLES_LIST) {
					{
					setState(4226);
					match(EXTERNAL_OAUTH_BLOCKED_ROLES_LIST);
					setState(4227);
					match(EQ);
					setState(4228);
					match(LR_BRACKET);
					setState(4229);
					string_list();
					setState(4230);
					match(RR_BRACKET);
					}
				}

				setState(4240);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_ALLOWED_ROLES_LIST) {
					{
					setState(4234);
					match(EXTERNAL_OAUTH_ALLOWED_ROLES_LIST);
					setState(4235);
					match(EQ);
					setState(4236);
					match(LR_BRACKET);
					setState(4237);
					string_list();
					setState(4238);
					match(RR_BRACKET);
					}
				}

				setState(4248);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_AUDIENCE_LIST) {
					{
					setState(4242);
					match(EXTERNAL_OAUTH_AUDIENCE_LIST);
					setState(4243);
					match(EQ);
					setState(4244);
					match(LR_BRACKET);
					setState(4245);
					string();
					setState(4246);
					match(RR_BRACKET);
					}
				}

				setState(4253);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
				case 1:
					{
					setState(4250);
					match(EXTERNAL_OAUTH_ANY_ROLE_MODE);
					setState(4251);
					match(EQ);
					setState(4252);
					_la = _input.LA(1);
					if ( !(((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & 327681L) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_ANY_ROLE_MODE) {
					{
					setState(4255);
					match(EXTERNAL_OAUTH_ANY_ROLE_MODE);
					setState(4256);
					match(EQ);
					setState(4257);
					string();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4260);
				match(ALTER);
				setState(4262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURITY) {
					{
					setState(4261);
					match(SECURITY);
					}
				}

				setState(4264);
				match(INTEGRATION);
				setState(4266);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
				case 1:
					{
					setState(4265);
					if_exists();
					}
					break;
				}
				setState(4268);
				id_();
				setState(4269);
				match(UNSET);
				setState(4270);
				security_integration_external_oauth_property();
				setState(4275);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4271);
					match(COMMA);
					setState(4272);
					security_integration_external_oauth_property();
					}
					}
					setState(4277);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4278);
				match(ALTER);
				setState(4280);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURITY) {
					{
					setState(4279);
					match(SECURITY);
					}
				}

				setState(4282);
				match(INTEGRATION);
				setState(4283);
				id_();
				setState(4284);
				set_tags();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4286);
				match(ALTER);
				setState(4288);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURITY) {
					{
					setState(4287);
					match(SECURITY);
					}
				}

				setState(4290);
				match(INTEGRATION);
				setState(4291);
				id_();
				setState(4292);
				unset_tags();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Security_integration_external_oauth_propertyContext extends ParserRuleContext {
		public TerminalNode ENABLED() { return getToken(SnowflakeParser.ENABLED, 0); }
		public TerminalNode NETWORK_POLICY() { return getToken(SnowflakeParser.NETWORK_POLICY, 0); }
		public TerminalNode OAUTH_CLIENT_RSA_PUBLIC_KEY() { return getToken(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY, 0); }
		public TerminalNode OAUTH_CLIENT_RSA_PUBLIC_KEY_2() { return getToken(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY_2, 0); }
		public TerminalNode OAUTH_USE_SECONDARY_ROLES() { return getToken(SnowflakeParser.OAUTH_USE_SECONDARY_ROLES, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode IMPLICIT() { return getToken(SnowflakeParser.IMPLICIT, 0); }
		public TerminalNode NONE() { return getToken(SnowflakeParser.NONE, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Security_integration_external_oauth_propertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_integration_external_oauth_property; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSecurity_integration_external_oauth_property(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSecurity_integration_external_oauth_property(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSecurity_integration_external_oauth_property(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_integration_external_oauth_propertyContext security_integration_external_oauth_property() throws RecognitionException {
		Security_integration_external_oauth_propertyContext _localctx = new Security_integration_external_oauth_propertyContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_security_integration_external_oauth_property);
		int _la;
		try {
			setState(4304);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLED:
				enterOuterAlt(_localctx, 1);
				{
				setState(4296);
				match(ENABLED);
				}
				break;
			case NETWORK_POLICY:
				enterOuterAlt(_localctx, 2);
				{
				setState(4297);
				match(NETWORK_POLICY);
				}
				break;
			case OAUTH_CLIENT_RSA_PUBLIC_KEY:
				enterOuterAlt(_localctx, 3);
				{
				setState(4298);
				match(OAUTH_CLIENT_RSA_PUBLIC_KEY);
				}
				break;
			case OAUTH_CLIENT_RSA_PUBLIC_KEY_2:
				enterOuterAlt(_localctx, 4);
				{
				setState(4299);
				match(OAUTH_CLIENT_RSA_PUBLIC_KEY_2);
				}
				break;
			case OAUTH_USE_SECONDARY_ROLES:
				enterOuterAlt(_localctx, 5);
				{
				setState(4300);
				match(OAUTH_USE_SECONDARY_ROLES);
				setState(4301);
				match(EQ);
				setState(4302);
				_la = _input.LA(1);
				if ( !(_la==IMPLICIT || _la==NONE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(4303);
				match(COMMENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_security_integration_snowflake_oauthContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode EXTERNAL_OAUTH_SCOPE_DELIMITER() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_SCOPE_DELIMITER, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode SECURITY() { return getToken(SnowflakeParser.SECURITY, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public TerminalNode EXTERNAL_OAUTH() { return getToken(SnowflakeParser.EXTERNAL_OAUTH, 0); }
		public Enabled_true_falseContext enabled_true_false() {
			return getRuleContext(Enabled_true_falseContext.class,0);
		}
		public TerminalNode EXTERNAL_OAUTH_TYPE() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_TYPE, 0); }
		public TerminalNode EXTERNAL_OAUTH_ISSUER() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_ISSUER, 0); }
		public TerminalNode EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM, 0); }
		public TerminalNode EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE, 0); }
		public List<TerminalNode> EXTERNAL_OAUTH_JWS_KEYS_URL() { return getTokens(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL); }
		public TerminalNode EXTERNAL_OAUTH_JWS_KEYS_URL(int i) {
			return getToken(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL, i);
		}
		public TerminalNode EXTERNAL_OAUTH_RSA_PUBLIC_KEY() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY, 0); }
		public TerminalNode EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2, 0); }
		public TerminalNode EXTERNAL_OAUTH_BLOCKED_ROLES_LIST() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_BLOCKED_ROLES_LIST, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<String_listContext> string_list() {
			return getRuleContexts(String_listContext.class);
		}
		public String_listContext string_list(int i) {
			return getRuleContext(String_listContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public TerminalNode EXTERNAL_OAUTH_ALLOWED_ROLES_LIST() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_ALLOWED_ROLES_LIST, 0); }
		public TerminalNode EXTERNAL_OAUTH_AUDIENCE_LIST() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST, 0); }
		public TerminalNode EXTERNAL_OAUTH_ANY_ROLE_MODE() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE, 0); }
		public TerminalNode DISABLE() { return getToken(SnowflakeParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(SnowflakeParser.ENABLE, 0); }
		public TerminalNode ENABLE_FOR_PRIVILEGE() { return getToken(SnowflakeParser.ENABLE_FOR_PRIVILEGE, 0); }
		public TerminalNode OKTA() { return getToken(SnowflakeParser.OKTA, 0); }
		public TerminalNode AZURE() { return getToken(SnowflakeParser.AZURE, 0); }
		public TerminalNode PING_FEDERATE() { return getToken(SnowflakeParser.PING_FEDERATE, 0); }
		public TerminalNode CUSTOM() { return getToken(SnowflakeParser.CUSTOM, 0); }
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public List<Security_integration_snowflake_oauth_propertyContext> security_integration_snowflake_oauth_property() {
			return getRuleContexts(Security_integration_snowflake_oauth_propertyContext.class);
		}
		public Security_integration_snowflake_oauth_propertyContext security_integration_snowflake_oauth_property(int i) {
			return getRuleContext(Security_integration_snowflake_oauth_propertyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public Alter_security_integration_snowflake_oauthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_security_integration_snowflake_oauth; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_security_integration_snowflake_oauth(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_security_integration_snowflake_oauth(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_security_integration_snowflake_oauth(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_security_integration_snowflake_oauthContext alter_security_integration_snowflake_oauth() throws RecognitionException {
		Alter_security_integration_snowflake_oauthContext _localctx = new Alter_security_integration_snowflake_oauthContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_alter_security_integration_snowflake_oauth);
		int _la;
		try {
			setState(4445);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4306);
				match(ALTER);
				setState(4308);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURITY) {
					{
					setState(4307);
					match(SECURITY);
					}
				}

				setState(4310);
				match(INTEGRATION);
				setState(4312);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
				case 1:
					{
					setState(4311);
					if_exists();
					}
					break;
				}
				setState(4314);
				id_();
				setState(4315);
				match(SET);
				setState(4319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE) {
					{
					setState(4316);
					match(TYPE);
					setState(4317);
					match(EQ);
					setState(4318);
					match(EXTERNAL_OAUTH);
					}
				}

				setState(4322);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENABLED) {
					{
					setState(4321);
					enabled_true_false();
					}
				}

				setState(4327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_TYPE) {
					{
					setState(4324);
					match(EXTERNAL_OAUTH_TYPE);
					setState(4325);
					match(EQ);
					setState(4326);
					_la = _input.LA(1);
					if ( !(_la==AZURE || _la==CUSTOM || _la==OKTA || _la==PING_FEDERATE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_ISSUER) {
					{
					setState(4329);
					match(EXTERNAL_OAUTH_ISSUER);
					setState(4330);
					match(EQ);
					setState(4331);
					string();
					}
				}

				setState(4343);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM) {
					{
					setState(4334);
					match(EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM);
					setState(4335);
					match(EQ);
					setState(4341);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(4336);
						string();
						}
						break;
					case LR_BRACKET:
						{
						setState(4337);
						match(LR_BRACKET);
						setState(4338);
						string_list();
						setState(4339);
						match(RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4348);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE) {
					{
					setState(4345);
					match(EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE);
					setState(4346);
					match(EQ);
					setState(4347);
					string();
					}
				}

				setState(4353);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
				case 1:
					{
					setState(4350);
					match(EXTERNAL_OAUTH_JWS_KEYS_URL);
					setState(4351);
					match(EQ);
					setState(4352);
					string();
					}
					break;
				}
				setState(4364);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_JWS_KEYS_URL) {
					{
					setState(4355);
					match(EXTERNAL_OAUTH_JWS_KEYS_URL);
					setState(4356);
					match(EQ);
					setState(4362);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(4357);
						string();
						}
						break;
					case LR_BRACKET:
						{
						setState(4358);
						match(LR_BRACKET);
						setState(4359);
						string_list();
						setState(4360);
						match(RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4369);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_RSA_PUBLIC_KEY) {
					{
					setState(4366);
					match(EXTERNAL_OAUTH_RSA_PUBLIC_KEY);
					setState(4367);
					match(EQ);
					setState(4368);
					string();
					}
				}

				setState(4374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2) {
					{
					setState(4371);
					match(EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2);
					setState(4372);
					match(EQ);
					setState(4373);
					string();
					}
				}

				setState(4382);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_BLOCKED_ROLES_LIST) {
					{
					setState(4376);
					match(EXTERNAL_OAUTH_BLOCKED_ROLES_LIST);
					setState(4377);
					match(EQ);
					setState(4378);
					match(LR_BRACKET);
					setState(4379);
					string_list();
					setState(4380);
					match(RR_BRACKET);
					}
				}

				setState(4390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_ALLOWED_ROLES_LIST) {
					{
					setState(4384);
					match(EXTERNAL_OAUTH_ALLOWED_ROLES_LIST);
					setState(4385);
					match(EQ);
					setState(4386);
					match(LR_BRACKET);
					setState(4387);
					string_list();
					setState(4388);
					match(RR_BRACKET);
					}
				}

				setState(4398);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL_OAUTH_AUDIENCE_LIST) {
					{
					setState(4392);
					match(EXTERNAL_OAUTH_AUDIENCE_LIST);
					setState(4393);
					match(EQ);
					setState(4394);
					match(LR_BRACKET);
					setState(4395);
					string();
					setState(4396);
					match(RR_BRACKET);
					}
				}

				setState(4405);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EXTERNAL_OAUTH_ANY_ROLE_MODE:
					{
					setState(4400);
					match(EXTERNAL_OAUTH_ANY_ROLE_MODE);
					setState(4401);
					match(EQ);
					setState(4402);
					match(DISABLE);
					}
					break;
				case ENABLE:
					{
					setState(4403);
					match(ENABLE);
					}
					break;
				case ENABLE_FOR_PRIVILEGE:
					{
					setState(4404);
					match(ENABLE_FOR_PRIVILEGE);
					}
					break;
				case EXTERNAL_OAUTH_SCOPE_DELIMITER:
					break;
				default:
					break;
				}
				{
				setState(4407);
				match(EXTERNAL_OAUTH_SCOPE_DELIMITER);
				setState(4408);
				match(EQ);
				setState(4409);
				string();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4411);
				match(ALTER);
				setState(4413);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURITY) {
					{
					setState(4412);
					match(SECURITY);
					}
				}

				setState(4415);
				match(INTEGRATION);
				setState(4417);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
				case 1:
					{
					setState(4416);
					if_exists();
					}
					break;
				}
				setState(4419);
				id_();
				setState(4420);
				match(UNSET);
				setState(4421);
				security_integration_snowflake_oauth_property();
				setState(4426);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4422);
					match(COMMA);
					setState(4423);
					security_integration_snowflake_oauth_property();
					}
					}
					setState(4428);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4429);
				match(ALTER);
				setState(4431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURITY) {
					{
					setState(4430);
					match(SECURITY);
					}
				}

				setState(4433);
				match(INTEGRATION);
				setState(4434);
				id_();
				setState(4435);
				set_tags();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4437);
				match(ALTER);
				setState(4439);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURITY) {
					{
					setState(4438);
					match(SECURITY);
					}
				}

				setState(4441);
				match(INTEGRATION);
				setState(4442);
				id_();
				setState(4443);
				unset_tags();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Security_integration_snowflake_oauth_propertyContext extends ParserRuleContext {
		public TerminalNode ENABLED() { return getToken(SnowflakeParser.ENABLED, 0); }
		public TerminalNode EXTERNAL_OAUTH_AUDIENCE_LIST() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST, 0); }
		public Security_integration_snowflake_oauth_propertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_integration_snowflake_oauth_property; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSecurity_integration_snowflake_oauth_property(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSecurity_integration_snowflake_oauth_property(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSecurity_integration_snowflake_oauth_property(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_integration_snowflake_oauth_propertyContext security_integration_snowflake_oauth_property() throws RecognitionException {
		Security_integration_snowflake_oauth_propertyContext _localctx = new Security_integration_snowflake_oauth_propertyContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_security_integration_snowflake_oauth_property);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4447);
			_la = _input.LA(1);
			if ( !(_la==ENABLED || _la==EXTERNAL_OAUTH_AUDIENCE_LIST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_security_integration_saml2Context extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode SECURITY() { return getToken(SnowflakeParser.SECURITY, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode SAML2() { return getToken(SnowflakeParser.SAML2, 0); }
		public Enabled_true_falseContext enabled_true_false() {
			return getRuleContext(Enabled_true_falseContext.class,0);
		}
		public TerminalNode SAML2_ISSUER() { return getToken(SnowflakeParser.SAML2_ISSUER, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode SAML2_SSO_URL() { return getToken(SnowflakeParser.SAML2_SSO_URL, 0); }
		public TerminalNode SAML2_PROVIDER() { return getToken(SnowflakeParser.SAML2_PROVIDER, 0); }
		public TerminalNode SAML2_X509_CERT() { return getToken(SnowflakeParser.SAML2_X509_CERT, 0); }
		public TerminalNode SAML2_SP_INITIATED_LOGIN_PAGE_LABEL() { return getToken(SnowflakeParser.SAML2_SP_INITIATED_LOGIN_PAGE_LABEL, 0); }
		public TerminalNode SAML2_ENABLE_SP_INITIATED() { return getToken(SnowflakeParser.SAML2_ENABLE_SP_INITIATED, 0); }
		public List<True_falseContext> true_false() {
			return getRuleContexts(True_falseContext.class);
		}
		public True_falseContext true_false(int i) {
			return getRuleContext(True_falseContext.class,i);
		}
		public TerminalNode SAML2_SNOWFLAKE_X509_CERT() { return getToken(SnowflakeParser.SAML2_SNOWFLAKE_X509_CERT, 0); }
		public TerminalNode SAML2_SIGN_REQUEST() { return getToken(SnowflakeParser.SAML2_SIGN_REQUEST, 0); }
		public TerminalNode SAML2_REQUESTED_NAMEID_FORMAT() { return getToken(SnowflakeParser.SAML2_REQUESTED_NAMEID_FORMAT, 0); }
		public TerminalNode SAML2_POST_LOGOUT_REDIRECT_URL() { return getToken(SnowflakeParser.SAML2_POST_LOGOUT_REDIRECT_URL, 0); }
		public TerminalNode SAML2_FORCE_AUTHN() { return getToken(SnowflakeParser.SAML2_FORCE_AUTHN, 0); }
		public TerminalNode SAML2_SNOWFLAKE_ISSUER_URL() { return getToken(SnowflakeParser.SAML2_SNOWFLAKE_ISSUER_URL, 0); }
		public TerminalNode SAML2_SNOWFLAKE_ACS_URL() { return getToken(SnowflakeParser.SAML2_SNOWFLAKE_ACS_URL, 0); }
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode ENABLED() { return getToken(SnowflakeParser.ENABLED, 0); }
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public Alter_security_integration_saml2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_security_integration_saml2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_security_integration_saml2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_security_integration_saml2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_security_integration_saml2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_security_integration_saml2Context alter_security_integration_saml2() throws RecognitionException {
		Alter_security_integration_saml2Context _localctx = new Alter_security_integration_saml2Context(_ctx, getState());
		enterRule(_localctx, 236, RULE_alter_security_integration_saml2);
		int _la;
		try {
			setState(4560);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4449);
				match(ALTER);
				setState(4451);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURITY) {
					{
					setState(4450);
					match(SECURITY);
					}
				}

				setState(4453);
				match(INTEGRATION);
				setState(4455);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
				case 1:
					{
					setState(4454);
					if_exists();
					}
					break;
				}
				setState(4457);
				id_();
				setState(4458);
				match(SET);
				setState(4462);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE) {
					{
					setState(4459);
					match(TYPE);
					setState(4460);
					match(EQ);
					setState(4461);
					match(SAML2);
					}
				}

				setState(4465);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENABLED) {
					{
					setState(4464);
					enabled_true_false();
					}
				}

				setState(4470);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SAML2_ISSUER) {
					{
					setState(4467);
					match(SAML2_ISSUER);
					setState(4468);
					match(EQ);
					setState(4469);
					string();
					}
				}

				setState(4475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SAML2_SSO_URL) {
					{
					setState(4472);
					match(SAML2_SSO_URL);
					setState(4473);
					match(EQ);
					setState(4474);
					string();
					}
				}

				setState(4480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SAML2_PROVIDER) {
					{
					setState(4477);
					match(SAML2_PROVIDER);
					setState(4478);
					match(EQ);
					setState(4479);
					string();
					}
				}

				setState(4485);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SAML2_X509_CERT) {
					{
					setState(4482);
					match(SAML2_X509_CERT);
					setState(4483);
					match(EQ);
					setState(4484);
					string();
					}
				}

				setState(4490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SAML2_SP_INITIATED_LOGIN_PAGE_LABEL) {
					{
					setState(4487);
					match(SAML2_SP_INITIATED_LOGIN_PAGE_LABEL);
					setState(4488);
					match(EQ);
					setState(4489);
					string();
					}
				}

				setState(4495);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SAML2_ENABLE_SP_INITIATED) {
					{
					setState(4492);
					match(SAML2_ENABLE_SP_INITIATED);
					setState(4493);
					match(EQ);
					setState(4494);
					true_false();
					}
				}

				setState(4500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SAML2_SNOWFLAKE_X509_CERT) {
					{
					setState(4497);
					match(SAML2_SNOWFLAKE_X509_CERT);
					setState(4498);
					match(EQ);
					setState(4499);
					string();
					}
				}

				setState(4505);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SAML2_SIGN_REQUEST) {
					{
					setState(4502);
					match(SAML2_SIGN_REQUEST);
					setState(4503);
					match(EQ);
					setState(4504);
					true_false();
					}
				}

				setState(4510);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SAML2_REQUESTED_NAMEID_FORMAT) {
					{
					setState(4507);
					match(SAML2_REQUESTED_NAMEID_FORMAT);
					setState(4508);
					match(EQ);
					setState(4509);
					string();
					}
				}

				setState(4515);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SAML2_POST_LOGOUT_REDIRECT_URL) {
					{
					setState(4512);
					match(SAML2_POST_LOGOUT_REDIRECT_URL);
					setState(4513);
					match(EQ);
					setState(4514);
					string();
					}
				}

				setState(4520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SAML2_FORCE_AUTHN) {
					{
					setState(4517);
					match(SAML2_FORCE_AUTHN);
					setState(4518);
					match(EQ);
					setState(4519);
					true_false();
					}
				}

				setState(4525);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SAML2_SNOWFLAKE_ISSUER_URL) {
					{
					setState(4522);
					match(SAML2_SNOWFLAKE_ISSUER_URL);
					setState(4523);
					match(EQ);
					setState(4524);
					string();
					}
				}

				setState(4530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SAML2_SNOWFLAKE_ACS_URL) {
					{
					setState(4527);
					match(SAML2_SNOWFLAKE_ACS_URL);
					setState(4528);
					match(EQ);
					setState(4529);
					string();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4532);
				match(ALTER);
				setState(4534);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURITY) {
					{
					setState(4533);
					match(SECURITY);
					}
				}

				setState(4536);
				match(INTEGRATION);
				setState(4538);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
				case 1:
					{
					setState(4537);
					if_exists();
					}
					break;
				}
				setState(4540);
				id_();
				setState(4541);
				match(UNSET);
				setState(4542);
				match(ENABLED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4544);
				match(ALTER);
				setState(4546);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURITY) {
					{
					setState(4545);
					match(SECURITY);
					}
				}

				setState(4548);
				match(INTEGRATION);
				setState(4549);
				id_();
				setState(4550);
				set_tags();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4552);
				match(ALTER);
				setState(4554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURITY) {
					{
					setState(4553);
					match(SECURITY);
					}
				}

				setState(4556);
				match(INTEGRATION);
				setState(4557);
				id_();
				setState(4558);
				unset_tags();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_security_integration_scimContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode SECURITY() { return getToken(SnowflakeParser.SECURITY, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode NETWORK_POLICY() { return getToken(SnowflakeParser.NETWORK_POLICY, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode SYNC_PASSWORD() { return getToken(SnowflakeParser.SYNC_PASSWORD, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public List<Security_integration_scim_propertyContext> security_integration_scim_property() {
			return getRuleContexts(Security_integration_scim_propertyContext.class);
		}
		public Security_integration_scim_propertyContext security_integration_scim_property(int i) {
			return getRuleContext(Security_integration_scim_propertyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public Alter_security_integration_scimContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_security_integration_scim; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_security_integration_scim(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_security_integration_scim(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_security_integration_scim(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_security_integration_scimContext alter_security_integration_scim() throws RecognitionException {
		Alter_security_integration_scimContext _localctx = new Alter_security_integration_scimContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_alter_security_integration_scim);
		int _la;
		try {
			setState(4619);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4562);
				match(ALTER);
				setState(4564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURITY) {
					{
					setState(4563);
					match(SECURITY);
					}
				}

				setState(4566);
				match(INTEGRATION);
				setState(4568);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
				case 1:
					{
					setState(4567);
					if_exists();
					}
					break;
				}
				setState(4570);
				id_();
				setState(4571);
				match(SET);
				setState(4575);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NETWORK_POLICY) {
					{
					setState(4572);
					match(NETWORK_POLICY);
					setState(4573);
					match(EQ);
					setState(4574);
					string();
					}
				}

				setState(4580);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SYNC_PASSWORD) {
					{
					setState(4577);
					match(SYNC_PASSWORD);
					setState(4578);
					match(EQ);
					setState(4579);
					true_false();
					}
				}

				setState(4583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(4582);
					comment_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4585);
				match(ALTER);
				setState(4587);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURITY) {
					{
					setState(4586);
					match(SECURITY);
					}
				}

				setState(4589);
				match(INTEGRATION);
				setState(4591);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
				case 1:
					{
					setState(4590);
					if_exists();
					}
					break;
				}
				setState(4593);
				id_();
				setState(4594);
				match(UNSET);
				setState(4595);
				security_integration_scim_property();
				setState(4600);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4596);
					match(COMMA);
					setState(4597);
					security_integration_scim_property();
					}
					}
					setState(4602);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4603);
				match(ALTER);
				setState(4605);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURITY) {
					{
					setState(4604);
					match(SECURITY);
					}
				}

				setState(4607);
				match(INTEGRATION);
				setState(4608);
				id_();
				setState(4609);
				set_tags();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4611);
				match(ALTER);
				setState(4613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURITY) {
					{
					setState(4612);
					match(SECURITY);
					}
				}

				setState(4615);
				match(INTEGRATION);
				setState(4616);
				id_();
				setState(4617);
				unset_tags();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Security_integration_scim_propertyContext extends ParserRuleContext {
		public TerminalNode NETWORK_POLICY() { return getToken(SnowflakeParser.NETWORK_POLICY, 0); }
		public TerminalNode SYNC_PASSWORD() { return getToken(SnowflakeParser.SYNC_PASSWORD, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Security_integration_scim_propertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_integration_scim_property; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSecurity_integration_scim_property(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSecurity_integration_scim_property(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSecurity_integration_scim_property(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_integration_scim_propertyContext security_integration_scim_property() throws RecognitionException {
		Security_integration_scim_propertyContext _localctx = new Security_integration_scim_propertyContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_security_integration_scim_property);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4621);
			_la = _input.LA(1);
			if ( !(_la==COMMENT || _la==NETWORK_POLICY || _la==SYNC_PASSWORD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_sessionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode SESSION() { return getToken(SnowflakeParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public Session_paramsContext session_params() {
			return getRuleContext(Session_paramsContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public List<Param_nameContext> param_name() {
			return getRuleContexts(Param_nameContext.class);
		}
		public Param_nameContext param_name(int i) {
			return getRuleContext(Param_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Alter_sessionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_session; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_session(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_session(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_session(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sessionContext alter_session() throws RecognitionException {
		Alter_sessionContext _localctx = new Alter_sessionContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_alter_session);
		int _la;
		try {
			setState(4638);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4623);
				match(ALTER);
				setState(4624);
				match(SESSION);
				setState(4625);
				match(SET);
				setState(4626);
				session_params();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4627);
				match(ALTER);
				setState(4628);
				match(SESSION);
				setState(4629);
				match(UNSET);
				setState(4630);
				param_name();
				setState(4635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4631);
					match(COMMA);
					setState(4632);
					param_name();
					}
					}
					setState(4637);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_session_policyContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode SESSION() { return getToken(SnowflakeParser.SESSION, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public List<Object_nameContext> object_name() {
			return getRuleContexts(Object_nameContext.class);
		}
		public Object_nameContext object_name(int i) {
			return getRuleContext(Object_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public List<Session_policy_paramsContext> session_policy_params() {
			return getRuleContexts(Session_policy_paramsContext.class);
		}
		public Session_policy_paramsContext session_policy_params(int i) {
			return getRuleContext(Session_policy_paramsContext.class,i);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public Session_policy_param_nameContext session_policy_param_name() {
			return getRuleContext(Session_policy_param_nameContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public Alter_session_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_session_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_session_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_session_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_session_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_session_policyContext alter_session_policy() throws RecognitionException {
		Alter_session_policyContext _localctx = new Alter_session_policyContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_alter_session_policy);
		int _la;
		try {
			setState(4688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4640);
				match(ALTER);
				setState(4641);
				match(SESSION);
				setState(4642);
				match(POLICY);
				setState(4644);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
				case 1:
					{
					setState(4643);
					if_exists();
					}
					break;
				}
				setState(4646);
				object_name();
				setState(4647);
				match(SET);
				setState(4651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMENT || _la==SESSION_IDLE_TIMEOUT_MINS || _la==SESSION_UI_IDLE_TIMEOUT_MINS) {
					{
					{
					setState(4648);
					session_policy_params();
					}
					}
					setState(4653);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4654);
				match(ALTER);
				setState(4655);
				match(SESSION);
				setState(4656);
				match(POLICY);
				setState(4658);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
				case 1:
					{
					setState(4657);
					if_exists();
					}
					break;
				}
				setState(4660);
				object_name();
				setState(4661);
				match(UNSET);
				setState(4664);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SESSION_IDLE_TIMEOUT_MINS:
				case SESSION_UI_IDLE_TIMEOUT_MINS:
					{
					setState(4662);
					session_policy_param_name();
					}
					break;
				case COMMENT:
					{
					setState(4663);
					match(COMMENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4666);
				match(ALTER);
				setState(4667);
				match(SESSION);
				setState(4668);
				match(POLICY);
				setState(4670);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
				case 1:
					{
					setState(4669);
					if_exists();
					}
					break;
				}
				setState(4672);
				object_name();
				setState(4673);
				match(RENAME);
				setState(4674);
				match(TO);
				setState(4675);
				object_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4677);
				match(ALTER);
				setState(4678);
				match(SESSION);
				setState(4679);
				match(POLICY);
				setState(4681);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
				case 1:
					{
					setState(4680);
					if_exists();
					}
					break;
				}
				setState(4683);
				object_name();
				setState(4686);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(4684);
					set_tags();
					}
					break;
				case UNSET:
					{
					setState(4685);
					unset_tags();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_password_policyContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode PASSWORD() { return getToken(SnowflakeParser.PASSWORD, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public List<Object_nameContext> object_name() {
			return getRuleContexts(Object_nameContext.class);
		}
		public Object_nameContext object_name(int i) {
			return getRuleContext(Object_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public List<Password_policy_paramsContext> password_policy_params() {
			return getRuleContexts(Password_policy_paramsContext.class);
		}
		public Password_policy_paramsContext password_policy_params(int i) {
			return getRuleContext(Password_policy_paramsContext.class,i);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public Password_policy_param_nameContext password_policy_param_name() {
			return getRuleContext(Password_policy_param_nameContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public Alter_password_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_password_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_password_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_password_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_password_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_password_policyContext alter_password_policy() throws RecognitionException {
		Alter_password_policyContext _localctx = new Alter_password_policyContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_alter_password_policy);
		int _la;
		try {
			setState(4738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4690);
				match(ALTER);
				setState(4691);
				match(PASSWORD);
				setState(4692);
				match(POLICY);
				setState(4694);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
				case 1:
					{
					setState(4693);
					if_exists();
					}
					break;
				}
				setState(4696);
				object_name();
				setState(4697);
				match(SET);
				setState(4701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMENT || ((((_la - 504)) & ~0x3f) == 0 && ((1L << (_la - 504)) & 2047L) != 0)) {
					{
					{
					setState(4698);
					password_policy_params();
					}
					}
					setState(4703);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4704);
				match(ALTER);
				setState(4705);
				match(PASSWORD);
				setState(4706);
				match(POLICY);
				setState(4708);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
				case 1:
					{
					setState(4707);
					if_exists();
					}
					break;
				}
				setState(4710);
				object_name();
				setState(4711);
				match(UNSET);
				setState(4714);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PASSWORD_HISTORY:
				case PASSWORD_LOCKOUT_TIME_MINS:
				case PASSWORD_MAX_AGE_DAYS:
				case PASSWORD_MAX_LENGTH:
				case PASSWORD_MAX_RETRIES:
				case PASSWORD_MIN_AGE_DAYS:
				case PASSWORD_MIN_LENGTH:
				case PASSWORD_MIN_LOWER_CASE_CHARS:
				case PASSWORD_MIN_NUMERIC_CHARS:
				case PASSWORD_MIN_SPECIAL_CHARS:
				case PASSWORD_MIN_UPPER_CASE_CHARS:
					{
					setState(4712);
					password_policy_param_name();
					}
					break;
				case COMMENT:
					{
					setState(4713);
					match(COMMENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4716);
				match(ALTER);
				setState(4717);
				match(PASSWORD);
				setState(4718);
				match(POLICY);
				setState(4720);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
				case 1:
					{
					setState(4719);
					if_exists();
					}
					break;
				}
				setState(4722);
				object_name();
				setState(4723);
				match(RENAME);
				setState(4724);
				match(TO);
				setState(4725);
				object_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4727);
				match(ALTER);
				setState(4728);
				match(PASSWORD);
				setState(4729);
				match(POLICY);
				setState(4731);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
				case 1:
					{
					setState(4730);
					if_exists();
					}
					break;
				}
				setState(4733);
				object_name();
				setState(4736);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(4734);
					set_tags();
					}
					break;
				case UNSET:
					{
					setState(4735);
					unset_tags();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_shareContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode SHARE() { return getToken(SnowflakeParser.SHARE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ACCOUNTS() { return getToken(SnowflakeParser.ACCOUNTS, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode ADD() { return getToken(SnowflakeParser.ADD, 0); }
		public TerminalNode REMOVE() { return getToken(SnowflakeParser.REMOVE, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode SHARE_RESTRICTIONS() { return getToken(SnowflakeParser.SHARE_RESTRICTIONS, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Alter_shareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_share; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_share(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_share(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_share(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_shareContext alter_share() throws RecognitionException {
		Alter_shareContext _localctx = new Alter_shareContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_alter_share);
		int _la;
		try {
			setState(4828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4740);
				match(ALTER);
				setState(4741);
				match(SHARE);
				setState(4743);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
				case 1:
					{
					setState(4742);
					if_exists();
					}
					break;
				}
				setState(4745);
				id_();
				setState(4746);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==REMOVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4747);
				match(ACCOUNTS);
				setState(4748);
				match(EQ);
				setState(4749);
				id_();
				setState(4754);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4750);
					match(COMMA);
					setState(4751);
					id_();
					}
					}
					setState(4756);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SHARE_RESTRICTIONS) {
					{
					setState(4757);
					match(SHARE_RESTRICTIONS);
					setState(4758);
					match(EQ);
					setState(4759);
					true_false();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4762);
				match(ALTER);
				setState(4763);
				match(SHARE);
				setState(4765);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
				case 1:
					{
					setState(4764);
					if_exists();
					}
					break;
				}
				setState(4767);
				id_();
				setState(4768);
				match(ADD);
				setState(4769);
				match(ACCOUNTS);
				setState(4770);
				match(EQ);
				setState(4771);
				id_();
				setState(4776);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4772);
					match(COMMA);
					setState(4773);
					id_();
					}
					}
					setState(4778);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4782);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SHARE_RESTRICTIONS) {
					{
					setState(4779);
					match(SHARE_RESTRICTIONS);
					setState(4780);
					match(EQ);
					setState(4781);
					true_false();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4784);
				match(ALTER);
				setState(4785);
				match(SHARE);
				setState(4787);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
				case 1:
					{
					setState(4786);
					if_exists();
					}
					break;
				}
				setState(4789);
				id_();
				setState(4790);
				match(SET);
				setState(4801);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ACCOUNTS) {
					{
					setState(4791);
					match(ACCOUNTS);
					setState(4792);
					match(EQ);
					setState(4793);
					id_();
					setState(4798);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4794);
						match(COMMA);
						setState(4795);
						id_();
						}
						}
						setState(4800);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(4804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(4803);
					comment_clause();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4806);
				match(ALTER);
				setState(4807);
				match(SHARE);
				setState(4809);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
				case 1:
					{
					setState(4808);
					if_exists();
					}
					break;
				}
				setState(4811);
				id_();
				setState(4812);
				set_tags();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4814);
				match(ALTER);
				setState(4815);
				match(SHARE);
				setState(4816);
				id_();
				setState(4817);
				unset_tags();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4819);
				match(ALTER);
				setState(4820);
				match(SHARE);
				setState(4822);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
				case 1:
					{
					setState(4821);
					if_exists();
					}
					break;
				}
				setState(4824);
				id_();
				setState(4825);
				match(UNSET);
				setState(4826);
				match(COMMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_storage_integrationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode STORAGE() { return getToken(SnowflakeParser.STORAGE, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Cloud_provider_params2Context cloud_provider_params2() {
			return getRuleContext(Cloud_provider_params2Context.class,0);
		}
		public Enabled_true_falseContext enabled_true_false() {
			return getRuleContext(Enabled_true_falseContext.class,0);
		}
		public TerminalNode STORAGE_ALLOWED_LOCATIONS() { return getToken(SnowflakeParser.STORAGE_ALLOWED_LOCATIONS, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<String_listContext> string_list() {
			return getRuleContexts(String_listContext.class);
		}
		public String_listContext string_list(int i) {
			return getRuleContext(String_listContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public TerminalNode STORAGE_BLOCKED_LOCATIONS() { return getToken(SnowflakeParser.STORAGE_BLOCKED_LOCATIONS, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode ENABLED() { return getToken(SnowflakeParser.ENABLED, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Alter_storage_integrationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_storage_integration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_storage_integration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_storage_integration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_storage_integration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_storage_integrationContext alter_storage_integration() throws RecognitionException {
		Alter_storage_integrationContext _localctx = new Alter_storage_integrationContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_alter_storage_integration);
		int _la;
		try {
			setState(4896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4830);
				match(ALTER);
				setState(4832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(4831);
					match(STORAGE);
					}
				}

				setState(4834);
				match(INTEGRATION);
				setState(4836);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
				case 1:
					{
					setState(4835);
					if_exists();
					}
					break;
				}
				setState(4838);
				id_();
				setState(4839);
				match(SET);
				setState(4841);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AZURE_TENANT_ID || _la==STORAGE_AWS_ROLE_ARN) {
					{
					setState(4840);
					cloud_provider_params2();
					}
				}

				setState(4844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENABLED) {
					{
					setState(4843);
					enabled_true_false();
					}
				}

				setState(4852);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_ALLOWED_LOCATIONS) {
					{
					setState(4846);
					match(STORAGE_ALLOWED_LOCATIONS);
					setState(4847);
					match(EQ);
					setState(4848);
					match(LR_BRACKET);
					setState(4849);
					string_list();
					setState(4850);
					match(RR_BRACKET);
					}
				}

				setState(4860);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_BLOCKED_LOCATIONS) {
					{
					setState(4854);
					match(STORAGE_BLOCKED_LOCATIONS);
					setState(4855);
					match(EQ);
					setState(4856);
					match(LR_BRACKET);
					setState(4857);
					string_list();
					setState(4858);
					match(RR_BRACKET);
					}
				}

				setState(4863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(4862);
					comment_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4865);
				match(ALTER);
				setState(4867);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(4866);
					match(STORAGE);
					}
				}

				setState(4869);
				match(INTEGRATION);
				setState(4871);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
				case 1:
					{
					setState(4870);
					if_exists();
					}
					break;
				}
				setState(4873);
				id_();
				setState(4874);
				set_tags();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4876);
				match(ALTER);
				setState(4878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(4877);
					match(STORAGE);
					}
				}

				setState(4880);
				match(INTEGRATION);
				setState(4881);
				id_();
				setState(4882);
				unset_tags();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4884);
				match(ALTER);
				setState(4886);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(4885);
					match(STORAGE);
					}
				}

				setState(4888);
				match(INTEGRATION);
				setState(4890);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
				case 1:
					{
					setState(4889);
					if_exists();
					}
					break;
				}
				setState(4892);
				id_();
				setState(4893);
				match(UNSET);
				setState(4894);
				_la = _input.LA(1);
				if ( !(_la==COMMENT || _la==ENABLED || _la==STORAGE_BLOCKED_LOCATIONS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_streamContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode STREAM() { return getToken(SnowflakeParser.STREAM, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Tag_decl_listContext tag_decl_list() {
			return getRuleContext(Tag_decl_listContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Alter_streamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_stream; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_stream(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_stream(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_stream(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_streamContext alter_stream() throws RecognitionException {
		Alter_streamContext _localctx = new Alter_streamContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_alter_stream);
		int _la;
		try {
			setState(4933);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4898);
				match(ALTER);
				setState(4899);
				match(STREAM);
				setState(4901);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
				case 1:
					{
					setState(4900);
					if_exists();
					}
					break;
				}
				setState(4903);
				id_();
				setState(4904);
				match(SET);
				setState(4906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TAG) {
					{
					setState(4905);
					tag_decl_list();
					}
				}

				setState(4909);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(4908);
					comment_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4911);
				match(ALTER);
				setState(4912);
				match(STREAM);
				setState(4914);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
				case 1:
					{
					setState(4913);
					if_exists();
					}
					break;
				}
				setState(4916);
				id_();
				setState(4917);
				set_tags();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4919);
				match(ALTER);
				setState(4920);
				match(STREAM);
				setState(4921);
				id_();
				setState(4922);
				unset_tags();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4924);
				match(ALTER);
				setState(4925);
				match(STREAM);
				setState(4927);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
				case 1:
					{
					setState(4926);
					if_exists();
					}
					break;
				}
				setState(4929);
				id_();
				setState(4930);
				match(UNSET);
				setState(4931);
				match(COMMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_tableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public List<Object_nameContext> object_name() {
			return getRuleContexts(Object_nameContext.class);
		}
		public Object_nameContext object_name(int i) {
			return getRuleContext(Object_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode SWAP() { return getToken(SnowflakeParser.SWAP, 0); }
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public Clustering_actionContext clustering_action() {
			return getRuleContext(Clustering_actionContext.class,0);
		}
		public Table_column_actionContext table_column_action() {
			return getRuleContext(Table_column_actionContext.class,0);
		}
		public Constraint_actionContext constraint_action() {
			return getRuleContext(Constraint_actionContext.class,0);
		}
		public Ext_table_column_actionContext ext_table_column_action() {
			return getRuleContext(Ext_table_column_actionContext.class,0);
		}
		public Search_optimization_actionContext search_optimization_action() {
			return getRuleContext(Search_optimization_actionContext.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public Stage_file_formatContext stage_file_format() {
			return getRuleContext(Stage_file_formatContext.class,0);
		}
		public TerminalNode STAGE_COPY_OPTIONS() { return getToken(SnowflakeParser.STAGE_COPY_OPTIONS, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Copy_optionsContext copy_options() {
			return getRuleContext(Copy_optionsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode DATA_RETENTION_TIME_IN_DAYS() { return getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0); }
		public List<NumContext> num() {
			return getRuleContexts(NumContext.class);
		}
		public NumContext num(int i) {
			return getRuleContext(NumContext.class,i);
		}
		public TerminalNode MAX_DATA_EXTENSION_TIME_IN_DAYS() { return getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0); }
		public TerminalNode CHANGE_TRACKING() { return getToken(SnowflakeParser.CHANGE_TRACKING, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public Default_ddl_collationContext default_ddl_collation() {
			return getRuleContext(Default_ddl_collationContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode DEFAULT_DDL_COLLATION_() { return getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Rls_operationsContext rls_operations() {
			return getRuleContext(Rls_operationsContext.class,0);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_alter_table);
		int _la;
		try {
			setState(5060);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4935);
				match(ALTER);
				setState(4936);
				match(TABLE);
				setState(4938);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
				case 1:
					{
					setState(4937);
					if_exists();
					}
					break;
				}
				setState(4940);
				object_name();
				setState(4941);
				match(RENAME);
				setState(4942);
				match(TO);
				setState(4943);
				object_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4945);
				match(ALTER);
				setState(4946);
				match(TABLE);
				setState(4948);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
				case 1:
					{
					setState(4947);
					if_exists();
					}
					break;
				}
				setState(4950);
				object_name();
				setState(4951);
				match(SWAP);
				setState(4952);
				match(WITH);
				setState(4953);
				object_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4955);
				match(ALTER);
				setState(4956);
				match(TABLE);
				setState(4958);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
				case 1:
					{
					setState(4957);
					if_exists();
					}
					break;
				}
				setState(4960);
				object_name();
				setState(4964);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
				case 1:
					{
					setState(4961);
					clustering_action();
					}
					break;
				case 2:
					{
					setState(4962);
					table_column_action();
					}
					break;
				case 3:
					{
					setState(4963);
					constraint_action();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4966);
				match(ALTER);
				setState(4967);
				match(TABLE);
				setState(4969);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
				case 1:
					{
					setState(4968);
					if_exists();
					}
					break;
				}
				setState(4971);
				object_name();
				setState(4972);
				ext_table_column_action();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4974);
				match(ALTER);
				setState(4975);
				match(TABLE);
				setState(4977);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
				case 1:
					{
					setState(4976);
					if_exists();
					}
					break;
				}
				setState(4979);
				object_name();
				setState(4980);
				search_optimization_action();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4982);
				match(ALTER);
				setState(4983);
				match(TABLE);
				setState(4985);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
				case 1:
					{
					setState(4984);
					if_exists();
					}
					break;
				}
				setState(4987);
				object_name();
				setState(4988);
				match(SET);
				setState(4990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STAGE_FILE_FORMAT || _la==TYPE) {
					{
					setState(4989);
					stage_file_format();
					}
				}

				setState(4998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STAGE_COPY_OPTIONS) {
					{
					setState(4992);
					match(STAGE_COPY_OPTIONS);
					setState(4993);
					match(EQ);
					setState(4994);
					match(LR_BRACKET);
					setState(4995);
					copy_options();
					setState(4996);
					match(RR_BRACKET);
					}
				}

				setState(5003);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATA_RETENTION_TIME_IN_DAYS) {
					{
					setState(5000);
					match(DATA_RETENTION_TIME_IN_DAYS);
					setState(5001);
					match(EQ);
					setState(5002);
					num();
					}
				}

				setState(5008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MAX_DATA_EXTENSION_TIME_IN_DAYS) {
					{
					setState(5005);
					match(MAX_DATA_EXTENSION_TIME_IN_DAYS);
					setState(5006);
					match(EQ);
					setState(5007);
					num();
					}
				}

				setState(5013);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHANGE_TRACKING) {
					{
					setState(5010);
					match(CHANGE_TRACKING);
					setState(5011);
					match(EQ);
					setState(5012);
					true_false();
					}
				}

				setState(5016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT_DDL_COLLATION_) {
					{
					setState(5015);
					default_ddl_collation();
					}
				}

				setState(5019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(5018);
					comment_clause();
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5021);
				match(ALTER);
				setState(5022);
				match(TABLE);
				setState(5024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
				case 1:
					{
					setState(5023);
					if_exists();
					}
					break;
				}
				setState(5026);
				object_name();
				setState(5027);
				set_tags();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5029);
				match(ALTER);
				setState(5030);
				match(TABLE);
				setState(5032);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
				case 1:
					{
					setState(5031);
					if_exists();
					}
					break;
				}
				setState(5034);
				object_name();
				setState(5035);
				unset_tags();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5037);
				match(ALTER);
				setState(5038);
				match(TABLE);
				setState(5040);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
				case 1:
					{
					setState(5039);
					if_exists();
					}
					break;
				}
				setState(5042);
				object_name();
				setState(5043);
				match(UNSET);
				setState(5050);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATA_RETENTION_TIME_IN_DAYS:
					{
					setState(5044);
					match(DATA_RETENTION_TIME_IN_DAYS);
					}
					break;
				case MAX_DATA_EXTENSION_TIME_IN_DAYS:
					{
					setState(5045);
					match(MAX_DATA_EXTENSION_TIME_IN_DAYS);
					}
					break;
				case CHANGE_TRACKING:
					{
					setState(5046);
					match(CHANGE_TRACKING);
					}
					break;
				case DEFAULT_DDL_COLLATION_:
					{
					setState(5047);
					match(DEFAULT_DDL_COLLATION_);
					}
					break;
				case COMMENT:
					{
					setState(5048);
					match(COMMENT);
					}
					break;
				case EOF:
				case SEMI:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5052);
				match(ALTER);
				setState(5053);
				match(TABLE);
				setState(5055);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
				case 1:
					{
					setState(5054);
					if_exists();
					}
					break;
				}
				setState(5057);
				object_name();
				setState(5058);
				rls_operations();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Rls_operationsContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SnowflakeParser.ADD, 0); }
		public List<TerminalNode> ROW() { return getTokens(SnowflakeParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(SnowflakeParser.ROW, i);
		}
		public List<TerminalNode> ACCESS() { return getTokens(SnowflakeParser.ACCESS); }
		public TerminalNode ACCESS(int i) {
			return getToken(SnowflakeParser.ACCESS, i);
		}
		public List<TerminalNode> POLICY() { return getTokens(SnowflakeParser.POLICY); }
		public TerminalNode POLICY(int i) {
			return getToken(SnowflakeParser.POLICY, i);
		}
		public List<Object_nameContext> object_name() {
			return getRuleContexts(Object_nameContext.class);
		}
		public Object_nameContext object_name(int i) {
			return getRuleContext(Object_nameContext.class,i);
		}
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public Column_list_in_parenthesesContext column_list_in_parentheses() {
			return getRuleContext(Column_list_in_parenthesesContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode COMMA() { return getToken(SnowflakeParser.COMMA, 0); }
		public TerminalNode ALL() { return getToken(SnowflakeParser.ALL, 0); }
		public TerminalNode POLICIES() { return getToken(SnowflakeParser.POLICIES, 0); }
		public Rls_operationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rls_operations; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterRls_operations(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitRls_operations(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitRls_operations(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rls_operationsContext rls_operations() throws RecognitionException {
		Rls_operationsContext _localctx = new Rls_operationsContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_rls_operations);
		int _la;
		try {
			setState(5091);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5062);
				match(ADD);
				setState(5063);
				match(ROW);
				setState(5064);
				match(ACCESS);
				setState(5065);
				match(POLICY);
				setState(5066);
				object_name();
				setState(5067);
				match(ON);
				setState(5068);
				column_list_in_parentheses();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5070);
				match(DROP);
				setState(5071);
				match(ROW);
				setState(5072);
				match(ACCESS);
				setState(5073);
				match(POLICY);
				setState(5074);
				object_name();
				setState(5084);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5075);
					match(COMMA);
					setState(5076);
					match(ADD);
					setState(5077);
					match(ROW);
					setState(5078);
					match(ACCESS);
					setState(5079);
					match(POLICY);
					setState(5080);
					object_name();
					setState(5081);
					match(ON);
					setState(5082);
					column_list_in_parentheses();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5086);
				match(DROP);
				setState(5087);
				match(ALL);
				setState(5088);
				match(ROW);
				setState(5089);
				match(ACCESS);
				setState(5090);
				match(POLICIES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Clustering_actionContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(SnowflakeParser.CLUSTER, 0); }
		public TerminalNode BY() { return getToken(SnowflakeParser.BY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode RECLUSTER() { return getToken(SnowflakeParser.RECLUSTER, 0); }
		public TerminalNode MAX_SIZE() { return getToken(SnowflakeParser.MAX_SIZE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(SnowflakeParser.WHERE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Resume_suspendContext resume_suspend() {
			return getRuleContext(Resume_suspendContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode CLUSTERING() { return getToken(SnowflakeParser.CLUSTERING, 0); }
		public TerminalNode KEY() { return getToken(SnowflakeParser.KEY, 0); }
		public Clustering_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clustering_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterClustering_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitClustering_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitClustering_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Clustering_actionContext clustering_action() throws RecognitionException {
		Clustering_actionContext _localctx = new Clustering_actionContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_clustering_action);
		int _la;
		try {
			setState(5115);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLUSTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5093);
				match(CLUSTER);
				setState(5094);
				match(BY);
				setState(5095);
				match(LR_BRACKET);
				setState(5096);
				expr_list();
				setState(5097);
				match(RR_BRACKET);
				}
				break;
			case RECLUSTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5099);
				match(RECLUSTER);
				setState(5103);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MAX_SIZE) {
					{
					setState(5100);
					match(MAX_SIZE);
					setState(5101);
					match(EQ);
					setState(5102);
					num();
					}
				}

				setState(5107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(5105);
					match(WHERE);
					setState(5106);
					expr(0);
					}
				}

				}
				break;
			case RESUME:
			case SUSPEND:
				enterOuterAlt(_localctx, 3);
				{
				setState(5109);
				resume_suspend();
				setState(5110);
				match(RECLUSTER);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 4);
				{
				setState(5112);
				match(DROP);
				setState(5113);
				match(CLUSTERING);
				setState(5114);
				match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_column_actionContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SnowflakeParser.ADD, 0); }
		public List<Full_col_declContext> full_col_decl() {
			return getRuleContexts(Full_col_declContext.class);
		}
		public Full_col_declContext full_col_decl(int i) {
			return getRuleContext(Full_col_declContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(SnowflakeParser.COLUMN, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public Alter_modifyContext alter_modify() {
			return getRuleContext(Alter_modifyContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public List<Alter_column_clauseContext> alter_column_clause() {
			return getRuleContexts(Alter_column_clauseContext.class);
		}
		public Alter_column_clauseContext alter_column_clause(int i) {
			return getRuleContext(Alter_column_clauseContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode MASKING() { return getToken(SnowflakeParser.MASKING, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode USING() { return getToken(SnowflakeParser.USING, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(SnowflakeParser.FORCE, 0); }
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public List<Column_set_tagsContext> column_set_tags() {
			return getRuleContexts(Column_set_tagsContext.class);
		}
		public Column_set_tagsContext column_set_tags(int i) {
			return getRuleContext(Column_set_tagsContext.class,i);
		}
		public List<Column_unset_tagsContext> column_unset_tags() {
			return getRuleContexts(Column_unset_tagsContext.class);
		}
		public Column_unset_tagsContext column_unset_tags(int i) {
			return getRuleContext(Column_unset_tagsContext.class,i);
		}
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Table_column_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_column_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTable_column_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTable_column_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTable_column_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_column_actionContext table_column_action() throws RecognitionException {
		Table_column_actionContext _localctx = new Table_column_actionContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_table_column_action);
		int _la;
		try {
			setState(5212);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5117);
				match(ADD);
				setState(5119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(5118);
					match(COLUMN);
					}
				}

				setState(5122);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
				case 1:
					{
					setState(5121);
					if_not_exists();
					}
					break;
				}
				setState(5124);
				full_col_decl();
				setState(5129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5125);
					match(COMMA);
					setState(5126);
					full_col_decl();
					}
					}
					setState(5131);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5132);
				match(RENAME);
				setState(5133);
				match(COLUMN);
				setState(5134);
				column_name();
				setState(5135);
				match(TO);
				setState(5136);
				column_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5138);
				alter_modify();
				setState(5158);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(5139);
					match(LR_BRACKET);
					setState(5140);
					alter_column_clause();
					setState(5145);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5141);
						match(COMMA);
						setState(5142);
						alter_column_clause();
						}
						}
						setState(5147);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5148);
					match(RR_BRACKET);
					}
					break;
				case ACCOUNT:
				case ACCOUNTADMIN:
				case ACTION:
				case AES:
				case ALERT:
				case ALERTS:
				case ALLOW_OVERLAPPING_EXECUTION:
				case ANY_VALUE:
				case ARRAY_AGG:
				case AT_KEYWORD:
				case AVG:
				case CAST:
				case CEIL:
				case CHAR:
				case CHARACTER:
				case CHARINDEX:
				case CHECKSUM:
				case CLUSTER:
				case COLLATE:
				case COLLECTION:
				case COLUMN:
				case COMMENT:
				case CONDITION:
				case CONFIGURATION:
				case CONTAINS:
				case COPY_OPTIONS_:
				case COUNT:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case DATA:
				case DATABASES:
				case DATEADD:
				case DATEDIFF:
				case DATE_PART:
				case DAYS:
				case DEFINITION:
				case DELTA:
				case DIRECTION:
				case DISPLAY_NAME:
				case DOWNSTREAM:
				case DYNAMIC:
				case EDITION:
				case EMAIL:
				case EMPTY_:
				case ENABLED:
				case EQUAL_NULL:
				case ERROR_INTEGRATION:
				case EVENT:
				case EXCHANGE:
				case EXPIRY_DATE:
				case EXPR:
				case FILE:
				case FILES:
				case FIRST_NAME:
				case FIRST_VALUE:
				case FLATTEN:
				case FREQUENCY:
				case FUNCTION:
				case GET:
				case GETDATE:
				case GLOBAL:
				case HIGH:
				case HOURS:
				case IDENTIFIER:
				case IDENTITY:
				case IF:
				case IFF:
				case IFNULL:
				case ILIKE:
				case IMPORTED:
				case INCREMENTAL:
				case INDEX:
				case INITIALIZE:
				case INPUT:
				case INT:
				case INTEGRATIONS:
				case INTERVAL:
				case JAVASCRIPT:
				case JOIN:
				case KEY:
				case LAG:
				case LANGUAGE:
				case LAST_NAME:
				case LAST_QUERY_ID:
				case LEAD:
				case LEFT:
				case LENGTH:
				case LIKE:
				case LOCAL:
				case LOW:
				case LOWER:
				case MAX_CONCURRENCY_LEVEL:
				case MEDIUM:
				case MIN:
				case MODE:
				case NAME:
				case NETWORK:
				case NOORDER:
				case NULLIF:
				case NUMBER:
				case NVL:
				case NVL2:
				case OBJECT:
				case OFFSET:
				case OLD:
				case ON_CREATE:
				case ON_ERROR:
				case ON_SCHEDULE:
				case OPTION:
				case ORDER:
				case ORGADMIN:
				case OUTBOUND:
				case OUTER:
				case OWNER:
				case PARTITION:
				case PASSWORD:
				case PASSWORD_HISTORY:
				case PASSWORD_LOCKOUT_TIME_MINS:
				case PASSWORD_MAX_AGE_DAYS:
				case PASSWORD_MAX_LENGTH:
				case PASSWORD_MAX_RETRIES:
				case PASSWORD_MIN_AGE_DAYS:
				case PASSWORD_MIN_LENGTH:
				case PASSWORD_MIN_LOWER_CASE_CHARS:
				case PASSWORD_MIN_NUMERIC_CHARS:
				case PASSWORD_MIN_SPECIAL_CHARS:
				case PASSWORD_MIN_UPPER_CASE_CHARS:
				case PATH_:
				case PATTERN:
				case POLICIES:
				case POLICY:
				case PORT:
				case PRIORITY:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PUBLIC:
				case QUARTER:
				case QUERY:
				case QUERY_TAG:
				case RANK:
				case RECURSIVE:
				case REFERENCES:
				case REFRESH_MODE:
				case REGION:
				case REPLACE:
				case RESOURCE:
				case RESOURCES:
				case RESPECT:
				case RESTRICT:
				case RESULT:
				case RIGHT:
				case ROLE:
				case ROLES:
				case ROLLUP:
				case ROUND:
				case ROUNDING_MODE:
				case ROW_NUMBER:
				case SCALE:
				case SCHEDULE:
				case SCHEMAS:
				case SECURITYADMIN:
				case SEQUENCE:
				case SESSION:
				case SOURCE:
				case SPLIT:
				case SPLIT_PART:
				case SPLIT_TO_TABLE:
				case STAGE:
				case STAGES:
				case START_DATE:
				case STATE:
				case STATS:
				case STATUS:
				case STREAMS:
				case SUBSTR:
				case SUBSTRING:
				case SUM:
				case SYSADMIN:
				case TABLES:
				case TAG:
				case TAGS:
				case TARGET_LAG:
				case TASKS:
				case TEMP:
				case TIME:
				case TIMEADD:
				case TIMEDIFF:
				case TIMESTAMP:
				case TIMESTAMP_LTZ:
				case TIMESTAMP_NTZ:
				case TIMESTAMP_TZ:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIMEZONE:
				case TO_BOOLEAN:
				case TO_DATE:
				case TO_TIMESTAMP:
				case TRUNC:
				case TRUNCATE:
				case TRY_CAST:
				case TYPE:
				case UPPER:
				case URL:
				case USER:
				case USERADMIN:
				case USERS:
				case VALUE:
				case VALUES:
				case VERSION:
				case VIEWS:
				case VISIBILITY:
				case WAREHOUSE:
				case WAREHOUSES:
				case WAREHOUSE_TYPE:
				case YEAR:
				case ARRAY:
				case BIGINT:
				case BINARY:
				case BOOLEAN:
				case BYTEINT:
				case CHAR_VARYING:
				case DATE:
				case DATETIME:
				case DECIMAL_:
				case DOUBLE:
				case DOUBLE_PRECISION:
				case FLOAT4:
				case FLOAT8:
				case FLOAT_:
				case FLOOR:
				case GEOGRAPHY:
				case GEOMETRY:
				case INTEGER:
				case NCHAR:
				case NCHAR_VARYING:
				case NUMERIC:
				case NVARCHAR2:
				case NVARCHAR:
				case REAL_:
				case SMALLINT:
				case STRING_:
				case TEXT:
				case TINYINT:
				case VARBINARY:
				case VARCHAR:
				case VARIANT:
				case DOUBLE_QUOTE_ID:
				case DOUBLE_QUOTE_BLANK:
				case ID:
				case ID2:
					{
					setState(5150);
					alter_column_clause();
					setState(5155);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5151);
						match(COMMA);
						setState(5152);
						alter_column_clause();
						}
						}
						setState(5157);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5160);
				alter_modify();
				setState(5161);
				match(COLUMN);
				setState(5162);
				column_name();
				setState(5163);
				match(SET);
				setState(5164);
				match(MASKING);
				setState(5165);
				match(POLICY);
				setState(5166);
				id_();
				setState(5174);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5167);
					match(USING);
					setState(5168);
					match(LR_BRACKET);
					setState(5169);
					column_name();
					setState(5170);
					match(COMMA);
					setState(5171);
					column_list();
					setState(5172);
					match(RR_BRACKET);
					}
				}

				setState(5177);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(5176);
					match(FORCE);
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5179);
				alter_modify();
				setState(5180);
				match(COLUMN);
				setState(5181);
				column_name();
				setState(5182);
				match(UNSET);
				setState(5183);
				match(MASKING);
				setState(5184);
				match(POLICY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5186);
				alter_modify();
				setState(5187);
				column_set_tags();
				setState(5192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5188);
					match(COMMA);
					setState(5189);
					column_set_tags();
					}
					}
					setState(5194);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5195);
				alter_modify();
				setState(5196);
				column_unset_tags();
				setState(5201);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5197);
					match(COMMA);
					setState(5198);
					column_unset_tags();
					}
					}
					setState(5203);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5204);
				match(DROP);
				setState(5206);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(5205);
					match(COLUMN);
					}
				}

				setState(5209);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
				case 1:
					{
					setState(5208);
					if_exists();
					}
					break;
				}
				setState(5211);
				column_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_column_clauseContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode DEFAULT() { return getToken(SnowflakeParser.DEFAULT, 0); }
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(SnowflakeParser.DOT, 0); }
		public TerminalNode NEXTVAL() { return getToken(SnowflakeParser.NEXTVAL, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode COLUMN() { return getToken(SnowflakeParser.COLUMN, 0); }
		public TerminalNode NOT() { return getToken(SnowflakeParser.NOT, 0); }
		public TerminalNode NULL_() { return getToken(SnowflakeParser.NULL_, 0); }
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public TerminalNode DATA() { return getToken(SnowflakeParser.DATA, 0); }
		public Alter_column_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_column_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_column_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_column_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_clauseContext alter_column_clause() throws RecognitionException {
		Alter_column_clauseContext _localctx = new Alter_column_clauseContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_alter_column_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5215);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(5214);
				match(COLUMN);
				}
			}

			setState(5217);
			column_name();
			setState(5248);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
			case 1:
				{
				setState(5218);
				match(DROP);
				setState(5219);
				match(DEFAULT);
				}
				break;
			case 2:
				{
				setState(5220);
				match(SET);
				setState(5221);
				match(DEFAULT);
				setState(5222);
				object_name();
				setState(5223);
				match(DOT);
				setState(5224);
				match(NEXTVAL);
				}
				break;
			case 3:
				{
				setState(5234);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOT:
				case SET:
					{
					setState(5227);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SET) {
						{
						setState(5226);
						match(SET);
						}
					}

					setState(5229);
					match(NOT);
					setState(5230);
					match(NULL_);
					}
					break;
				case DROP:
					{
					setState(5231);
					match(DROP);
					setState(5232);
					match(NOT);
					setState(5233);
					match(NULL_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				{
				setState(5241);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET || _la==TYPE) {
					{
					setState(5238);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SET) {
						{
						setState(5236);
						match(SET);
						setState(5237);
						match(DATA);
						}
					}

					setState(5240);
					match(TYPE);
					}
				}

				setState(5243);
				data_type();
				}
				break;
			case 5:
				{
				setState(5244);
				match(COMMENT);
				setState(5245);
				string();
				}
				break;
			case 6:
				{
				setState(5246);
				match(UNSET);
				setState(5247);
				match(COMMENT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Inline_constraintContext extends ParserRuleContext {
		public Foreign_keyContext foreign_key() {
			return getRuleContext(Foreign_keyContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(SnowflakeParser.REFERENCES, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Constraint_propertiesContext constraint_properties() {
			return getRuleContext(Constraint_propertiesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SnowflakeParser.CONSTRAINT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(SnowflakeParser.UNIQUE, 0); }
		public Primary_keyContext primary_key() {
			return getRuleContext(Primary_keyContext.class,0);
		}
		public List<Common_constraint_propertiesContext> common_constraint_properties() {
			return getRuleContexts(Common_constraint_propertiesContext.class);
		}
		public Common_constraint_propertiesContext common_constraint_properties(int i) {
			return getRuleContext(Common_constraint_propertiesContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Inline_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inline_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterInline_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitInline_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitInline_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Inline_constraintContext inline_constraint() throws RecognitionException {
		Inline_constraintContext _localctx = new Inline_constraintContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_inline_constraint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(5250);
				match(CONSTRAINT);
				setState(5251);
				id_();
				}
			}

			setState(5275);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(5256);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNIQUE:
					{
					setState(5254);
					match(UNIQUE);
					}
					break;
				case PRIMARY:
					{
					setState(5255);
					primary_key();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5261);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,548,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5258);
						common_constraint_properties();
						}
						} 
					}
					setState(5263);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,548,_ctx);
				}
				}
				break;
			case FOREIGN:
				{
				setState(5264);
				foreign_key();
				setState(5265);
				match(REFERENCES);
				setState(5266);
				object_name();
				setState(5271);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5267);
					match(LR_BRACKET);
					setState(5268);
					column_name();
					setState(5269);
					match(RR_BRACKET);
					}
				}

				setState(5273);
				constraint_properties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Enforced_not_enforcedContext extends ParserRuleContext {
		public TerminalNode ENFORCED() { return getToken(SnowflakeParser.ENFORCED, 0); }
		public TerminalNode NOT() { return getToken(SnowflakeParser.NOT, 0); }
		public Enforced_not_enforcedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enforced_not_enforced; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterEnforced_not_enforced(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitEnforced_not_enforced(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitEnforced_not_enforced(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enforced_not_enforcedContext enforced_not_enforced() throws RecognitionException {
		Enforced_not_enforcedContext _localctx = new Enforced_not_enforcedContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_enforced_not_enforced);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5278);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5277);
				match(NOT);
				}
			}

			setState(5280);
			match(ENFORCED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Deferrable_not_deferrableContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(SnowflakeParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(SnowflakeParser.NOT, 0); }
		public Deferrable_not_deferrableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deferrable_not_deferrable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDeferrable_not_deferrable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDeferrable_not_deferrable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDeferrable_not_deferrable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Deferrable_not_deferrableContext deferrable_not_deferrable() throws RecognitionException {
		Deferrable_not_deferrableContext _localctx = new Deferrable_not_deferrableContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_deferrable_not_deferrable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5282);
				match(NOT);
				}
			}

			setState(5285);
			match(DEFERRABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Initially_deferred_or_immediateContext extends ParserRuleContext {
		public TerminalNode INITIALLY() { return getToken(SnowflakeParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(SnowflakeParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SnowflakeParser.IMMEDIATE, 0); }
		public Initially_deferred_or_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_initially_deferred_or_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterInitially_deferred_or_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitInitially_deferred_or_immediate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitInitially_deferred_or_immediate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Initially_deferred_or_immediateContext initially_deferred_or_immediate() throws RecognitionException {
		Initially_deferred_or_immediateContext _localctx = new Initially_deferred_or_immediateContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_initially_deferred_or_immediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5287);
			match(INITIALLY);
			setState(5288);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Common_constraint_propertiesContext extends ParserRuleContext {
		public Enforced_not_enforcedContext enforced_not_enforced() {
			return getRuleContext(Enforced_not_enforcedContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(SnowflakeParser.VALIDATE, 0); }
		public TerminalNode NOVALIDATE() { return getToken(SnowflakeParser.NOVALIDATE, 0); }
		public Deferrable_not_deferrableContext deferrable_not_deferrable() {
			return getRuleContext(Deferrable_not_deferrableContext.class,0);
		}
		public Initially_deferred_or_immediateContext initially_deferred_or_immediate() {
			return getRuleContext(Initially_deferred_or_immediateContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(SnowflakeParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(SnowflakeParser.DISABLE, 0); }
		public TerminalNode RELY() { return getToken(SnowflakeParser.RELY, 0); }
		public TerminalNode NORELY() { return getToken(SnowflakeParser.NORELY, 0); }
		public Common_constraint_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_constraint_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCommon_constraint_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCommon_constraint_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCommon_constraint_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_constraint_propertiesContext common_constraint_properties() throws RecognitionException {
		Common_constraint_propertiesContext _localctx = new Common_constraint_propertiesContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_common_constraint_properties);
		int _la;
		try {
			setState(5302);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5290);
				enforced_not_enforced();
				setState(5292);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOVALIDATE || _la==VALIDATE) {
					{
					setState(5291);
					_la = _input.LA(1);
					if ( !(_la==NOVALIDATE || _la==VALIDATE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5294);
				deferrable_not_deferrable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5295);
				initially_deferred_or_immediate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5296);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOVALIDATE || _la==VALIDATE) {
					{
					setState(5297);
					_la = _input.LA(1);
					if ( !(_la==NOVALIDATE || _la==VALIDATE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5300);
				match(RELY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5301);
				match(NORELY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class On_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(SnowflakeParser.UPDATE, 0); }
		public On_actionContext on_action() {
			return getRuleContext(On_actionContext.class,0);
		}
		public On_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterOn_update(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitOn_update(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitOn_update(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_updateContext on_update() throws RecognitionException {
		On_updateContext _localctx = new On_updateContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_on_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5304);
			match(ON);
			setState(5305);
			match(UPDATE);
			setState(5306);
			on_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class On_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(SnowflakeParser.DELETE, 0); }
		public On_actionContext on_action() {
			return getRuleContext(On_actionContext.class,0);
		}
		public On_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterOn_delete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitOn_delete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitOn_delete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_deleteContext on_delete() throws RecognitionException {
		On_deleteContext _localctx = new On_deleteContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_on_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5308);
			match(ON);
			setState(5309);
			match(DELETE);
			setState(5310);
			on_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Foreign_key_matchContext extends ParserRuleContext {
		public Token match_type;
		public TerminalNode MATCH() { return getToken(SnowflakeParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(SnowflakeParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(SnowflakeParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(SnowflakeParser.SIMPLE, 0); }
		public Foreign_key_matchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_key_match; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterForeign_key_match(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitForeign_key_match(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitForeign_key_match(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreign_key_matchContext foreign_key_match() throws RecognitionException {
		Foreign_key_matchContext _localctx = new Foreign_key_matchContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_foreign_key_match);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5312);
			match(MATCH);
			setState(5313);
			((Foreign_key_matchContext)_localctx).match_type = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
				((Foreign_key_matchContext)_localctx).match_type = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class On_actionContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(SnowflakeParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode NULL_() { return getToken(SnowflakeParser.NULL_, 0); }
		public TerminalNode DEFAULT() { return getToken(SnowflakeParser.DEFAULT, 0); }
		public TerminalNode RESTRICT() { return getToken(SnowflakeParser.RESTRICT, 0); }
		public TerminalNode NO() { return getToken(SnowflakeParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(SnowflakeParser.ACTION, 0); }
		public On_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterOn_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitOn_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitOn_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_actionContext on_action() throws RecognitionException {
		On_actionContext _localctx = new On_actionContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_on_action);
		int _la;
		try {
			setState(5321);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5315);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(5316);
				match(SET);
				setState(5317);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==NULL_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case RESTRICT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5318);
				match(RESTRICT);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(5319);
				match(NO);
				setState(5320);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Constraint_propertiesContext extends ParserRuleContext {
		public List<Common_constraint_propertiesContext> common_constraint_properties() {
			return getRuleContexts(Common_constraint_propertiesContext.class);
		}
		public Common_constraint_propertiesContext common_constraint_properties(int i) {
			return getRuleContext(Common_constraint_propertiesContext.class,i);
		}
		public Foreign_key_matchContext foreign_key_match() {
			return getRuleContext(Foreign_key_matchContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public Constraint_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterConstraint_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitConstraint_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitConstraint_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_propertiesContext constraint_properties() throws RecognitionException {
		Constraint_propertiesContext _localctx = new Constraint_propertiesContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_constraint_properties);
		int _la;
		try {
			int _alt;
			setState(5343);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,562,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5326);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,557,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5323);
						common_constraint_properties();
						}
						} 
					}
					setState(5328);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,557,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5329);
				foreign_key_match();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATCH) {
					{
					setState(5330);
					foreign_key_match();
					}
				}

				setState(5341);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
				case 1:
					{
					setState(5333);
					on_update();
					setState(5335);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ON) {
						{
						setState(5334);
						on_delete();
						}
					}

					}
					break;
				case 2:
					{
					setState(5337);
					on_delete();
					setState(5339);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ON) {
						{
						setState(5338);
						on_update();
						}
					}

					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Ext_table_column_actionContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SnowflakeParser.ADD, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode COLUMN() { return getToken(SnowflakeParser.COLUMN, 0); }
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public Ext_table_column_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ext_table_column_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterExt_table_column_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitExt_table_column_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitExt_table_column_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ext_table_column_actionContext ext_table_column_action() throws RecognitionException {
		Ext_table_column_actionContext _localctx = new Ext_table_column_actionContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_ext_table_column_action);
		int _la;
		try {
			setState(5367);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(5345);
				match(ADD);
				setState(5347);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(5346);
					match(COLUMN);
					}
				}

				setState(5349);
				column_name();
				setState(5350);
				data_type();
				setState(5351);
				match(AS);
				setState(5352);
				match(LR_BRACKET);
				setState(5353);
				expr(0);
				setState(5354);
				match(RR_BRACKET);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(5356);
				match(RENAME);
				setState(5357);
				match(COLUMN);
				setState(5358);
				column_name();
				setState(5359);
				match(TO);
				setState(5360);
				column_name();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 3);
				{
				setState(5362);
				match(DROP);
				setState(5364);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(5363);
					match(COLUMN);
					}
				}

				setState(5366);
				column_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Constraint_actionContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SnowflakeParser.ADD, 0); }
		public Out_of_line_constraintContext out_of_line_constraint() {
			return getRuleContext(Out_of_line_constraintContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SnowflakeParser.CONSTRAINT, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public Alter_modifyContext alter_modify() {
			return getRuleContext(Alter_modifyContext.class,0);
		}
		public Column_list_in_parenthesesContext column_list_in_parentheses() {
			return getRuleContext(Column_list_in_parenthesesContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(SnowflakeParser.VALIDATE, 0); }
		public TerminalNode NOVALIDATE() { return getToken(SnowflakeParser.NOVALIDATE, 0); }
		public TerminalNode RELY() { return getToken(SnowflakeParser.RELY, 0); }
		public TerminalNode NORELY() { return getToken(SnowflakeParser.NORELY, 0); }
		public Primary_keyContext primary_key() {
			return getRuleContext(Primary_keyContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(SnowflakeParser.UNIQUE, 0); }
		public Foreign_keyContext foreign_key() {
			return getRuleContext(Foreign_keyContext.class,0);
		}
		public Enforced_not_enforcedContext enforced_not_enforced() {
			return getRuleContext(Enforced_not_enforcedContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(SnowflakeParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(SnowflakeParser.KEY, 0); }
		public Constraint_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterConstraint_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitConstraint_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitConstraint_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_actionContext constraint_action() throws RecognitionException {
		Constraint_actionContext _localctx = new Constraint_actionContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_constraint_action);
		int _la;
		try {
			setState(5409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5369);
				match(ADD);
				setState(5370);
				out_of_line_constraint();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5371);
				match(RENAME);
				setState(5372);
				match(CONSTRAINT);
				setState(5373);
				id_();
				setState(5374);
				match(TO);
				setState(5375);
				id_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5377);
				alter_modify();
				setState(5383);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONSTRAINT:
					{
					setState(5378);
					match(CONSTRAINT);
					setState(5379);
					id_();
					}
					break;
				case PRIMARY:
					{
					setState(5380);
					primary_key();
					}
					break;
				case UNIQUE:
					{
					setState(5381);
					match(UNIQUE);
					}
					break;
				case FOREIGN:
					{
					setState(5382);
					foreign_key();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5385);
				column_list_in_parentheses();
				setState(5387);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENFORCED || _la==NOT) {
					{
					setState(5386);
					enforced_not_enforced();
					}
				}

				setState(5389);
				_la = _input.LA(1);
				if ( !(_la==NOVALIDATE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5390);
				_la = _input.LA(1);
				if ( !(_la==NORELY || _la==RELY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5392);
				match(DROP);
				setState(5398);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONSTRAINT:
					{
					setState(5393);
					match(CONSTRAINT);
					setState(5394);
					id_();
					}
					break;
				case PRIMARY:
					{
					setState(5395);
					primary_key();
					}
					break;
				case UNIQUE:
					{
					setState(5396);
					match(UNIQUE);
					}
					break;
				case FOREIGN:
					{
					setState(5397);
					foreign_key();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5401);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5400);
					column_list_in_parentheses();
					}
				}

				setState(5404);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(5403);
					cascade_restrict();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5406);
				match(DROP);
				setState(5407);
				match(PRIMARY);
				setState(5408);
				match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Search_optimization_actionContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SnowflakeParser.ADD, 0); }
		public TerminalNode SEARCH() { return getToken(SnowflakeParser.SEARCH, 0); }
		public TerminalNode OPTIMIZATION() { return getToken(SnowflakeParser.OPTIMIZATION, 0); }
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public List<Search_method_with_targetContext> search_method_with_target() {
			return getRuleContexts(Search_method_with_targetContext.class);
		}
		public Search_method_with_targetContext search_method_with_target(int i) {
			return getRuleContext(Search_method_with_targetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public Search_optimization_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_optimization_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSearch_optimization_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSearch_optimization_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSearch_optimization_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_optimization_actionContext search_optimization_action() throws RecognitionException {
		Search_optimization_actionContext _localctx = new Search_optimization_actionContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_search_optimization_action);
		int _la;
		try {
			setState(5439);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(5411);
				match(ADD);
				setState(5412);
				match(SEARCH);
				setState(5413);
				match(OPTIMIZATION);
				setState(5423);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(5414);
					match(ON);
					setState(5415);
					search_method_with_target();
					setState(5420);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5416);
						match(COMMA);
						setState(5417);
						search_method_with_target();
						}
						}
						setState(5422);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5425);
				match(DROP);
				setState(5426);
				match(SEARCH);
				setState(5427);
				match(OPTIMIZATION);
				setState(5437);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(5428);
					match(ON);
					setState(5429);
					search_method_with_target();
					setState(5434);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5430);
						match(COMMA);
						setState(5431);
						search_method_with_target();
						}
						}
						setState(5436);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Search_method_with_targetContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode EQUALITY() { return getToken(SnowflakeParser.EQUALITY, 0); }
		public TerminalNode SUBSTRING() { return getToken(SnowflakeParser.SUBSTRING, 0); }
		public TerminalNode GEO() { return getToken(SnowflakeParser.GEO, 0); }
		public TerminalNode STAR() { return getToken(SnowflakeParser.STAR, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Search_method_with_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_method_with_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSearch_method_with_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSearch_method_with_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSearch_method_with_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_method_with_targetContext search_method_with_target() throws RecognitionException {
		Search_method_with_targetContext _localctx = new Search_method_with_targetContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_search_method_with_target);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5441);
			_la = _input.LA(1);
			if ( !(_la==EQUALITY || _la==GEO || _la==SUBSTRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5442);
			match(LR_BRACKET);
			setState(5445);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STAR:
				{
				setState(5443);
				match(STAR);
				}
				break;
			case ACCOUNT:
			case ACCOUNTADMIN:
			case ACTION:
			case AES:
			case ALERT:
			case ALERTS:
			case ALLOW_OVERLAPPING_EXECUTION:
			case ANY_VALUE:
			case ARRAY_AGG:
			case AT_KEYWORD:
			case AUTO_Q:
			case AVG:
			case AZURE_Q:
			case BOTH_Q:
			case CASE:
			case CAST:
			case CEIL:
			case CHAR:
			case CHARACTER:
			case CHARINDEX:
			case CHECKSUM:
			case CLUSTER:
			case COALESCE:
			case COLLATE:
			case COLLECTION:
			case COMMENT:
			case CONCAT:
			case CONCAT_WS:
			case CONDITION:
			case CONFIGURATION:
			case CONTAINS:
			case COPY_OPTIONS_:
			case COUNT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASES:
			case DATEADD:
			case DATEDIFF:
			case DATE_PART:
			case DAYS:
			case DEFAULT:
			case DEFINITION:
			case DELTA:
			case DENSE_RANK:
			case DIRECTION:
			case DISPLAY_NAME:
			case DOWNSTREAM:
			case DYNAMIC:
			case EDITION:
			case EMAIL:
			case EMPTY_:
			case ENABLED:
			case EQUAL_NULL:
			case ERROR_INTEGRATION:
			case EVENT:
			case EXCHANGE:
			case EXPIRY_DATE:
			case EXPR:
			case FALSE:
			case FILE:
			case FILES:
			case FIRST_NAME:
			case FIRST_VALUE:
			case FLATTEN:
			case FREQUENCY:
			case FUNCTION:
			case GET:
			case GETDATE:
			case GLOBAL:
			case HASH:
			case HIGH:
			case HOURS:
			case IDENTIFIER:
			case IDENTITY:
			case IF:
			case IFF:
			case IFNULL:
			case ILIKE:
			case IMPORTED:
			case INCREMENTAL:
			case INDEX:
			case INITIALIZE:
			case INPUT:
			case INT:
			case INTEGRATIONS:
			case INTERVAL:
			case JAVASCRIPT:
			case JOIN:
			case KEY:
			case LAG:
			case LANGUAGE:
			case LAST_NAME:
			case LAST_QUERY_ID:
			case LAST_VALUE:
			case LEAD:
			case LEFT:
			case LEN:
			case LENGTH:
			case LIKE:
			case LOCAL:
			case LOW:
			case LOWER:
			case LTRIM:
			case MAX_CONCURRENCY_LEVEL:
			case MEDIUM:
			case MIN:
			case MODE:
			case NAME:
			case NETWORK:
			case NONE_Q:
			case NOORDER:
			case NOT:
			case NTILE:
			case NULLIF:
			case NULL_:
			case NUMBER:
			case NVL:
			case NVL2:
			case OBJECT:
			case OBJECT_Q:
			case OFFSET:
			case OLD:
			case ON_CREATE:
			case ON_ERROR:
			case ON_SCHEDULE:
			case OPTION:
			case ORDER:
			case ORGADMIN:
			case OUTBOUND:
			case OUTER:
			case OWNER:
			case PARTITION:
			case PASSWORD:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCKOUT_TIME_MINS:
			case PASSWORD_MAX_AGE_DAYS:
			case PASSWORD_MAX_LENGTH:
			case PASSWORD_MAX_RETRIES:
			case PASSWORD_MIN_AGE_DAYS:
			case PASSWORD_MIN_LENGTH:
			case PASSWORD_MIN_LOWER_CASE_CHARS:
			case PASSWORD_MIN_NUMERIC_CHARS:
			case PASSWORD_MIN_SPECIAL_CHARS:
			case PASSWORD_MIN_UPPER_CASE_CHARS:
			case PATH_:
			case PATTERN:
			case POLICIES:
			case POLICY:
			case PORT:
			case PRIORITY:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PUBLIC:
			case QUARTER:
			case QUERY:
			case QUERY_TAG:
			case RANK:
			case RECURSIVE:
			case REFERENCES:
			case REFRESH_MODE:
			case REGION:
			case REPLACE:
			case RESOURCE:
			case RESOURCES:
			case RESPECT:
			case RESTRICT:
			case RESULT:
			case RIGHT:
			case ROLE:
			case ROLES:
			case ROLLUP:
			case ROUND:
			case ROUNDING_MODE:
			case ROW_NUMBER:
			case RTRIM:
			case SCALE:
			case SCHEDULE:
			case SCHEMAS:
			case SECURITYADMIN:
			case SELECT:
			case SEQUENCE:
			case SESSION:
			case SOURCE:
			case SPLIT:
			case SPLIT_PART:
			case SPLIT_TO_TABLE:
			case STAGE:
			case STAGES:
			case START_DATE:
			case STATE:
			case STATS:
			case STATUS:
			case STREAMS:
			case SUBSTR:
			case SUBSTRING:
			case SUM:
			case SYSADMIN:
			case TABLES:
			case TAG:
			case TAGS:
			case TARGET_LAG:
			case TASKS:
			case TEMP:
			case TIME:
			case TIMEADD:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMP_LTZ:
			case TIMESTAMP_NTZ:
			case TIMESTAMP_TZ:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMEZONE:
			case TO_BOOLEAN:
			case TO_DATE:
			case TO_TIMESTAMP:
			case TRIM:
			case TRUE:
			case TRUNC:
			case TRUNCATE:
			case TRY_CAST:
			case TYPE:
			case UPPER:
			case URL:
			case USER:
			case USERADMIN:
			case USERS:
			case VALUE:
			case VALUES:
			case VERSION:
			case VIEWS:
			case VISIBILITY:
			case WAREHOUSE:
			case WAREHOUSES:
			case WAREHOUSE_TYPE:
			case WITH:
			case YEAR:
			case ARRAY:
			case ARRAY_Q:
			case BIGINT:
			case BINARY:
			case BOOLEAN:
			case BYTEINT:
			case CHAR_VARYING:
			case DATE:
			case DATETIME:
			case DECIMAL_:
			case DOUBLE:
			case DOUBLE_PRECISION:
			case FLOAT4:
			case FLOAT8:
			case FLOAT_:
			case FLOOR:
			case GEOGRAPHY:
			case GEOMETRY:
			case INTEGER:
			case NCHAR:
			case NCHAR_VARYING:
			case NUMERIC:
			case NVARCHAR2:
			case NVARCHAR:
			case REAL_:
			case SMALLINT:
			case STRING_:
			case TEXT:
			case TINYINT:
			case VARBINARY:
			case VARCHAR:
			case VARIANT:
			case LISTAGG:
			case DOUBLE_QUOTE_ID:
			case DOUBLE_QUOTE_BLANK:
			case ID:
			case ID2:
			case STRING:
			case DECIMAL:
			case FLOAT:
			case REAL:
			case DOT:
			case AT_Q:
			case DOLLAR:
			case LR_BRACKET:
			case LSB:
			case LCB:
			case PLUS:
			case MINUS:
				{
				setState(5444);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5447);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_table_alter_columnContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Alter_modifyContext alter_modify() {
			return getRuleContext(Alter_modifyContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Alter_column_decl_listContext alter_column_decl_list() {
			return getRuleContext(Alter_column_decl_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode COLUMN() { return getToken(SnowflakeParser.COLUMN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode MASKING() { return getToken(SnowflakeParser.MASKING, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode USING() { return getToken(SnowflakeParser.USING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(SnowflakeParser.FORCE, 0); }
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public List<Column_set_tagsContext> column_set_tags() {
			return getRuleContexts(Column_set_tagsContext.class);
		}
		public Column_set_tagsContext column_set_tags(int i) {
			return getRuleContext(Column_set_tagsContext.class,i);
		}
		public List<Column_unset_tagsContext> column_unset_tags() {
			return getRuleContexts(Column_unset_tagsContext.class);
		}
		public Column_unset_tagsContext column_unset_tags(int i) {
			return getRuleContext(Column_unset_tagsContext.class,i);
		}
		public Alter_table_alter_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_alter_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_table_alter_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_table_alter_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_table_alter_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_table_alter_columnContext alter_table_alter_column() throws RecognitionException {
		Alter_table_alter_columnContext _localctx = new Alter_table_alter_columnContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_alter_table_alter_column);
		int _la;
		try {
			setState(5516);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5449);
				match(ALTER);
				setState(5450);
				match(TABLE);
				setState(5451);
				object_name();
				setState(5452);
				alter_modify();
				setState(5458);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(5453);
					match(LR_BRACKET);
					setState(5454);
					alter_column_decl_list();
					setState(5455);
					match(RR_BRACKET);
					}
					break;
				case ACCOUNT:
				case ACCOUNTADMIN:
				case ACTION:
				case AES:
				case ALERT:
				case ALERTS:
				case ALLOW_OVERLAPPING_EXECUTION:
				case ANY_VALUE:
				case ARRAY_AGG:
				case AT_KEYWORD:
				case AVG:
				case CAST:
				case CEIL:
				case CHAR:
				case CHARACTER:
				case CHARINDEX:
				case CHECKSUM:
				case CLUSTER:
				case COLLATE:
				case COLLECTION:
				case COLUMN:
				case COMMENT:
				case CONDITION:
				case CONFIGURATION:
				case CONTAINS:
				case COPY_OPTIONS_:
				case COUNT:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case DATA:
				case DATABASES:
				case DATEADD:
				case DATEDIFF:
				case DATE_PART:
				case DAYS:
				case DEFINITION:
				case DELTA:
				case DIRECTION:
				case DISPLAY_NAME:
				case DOWNSTREAM:
				case DYNAMIC:
				case EDITION:
				case EMAIL:
				case EMPTY_:
				case ENABLED:
				case EQUAL_NULL:
				case ERROR_INTEGRATION:
				case EVENT:
				case EXCHANGE:
				case EXPIRY_DATE:
				case EXPR:
				case FILE:
				case FILES:
				case FIRST_NAME:
				case FIRST_VALUE:
				case FLATTEN:
				case FREQUENCY:
				case FUNCTION:
				case GET:
				case GETDATE:
				case GLOBAL:
				case HIGH:
				case HOURS:
				case IDENTIFIER:
				case IDENTITY:
				case IF:
				case IFF:
				case IFNULL:
				case ILIKE:
				case IMPORTED:
				case INCREMENTAL:
				case INDEX:
				case INITIALIZE:
				case INPUT:
				case INT:
				case INTEGRATIONS:
				case INTERVAL:
				case JAVASCRIPT:
				case JOIN:
				case KEY:
				case LAG:
				case LANGUAGE:
				case LAST_NAME:
				case LAST_QUERY_ID:
				case LEAD:
				case LEFT:
				case LENGTH:
				case LIKE:
				case LOCAL:
				case LOW:
				case LOWER:
				case MAX_CONCURRENCY_LEVEL:
				case MEDIUM:
				case MIN:
				case MODE:
				case NAME:
				case NETWORK:
				case NOORDER:
				case NULLIF:
				case NUMBER:
				case NVL:
				case NVL2:
				case OBJECT:
				case OFFSET:
				case OLD:
				case ON_CREATE:
				case ON_ERROR:
				case ON_SCHEDULE:
				case OPTION:
				case ORDER:
				case ORGADMIN:
				case OUTBOUND:
				case OUTER:
				case OWNER:
				case PARTITION:
				case PASSWORD:
				case PASSWORD_HISTORY:
				case PASSWORD_LOCKOUT_TIME_MINS:
				case PASSWORD_MAX_AGE_DAYS:
				case PASSWORD_MAX_LENGTH:
				case PASSWORD_MAX_RETRIES:
				case PASSWORD_MIN_AGE_DAYS:
				case PASSWORD_MIN_LENGTH:
				case PASSWORD_MIN_LOWER_CASE_CHARS:
				case PASSWORD_MIN_NUMERIC_CHARS:
				case PASSWORD_MIN_SPECIAL_CHARS:
				case PASSWORD_MIN_UPPER_CASE_CHARS:
				case PATH_:
				case PATTERN:
				case POLICIES:
				case POLICY:
				case PORT:
				case PRIORITY:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PUBLIC:
				case QUARTER:
				case QUERY:
				case QUERY_TAG:
				case RANK:
				case RECURSIVE:
				case REFERENCES:
				case REFRESH_MODE:
				case REGION:
				case REPLACE:
				case RESOURCE:
				case RESOURCES:
				case RESPECT:
				case RESTRICT:
				case RESULT:
				case RIGHT:
				case ROLE:
				case ROLES:
				case ROLLUP:
				case ROUND:
				case ROUNDING_MODE:
				case ROW_NUMBER:
				case SCALE:
				case SCHEDULE:
				case SCHEMAS:
				case SECURITYADMIN:
				case SEQUENCE:
				case SESSION:
				case SOURCE:
				case SPLIT:
				case SPLIT_PART:
				case SPLIT_TO_TABLE:
				case STAGE:
				case STAGES:
				case START_DATE:
				case STATE:
				case STATS:
				case STATUS:
				case STREAMS:
				case SUBSTR:
				case SUBSTRING:
				case SUM:
				case SYSADMIN:
				case TABLES:
				case TAG:
				case TAGS:
				case TARGET_LAG:
				case TASKS:
				case TEMP:
				case TIME:
				case TIMEADD:
				case TIMEDIFF:
				case TIMESTAMP:
				case TIMESTAMP_LTZ:
				case TIMESTAMP_NTZ:
				case TIMESTAMP_TZ:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIMEZONE:
				case TO_BOOLEAN:
				case TO_DATE:
				case TO_TIMESTAMP:
				case TRUNC:
				case TRUNCATE:
				case TRY_CAST:
				case TYPE:
				case UPPER:
				case URL:
				case USER:
				case USERADMIN:
				case USERS:
				case VALUE:
				case VALUES:
				case VERSION:
				case VIEWS:
				case VISIBILITY:
				case WAREHOUSE:
				case WAREHOUSES:
				case WAREHOUSE_TYPE:
				case YEAR:
				case ARRAY:
				case BIGINT:
				case BINARY:
				case BOOLEAN:
				case BYTEINT:
				case CHAR_VARYING:
				case DATE:
				case DATETIME:
				case DECIMAL_:
				case DOUBLE:
				case DOUBLE_PRECISION:
				case FLOAT4:
				case FLOAT8:
				case FLOAT_:
				case FLOOR:
				case GEOGRAPHY:
				case GEOMETRY:
				case INTEGER:
				case NCHAR:
				case NCHAR_VARYING:
				case NUMERIC:
				case NVARCHAR2:
				case NVARCHAR:
				case REAL_:
				case SMALLINT:
				case STRING_:
				case TEXT:
				case TINYINT:
				case VARBINARY:
				case VARCHAR:
				case VARIANT:
				case DOUBLE_QUOTE_ID:
				case DOUBLE_QUOTE_BLANK:
				case ID:
				case ID2:
					{
					setState(5457);
					alter_column_decl_list();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5460);
				match(ALTER);
				setState(5461);
				match(TABLE);
				setState(5462);
				object_name();
				setState(5463);
				alter_modify();
				setState(5464);
				match(COLUMN);
				setState(5465);
				column_name();
				setState(5466);
				match(SET);
				setState(5467);
				match(MASKING);
				setState(5468);
				match(POLICY);
				setState(5469);
				id_();
				setState(5477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5470);
					match(USING);
					setState(5471);
					match(LR_BRACKET);
					setState(5472);
					column_name();
					setState(5473);
					match(COMMA);
					setState(5474);
					column_list();
					setState(5475);
					match(RR_BRACKET);
					}
				}

				setState(5480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(5479);
					match(FORCE);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5482);
				match(ALTER);
				setState(5483);
				match(TABLE);
				setState(5484);
				object_name();
				setState(5485);
				alter_modify();
				setState(5486);
				match(COLUMN);
				setState(5487);
				column_name();
				setState(5488);
				match(UNSET);
				setState(5489);
				match(MASKING);
				setState(5490);
				match(POLICY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5492);
				match(ALTER);
				setState(5493);
				match(TABLE);
				setState(5494);
				object_name();
				setState(5495);
				alter_modify();
				setState(5496);
				column_set_tags();
				setState(5501);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5497);
					match(COMMA);
					setState(5498);
					column_set_tags();
					}
					}
					setState(5503);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5504);
				match(ALTER);
				setState(5505);
				match(TABLE);
				setState(5506);
				object_name();
				setState(5507);
				alter_modify();
				setState(5508);
				column_unset_tags();
				setState(5513);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5509);
					match(COMMA);
					setState(5510);
					column_unset_tags();
					}
					}
					setState(5515);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_column_decl_listContext extends ParserRuleContext {
		public List<Alter_column_declContext> alter_column_decl() {
			return getRuleContexts(Alter_column_declContext.class);
		}
		public Alter_column_declContext alter_column_decl(int i) {
			return getRuleContext(Alter_column_declContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Alter_column_decl_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_decl_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_column_decl_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_column_decl_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_column_decl_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_decl_listContext alter_column_decl_list() throws RecognitionException {
		Alter_column_decl_listContext _localctx = new Alter_column_decl_listContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_alter_column_decl_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5518);
			alter_column_decl();
			setState(5523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5519);
				match(COMMA);
				setState(5520);
				alter_column_decl();
				}
				}
				setState(5525);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_column_declContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Alter_column_optsContext alter_column_opts() {
			return getRuleContext(Alter_column_optsContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(SnowflakeParser.COLUMN, 0); }
		public Alter_column_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_column_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_column_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_column_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_declContext alter_column_decl() throws RecognitionException {
		Alter_column_declContext _localctx = new Alter_column_declContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_alter_column_decl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5527);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(5526);
				match(COLUMN);
				}
			}

			setState(5529);
			column_name();
			setState(5530);
			alter_column_opts();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_column_optsContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode DEFAULT() { return getToken(SnowflakeParser.DEFAULT, 0); }
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(SnowflakeParser.DOT, 0); }
		public TerminalNode NEXTVAL() { return getToken(SnowflakeParser.NEXTVAL, 0); }
		public TerminalNode NOT() { return getToken(SnowflakeParser.NOT, 0); }
		public TerminalNode NULL_() { return getToken(SnowflakeParser.NULL_, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public TerminalNode DATA() { return getToken(SnowflakeParser.DATA, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Alter_column_optsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_opts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_column_opts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_column_opts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_column_opts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_optsContext alter_column_opts() throws RecognitionException {
		Alter_column_optsContext _localctx = new Alter_column_optsContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_alter_column_opts);
		int _la;
		try {
			setState(5561);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5532);
				match(DROP);
				setState(5533);
				match(DEFAULT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5534);
				match(SET);
				setState(5535);
				match(DEFAULT);
				setState(5536);
				object_name();
				setState(5537);
				match(DOT);
				setState(5538);
				match(NEXTVAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5548);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOT:
				case SET:
					{
					setState(5541);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SET) {
						{
						setState(5540);
						match(SET);
						}
					}

					setState(5543);
					match(NOT);
					setState(5544);
					match(NULL_);
					}
					break;
				case DROP:
					{
					setState(5545);
					match(DROP);
					setState(5546);
					match(NOT);
					setState(5547);
					match(NULL_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET || _la==TYPE) {
					{
					setState(5552);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SET) {
						{
						setState(5550);
						match(SET);
						setState(5551);
						match(DATA);
						}
					}

					setState(5554);
					match(TYPE);
					}
				}

				setState(5557);
				data_type();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5558);
				comment_clause();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5559);
				match(UNSET);
				setState(5560);
				match(COMMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_set_tagsContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(SnowflakeParser.COLUMN, 0); }
		public Column_set_tagsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_set_tags; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterColumn_set_tags(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitColumn_set_tags(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitColumn_set_tags(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_set_tagsContext column_set_tags() throws RecognitionException {
		Column_set_tagsContext _localctx = new Column_set_tagsContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_column_set_tags);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5564);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(5563);
				match(COLUMN);
				}
			}

			setState(5566);
			column_name();
			setState(5567);
			set_tags();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_unset_tagsContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(SnowflakeParser.COLUMN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public Column_unset_tagsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_unset_tags; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterColumn_unset_tags(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitColumn_unset_tags(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitColumn_unset_tags(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_unset_tagsContext column_unset_tags() throws RecognitionException {
		Column_unset_tagsContext _localctx = new Column_unset_tagsContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_column_unset_tags);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5569);
			match(COLUMN);
			setState(5570);
			column_name();
			setState(5571);
			unset_tags();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_tagContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode TAG() { return getToken(SnowflakeParser.TAG, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Alter_tag_optsContext alter_tag_opts() {
			return getRuleContext(Alter_tag_optsContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Alter_tagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tag; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_tag(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_tag(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_tag(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tagContext alter_tag() throws RecognitionException {
		Alter_tagContext _localctx = new Alter_tagContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_alter_tag);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5573);
			match(ALTER);
			setState(5574);
			match(TAG);
			setState(5576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				{
				setState(5575);
				if_exists();
				}
				break;
			}
			setState(5578);
			object_name();
			setState(5579);
			alter_tag_opts();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_taskContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode TASK() { return getToken(SnowflakeParser.TASK, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Resume_suspendContext resume_suspend() {
			return getRuleContext(Resume_suspendContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode AFTER() { return getToken(SnowflakeParser.AFTER, 0); }
		public String_listContext string_list() {
			return getRuleContext(String_listContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(SnowflakeParser.REMOVE, 0); }
		public TerminalNode ADD() { return getToken(SnowflakeParser.ADD, 0); }
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Task_scheduleContext task_schedule() {
			return getRuleContext(Task_scheduleContext.class,0);
		}
		public Task_overlapContext task_overlap() {
			return getRuleContext(Task_overlapContext.class,0);
		}
		public Task_timeoutContext task_timeout() {
			return getRuleContext(Task_timeoutContext.class,0);
		}
		public Task_suspend_after_failure_numberContext task_suspend_after_failure_number() {
			return getRuleContext(Task_suspend_after_failure_numberContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Session_params_listContext session_params_list() {
			return getRuleContext(Session_params_listContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode SCHEDULE() { return getToken(SnowflakeParser.SCHEDULE, 0); }
		public TerminalNode ALLOW_OVERLAPPING_EXECUTION() { return getToken(SnowflakeParser.ALLOW_OVERLAPPING_EXECUTION, 0); }
		public TerminalNode USER_TASK_TIMEOUT_MS() { return getToken(SnowflakeParser.USER_TASK_TIMEOUT_MS, 0); }
		public TerminalNode SUSPEND_TASK_AFTER_NUM_FAILURES() { return getToken(SnowflakeParser.SUSPEND_TASK_AFTER_NUM_FAILURES, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Session_parameter_listContext session_parameter_list() {
			return getRuleContext(Session_parameter_listContext.class,0);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public TerminalNode MODIFY() { return getToken(SnowflakeParser.MODIFY, 0); }
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public SqlContext sql() {
			return getRuleContext(SqlContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(SnowflakeParser.WHEN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Alter_taskContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_task; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_task(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_task(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_task(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_taskContext alter_task() throws RecognitionException {
		Alter_taskContext _localctx = new Alter_taskContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_alter_task);
		int _la;
		try {
			setState(5693);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5581);
				match(ALTER);
				setState(5582);
				match(TASK);
				setState(5584);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
				case 1:
					{
					setState(5583);
					if_exists();
					}
					break;
				}
				setState(5586);
				object_name();
				setState(5587);
				resume_suspend();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5589);
				match(ALTER);
				setState(5590);
				match(TASK);
				setState(5592);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
				case 1:
					{
					setState(5591);
					if_exists();
					}
					break;
				}
				setState(5594);
				object_name();
				setState(5595);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==REMOVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5596);
				match(AFTER);
				setState(5597);
				string_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5599);
				match(ALTER);
				setState(5600);
				match(TASK);
				setState(5602);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
				case 1:
					{
					setState(5601);
					if_exists();
					}
					break;
				}
				setState(5604);
				object_name();
				setState(5605);
				match(SET);
				setState(5609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WAREHOUSE) {
					{
					setState(5606);
					match(WAREHOUSE);
					setState(5607);
					match(EQ);
					setState(5608);
					id_();
					}
				}

				setState(5612);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SCHEDULE) {
					{
					setState(5611);
					task_schedule();
					}
				}

				setState(5615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALLOW_OVERLAPPING_EXECUTION) {
					{
					setState(5614);
					task_overlap();
					}
				}

				setState(5618);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USER_TASK_TIMEOUT_MS) {
					{
					setState(5617);
					task_timeout();
					}
				}

				setState(5621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SUSPEND_TASK_AFTER_NUM_FAILURES) {
					{
					setState(5620);
					task_suspend_after_failure_number();
					}
				}

				setState(5624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(5623);
					comment_clause();
					}
				}

				setState(5627);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ABORT_DETACHED_QUERY || _la==AUTOCOMMIT || _la==BINARY_INPUT_FORMAT || _la==BINARY_OUTPUT_FORMAT || ((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & 864691128455135235L) != 0) || _la==JSON_INDENT || _la==LOCK_TIMEOUT || _la==QUERY_TAG || _la==ROWS_PER_RESULTSET || ((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & 140754668224513L) != 0) || ((((_la - 744)) & ~0x3f) == 0 && ((1L << (_la - 744)) & 72066424524350933L) != 0) || _la==WEEK_OF_YEAR_POLICY || _la==WEEK_START) {
					{
					setState(5626);
					session_params_list();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5629);
				match(ALTER);
				setState(5630);
				match(TASK);
				setState(5632);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
				case 1:
					{
					setState(5631);
					if_exists();
					}
					break;
				}
				setState(5634);
				object_name();
				setState(5635);
				match(UNSET);
				setState(5637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WAREHOUSE) {
					{
					setState(5636);
					match(WAREHOUSE);
					}
				}

				setState(5640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SCHEDULE) {
					{
					setState(5639);
					match(SCHEDULE);
					}
				}

				setState(5643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALLOW_OVERLAPPING_EXECUTION) {
					{
					setState(5642);
					match(ALLOW_OVERLAPPING_EXECUTION);
					}
				}

				setState(5646);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
				case 1:
					{
					setState(5645);
					match(USER_TASK_TIMEOUT_MS);
					}
					break;
				}
				setState(5649);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
				case 1:
					{
					setState(5648);
					match(SUSPEND_TASK_AFTER_NUM_FAILURES);
					}
					break;
				}
				setState(5652);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(5651);
					match(COMMENT);
					}
				}

				setState(5655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6755399524941832L) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 549487378435L) != 0) || ((((_la - 167)) & ~0x3f) == 0 && ((1L << (_la - 167)) & -4538995105691859919L) != 0) || ((((_la - 245)) & ~0x3f) == 0 && ((1L << (_la - 245)) & 422212465065985L) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & 35184375349249L) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & 69214211L) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & 3458764535295383569L) != 0) || ((((_la - 609)) & ~0x3f) == 0 && ((1L << (_la - 609)) & 9570149212356609L) != 0) || ((((_la - 683)) & ~0x3f) == 0 && ((1L << (_la - 683)) & -6917528958854483967L) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & 6193001394084445L) != 0) || _la==WEEK_OF_YEAR_POLICY || _la==WEEK_START) {
					{
					setState(5654);
					session_parameter_list();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5657);
				match(ALTER);
				setState(5658);
				match(TASK);
				setState(5660);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
				case 1:
					{
					setState(5659);
					if_exists();
					}
					break;
				}
				setState(5662);
				object_name();
				setState(5663);
				set_tags();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5665);
				match(ALTER);
				setState(5666);
				match(TASK);
				setState(5668);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
				case 1:
					{
					setState(5667);
					if_exists();
					}
					break;
				}
				setState(5670);
				object_name();
				setState(5671);
				unset_tags();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5673);
				match(ALTER);
				setState(5674);
				match(TASK);
				setState(5676);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
				case 1:
					{
					setState(5675);
					if_exists();
					}
					break;
				}
				setState(5678);
				object_name();
				setState(5679);
				match(MODIFY);
				setState(5680);
				match(AS);
				setState(5681);
				sql();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5683);
				match(ALTER);
				setState(5684);
				match(TASK);
				setState(5686);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
				case 1:
					{
					setState(5685);
					if_exists();
					}
					break;
				}
				setState(5688);
				object_name();
				setState(5689);
				match(MODIFY);
				setState(5690);
				match(WHEN);
				setState(5691);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_userContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(SnowflakeParser.USER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Alter_user_optsContext alter_user_opts() {
			return getRuleContext(Alter_user_optsContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_user(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_user(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_userContext alter_user() throws RecognitionException {
		Alter_userContext _localctx = new Alter_userContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_alter_user);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5695);
			match(ALTER);
			setState(5696);
			match(USER);
			setState(5698);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,616,_ctx) ) {
			case 1:
				{
				setState(5697);
				if_exists();
				}
				break;
			}
			setState(5700);
			id_();
			setState(5701);
			alter_user_opts();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_viewContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(SnowflakeParser.VIEW, 0); }
		public List<Object_nameContext> object_name() {
			return getRuleContexts(Object_nameContext.class);
		}
		public Object_nameContext object_name(int i) {
			return getRuleContext(Object_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public TerminalNode SECURE() { return getToken(SnowflakeParser.SECURE, 0); }
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SnowflakeParser.ADD, 0); }
		public List<TerminalNode> ROW() { return getTokens(SnowflakeParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(SnowflakeParser.ROW, i);
		}
		public List<TerminalNode> ACCESS() { return getTokens(SnowflakeParser.ACCESS); }
		public TerminalNode ACCESS(int i) {
			return getToken(SnowflakeParser.ACCESS, i);
		}
		public List<TerminalNode> POLICY() { return getTokens(SnowflakeParser.POLICY); }
		public TerminalNode POLICY(int i) {
			return getToken(SnowflakeParser.POLICY, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public Column_list_in_parenthesesContext column_list_in_parentheses() {
			return getRuleContext(Column_list_in_parenthesesContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode COMMA() { return getToken(SnowflakeParser.COMMA, 0); }
		public TerminalNode ALL() { return getToken(SnowflakeParser.ALL, 0); }
		public TerminalNode POLICIES() { return getToken(SnowflakeParser.POLICIES, 0); }
		public Alter_modifyContext alter_modify() {
			return getRuleContext(Alter_modifyContext.class,0);
		}
		public TerminalNode MASKING() { return getToken(SnowflakeParser.MASKING, 0); }
		public TerminalNode COLUMN() { return getToken(SnowflakeParser.COLUMN, 0); }
		public TerminalNode USING() { return getToken(SnowflakeParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode FORCE() { return getToken(SnowflakeParser.FORCE, 0); }
		public Alter_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_viewContext alter_view() throws RecognitionException {
		Alter_viewContext _localctx = new Alter_viewContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_alter_view);
		int _la;
		try {
			setState(5871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5703);
				match(ALTER);
				setState(5704);
				match(VIEW);
				setState(5706);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,617,_ctx) ) {
				case 1:
					{
					setState(5705);
					if_exists();
					}
					break;
				}
				setState(5708);
				object_name();
				setState(5709);
				match(RENAME);
				setState(5710);
				match(TO);
				setState(5711);
				object_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5713);
				match(ALTER);
				setState(5714);
				match(VIEW);
				setState(5716);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
				case 1:
					{
					setState(5715);
					if_exists();
					}
					break;
				}
				setState(5718);
				object_name();
				setState(5719);
				match(SET);
				setState(5720);
				comment_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5722);
				match(ALTER);
				setState(5723);
				match(VIEW);
				setState(5725);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,619,_ctx) ) {
				case 1:
					{
					setState(5724);
					if_exists();
					}
					break;
				}
				setState(5727);
				object_name();
				setState(5728);
				match(UNSET);
				setState(5729);
				match(COMMENT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5731);
				match(ALTER);
				setState(5732);
				match(VIEW);
				setState(5733);
				object_name();
				setState(5734);
				match(SET);
				setState(5735);
				match(SECURE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5737);
				match(ALTER);
				setState(5738);
				match(VIEW);
				setState(5739);
				object_name();
				setState(5740);
				match(UNSET);
				setState(5741);
				match(SECURE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5743);
				match(ALTER);
				setState(5744);
				match(VIEW);
				setState(5746);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,620,_ctx) ) {
				case 1:
					{
					setState(5745);
					if_exists();
					}
					break;
				}
				setState(5748);
				object_name();
				setState(5749);
				set_tags();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5751);
				match(ALTER);
				setState(5752);
				match(VIEW);
				setState(5754);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
				case 1:
					{
					setState(5753);
					if_exists();
					}
					break;
				}
				setState(5756);
				object_name();
				setState(5757);
				unset_tags();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5759);
				match(ALTER);
				setState(5760);
				match(VIEW);
				setState(5762);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
				case 1:
					{
					setState(5761);
					if_exists();
					}
					break;
				}
				setState(5764);
				object_name();
				setState(5765);
				match(ADD);
				setState(5766);
				match(ROW);
				setState(5767);
				match(ACCESS);
				setState(5768);
				match(POLICY);
				setState(5769);
				id_();
				setState(5770);
				match(ON);
				setState(5771);
				column_list_in_parentheses();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5773);
				match(ALTER);
				setState(5774);
				match(VIEW);
				setState(5776);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
				case 1:
					{
					setState(5775);
					if_exists();
					}
					break;
				}
				setState(5778);
				object_name();
				setState(5779);
				match(DROP);
				setState(5780);
				match(ROW);
				setState(5781);
				match(ACCESS);
				setState(5782);
				match(POLICY);
				setState(5783);
				id_();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5785);
				match(ALTER);
				setState(5786);
				match(VIEW);
				setState(5788);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,624,_ctx) ) {
				case 1:
					{
					setState(5787);
					if_exists();
					}
					break;
				}
				setState(5790);
				object_name();
				setState(5791);
				match(ADD);
				setState(5792);
				match(ROW);
				setState(5793);
				match(ACCESS);
				setState(5794);
				match(POLICY);
				setState(5795);
				id_();
				setState(5796);
				match(ON);
				setState(5797);
				column_list_in_parentheses();
				setState(5798);
				match(COMMA);
				setState(5799);
				match(DROP);
				setState(5800);
				match(ROW);
				setState(5801);
				match(ACCESS);
				setState(5802);
				match(POLICY);
				setState(5803);
				id_();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5805);
				match(ALTER);
				setState(5806);
				match(VIEW);
				setState(5808);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,625,_ctx) ) {
				case 1:
					{
					setState(5807);
					if_exists();
					}
					break;
				}
				setState(5810);
				object_name();
				setState(5811);
				match(DROP);
				setState(5812);
				match(ALL);
				setState(5813);
				match(ROW);
				setState(5814);
				match(ACCESS);
				setState(5815);
				match(POLICIES);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5817);
				match(ALTER);
				setState(5818);
				match(VIEW);
				setState(5819);
				object_name();
				setState(5820);
				alter_modify();
				setState(5822);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(5821);
					match(COLUMN);
					}
				}

				setState(5824);
				id_();
				setState(5825);
				match(SET);
				setState(5826);
				match(MASKING);
				setState(5827);
				match(POLICY);
				setState(5828);
				id_();
				setState(5836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(5829);
					match(USING);
					setState(5830);
					match(LR_BRACKET);
					setState(5831);
					column_name();
					setState(5832);
					match(COMMA);
					setState(5833);
					column_list();
					setState(5834);
					match(RR_BRACKET);
					}
				}

				setState(5839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(5838);
					match(FORCE);
					}
				}

				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5841);
				match(ALTER);
				setState(5842);
				match(VIEW);
				setState(5843);
				object_name();
				setState(5844);
				alter_modify();
				setState(5846);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(5845);
					match(COLUMN);
					}
				}

				setState(5848);
				id_();
				setState(5849);
				match(UNSET);
				setState(5850);
				match(MASKING);
				setState(5851);
				match(POLICY);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5853);
				match(ALTER);
				setState(5854);
				match(VIEW);
				setState(5855);
				object_name();
				setState(5856);
				alter_modify();
				setState(5858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(5857);
					match(COLUMN);
					}
				}

				setState(5860);
				id_();
				setState(5861);
				set_tags();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5863);
				match(ALTER);
				setState(5864);
				match(VIEW);
				setState(5865);
				object_name();
				setState(5866);
				alter_modify();
				setState(5867);
				match(COLUMN);
				setState(5868);
				id_();
				setState(5869);
				unset_tags();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_modifyContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode MODIFY() { return getToken(SnowflakeParser.MODIFY, 0); }
		public Alter_modifyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_modify; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_modify(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_modify(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_modify(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_modifyContext alter_modify() throws RecognitionException {
		Alter_modifyContext _localctx = new Alter_modifyContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_alter_modify);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5873);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_warehouseContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public Alter_warehouse_optsContext alter_warehouse_opts() {
			return getRuleContext(Alter_warehouse_optsContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Alter_warehouseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_warehouse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_warehouse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_warehouse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_warehouse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_warehouseContext alter_warehouse() throws RecognitionException {
		Alter_warehouseContext _localctx = new Alter_warehouseContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_alter_warehouse);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5875);
			match(ALTER);
			setState(5876);
			match(WAREHOUSE);
			setState(5878);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,632,_ctx) ) {
			case 1:
				{
				setState(5877);
				if_exists();
				}
				break;
			}
			setState(5880);
			alter_warehouse_opts();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_connection_optsContext extends ParserRuleContext {
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ENABLE() { return getToken(SnowflakeParser.ENABLE, 0); }
		public TerminalNode FAILOVER() { return getToken(SnowflakeParser.FAILOVER, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public TerminalNode ACCOUNTS() { return getToken(SnowflakeParser.ACCOUNTS, 0); }
		public List<TerminalNode> DOT() { return getTokens(SnowflakeParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SnowflakeParser.DOT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Ignore_edition_checkContext ignore_edition_check() {
			return getRuleContext(Ignore_edition_checkContext.class,0);
		}
		public TerminalNode DISABLE() { return getToken(SnowflakeParser.DISABLE, 0); }
		public TerminalNode PRIMARY() { return getToken(SnowflakeParser.PRIMARY, 0); }
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Alter_connection_optsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_connection_opts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_connection_opts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_connection_opts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_connection_opts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_connection_optsContext alter_connection_opts() throws RecognitionException {
		Alter_connection_optsContext _localctx = new Alter_connection_optsContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_alter_connection_opts);
		int _la;
		try {
			setState(5935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5882);
				id_();
				setState(5883);
				match(ENABLE);
				setState(5884);
				match(FAILOVER);
				setState(5885);
				match(TO);
				setState(5886);
				match(ACCOUNTS);
				setState(5887);
				id_();
				setState(5888);
				match(DOT);
				setState(5889);
				id_();
				setState(5897);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5890);
					match(COMMA);
					setState(5891);
					id_();
					setState(5892);
					match(DOT);
					setState(5893);
					id_();
					}
					}
					setState(5899);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(5900);
					ignore_edition_check();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5903);
				id_();
				setState(5904);
				match(DISABLE);
				setState(5905);
				match(FAILOVER);
				setState(5916);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(5906);
					match(TO);
					setState(5907);
					match(ACCOUNTS);
					setState(5908);
					id_();
					setState(5909);
					match(DOT);
					setState(5910);
					id_();
					{
					setState(5911);
					match(COMMA);
					setState(5912);
					id_();
					setState(5913);
					match(DOT);
					setState(5914);
					id_();
					}
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5918);
				id_();
				setState(5919);
				match(PRIMARY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5922);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
				case 1:
					{
					setState(5921);
					if_exists();
					}
					break;
				}
				setState(5924);
				id_();
				setState(5925);
				match(SET);
				setState(5926);
				comment_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5929);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
				case 1:
					{
					setState(5928);
					if_exists();
					}
					break;
				}
				setState(5931);
				id_();
				setState(5932);
				match(UNSET);
				setState(5933);
				match(COMMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_user_optsContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode RESET() { return getToken(SnowflakeParser.RESET, 0); }
		public TerminalNode PASSWORD() { return getToken(SnowflakeParser.PASSWORD, 0); }
		public TerminalNode ABORT() { return getToken(SnowflakeParser.ABORT, 0); }
		public TerminalNode ALL() { return getToken(SnowflakeParser.ALL, 0); }
		public TerminalNode QUERIES() { return getToken(SnowflakeParser.QUERIES, 0); }
		public TerminalNode ADD() { return getToken(SnowflakeParser.ADD, 0); }
		public TerminalNode DELEGATED() { return getToken(SnowflakeParser.DELEGATED, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(SnowflakeParser.AUTHORIZATION, 0); }
		public TerminalNode OF() { return getToken(SnowflakeParser.OF, 0); }
		public TerminalNode ROLE() { return getToken(SnowflakeParser.ROLE, 0); }
		public TerminalNode SECURITY() { return getToken(SnowflakeParser.SECURITY, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public TerminalNode REMOVE() { return getToken(SnowflakeParser.REMOVE, 0); }
		public TerminalNode FROM() { return getToken(SnowflakeParser.FROM, 0); }
		public TerminalNode AUTHORIZATIONS() { return getToken(SnowflakeParser.AUTHORIZATIONS, 0); }
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public Alter_user_optsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_opts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_user_opts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_user_opts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_user_opts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_user_optsContext alter_user_opts() throws RecognitionException {
		Alter_user_optsContext _localctx = new Alter_user_optsContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_alter_user_opts);
		try {
			setState(5971);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(5937);
				match(RENAME);
				setState(5938);
				match(TO);
				setState(5939);
				id_();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(5940);
				match(RESET);
				setState(5941);
				match(PASSWORD);
				}
				break;
			case ABORT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5942);
				match(ABORT);
				setState(5943);
				match(ALL);
				setState(5944);
				match(QUERIES);
				}
				break;
			case ADD:
				enterOuterAlt(_localctx, 4);
				{
				setState(5945);
				match(ADD);
				setState(5946);
				match(DELEGATED);
				setState(5947);
				match(AUTHORIZATION);
				setState(5948);
				match(OF);
				setState(5949);
				match(ROLE);
				setState(5950);
				id_();
				setState(5951);
				match(TO);
				setState(5952);
				match(SECURITY);
				setState(5953);
				match(INTEGRATION);
				setState(5954);
				id_();
				}
				break;
			case REMOVE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5956);
				match(REMOVE);
				setState(5957);
				match(DELEGATED);
				setState(5963);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTHORIZATION:
					{
					setState(5958);
					match(AUTHORIZATION);
					setState(5959);
					match(OF);
					setState(5960);
					match(ROLE);
					setState(5961);
					id_();
					}
					break;
				case AUTHORIZATIONS:
					{
					setState(5962);
					match(AUTHORIZATIONS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5965);
				match(FROM);
				setState(5966);
				match(SECURITY);
				setState(5967);
				match(INTEGRATION);
				setState(5968);
				id_();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 6);
				{
				setState(5969);
				set_tags();
				}
				break;
			case UNSET:
				enterOuterAlt(_localctx, 7);
				{
				setState(5970);
				unset_tags();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_tag_optsContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Tag_allowed_valuesContext tag_allowed_values() {
			return getRuleContext(Tag_allowed_valuesContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SnowflakeParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode ALLOWED_VALUES() { return getToken(SnowflakeParser.ALLOWED_VALUES, 0); }
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public List<TerminalNode> MASKING() { return getTokens(SnowflakeParser.MASKING); }
		public TerminalNode MASKING(int i) {
			return getToken(SnowflakeParser.MASKING, i);
		}
		public List<TerminalNode> POLICY() { return getTokens(SnowflakeParser.POLICY); }
		public TerminalNode POLICY(int i) {
			return getToken(SnowflakeParser.POLICY, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Alter_tag_optsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_tag_opts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_tag_opts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_tag_opts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_tag_opts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tag_optsContext alter_tag_opts() throws RecognitionException {
		Alter_tag_optsContext _localctx = new Alter_tag_optsContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_alter_tag_opts);
		int _la;
		try {
			setState(6010);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5973);
				match(RENAME);
				setState(5974);
				match(TO);
				setState(5975);
				object_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5976);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5977);
				tag_allowed_values();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5978);
				match(UNSET);
				setState(5979);
				match(ALLOWED_VALUES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5980);
				match(SET);
				setState(5981);
				match(MASKING);
				setState(5982);
				match(POLICY);
				setState(5983);
				id_();
				setState(5990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5984);
					match(COMMA);
					setState(5985);
					match(MASKING);
					setState(5986);
					match(POLICY);
					setState(5987);
					id_();
					}
					}
					setState(5992);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5993);
				match(UNSET);
				setState(5994);
				match(MASKING);
				setState(5995);
				match(POLICY);
				setState(5996);
				id_();
				setState(6003);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5997);
					match(COMMA);
					setState(5998);
					match(MASKING);
					setState(5999);
					match(POLICY);
					setState(6000);
					id_();
					}
					}
					setState(6005);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6006);
				match(SET);
				setState(6007);
				comment_clause();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6008);
				match(UNSET);
				setState(6009);
				match(COMMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_network_policy_optsContext extends ParserRuleContext {
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode ALLOWED_IP_LIST() { return getToken(SnowflakeParser.ALLOWED_IP_LIST, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<String_listContext> string_list() {
			return getRuleContexts(String_listContext.class);
		}
		public String_listContext string_list(int i) {
			return getRuleContext(String_listContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public TerminalNode BLOCKED_IP_LIST() { return getToken(SnowflakeParser.BLOCKED_IP_LIST, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public Alter_network_policy_optsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_network_policy_opts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_network_policy_opts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_network_policy_opts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_network_policy_opts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_network_policy_optsContext alter_network_policy_opts() throws RecognitionException {
		Alter_network_policy_optsContext _localctx = new Alter_network_policy_optsContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_alter_network_policy_opts);
		int _la;
		try {
			setState(6048);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6013);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
				case 1:
					{
					setState(6012);
					if_exists();
					}
					break;
				}
				setState(6015);
				id_();
				setState(6016);
				match(SET);
				setState(6023);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALLOWED_IP_LIST) {
					{
					setState(6017);
					match(ALLOWED_IP_LIST);
					setState(6018);
					match(EQ);
					setState(6019);
					match(LR_BRACKET);
					setState(6020);
					string_list();
					setState(6021);
					match(RR_BRACKET);
					}
				}

				setState(6031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BLOCKED_IP_LIST) {
					{
					setState(6025);
					match(BLOCKED_IP_LIST);
					setState(6026);
					match(EQ);
					setState(6027);
					match(LR_BRACKET);
					setState(6028);
					string_list();
					setState(6029);
					match(RR_BRACKET);
					}
				}

				setState(6034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(6033);
					comment_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6037);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
				case 1:
					{
					setState(6036);
					if_exists();
					}
					break;
				}
				setState(6039);
				id_();
				setState(6040);
				match(UNSET);
				setState(6041);
				match(COMMENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6043);
				id_();
				setState(6044);
				match(RENAME);
				setState(6045);
				match(TO);
				setState(6046);
				id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_warehouse_optsContext extends ParserRuleContext {
		public TerminalNode SUSPEND() { return getToken(SnowflakeParser.SUSPEND, 0); }
		public TerminalNode RESUME() { return getToken(SnowflakeParser.RESUME, 0); }
		public Id_fnContext id_fn() {
			return getRuleContext(Id_fnContext.class,0);
		}
		public If_suspendedContext if_suspended() {
			return getRuleContext(If_suspendedContext.class,0);
		}
		public TerminalNode ABORT() { return getToken(SnowflakeParser.ABORT, 0); }
		public TerminalNode ALL() { return getToken(SnowflakeParser.ALL, 0); }
		public TerminalNode QUERIES() { return getToken(SnowflakeParser.QUERIES, 0); }
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public List<Wh_propertiesContext> wh_properties() {
			return getRuleContexts(Wh_propertiesContext.class);
		}
		public Wh_propertiesContext wh_properties(int i) {
			return getRuleContext(Wh_propertiesContext.class,i);
		}
		public Alter_warehouse_optsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_warehouse_opts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_warehouse_opts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_warehouse_opts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_warehouse_opts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_warehouse_optsContext alter_warehouse_opts() throws RecognitionException {
		Alter_warehouse_optsContext _localctx = new Alter_warehouse_optsContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_alter_warehouse_opts);
		int _la;
		try {
			setState(6097);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6051);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(6050);
					id_fn();
					}
				}

				setState(6058);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SUSPEND:
					{
					setState(6053);
					match(SUSPEND);
					}
					break;
				case RESUME:
					{
					setState(6054);
					match(RESUME);
					setState(6056);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==IF) {
						{
						setState(6055);
						if_suspended();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(6060);
					id_fn();
					}
				}

				setState(6063);
				match(ABORT);
				setState(6064);
				match(ALL);
				setState(6065);
				match(QUERIES);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6066);
				id_fn();
				setState(6067);
				match(RENAME);
				setState(6068);
				match(TO);
				setState(6069);
				id_();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6071);
				id_fn();
				setState(6072);
				set_tags();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6074);
				id_fn();
				setState(6075);
				unset_tags();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6077);
				id_fn();
				setState(6078);
				match(UNSET);
				setState(6079);
				id_();
				setState(6084);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6080);
					match(COMMA);
					setState(6081);
					id_();
					}
					}
					setState(6086);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6087);
				id_();
				setState(6088);
				match(SET);
				setState(6089);
				wh_properties();
				setState(6094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6090);
					match(COMMA);
					setState(6091);
					wh_properties();
					}
					}
					setState(6096);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_account_optsContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public Account_paramsContext account_params() {
			return getRuleContext(Account_paramsContext.class,0);
		}
		public Object_paramsContext object_params() {
			return getRuleContext(Object_paramsContext.class,0);
		}
		public Session_paramsContext session_params() {
			return getRuleContext(Session_paramsContext.class,0);
		}
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public List<Param_nameContext> param_name() {
			return getRuleContexts(Param_nameContext.class);
		}
		public Param_nameContext param_name(int i) {
			return getRuleContext(Param_nameContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(SnowflakeParser.COMMA, 0); }
		public TerminalNode RESOURCE_MONITOR() { return getToken(SnowflakeParser.RESOURCE_MONITOR, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public TerminalNode SAVE_OLD_URL() { return getToken(SnowflakeParser.SAVE_OLD_URL, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode OLD() { return getToken(SnowflakeParser.OLD, 0); }
		public TerminalNode URL() { return getToken(SnowflakeParser.URL, 0); }
		public Alter_account_optsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_account_opts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_account_opts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_account_opts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_account_opts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_account_optsContext alter_account_opts() throws RecognitionException {
		Alter_account_optsContext _localctx = new Alter_account_optsContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_alter_account_opts);
		int _la;
		try {
			setState(6135);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6099);
				match(SET);
				setState(6101);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,657,_ctx) ) {
				case 1:
					{
					setState(6100);
					account_params();
					}
					break;
				}
				setState(6104);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
				case 1:
					{
					setState(6103);
					object_params();
					}
					break;
				}
				setState(6107);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ABORT_DETACHED_QUERY || _la==AUTOCOMMIT || _la==BINARY_INPUT_FORMAT || _la==BINARY_OUTPUT_FORMAT || ((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & 864691128455135235L) != 0) || _la==JSON_INDENT || _la==LOCK_TIMEOUT || _la==QUERY_TAG || _la==ROWS_PER_RESULTSET || ((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & 140754668224513L) != 0) || ((((_la - 744)) & ~0x3f) == 0 && ((1L << (_la - 744)) & 72066424524350933L) != 0) || _la==WEEK_OF_YEAR_POLICY || _la==WEEK_START) {
					{
					setState(6106);
					session_params();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6109);
				match(UNSET);
				setState(6110);
				param_name();
				setState(6113);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6111);
					match(COMMA);
					setState(6112);
					param_name();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6115);
				match(SET);
				setState(6116);
				match(RESOURCE_MONITOR);
				setState(6117);
				match(EQ);
				setState(6118);
				id_();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6119);
				set_tags();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6120);
				unset_tags();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6121);
				id_();
				setState(6122);
				match(RENAME);
				setState(6123);
				match(TO);
				setState(6124);
				id_();
				setState(6128);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SAVE_OLD_URL) {
					{
					setState(6125);
					match(SAVE_OLD_URL);
					setState(6126);
					match(EQ);
					setState(6127);
					true_false();
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6130);
				id_();
				setState(6131);
				match(DROP);
				setState(6132);
				match(OLD);
				setState(6133);
				match(URL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_tagsContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public Tag_decl_listContext tag_decl_list() {
			return getRuleContext(Tag_decl_listContext.class,0);
		}
		public Set_tagsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_tags; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSet_tags(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSet_tags(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSet_tags(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_tagsContext set_tags() throws RecognitionException {
		Set_tagsContext _localctx = new Set_tagsContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_set_tags);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6137);
			match(SET);
			setState(6138);
			tag_decl_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Tag_decl_listContext extends ParserRuleContext {
		public TerminalNode TAG() { return getToken(SnowflakeParser.TAG, 0); }
		public List<Object_nameContext> object_name() {
			return getRuleContexts(Object_nameContext.class);
		}
		public Object_nameContext object_name(int i) {
			return getRuleContext(Object_nameContext.class,i);
		}
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<Tag_valueContext> tag_value() {
			return getRuleContexts(Tag_valueContext.class);
		}
		public Tag_valueContext tag_value(int i) {
			return getRuleContext(Tag_valueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Tag_decl_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tag_decl_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTag_decl_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTag_decl_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTag_decl_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tag_decl_listContext tag_decl_list() throws RecognitionException {
		Tag_decl_listContext _localctx = new Tag_decl_listContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_tag_decl_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6140);
			match(TAG);
			setState(6141);
			object_name();
			setState(6142);
			match(EQ);
			setState(6143);
			tag_value();
			setState(6151);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,663,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6144);
					match(COMMA);
					setState(6145);
					object_name();
					setState(6146);
					match(EQ);
					setState(6147);
					tag_value();
					}
					} 
				}
				setState(6153);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,663,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unset_tagsContext extends ParserRuleContext {
		public TerminalNode UNSET() { return getToken(SnowflakeParser.UNSET, 0); }
		public TerminalNode TAG() { return getToken(SnowflakeParser.TAG, 0); }
		public List<Object_nameContext> object_name() {
			return getRuleContexts(Object_nameContext.class);
		}
		public Object_nameContext object_name(int i) {
			return getRuleContext(Object_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Unset_tagsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unset_tags; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterUnset_tags(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitUnset_tags(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitUnset_tags(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unset_tagsContext unset_tags() throws RecognitionException {
		Unset_tagsContext _localctx = new Unset_tagsContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_unset_tags);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6154);
			match(UNSET);
			setState(6155);
			match(TAG);
			setState(6156);
			object_name();
			setState(6161);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,664,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6157);
					match(COMMA);
					setState(6158);
					object_name();
					}
					} 
				}
				setState(6163);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,664,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_commandContext extends ParserRuleContext {
		public Create_accountContext create_account() {
			return getRuleContext(Create_accountContext.class,0);
		}
		public Create_alertContext create_alert() {
			return getRuleContext(Create_alertContext.class,0);
		}
		public Create_api_integrationContext create_api_integration() {
			return getRuleContext(Create_api_integrationContext.class,0);
		}
		public Create_object_cloneContext create_object_clone() {
			return getRuleContext(Create_object_cloneContext.class,0);
		}
		public Create_connectionContext create_connection() {
			return getRuleContext(Create_connectionContext.class,0);
		}
		public Create_databaseContext create_database() {
			return getRuleContext(Create_databaseContext.class,0);
		}
		public Create_dynamic_tableContext create_dynamic_table() {
			return getRuleContext(Create_dynamic_tableContext.class,0);
		}
		public Create_event_tableContext create_event_table() {
			return getRuleContext(Create_event_tableContext.class,0);
		}
		public Create_external_functionContext create_external_function() {
			return getRuleContext(Create_external_functionContext.class,0);
		}
		public Create_external_tableContext create_external_table() {
			return getRuleContext(Create_external_tableContext.class,0);
		}
		public Create_failover_groupContext create_failover_group() {
			return getRuleContext(Create_failover_groupContext.class,0);
		}
		public Create_file_formatContext create_file_format() {
			return getRuleContext(Create_file_formatContext.class,0);
		}
		public Create_functionContext create_function() {
			return getRuleContext(Create_functionContext.class,0);
		}
		public Create_managed_accountContext create_managed_account() {
			return getRuleContext(Create_managed_accountContext.class,0);
		}
		public Create_masking_policyContext create_masking_policy() {
			return getRuleContext(Create_masking_policyContext.class,0);
		}
		public Create_materialized_viewContext create_materialized_view() {
			return getRuleContext(Create_materialized_viewContext.class,0);
		}
		public Create_network_policyContext create_network_policy() {
			return getRuleContext(Create_network_policyContext.class,0);
		}
		public Create_notification_integrationContext create_notification_integration() {
			return getRuleContext(Create_notification_integrationContext.class,0);
		}
		public Create_password_policyContext create_password_policy() {
			return getRuleContext(Create_password_policyContext.class,0);
		}
		public Create_pipeContext create_pipe() {
			return getRuleContext(Create_pipeContext.class,0);
		}
		public Create_procedureContext create_procedure() {
			return getRuleContext(Create_procedureContext.class,0);
		}
		public Create_replication_groupContext create_replication_group() {
			return getRuleContext(Create_replication_groupContext.class,0);
		}
		public Create_resource_monitorContext create_resource_monitor() {
			return getRuleContext(Create_resource_monitorContext.class,0);
		}
		public Create_roleContext create_role() {
			return getRuleContext(Create_roleContext.class,0);
		}
		public Create_row_access_policyContext create_row_access_policy() {
			return getRuleContext(Create_row_access_policyContext.class,0);
		}
		public Create_schemaContext create_schema() {
			return getRuleContext(Create_schemaContext.class,0);
		}
		public Create_security_integration_external_oauthContext create_security_integration_external_oauth() {
			return getRuleContext(Create_security_integration_external_oauthContext.class,0);
		}
		public Create_security_integration_snowflake_oauthContext create_security_integration_snowflake_oauth() {
			return getRuleContext(Create_security_integration_snowflake_oauthContext.class,0);
		}
		public Create_security_integration_saml2Context create_security_integration_saml2() {
			return getRuleContext(Create_security_integration_saml2Context.class,0);
		}
		public Create_security_integration_scimContext create_security_integration_scim() {
			return getRuleContext(Create_security_integration_scimContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_session_policyContext create_session_policy() {
			return getRuleContext(Create_session_policyContext.class,0);
		}
		public Create_shareContext create_share() {
			return getRuleContext(Create_shareContext.class,0);
		}
		public Create_stageContext create_stage() {
			return getRuleContext(Create_stageContext.class,0);
		}
		public Create_storage_integrationContext create_storage_integration() {
			return getRuleContext(Create_storage_integrationContext.class,0);
		}
		public Create_streamContext create_stream() {
			return getRuleContext(Create_streamContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_table_as_selectContext create_table_as_select() {
			return getRuleContext(Create_table_as_selectContext.class,0);
		}
		public Create_table_likeContext create_table_like() {
			return getRuleContext(Create_table_likeContext.class,0);
		}
		public Create_tagContext create_tag() {
			return getRuleContext(Create_tagContext.class,0);
		}
		public Create_taskContext create_task() {
			return getRuleContext(Create_taskContext.class,0);
		}
		public Create_userContext create_user() {
			return getRuleContext(Create_userContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Create_warehouseContext create_warehouse() {
			return getRuleContext(Create_warehouseContext.class,0);
		}
		public Create_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_commandContext create_command() throws RecognitionException {
		Create_commandContext _localctx = new Create_commandContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_create_command);
		try {
			setState(6208);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6164);
				create_account();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6165);
				create_alert();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6166);
				create_api_integration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6167);
				create_object_clone();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6168);
				create_connection();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6169);
				create_database();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6170);
				create_dynamic_table();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6171);
				create_event_table();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6172);
				create_external_function();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6173);
				create_external_table();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6174);
				create_failover_group();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6175);
				create_file_format();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6176);
				create_function();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6177);
				create_managed_account();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6178);
				create_masking_policy();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6179);
				create_materialized_view();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6180);
				create_network_policy();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6181);
				create_notification_integration();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6182);
				create_password_policy();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6183);
				create_pipe();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6184);
				create_procedure();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6185);
				create_replication_group();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6186);
				create_resource_monitor();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6187);
				create_role();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6188);
				create_row_access_policy();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6189);
				create_schema();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6190);
				create_security_integration_external_oauth();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6191);
				create_security_integration_snowflake_oauth();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6192);
				create_security_integration_saml2();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6193);
				create_security_integration_scim();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6194);
				create_sequence();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(6195);
				create_session_policy();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(6196);
				create_share();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(6197);
				create_stage();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(6198);
				create_storage_integration();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(6199);
				create_stream();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(6200);
				create_table();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(6201);
				create_table_as_select();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(6202);
				create_table_like();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(6203);
				create_tag();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(6204);
				create_task();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(6205);
				create_user();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(6206);
				create_view();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(6207);
				create_warehouse();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_accountContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ADMIN_NAME() { return getToken(SnowflakeParser.ADMIN_NAME, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode ADMIN_PASSWORD() { return getToken(SnowflakeParser.ADMIN_PASSWORD, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode EMAIL() { return getToken(SnowflakeParser.EMAIL, 0); }
		public TerminalNode EDITION() { return getToken(SnowflakeParser.EDITION, 0); }
		public TerminalNode STANDARD() { return getToken(SnowflakeParser.STANDARD, 0); }
		public TerminalNode ENTERPRISE() { return getToken(SnowflakeParser.ENTERPRISE, 0); }
		public TerminalNode BUSINESS_CRITICAL() { return getToken(SnowflakeParser.BUSINESS_CRITICAL, 0); }
		public TerminalNode FIRST_NAME() { return getToken(SnowflakeParser.FIRST_NAME, 0); }
		public TerminalNode LAST_NAME() { return getToken(SnowflakeParser.LAST_NAME, 0); }
		public TerminalNode MUST_CHANGE_PASSWORD() { return getToken(SnowflakeParser.MUST_CHANGE_PASSWORD, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode REGION_GROUP() { return getToken(SnowflakeParser.REGION_GROUP, 0); }
		public Region_group_idContext region_group_id() {
			return getRuleContext(Region_group_idContext.class,0);
		}
		public TerminalNode REGION() { return getToken(SnowflakeParser.REGION, 0); }
		public Snowflake_region_idContext snowflake_region_id() {
			return getRuleContext(Snowflake_region_idContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_accountContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_account; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_account(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_account(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_account(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_accountContext create_account() throws RecognitionException {
		Create_accountContext _localctx = new Create_accountContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_create_account);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6210);
			match(CREATE);
			setState(6211);
			match(ACCOUNT);
			setState(6212);
			id_();
			setState(6213);
			match(ADMIN_NAME);
			setState(6214);
			match(EQ);
			setState(6215);
			id_();
			setState(6216);
			match(ADMIN_PASSWORD);
			setState(6217);
			match(EQ);
			setState(6218);
			string();
			setState(6222);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FIRST_NAME) {
				{
				setState(6219);
				match(FIRST_NAME);
				setState(6220);
				match(EQ);
				setState(6221);
				id_();
				}
			}

			setState(6227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LAST_NAME) {
				{
				setState(6224);
				match(LAST_NAME);
				setState(6225);
				match(EQ);
				setState(6226);
				id_();
				}
			}

			setState(6229);
			match(EMAIL);
			setState(6230);
			match(EQ);
			setState(6231);
			string();
			setState(6235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MUST_CHANGE_PASSWORD) {
				{
				setState(6232);
				match(MUST_CHANGE_PASSWORD);
				setState(6233);
				match(EQ);
				setState(6234);
				true_false();
				}
			}

			setState(6237);
			match(EDITION);
			setState(6238);
			match(EQ);
			setState(6239);
			_la = _input.LA(1);
			if ( !(_la==BUSINESS_CRITICAL || _la==ENTERPRISE || _la==STANDARD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REGION_GROUP) {
				{
				setState(6240);
				match(REGION_GROUP);
				setState(6241);
				match(EQ);
				setState(6242);
				region_group_id();
				}
			}

			setState(6248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REGION) {
				{
				setState(6245);
				match(REGION);
				setState(6246);
				match(EQ);
				setState(6247);
				snowflake_region_id();
				}
			}

			setState(6251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(6250);
				comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_alertContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode ALERT() { return getToken(SnowflakeParser.ALERT, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode SCHEDULE() { return getToken(SnowflakeParser.SCHEDULE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode IF() { return getToken(SnowflakeParser.IF, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public TerminalNode EXISTS() { return getToken(SnowflakeParser.EXISTS, 0); }
		public Alert_conditionContext alert_condition() {
			return getRuleContext(Alert_conditionContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public TerminalNode THEN() { return getToken(SnowflakeParser.THEN, 0); }
		public Alert_actionContext alert_action() {
			return getRuleContext(Alert_actionContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Create_alertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_alert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_alert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_alert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_alert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_alertContext create_alert() throws RecognitionException {
		Create_alertContext _localctx = new Create_alertContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_create_alert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6253);
			match(CREATE);
			setState(6255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(6254);
				or_replace();
				}
			}

			setState(6257);
			match(ALERT);
			setState(6259);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
			case 1:
				{
				setState(6258);
				if_not_exists();
				}
				break;
			}
			setState(6261);
			id_();
			setState(6262);
			match(WAREHOUSE);
			setState(6263);
			match(EQ);
			setState(6264);
			id_();
			setState(6265);
			match(SCHEDULE);
			setState(6266);
			match(EQ);
			setState(6267);
			string();
			setState(6268);
			match(IF);
			setState(6269);
			match(LR_BRACKET);
			setState(6270);
			match(EXISTS);
			setState(6271);
			match(LR_BRACKET);
			setState(6272);
			alert_condition();
			setState(6273);
			match(RR_BRACKET);
			setState(6274);
			match(RR_BRACKET);
			setState(6275);
			match(THEN);
			setState(6276);
			alert_action();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alert_conditionContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Show_commandContext show_command() {
			return getRuleContext(Show_commandContext.class,0);
		}
		public CallContext call() {
			return getRuleContext(CallContext.class,0);
		}
		public Alert_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alert_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlert_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlert_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlert_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alert_conditionContext alert_condition() throws RecognitionException {
		Alert_conditionContext _localctx = new Alert_conditionContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_alert_condition);
		try {
			setState(6281);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6278);
				select_statement();
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 2);
				{
				setState(6279);
				show_command();
				}
				break;
			case CALL:
				enterOuterAlt(_localctx, 3);
				{
				setState(6280);
				call();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alert_actionContext extends ParserRuleContext {
		public Sql_commandContext sql_command() {
			return getRuleContext(Sql_commandContext.class,0);
		}
		public Alert_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alert_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlert_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlert_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlert_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alert_actionContext alert_action() throws RecognitionException {
		Alert_actionContext _localctx = new Alert_actionContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_alert_action);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6283);
			sql_command();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_api_integrationContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode API() { return getToken(SnowflakeParser.API, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode API_PROVIDER() { return getToken(SnowflakeParser.API_PROVIDER, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode API_AWS_ROLE_ARN() { return getToken(SnowflakeParser.API_AWS_ROLE_ARN, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode API_ALLOWED_PREFIXES() { return getToken(SnowflakeParser.API_ALLOWED_PREFIXES, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public TerminalNode ENABLED() { return getToken(SnowflakeParser.ENABLED, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode API_KEY() { return getToken(SnowflakeParser.API_KEY, 0); }
		public TerminalNode API_BLOCKED_PREFIXES() { return getToken(SnowflakeParser.API_BLOCKED_PREFIXES, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode AZURE_TENANT_ID() { return getToken(SnowflakeParser.AZURE_TENANT_ID, 0); }
		public TerminalNode AZURE_AD_APPLICATION_ID() { return getToken(SnowflakeParser.AZURE_AD_APPLICATION_ID, 0); }
		public TerminalNode GOOGLE_AUDIENCE() { return getToken(SnowflakeParser.GOOGLE_AUDIENCE, 0); }
		public Create_api_integrationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_api_integration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_api_integration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_api_integration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_api_integration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_api_integrationContext create_api_integration() throws RecognitionException {
		Create_api_integrationContext _localctx = new Create_api_integrationContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_create_api_integration);
		int _la;
		try {
			setState(6399);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6285);
				match(CREATE);
				setState(6287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6286);
					or_replace();
					}
				}

				setState(6289);
				match(API);
				setState(6290);
				match(INTEGRATION);
				setState(6292);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
				case 1:
					{
					setState(6291);
					if_not_exists();
					}
					break;
				}
				setState(6294);
				id_();
				setState(6295);
				match(API_PROVIDER);
				setState(6296);
				match(EQ);
				{
				setState(6297);
				id_();
				}
				setState(6298);
				match(API_AWS_ROLE_ARN);
				setState(6299);
				match(EQ);
				setState(6300);
				string();
				setState(6304);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==API_KEY) {
					{
					setState(6301);
					match(API_KEY);
					setState(6302);
					match(EQ);
					setState(6303);
					string();
					}
				}

				setState(6306);
				match(API_ALLOWED_PREFIXES);
				setState(6307);
				match(EQ);
				setState(6308);
				match(LR_BRACKET);
				setState(6309);
				string();
				setState(6310);
				match(RR_BRACKET);
				setState(6317);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==API_BLOCKED_PREFIXES) {
					{
					setState(6311);
					match(API_BLOCKED_PREFIXES);
					setState(6312);
					match(EQ);
					setState(6313);
					match(LR_BRACKET);
					setState(6314);
					string();
					setState(6315);
					match(RR_BRACKET);
					}
				}

				setState(6319);
				match(ENABLED);
				setState(6320);
				match(EQ);
				setState(6321);
				true_false();
				setState(6323);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(6322);
					comment_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6325);
				match(CREATE);
				setState(6327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6326);
					or_replace();
					}
				}

				setState(6329);
				match(API);
				setState(6330);
				match(INTEGRATION);
				setState(6332);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
				case 1:
					{
					setState(6331);
					if_not_exists();
					}
					break;
				}
				setState(6334);
				id_();
				setState(6335);
				match(API_PROVIDER);
				setState(6336);
				match(EQ);
				setState(6337);
				id_();
				setState(6338);
				match(AZURE_TENANT_ID);
				setState(6339);
				match(EQ);
				setState(6340);
				string();
				setState(6341);
				match(AZURE_AD_APPLICATION_ID);
				setState(6342);
				match(EQ);
				setState(6343);
				string();
				setState(6347);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==API_KEY) {
					{
					setState(6344);
					match(API_KEY);
					setState(6345);
					match(EQ);
					setState(6346);
					string();
					}
				}

				setState(6349);
				match(API_ALLOWED_PREFIXES);
				setState(6350);
				match(EQ);
				setState(6351);
				match(LR_BRACKET);
				setState(6352);
				string();
				setState(6353);
				match(RR_BRACKET);
				setState(6360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==API_BLOCKED_PREFIXES) {
					{
					setState(6354);
					match(API_BLOCKED_PREFIXES);
					setState(6355);
					match(EQ);
					setState(6356);
					match(LR_BRACKET);
					setState(6357);
					string();
					setState(6358);
					match(RR_BRACKET);
					}
				}

				setState(6362);
				match(ENABLED);
				setState(6363);
				match(EQ);
				setState(6364);
				true_false();
				setState(6366);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(6365);
					comment_clause();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6368);
				match(CREATE);
				setState(6369);
				or_replace();
				setState(6370);
				match(API);
				setState(6371);
				match(INTEGRATION);
				setState(6372);
				if_not_exists();
				setState(6373);
				id_();
				setState(6374);
				match(API_PROVIDER);
				setState(6375);
				match(EQ);
				setState(6376);
				id_();
				setState(6377);
				match(GOOGLE_AUDIENCE);
				setState(6378);
				match(EQ);
				setState(6379);
				string();
				setState(6380);
				match(API_ALLOWED_PREFIXES);
				setState(6381);
				match(EQ);
				setState(6382);
				match(LR_BRACKET);
				setState(6383);
				string();
				setState(6384);
				match(RR_BRACKET);
				setState(6391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==API_BLOCKED_PREFIXES) {
					{
					setState(6385);
					match(API_BLOCKED_PREFIXES);
					setState(6386);
					match(EQ);
					setState(6387);
					match(LR_BRACKET);
					setState(6388);
					string();
					setState(6389);
					match(RR_BRACKET);
					}
				}

				setState(6393);
				match(ENABLED);
				setState(6394);
				match(EQ);
				setState(6395);
				true_false();
				setState(6397);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(6396);
					comment_clause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_object_cloneContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode CLONE() { return getToken(SnowflakeParser.CLONE, 0); }
		public List<Object_nameContext> object_name() {
			return getRuleContexts(Object_nameContext.class);
		}
		public Object_nameContext object_name(int i) {
			return getRuleContext(Object_nameContext.class,i);
		}
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public At_before1Context at_before1() {
			return getRuleContext(At_before1Context.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SnowflakeParser.TIMESTAMP, 0); }
		public TerminalNode ASSOC() { return getToken(SnowflakeParser.ASSOC, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode OFFSET() { return getToken(SnowflakeParser.OFFSET, 0); }
		public TerminalNode STATEMENT() { return getToken(SnowflakeParser.STATEMENT, 0); }
		public TerminalNode STAGE() { return getToken(SnowflakeParser.STAGE, 0); }
		public TerminalNode FILE() { return getToken(SnowflakeParser.FILE, 0); }
		public TerminalNode FORMAT() { return getToken(SnowflakeParser.FORMAT, 0); }
		public TerminalNode SEQUENCE() { return getToken(SnowflakeParser.SEQUENCE, 0); }
		public TerminalNode STREAM() { return getToken(SnowflakeParser.STREAM, 0); }
		public TerminalNode TASK() { return getToken(SnowflakeParser.TASK, 0); }
		public Create_object_cloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_object_clone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_object_clone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_object_clone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_object_clone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_object_cloneContext create_object_clone() throws RecognitionException {
		Create_object_cloneContext _localctx = new Create_object_cloneContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_create_object_clone);
		int _la;
		try {
			setState(6448);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6401);
				match(CREATE);
				setState(6403);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6402);
					or_replace();
					}
				}

				setState(6405);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA || _la==TABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6407);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,689,_ctx) ) {
				case 1:
					{
					setState(6406);
					if_not_exists();
					}
					break;
				}
				setState(6409);
				id_();
				setState(6410);
				match(CLONE);
				setState(6411);
				object_name();
				setState(6427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT_KEYWORD || _la==BEFORE) {
					{
					setState(6412);
					at_before1();
					setState(6413);
					match(LR_BRACKET);
					setState(6423);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case TIMESTAMP:
						{
						setState(6414);
						match(TIMESTAMP);
						setState(6415);
						match(ASSOC);
						setState(6416);
						string();
						}
						break;
					case OFFSET:
						{
						setState(6417);
						match(OFFSET);
						setState(6418);
						match(ASSOC);
						setState(6419);
						string();
						}
						break;
					case STATEMENT:
						{
						setState(6420);
						match(STATEMENT);
						setState(6421);
						match(ASSOC);
						setState(6422);
						id_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6425);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6429);
				match(CREATE);
				setState(6431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6430);
					or_replace();
					}
				}

				setState(6439);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAGE:
					{
					setState(6433);
					match(STAGE);
					}
					break;
				case FILE:
					{
					setState(6434);
					match(FILE);
					setState(6435);
					match(FORMAT);
					}
					break;
				case SEQUENCE:
					{
					setState(6436);
					match(SEQUENCE);
					}
					break;
				case STREAM:
					{
					setState(6437);
					match(STREAM);
					}
					break;
				case TASK:
					{
					setState(6438);
					match(TASK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6442);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,694,_ctx) ) {
				case 1:
					{
					setState(6441);
					if_not_exists();
					}
					break;
				}
				setState(6444);
				object_name();
				setState(6445);
				match(CLONE);
				setState(6446);
				object_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_connectionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode CONNECTION() { return getToken(SnowflakeParser.CONNECTION, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public TerminalNode REPLICA() { return getToken(SnowflakeParser.REPLICA, 0); }
		public TerminalNode OF() { return getToken(SnowflakeParser.OF, 0); }
		public List<TerminalNode> DOT() { return getTokens(SnowflakeParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SnowflakeParser.DOT, i);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_connectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_connection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_connection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_connection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_connection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_connectionContext create_connection() throws RecognitionException {
		Create_connectionContext _localctx = new Create_connectionContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_create_connection);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6450);
			match(CREATE);
			setState(6451);
			match(CONNECTION);
			setState(6453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
			case 1:
				{
				setState(6452);
				if_not_exists();
				}
				break;
			}
			setState(6455);
			id_();
			setState(6470);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case COMMENT:
			case SEMI:
				{
				setState(6457);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(6456);
					comment_clause();
					}
				}

				}
				break;
			case AS:
				{
				{
				setState(6459);
				match(AS);
				setState(6460);
				match(REPLICA);
				setState(6461);
				match(OF);
				setState(6462);
				id_();
				setState(6463);
				match(DOT);
				setState(6464);
				id_();
				setState(6465);
				match(DOT);
				setState(6466);
				id_();
				setState(6468);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(6467);
					comment_clause();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_databaseContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public TerminalNode TRANSIENT() { return getToken(SnowflakeParser.TRANSIENT, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Clone_at_beforeContext clone_at_before() {
			return getRuleContext(Clone_at_beforeContext.class,0);
		}
		public TerminalNode DATA_RETENTION_TIME_IN_DAYS() { return getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<NumContext> num() {
			return getRuleContexts(NumContext.class);
		}
		public NumContext num(int i) {
			return getRuleContext(NumContext.class,i);
		}
		public TerminalNode MAX_DATA_EXTENSION_TIME_IN_DAYS() { return getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0); }
		public Default_ddl_collationContext default_ddl_collation() {
			return getRuleContext(Default_ddl_collationContext.class,0);
		}
		public With_tagsContext with_tags() {
			return getRuleContext(With_tagsContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_databaseContext create_database() throws RecognitionException {
		Create_databaseContext _localctx = new Create_databaseContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_create_database);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6472);
			match(CREATE);
			setState(6474);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(6473);
				or_replace();
				}
			}

			setState(6477);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSIENT) {
				{
				setState(6476);
				match(TRANSIENT);
				}
			}

			setState(6479);
			match(DATABASE);
			setState(6481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,702,_ctx) ) {
			case 1:
				{
				setState(6480);
				if_not_exists();
				}
				break;
			}
			setState(6483);
			id_();
			setState(6485);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLONE) {
				{
				setState(6484);
				clone_at_before();
				}
			}

			setState(6490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATA_RETENTION_TIME_IN_DAYS) {
				{
				setState(6487);
				match(DATA_RETENTION_TIME_IN_DAYS);
				setState(6488);
				match(EQ);
				setState(6489);
				num();
				}
			}

			setState(6495);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_DATA_EXTENSION_TIME_IN_DAYS) {
				{
				setState(6492);
				match(MAX_DATA_EXTENSION_TIME_IN_DAYS);
				setState(6493);
				match(EQ);
				setState(6494);
				num();
				}
			}

			setState(6498);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_DDL_COLLATION_) {
				{
				setState(6497);
				default_ddl_collation();
				}
			}

			setState(6501);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TAG || _la==WITH) {
				{
				setState(6500);
				with_tags();
				}
			}

			setState(6504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(6503);
				comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Clone_at_beforeContext extends ParserRuleContext {
		public TerminalNode CLONE() { return getToken(SnowflakeParser.CLONE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public At_before1Context at_before1() {
			return getRuleContext(At_before1Context.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SnowflakeParser.TIMESTAMP, 0); }
		public TerminalNode ASSOC() { return getToken(SnowflakeParser.ASSOC, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode OFFSET() { return getToken(SnowflakeParser.OFFSET, 0); }
		public TerminalNode STATEMENT() { return getToken(SnowflakeParser.STATEMENT, 0); }
		public Clone_at_beforeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clone_at_before; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterClone_at_before(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitClone_at_before(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitClone_at_before(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Clone_at_beforeContext clone_at_before() throws RecognitionException {
		Clone_at_beforeContext _localctx = new Clone_at_beforeContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_clone_at_before);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6506);
			match(CLONE);
			setState(6507);
			id_();
			setState(6523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_KEYWORD || _la==BEFORE) {
				{
				setState(6508);
				at_before1();
				setState(6509);
				match(LR_BRACKET);
				setState(6519);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TIMESTAMP:
					{
					setState(6510);
					match(TIMESTAMP);
					setState(6511);
					match(ASSOC);
					setState(6512);
					string();
					}
					break;
				case OFFSET:
					{
					setState(6513);
					match(OFFSET);
					setState(6514);
					match(ASSOC);
					setState(6515);
					string();
					}
					break;
				case STATEMENT:
					{
					setState(6516);
					match(STATEMENT);
					setState(6517);
					match(ASSOC);
					setState(6518);
					id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6521);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class At_before1Context extends ParserRuleContext {
		public TerminalNode AT_KEYWORD() { return getToken(SnowflakeParser.AT_KEYWORD, 0); }
		public TerminalNode BEFORE() { return getToken(SnowflakeParser.BEFORE, 0); }
		public At_before1Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_before1; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAt_before1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAt_before1(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAt_before1(this);
			else return visitor.visitChildren(this);
		}
	}

	public final At_before1Context at_before1() throws RecognitionException {
		At_before1Context _localctx = new At_before1Context(_ctx, getState());
		enterRule(_localctx, 354, RULE_at_before1);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6525);
			_la = _input.LA(1);
			if ( !(_la==AT_KEYWORD || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Header_declContext extends ParserRuleContext {
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public Header_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_header_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterHeader_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitHeader_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitHeader_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Header_declContext header_decl() throws RecognitionException {
		Header_declContext _localctx = new Header_declContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_header_decl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6527);
			string();
			setState(6528);
			match(EQ);
			setState(6529);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Compression_typeContext extends ParserRuleContext {
		public TerminalNode NONE() { return getToken(SnowflakeParser.NONE, 0); }
		public TerminalNode GZIP() { return getToken(SnowflakeParser.GZIP, 0); }
		public TerminalNode DEFLATE() { return getToken(SnowflakeParser.DEFLATE, 0); }
		public TerminalNode AUTO() { return getToken(SnowflakeParser.AUTO, 0); }
		public Compression_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compression_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCompression_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCompression_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCompression_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compression_typeContext compression_type() throws RecognitionException {
		Compression_typeContext _localctx = new Compression_typeContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_compression_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6531);
			_la = _input.LA(1);
			if ( !(_la==AUTO || _la==DEFLATE || _la==GZIP || _la==NONE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompressionContext extends ParserRuleContext {
		public TerminalNode COMPRESSION() { return getToken(SnowflakeParser.COMPRESSION, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public Compression_typeContext compression_type() {
			return getRuleContext(Compression_typeContext.class,0);
		}
		public CompressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCompression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCompression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCompression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompressionContext compression() throws RecognitionException {
		CompressionContext _localctx = new CompressionContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_compression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6533);
			match(COMPRESSION);
			setState(6534);
			match(EQ);
			setState(6535);
			compression_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_dynamic_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(SnowflakeParser.DYNAMIC, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public Query_statementContext query_statement() {
			return getRuleContext(Query_statementContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public TerminalNode TRANSIENT() { return getToken(SnowflakeParser.TRANSIENT, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Materialized_col_decl_listContext materialized_col_decl_list() {
			return getRuleContext(Materialized_col_decl_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public List<Dynamic_table_paramsContext> dynamic_table_params() {
			return getRuleContexts(Dynamic_table_paramsContext.class);
		}
		public Dynamic_table_paramsContext dynamic_table_params(int i) {
			return getRuleContext(Dynamic_table_paramsContext.class,i);
		}
		public Create_dynamic_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_dynamic_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_dynamic_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_dynamic_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_dynamic_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_dynamic_tableContext create_dynamic_table() throws RecognitionException {
		Create_dynamic_tableContext _localctx = new Create_dynamic_tableContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_create_dynamic_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6537);
			match(CREATE);
			setState(6539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(6538);
				or_replace();
				}
			}

			setState(6542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSIENT) {
				{
				setState(6541);
				match(TRANSIENT);
				}
			}

			setState(6544);
			match(DYNAMIC);
			setState(6545);
			match(TABLE);
			setState(6547);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,713,_ctx) ) {
			case 1:
				{
				setState(6546);
				if_not_exists();
				}
				break;
			}
			setState(6549);
			object_name();
			setState(6554);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(6550);
				match(LR_BRACKET);
				setState(6551);
				materialized_col_decl_list();
				setState(6552);
				match(RR_BRACKET);
				}
			}

			setState(6557); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6556);
				dynamic_table_params();
				}
				}
				setState(6559); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 1126999418470529L) != 0) || _la==INITIALIZE || _la==LAG || _la==MAX_DATA_EXTENSION_TIME_IN_DAYS || _la==REFRESH_MODE || _la==ROW || _la==TAG || _la==TARGET_LAG || _la==WAREHOUSE || _la==WITH );
			setState(6561);
			match(AS);
			setState(6562);
			query_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dynamic_table_paramsContext extends ParserRuleContext {
		public Dynamic_table_settable_paramsContext dynamic_table_settable_params() {
			return getRuleContext(Dynamic_table_settable_paramsContext.class,0);
		}
		public TerminalNode REFRESH_MODE() { return getToken(SnowflakeParser.REFRESH_MODE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode AUTO() { return getToken(SnowflakeParser.AUTO, 0); }
		public TerminalNode FULL() { return getToken(SnowflakeParser.FULL, 0); }
		public TerminalNode INCREMENTAL() { return getToken(SnowflakeParser.INCREMENTAL, 0); }
		public TerminalNode INITIALIZE() { return getToken(SnowflakeParser.INITIALIZE, 0); }
		public TerminalNode ON_CREATE() { return getToken(SnowflakeParser.ON_CREATE, 0); }
		public TerminalNode ON_SCHEDULE() { return getToken(SnowflakeParser.ON_SCHEDULE, 0); }
		public Cluster_byContext cluster_by() {
			return getRuleContext(Cluster_byContext.class,0);
		}
		public With_row_access_policyContext with_row_access_policy() {
			return getRuleContext(With_row_access_policyContext.class,0);
		}
		public With_tagsContext with_tags() {
			return getRuleContext(With_tagsContext.class,0);
		}
		public Dynamic_table_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_table_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDynamic_table_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDynamic_table_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDynamic_table_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_table_paramsContext dynamic_table_params() throws RecognitionException {
		Dynamic_table_paramsContext _localctx = new Dynamic_table_paramsContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_dynamic_table_params);
		int _la;
		try {
			setState(6574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6564);
				dynamic_table_settable_params();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6565);
				match(REFRESH_MODE);
				setState(6566);
				match(EQ);
				setState(6567);
				_la = _input.LA(1);
				if ( !(_la==AUTO || _la==FULL || _la==INCREMENTAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6568);
				match(INITIALIZE);
				setState(6569);
				match(EQ);
				setState(6570);
				_la = _input.LA(1);
				if ( !(_la==ON_CREATE || _la==ON_SCHEDULE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6571);
				cluster_by();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6572);
				with_row_access_policy();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6573);
				with_tags();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dynamic_table_settable_paramsContext extends ParserRuleContext {
		public Id_Context wh;
		public TerminalNode TARGET_LAG() { return getToken(SnowflakeParser.TARGET_LAG, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode DOWNSTREAM() { return getToken(SnowflakeParser.DOWNSTREAM, 0); }
		public TerminalNode LAG() { return getToken(SnowflakeParser.LAG, 0); }
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Set_data_retention_paramsContext set_data_retention_params() {
			return getRuleContext(Set_data_retention_paramsContext.class,0);
		}
		public TerminalNode DEFAULT_DDL_COLLATION_() { return getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0); }
		public TerminalNode STRING() { return getToken(SnowflakeParser.STRING, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Dynamic_table_settable_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_table_settable_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDynamic_table_settable_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDynamic_table_settable_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDynamic_table_settable_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_table_settable_paramsContext dynamic_table_settable_params() throws RecognitionException {
		Dynamic_table_settable_paramsContext _localctx = new Dynamic_table_settable_paramsContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_dynamic_table_settable_params);
		try {
			setState(6596);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TARGET_LAG:
				enterOuterAlt(_localctx, 1);
				{
				setState(6576);
				match(TARGET_LAG);
				setState(6577);
				match(EQ);
				setState(6580);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(6578);
					string();
					}
					break;
				case DOWNSTREAM:
					{
					setState(6579);
					match(DOWNSTREAM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case LAG:
				enterOuterAlt(_localctx, 2);
				{
				setState(6582);
				match(LAG);
				setState(6583);
				match(EQ);
				setState(6586);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(6584);
					string();
					}
					break;
				case DOWNSTREAM:
					{
					setState(6585);
					match(DOWNSTREAM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case WAREHOUSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6588);
				match(WAREHOUSE);
				setState(6589);
				match(EQ);
				setState(6590);
				((Dynamic_table_settable_paramsContext)_localctx).wh = id_();
				}
				break;
			case DATA_RETENTION_TIME_IN_DAYS:
			case MAX_DATA_EXTENSION_TIME_IN_DAYS:
				enterOuterAlt(_localctx, 4);
				{
				setState(6591);
				set_data_retention_params();
				}
				break;
			case DEFAULT_DDL_COLLATION_:
				enterOuterAlt(_localctx, 5);
				{
				setState(6592);
				match(DEFAULT_DDL_COLLATION_);
				setState(6593);
				match(EQ);
				setState(6594);
				match(STRING);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 6);
				{
				setState(6595);
				comment_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Dynamic_table_unsettable_paramsContext extends ParserRuleContext {
		public Data_retention_paramsContext data_retention_params() {
			return getRuleContext(Data_retention_paramsContext.class,0);
		}
		public TerminalNode DEFAULT_DDL_COLLATION_() { return getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public Dynamic_table_unsettable_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_table_unsettable_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDynamic_table_unsettable_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDynamic_table_unsettable_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDynamic_table_unsettable_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_table_unsettable_paramsContext dynamic_table_unsettable_params() throws RecognitionException {
		Dynamic_table_unsettable_paramsContext _localctx = new Dynamic_table_unsettable_paramsContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_dynamic_table_unsettable_params);
		try {
			setState(6601);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATA_RETENTION_TIME_IN_DAYS:
			case MAX_DATA_EXTENSION_TIME_IN_DAYS:
				enterOuterAlt(_localctx, 1);
				{
				setState(6598);
				data_retention_params();
				}
				break;
			case DEFAULT_DDL_COLLATION_:
				enterOuterAlt(_localctx, 2);
				{
				setState(6599);
				match(DEFAULT_DDL_COLLATION_);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(6600);
				match(COMMENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Data_retention_paramsContext extends ParserRuleContext {
		public TerminalNode DATA_RETENTION_TIME_IN_DAYS() { return getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0); }
		public TerminalNode MAX_DATA_EXTENSION_TIME_IN_DAYS() { return getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0); }
		public Data_retention_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_retention_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterData_retention_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitData_retention_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitData_retention_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_retention_paramsContext data_retention_params() throws RecognitionException {
		Data_retention_paramsContext _localctx = new Data_retention_paramsContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_data_retention_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6603);
			_la = _input.LA(1);
			if ( !(_la==DATA_RETENTION_TIME_IN_DAYS || _la==MAX_DATA_EXTENSION_TIME_IN_DAYS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_data_retention_paramsContext extends ParserRuleContext {
		public Data_retention_paramsContext data_retention_params() {
			return getRuleContext(Data_retention_paramsContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public Set_data_retention_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_data_retention_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSet_data_retention_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSet_data_retention_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSet_data_retention_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_data_retention_paramsContext set_data_retention_params() throws RecognitionException {
		Set_data_retention_paramsContext _localctx = new Set_data_retention_paramsContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_set_data_retention_params);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6605);
			data_retention_params();
			setState(6606);
			match(EQ);
			setState(6607);
			num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_event_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(SnowflakeParser.EVENT, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Cluster_byContext cluster_by() {
			return getRuleContext(Cluster_byContext.class,0);
		}
		public List<Data_retention_paramsContext> data_retention_params() {
			return getRuleContexts(Data_retention_paramsContext.class);
		}
		public Data_retention_paramsContext data_retention_params(int i) {
			return getRuleContext(Data_retention_paramsContext.class,i);
		}
		public Change_trackingContext change_tracking() {
			return getRuleContext(Change_trackingContext.class,0);
		}
		public TerminalNode DEFAULT_DDL_COLLATION_() { return getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Copy_grantsContext copy_grants() {
			return getRuleContext(Copy_grantsContext.class,0);
		}
		public With_row_access_policyContext with_row_access_policy() {
			return getRuleContext(With_row_access_policyContext.class,0);
		}
		public With_tagsContext with_tags() {
			return getRuleContext(With_tagsContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public Create_event_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_event_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_event_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_event_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_event_tableContext create_event_table() throws RecognitionException {
		Create_event_tableContext _localctx = new Create_event_tableContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_create_event_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6609);
			match(CREATE);
			setState(6611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(6610);
				or_replace();
				}
			}

			setState(6613);
			match(EVENT);
			setState(6614);
			match(TABLE);
			setState(6616);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
			case 1:
				{
				setState(6615);
				if_not_exists();
				}
				break;
			}
			setState(6618);
			id_();
			setState(6620);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTER) {
				{
				setState(6619);
				cluster_by();
				}
			}

			setState(6625);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==DATA_RETENTION_TIME_IN_DAYS || _la==MAX_DATA_EXTENSION_TIME_IN_DAYS) {
				{
				{
				setState(6622);
				data_retention_params();
				}
				}
				setState(6627);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6629);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHANGE_TRACKING) {
				{
				setState(6628);
				change_tracking();
				}
			}

			setState(6634);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_DDL_COLLATION_) {
				{
				setState(6631);
				match(DEFAULT_DDL_COLLATION_);
				setState(6632);
				match(EQ);
				setState(6633);
				string();
				}
			}

			setState(6637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COPY) {
				{
				setState(6636);
				copy_grants();
				}
			}

			setState(6640);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
			case 1:
				{
				setState(6639);
				with_row_access_policy();
				}
				break;
			}
			setState(6643);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
			case 1:
				{
				setState(6642);
				with_tags();
				}
				break;
			}
			setState(6649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT || _la==WITH) {
				{
				setState(6646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(6645);
					match(WITH);
					}
				}

				setState(6648);
				comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_external_functionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode EXTERNAL() { return getToken(SnowflakeParser.EXTERNAL, 0); }
		public TerminalNode FUNCTION() { return getToken(SnowflakeParser.FUNCTION, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public List<TerminalNode> RETURNS() { return getTokens(SnowflakeParser.RETURNS); }
		public TerminalNode RETURNS(int i) {
			return getToken(SnowflakeParser.RETURNS, i);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode API_INTEGRATION() { return getToken(SnowflakeParser.API_INTEGRATION, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public TerminalNode SECURE() { return getToken(SnowflakeParser.SECURE, 0); }
		public List<Arg_nameContext> arg_name() {
			return getRuleContexts(Arg_nameContext.class);
		}
		public Arg_nameContext arg_name(int i) {
			return getRuleContext(Arg_nameContext.class,i);
		}
		public List<Arg_data_typeContext> arg_data_type() {
			return getRuleContexts(Arg_data_typeContext.class);
		}
		public Arg_data_typeContext arg_data_type(int i) {
			return getRuleContext(Arg_data_typeContext.class,i);
		}
		public Null_not_nullContext null_not_null() {
			return getRuleContext(Null_not_nullContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode HEADERS() { return getToken(SnowflakeParser.HEADERS, 0); }
		public List<Header_declContext> header_decl() {
			return getRuleContexts(Header_declContext.class);
		}
		public Header_declContext header_decl(int i) {
			return getRuleContext(Header_declContext.class,i);
		}
		public TerminalNode CONTEXT_HEADERS() { return getToken(SnowflakeParser.CONTEXT_HEADERS, 0); }
		public TerminalNode MAX_BATCH_ROWS() { return getToken(SnowflakeParser.MAX_BATCH_ROWS, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public CompressionContext compression() {
			return getRuleContext(CompressionContext.class,0);
		}
		public TerminalNode REQUEST_TRANSLATOR() { return getToken(SnowflakeParser.REQUEST_TRANSLATOR, 0); }
		public TerminalNode RESPONSE_TRANSLATOR() { return getToken(SnowflakeParser.RESPONSE_TRANSLATOR, 0); }
		public TerminalNode VOLATILE() { return getToken(SnowflakeParser.VOLATILE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(SnowflakeParser.IMMUTABLE, 0); }
		public TerminalNode CALLED() { return getToken(SnowflakeParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public List<TerminalNode> NULL_() { return getTokens(SnowflakeParser.NULL_); }
		public TerminalNode NULL_(int i) {
			return getToken(SnowflakeParser.NULL_, i);
		}
		public TerminalNode INPUT() { return getToken(SnowflakeParser.INPUT, 0); }
		public TerminalNode STRICT() { return getToken(SnowflakeParser.STRICT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Create_external_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_external_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_external_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_external_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_external_functionContext create_external_function() throws RecognitionException {
		Create_external_functionContext _localctx = new Create_external_functionContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_create_external_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6651);
			match(CREATE);
			setState(6653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(6652);
				or_replace();
				}
			}

			setState(6656);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SECURE) {
				{
				setState(6655);
				match(SECURE);
				}
			}

			setState(6658);
			match(EXTERNAL);
			setState(6659);
			match(FUNCTION);
			setState(6660);
			object_name();
			setState(6661);
			match(LR_BRACKET);
			setState(6673);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
				{
				setState(6662);
				arg_name();
				setState(6663);
				arg_data_type();
				setState(6670);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6664);
					match(COMMA);
					setState(6665);
					arg_name();
					setState(6666);
					arg_data_type();
					}
					}
					setState(6672);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6675);
			match(RR_BRACKET);
			setState(6676);
			match(RETURNS);
			setState(6677);
			data_type();
			setState(6679);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT || _la==NULL_) {
				{
				setState(6678);
				null_not_null();
				}
			}

			setState(6693);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
				{
				{
				setState(6681);
				match(CALLED);
				setState(6682);
				match(ON);
				setState(6683);
				match(NULL_);
				setState(6684);
				match(INPUT);
				}
				}
				break;
			case RETURNS:
			case STRICT:
				{
				setState(6691);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RETURNS:
					{
					{
					setState(6685);
					match(RETURNS);
					setState(6686);
					match(NULL_);
					setState(6687);
					match(ON);
					setState(6688);
					match(NULL_);
					setState(6689);
					match(INPUT);
					}
					}
					break;
				case STRICT:
					{
					setState(6690);
					match(STRICT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case API_INTEGRATION:
			case COMMENT:
			case IMMUTABLE:
			case VOLATILE:
				break;
			default:
				break;
			}
			setState(6696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IMMUTABLE || _la==VOLATILE) {
				{
				setState(6695);
				_la = _input.LA(1);
				if ( !(_la==IMMUTABLE || _la==VOLATILE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6699);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(6698);
				comment_clause();
				}
			}

			setState(6701);
			match(API_INTEGRATION);
			setState(6702);
			match(EQ);
			setState(6703);
			id_();
			setState(6717);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HEADERS) {
				{
				setState(6704);
				match(HEADERS);
				setState(6705);
				match(EQ);
				setState(6706);
				match(LR_BRACKET);
				setState(6707);
				header_decl();
				setState(6712);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6708);
					match(COMMA);
					setState(6709);
					header_decl();
					}
					}
					setState(6714);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6715);
				match(RR_BRACKET);
				}
			}

			setState(6732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTEXT_HEADERS) {
				{
				setState(6719);
				match(CONTEXT_HEADERS);
				setState(6720);
				match(EQ);
				setState(6721);
				match(LR_BRACKET);
				setState(6722);
				id_();
				setState(6727);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6723);
					match(COMMA);
					setState(6724);
					id_();
					}
					}
					setState(6729);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6730);
				match(RR_BRACKET);
				}
			}

			setState(6737);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_BATCH_ROWS) {
				{
				setState(6734);
				match(MAX_BATCH_ROWS);
				setState(6735);
				match(EQ);
				setState(6736);
				num();
				}
			}

			setState(6740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMPRESSION) {
				{
				setState(6739);
				compression();
				}
			}

			setState(6745);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REQUEST_TRANSLATOR) {
				{
				setState(6742);
				match(REQUEST_TRANSLATOR);
				setState(6743);
				match(EQ);
				setState(6744);
				id_();
				}
			}

			setState(6750);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESPONSE_TRANSLATOR) {
				{
				setState(6747);
				match(RESPONSE_TRANSLATOR);
				setState(6748);
				match(EQ);
				setState(6749);
				id_();
				}
			}

			setState(6752);
			match(AS);
			setState(6753);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_external_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode EXTERNAL() { return getToken(SnowflakeParser.EXTERNAL, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public External_table_column_decl_listContext external_table_column_decl_list() {
			return getRuleContext(External_table_column_decl_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode LOCATION() { return getToken(SnowflakeParser.LOCATION, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public Named_stageContext named_stage() {
			return getRuleContext(Named_stageContext.class,0);
		}
		public File_formatContext file_format() {
			return getRuleContext(File_formatContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Cloud_provider_params3Context cloud_provider_params3() {
			return getRuleContext(Cloud_provider_params3Context.class,0);
		}
		public Partition_byContext partition_by() {
			return getRuleContext(Partition_byContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public TerminalNode REFRESH_ON_CREATE() { return getToken(SnowflakeParser.REFRESH_ON_CREATE, 0); }
		public List<True_falseContext> true_false() {
			return getRuleContexts(True_falseContext.class);
		}
		public True_falseContext true_false(int i) {
			return getRuleContext(True_falseContext.class,i);
		}
		public TerminalNode AUTO_REFRESH() { return getToken(SnowflakeParser.AUTO_REFRESH, 0); }
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public TerminalNode AWS_SNS_TOPIC() { return getToken(SnowflakeParser.AWS_SNS_TOPIC, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Copy_grantsContext copy_grants() {
			return getRuleContext(Copy_grantsContext.class,0);
		}
		public With_row_access_policyContext with_row_access_policy() {
			return getRuleContext(With_row_access_policyContext.class,0);
		}
		public With_tagsContext with_tags() {
			return getRuleContext(With_tagsContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode PARTITION_TYPE() { return getToken(SnowflakeParser.PARTITION_TYPE, 0); }
		public TerminalNode USER_SPECIFIED() { return getToken(SnowflakeParser.USER_SPECIFIED, 0); }
		public TerminalNode TABLE_FORMAT() { return getToken(SnowflakeParser.TABLE_FORMAT, 0); }
		public TerminalNode DELTA() { return getToken(SnowflakeParser.DELTA, 0); }
		public Create_external_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_external_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_external_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_external_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_external_tableContext create_external_table() throws RecognitionException {
		Create_external_tableContext _localctx = new Create_external_tableContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_create_external_table);
		int _la;
		try {
			setState(6898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6755);
				match(CREATE);
				setState(6757);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6756);
					or_replace();
					}
				}

				setState(6759);
				match(EXTERNAL);
				setState(6760);
				match(TABLE);
				setState(6762);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,750,_ctx) ) {
				case 1:
					{
					setState(6761);
					if_not_exists();
					}
					break;
				}
				setState(6764);
				object_name();
				setState(6765);
				match(LR_BRACKET);
				setState(6766);
				external_table_column_decl_list();
				setState(6767);
				match(RR_BRACKET);
				setState(6769);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGRATION) {
					{
					setState(6768);
					cloud_provider_params3();
					}
				}

				setState(6772);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(6771);
					partition_by();
					}
				}

				setState(6775);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(6774);
					match(WITH);
					}
				}

				setState(6777);
				match(LOCATION);
				setState(6778);
				match(EQ);
				setState(6779);
				named_stage();
				setState(6783);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REFRESH_ON_CREATE) {
					{
					setState(6780);
					match(REFRESH_ON_CREATE);
					setState(6781);
					match(EQ);
					setState(6782);
					true_false();
					}
				}

				setState(6788);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO_REFRESH) {
					{
					setState(6785);
					match(AUTO_REFRESH);
					setState(6786);
					match(EQ);
					setState(6787);
					true_false();
					}
				}

				setState(6791);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATTERN) {
					{
					setState(6790);
					pattern();
					}
				}

				setState(6793);
				file_format();
				setState(6797);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AWS_SNS_TOPIC) {
					{
					setState(6794);
					match(AWS_SNS_TOPIC);
					setState(6795);
					match(EQ);
					setState(6796);
					string();
					}
				}

				setState(6800);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COPY) {
					{
					setState(6799);
					copy_grants();
					}
				}

				setState(6803);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,759,_ctx) ) {
				case 1:
					{
					setState(6802);
					with_row_access_policy();
					}
					break;
				}
				setState(6806);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TAG || _la==WITH) {
					{
					setState(6805);
					with_tags();
					}
				}

				setState(6809);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(6808);
					comment_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6811);
				match(CREATE);
				setState(6813);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6812);
					or_replace();
					}
				}

				setState(6815);
				match(EXTERNAL);
				setState(6816);
				match(TABLE);
				setState(6818);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
				case 1:
					{
					setState(6817);
					if_not_exists();
					}
					break;
				}
				setState(6820);
				object_name();
				setState(6821);
				match(LR_BRACKET);
				setState(6822);
				external_table_column_decl_list();
				setState(6823);
				match(RR_BRACKET);
				setState(6825);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGRATION) {
					{
					setState(6824);
					cloud_provider_params3();
					}
				}

				setState(6828);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(6827);
					partition_by();
					}
				}

				setState(6831);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(6830);
					match(WITH);
					}
				}

				setState(6833);
				match(LOCATION);
				setState(6834);
				match(EQ);
				setState(6835);
				named_stage();
				setState(6836);
				match(PARTITION_TYPE);
				setState(6837);
				match(EQ);
				setState(6838);
				match(USER_SPECIFIED);
				setState(6839);
				file_format();
				setState(6841);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COPY) {
					{
					setState(6840);
					copy_grants();
					}
				}

				setState(6844);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,768,_ctx) ) {
				case 1:
					{
					setState(6843);
					with_row_access_policy();
					}
					break;
				}
				setState(6847);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TAG || _la==WITH) {
					{
					setState(6846);
					with_tags();
					}
				}

				setState(6850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(6849);
					comment_clause();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6852);
				match(CREATE);
				setState(6854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6853);
					or_replace();
					}
				}

				setState(6856);
				match(EXTERNAL);
				setState(6857);
				match(TABLE);
				setState(6859);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,772,_ctx) ) {
				case 1:
					{
					setState(6858);
					if_not_exists();
					}
					break;
				}
				setState(6861);
				object_name();
				setState(6862);
				match(LR_BRACKET);
				setState(6863);
				external_table_column_decl_list();
				setState(6864);
				match(RR_BRACKET);
				setState(6866);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGRATION) {
					{
					setState(6865);
					cloud_provider_params3();
					}
				}

				setState(6869);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(6868);
					partition_by();
					}
				}

				setState(6872);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(6871);
					match(WITH);
					}
				}

				setState(6874);
				match(LOCATION);
				setState(6875);
				match(EQ);
				setState(6876);
				named_stage();
				setState(6877);
				match(PARTITION_TYPE);
				setState(6878);
				match(EQ);
				setState(6879);
				match(USER_SPECIFIED);
				setState(6880);
				file_format();
				setState(6884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE_FORMAT) {
					{
					setState(6881);
					match(TABLE_FORMAT);
					setState(6882);
					match(EQ);
					setState(6883);
					match(DELTA);
					}
				}

				setState(6887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COPY) {
					{
					setState(6886);
					copy_grants();
					}
				}

				setState(6890);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
				case 1:
					{
					setState(6889);
					with_row_access_policy();
					}
					break;
				}
				setState(6893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TAG || _la==WITH) {
					{
					setState(6892);
					with_tags();
					}
				}

				setState(6896);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(6895);
					comment_clause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class External_table_column_declContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Inline_constraintContext inline_constraint() {
			return getRuleContext(Inline_constraintContext.class,0);
		}
		public External_table_column_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_table_column_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterExternal_table_column_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitExternal_table_column_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitExternal_table_column_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_table_column_declContext external_table_column_decl() throws RecognitionException {
		External_table_column_declContext _localctx = new External_table_column_declContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_external_table_column_decl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6900);
			column_name();
			setState(6901);
			data_type();
			setState(6902);
			match(AS);
			setState(6905);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,782,_ctx) ) {
			case 1:
				{
				setState(6903);
				expr(0);
				}
				break;
			case 2:
				{
				setState(6904);
				id_();
				}
				break;
			}
			setState(6908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT || _la==FOREIGN || _la==PRIMARY || _la==UNIQUE) {
				{
				setState(6907);
				inline_constraint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class External_table_column_decl_listContext extends ParserRuleContext {
		public List<External_table_column_declContext> external_table_column_decl() {
			return getRuleContexts(External_table_column_declContext.class);
		}
		public External_table_column_declContext external_table_column_decl(int i) {
			return getRuleContext(External_table_column_declContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public External_table_column_decl_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_table_column_decl_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterExternal_table_column_decl_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitExternal_table_column_decl_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitExternal_table_column_decl_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_table_column_decl_listContext external_table_column_decl_list() throws RecognitionException {
		External_table_column_decl_listContext _localctx = new External_table_column_decl_listContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_external_table_column_decl_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6910);
			external_table_column_decl();
			setState(6915);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6911);
				match(COMMA);
				setState(6912);
				external_table_column_decl();
				}
				}
				setState(6917);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Full_acctContext extends ParserRuleContext {
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode DOT() { return getToken(SnowflakeParser.DOT, 0); }
		public Full_acctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_acct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFull_acct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFull_acct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFull_acct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_acctContext full_acct() throws RecognitionException {
		Full_acctContext _localctx = new Full_acctContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_full_acct);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6918);
			id_();
			setState(6919);
			match(DOT);
			setState(6920);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Integration_type_nameContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(SnowflakeParser.SECURITY, 0); }
		public TerminalNode INTEGRATIONS() { return getToken(SnowflakeParser.INTEGRATIONS, 0); }
		public TerminalNode API() { return getToken(SnowflakeParser.API, 0); }
		public Integration_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_integration_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterIntegration_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitIntegration_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitIntegration_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Integration_type_nameContext integration_type_name() throws RecognitionException {
		Integration_type_nameContext _localctx = new Integration_type_nameContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_integration_type_name);
		try {
			setState(6926);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SECURITY:
				enterOuterAlt(_localctx, 1);
				{
				setState(6922);
				match(SECURITY);
				setState(6923);
				match(INTEGRATIONS);
				}
				break;
			case API:
				enterOuterAlt(_localctx, 2);
				{
				setState(6924);
				match(API);
				setState(6925);
				match(INTEGRATIONS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_failover_groupContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode FAILOVER() { return getToken(SnowflakeParser.FAILOVER, 0); }
		public TerminalNode GROUP() { return getToken(SnowflakeParser.GROUP, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode OBJECT_TYPES() { return getToken(SnowflakeParser.OBJECT_TYPES, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<Object_typeContext> object_type() {
			return getRuleContexts(Object_typeContext.class);
		}
		public Object_typeContext object_type(int i) {
			return getRuleContext(Object_typeContext.class,i);
		}
		public TerminalNode ALLOWED_ACCOUNTS() { return getToken(SnowflakeParser.ALLOWED_ACCOUNTS, 0); }
		public List<Full_acctContext> full_acct() {
			return getRuleContexts(Full_acctContext.class);
		}
		public Full_acctContext full_acct(int i) {
			return getRuleContext(Full_acctContext.class,i);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode ALLOWED_DATABASES() { return getToken(SnowflakeParser.ALLOWED_DATABASES, 0); }
		public TerminalNode ALLOWED_SHARES() { return getToken(SnowflakeParser.ALLOWED_SHARES, 0); }
		public TerminalNode ALLOWED_INTEGRATION_TYPES() { return getToken(SnowflakeParser.ALLOWED_INTEGRATION_TYPES, 0); }
		public List<Integration_type_nameContext> integration_type_name() {
			return getRuleContexts(Integration_type_nameContext.class);
		}
		public Integration_type_nameContext integration_type_name(int i) {
			return getRuleContext(Integration_type_nameContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(SnowflakeParser.IGNORE, 0); }
		public TerminalNode EDITION() { return getToken(SnowflakeParser.EDITION, 0); }
		public TerminalNode CHECK() { return getToken(SnowflakeParser.CHECK, 0); }
		public TerminalNode REPLICATION_SCHEDULE() { return getToken(SnowflakeParser.REPLICATION_SCHEDULE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public TerminalNode REPLICA() { return getToken(SnowflakeParser.REPLICA, 0); }
		public TerminalNode OF() { return getToken(SnowflakeParser.OF, 0); }
		public List<TerminalNode> DOT() { return getTokens(SnowflakeParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SnowflakeParser.DOT, i);
		}
		public Create_failover_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_failover_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_failover_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_failover_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_failover_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_failover_groupContext create_failover_group() throws RecognitionException {
		Create_failover_groupContext _localctx = new Create_failover_groupContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_create_failover_group);
		int _la;
		try {
			setState(7017);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6928);
				match(CREATE);
				setState(6929);
				match(FAILOVER);
				setState(6930);
				match(GROUP);
				setState(6932);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
				case 1:
					{
					setState(6931);
					if_not_exists();
					}
					break;
				}
				setState(6934);
				id_();
				setState(6935);
				match(OBJECT_TYPES);
				setState(6936);
				match(EQ);
				setState(6937);
				object_type();
				setState(6942);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6938);
					match(COMMA);
					setState(6939);
					object_type();
					}
					}
					setState(6944);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6955);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALLOWED_DATABASES) {
					{
					setState(6945);
					match(ALLOWED_DATABASES);
					setState(6946);
					match(EQ);
					setState(6947);
					id_();
					setState(6952);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6948);
						match(COMMA);
						setState(6949);
						id_();
						}
						}
						setState(6954);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(6967);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALLOWED_SHARES) {
					{
					setState(6957);
					match(ALLOWED_SHARES);
					setState(6958);
					match(EQ);
					setState(6959);
					id_();
					setState(6964);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6960);
						match(COMMA);
						setState(6961);
						id_();
						}
						}
						setState(6966);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(6979);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALLOWED_INTEGRATION_TYPES) {
					{
					setState(6969);
					match(ALLOWED_INTEGRATION_TYPES);
					setState(6970);
					match(EQ);
					setState(6971);
					integration_type_name();
					setState(6976);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6972);
						match(COMMA);
						setState(6973);
						integration_type_name();
						}
						}
						setState(6978);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(6981);
				match(ALLOWED_ACCOUNTS);
				setState(6982);
				match(EQ);
				setState(6983);
				full_acct();
				setState(6988);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6984);
					match(COMMA);
					setState(6985);
					full_acct();
					}
					}
					setState(6990);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6994);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(6991);
					match(IGNORE);
					setState(6992);
					match(EDITION);
					setState(6993);
					match(CHECK);
					}
				}

				setState(6999);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REPLICATION_SCHEDULE) {
					{
					setState(6996);
					match(REPLICATION_SCHEDULE);
					setState(6997);
					match(EQ);
					setState(6998);
					string();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7001);
				match(CREATE);
				setState(7002);
				match(FAILOVER);
				setState(7003);
				match(GROUP);
				setState(7005);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
				case 1:
					{
					setState(7004);
					if_not_exists();
					}
					break;
				}
				setState(7007);
				id_();
				setState(7008);
				match(AS);
				setState(7009);
				match(REPLICA);
				setState(7010);
				match(OF);
				setState(7011);
				id_();
				setState(7012);
				match(DOT);
				setState(7013);
				id_();
				setState(7014);
				match(DOT);
				setState(7015);
				id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Type_fileformatContext extends ParserRuleContext {
		public TerminalNode CSV() { return getToken(SnowflakeParser.CSV, 0); }
		public TerminalNode JSON() { return getToken(SnowflakeParser.JSON, 0); }
		public TerminalNode AVRO() { return getToken(SnowflakeParser.AVRO, 0); }
		public TerminalNode ORC() { return getToken(SnowflakeParser.ORC, 0); }
		public TerminalNode PARQUET() { return getToken(SnowflakeParser.PARQUET, 0); }
		public TerminalNode XML() { return getToken(SnowflakeParser.XML, 0); }
		public TerminalNode CSV_Q() { return getToken(SnowflakeParser.CSV_Q, 0); }
		public TerminalNode JSON_Q() { return getToken(SnowflakeParser.JSON_Q, 0); }
		public TerminalNode AVRO_Q() { return getToken(SnowflakeParser.AVRO_Q, 0); }
		public TerminalNode ORC_Q() { return getToken(SnowflakeParser.ORC_Q, 0); }
		public TerminalNode PARQUET_Q() { return getToken(SnowflakeParser.PARQUET_Q, 0); }
		public TerminalNode XML_Q() { return getToken(SnowflakeParser.XML_Q, 0); }
		public Type_fileformatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_fileformat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterType_fileformat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitType_fileformat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitType_fileformat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_fileformatContext type_fileformat() throws RecognitionException {
		Type_fileformatContext _localctx = new Type_fileformatContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_type_fileformat);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7019);
			_la = _input.LA(1);
			if ( !(_la==AVRO || _la==AVRO_Q || _la==CSV || _la==CSV_Q || _la==JSON || _la==JSON_Q || ((((_la - 483)) & ~0x3f) == 0 && ((1L << (_la - 483)) & 98307L) != 0) || _la==XML || _la==XML_Q) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_file_formatContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode FILE() { return getToken(SnowflakeParser.FILE, 0); }
		public TerminalNode FORMAT() { return getToken(SnowflakeParser.FORMAT, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public Type_fileformatContext type_fileformat() {
			return getRuleContext(Type_fileformatContext.class,0);
		}
		public List<Format_type_optionsContext> format_type_options() {
			return getRuleContexts(Format_type_optionsContext.class);
		}
		public Format_type_optionsContext format_type_options(int i) {
			return getRuleContext(Format_type_optionsContext.class,i);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_file_formatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_file_format; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_file_format(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_file_format(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_file_format(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_file_formatContext create_file_format() throws RecognitionException {
		Create_file_formatContext _localctx = new Create_file_formatContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_create_file_format);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7021);
			match(CREATE);
			setState(7023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(7022);
				or_replace();
				}
			}

			setState(7025);
			match(FILE);
			setState(7026);
			match(FORMAT);
			setState(7028);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
			case 1:
				{
				setState(7027);
				if_not_exists();
				}
				break;
			}
			setState(7030);
			object_name();
			setState(7034);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE) {
				{
				setState(7031);
				match(TYPE);
				setState(7032);
				match(EQ);
				setState(7033);
				type_fileformat();
				}
			}

			setState(7039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALLOW_DUPLICATE || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 2251799813689859L) != 0) || ((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 7205918283424366593L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & 576462951326679059L) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 576478344489467905L) != 0) || ((((_la - 530)) & ~0x3f) == 0 && ((1L << (_la - 530)) & 35185512939521L) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & 246290604622035L) != 0) || ((((_la - 745)) & ~0x3f) == 0 && ((1L << (_la - 745)) & 268443649L) != 0) || _la==ZSTD) {
				{
				{
				setState(7036);
				format_type_options();
				}
				}
				setState(7041);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(7042);
				comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Arg_declContext extends ParserRuleContext {
		public Arg_nameContext arg_name() {
			return getRuleContext(Arg_nameContext.class,0);
		}
		public Arg_data_typeContext arg_data_type() {
			return getRuleContext(Arg_data_typeContext.class,0);
		}
		public Arg_default_value_clauseContext arg_default_value_clause() {
			return getRuleContext(Arg_default_value_clauseContext.class,0);
		}
		public Arg_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterArg_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitArg_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitArg_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arg_declContext arg_decl() throws RecognitionException {
		Arg_declContext _localctx = new Arg_declContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_arg_decl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7045);
			arg_name();
			setState(7046);
			arg_data_type();
			setState(7048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(7047);
				arg_default_value_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Arg_default_value_clauseContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SnowflakeParser.DEFAULT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Arg_default_value_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_default_value_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterArg_default_value_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitArg_default_value_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitArg_default_value_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arg_default_value_clauseContext arg_default_value_clause() throws RecognitionException {
		Arg_default_value_clauseContext _localctx = new Arg_default_value_clauseContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_arg_default_value_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7050);
			match(DEFAULT);
			setState(7051);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Col_declContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Virtual_column_declContext virtual_column_decl() {
			return getRuleContext(Virtual_column_declContext.class,0);
		}
		public Col_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_col_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCol_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCol_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCol_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Col_declContext col_decl() throws RecognitionException {
		Col_declContext _localctx = new Col_declContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_col_decl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7053);
			column_name();
			setState(7054);
			data_type();
			setState(7056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7055);
				virtual_column_decl();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Virtual_column_declContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Virtual_column_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_virtual_column_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterVirtual_column_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitVirtual_column_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitVirtual_column_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Virtual_column_declContext virtual_column_decl() throws RecognitionException {
		Virtual_column_declContext _localctx = new Virtual_column_declContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_virtual_column_decl);
		try {
			setState(7065);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,806,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7058);
				match(AS);
				setState(7059);
				match(LR_BRACKET);
				setState(7060);
				function_call();
				setState(7061);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7063);
				match(AS);
				setState(7064);
				function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_definitionContext extends ParserRuleContext {
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode DBL_DOLLAR() { return getToken(SnowflakeParser.DBL_DOLLAR, 0); }
		public Function_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFunction_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFunction_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFunction_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_definitionContext function_definition() throws RecognitionException {
		Function_definitionContext _localctx = new Function_definitionContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_function_definition);
		try {
			setState(7069);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7067);
				string();
				}
				break;
			case DBL_DOLLAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(7068);
				match(DBL_DOLLAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_functionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(SnowflakeParser.FUNCTION, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public List<TerminalNode> RETURNS() { return getTokens(SnowflakeParser.RETURNS); }
		public TerminalNode RETURNS(int i) {
			return getToken(SnowflakeParser.RETURNS, i);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public Function_definitionContext function_definition() {
			return getRuleContext(Function_definitionContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public TerminalNode SECURE() { return getToken(SnowflakeParser.SECURE, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public List<Arg_declContext> arg_decl() {
			return getRuleContexts(Arg_declContext.class);
		}
		public Arg_declContext arg_decl(int i) {
			return getRuleContext(Arg_declContext.class,i);
		}
		public Null_not_nullContext null_not_null() {
			return getRuleContext(Null_not_nullContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(SnowflakeParser.LANGUAGE, 0); }
		public TerminalNode CALLED() { return getToken(SnowflakeParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public List<TerminalNode> NULL_() { return getTokens(SnowflakeParser.NULL_); }
		public TerminalNode NULL_(int i) {
			return getToken(SnowflakeParser.NULL_, i);
		}
		public TerminalNode INPUT() { return getToken(SnowflakeParser.INPUT, 0); }
		public TerminalNode STRICT() { return getToken(SnowflakeParser.STRICT, 0); }
		public List<TerminalNode> PACKAGES() { return getTokens(SnowflakeParser.PACKAGES); }
		public TerminalNode PACKAGES(int i) {
			return getToken(SnowflakeParser.PACKAGES, i);
		}
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<String_listContext> string_list() {
			return getRuleContexts(String_listContext.class);
		}
		public String_listContext string_list(int i) {
			return getRuleContext(String_listContext.class,i);
		}
		public TerminalNode RUNTIME_VERSION() { return getToken(SnowflakeParser.RUNTIME_VERSION, 0); }
		public TerminalNode IMPORTS() { return getToken(SnowflakeParser.IMPORTS, 0); }
		public TerminalNode HANDLER() { return getToken(SnowflakeParser.HANDLER, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode JAVA() { return getToken(SnowflakeParser.JAVA, 0); }
		public TerminalNode PYTHON() { return getToken(SnowflakeParser.PYTHON, 0); }
		public TerminalNode JAVASCRIPT() { return getToken(SnowflakeParser.JAVASCRIPT, 0); }
		public TerminalNode SQL() { return getToken(SnowflakeParser.SQL, 0); }
		public TerminalNode VOLATILE() { return getToken(SnowflakeParser.VOLATILE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(SnowflakeParser.IMMUTABLE, 0); }
		public List<Col_declContext> col_decl() {
			return getRuleContexts(Col_declContext.class);
		}
		public Col_declContext col_decl(int i) {
			return getRuleContext(Col_declContext.class,i);
		}
		public TerminalNode FLOAT() { return getToken(SnowflakeParser.FLOAT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode MEMOIZABLE() { return getToken(SnowflakeParser.MEMOIZABLE, 0); }
		public Create_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_functionContext create_function() throws RecognitionException {
		Create_functionContext _localctx = new Create_functionContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_create_function);
		int _la;
		try {
			setState(7242);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,839,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7071);
				match(CREATE);
				setState(7073);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(7072);
					or_replace();
					}
				}

				setState(7076);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURE) {
					{
					setState(7075);
					match(SECURE);
					}
				}

				setState(7078);
				match(FUNCTION);
				setState(7080);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,810,_ctx) ) {
				case 1:
					{
					setState(7079);
					if_not_exists();
					}
					break;
				}
				setState(7082);
				object_name();
				setState(7083);
				match(LR_BRACKET);
				setState(7092);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(7084);
					arg_decl();
					setState(7089);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7085);
						match(COMMA);
						setState(7086);
						arg_decl();
						}
						}
						setState(7091);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(7094);
				match(RR_BRACKET);
				setState(7095);
				match(RETURNS);
				setState(7110);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
				case INT:
				case NUMBER:
				case OBJECT:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ:
				case TIMESTAMP_NTZ:
				case TIMESTAMP_TZ:
				case ARRAY:
				case BIGINT:
				case BINARY:
				case BOOLEAN:
				case BYTEINT:
				case CHAR_VARYING:
				case DATE:
				case DATETIME:
				case DECIMAL_:
				case DOUBLE:
				case DOUBLE_PRECISION:
				case FLOAT4:
				case FLOAT8:
				case FLOAT_:
				case GEOGRAPHY:
				case GEOMETRY:
				case INTEGER:
				case NCHAR:
				case NCHAR_VARYING:
				case NUMERIC:
				case NVARCHAR2:
				case NVARCHAR:
				case REAL_:
				case SMALLINT:
				case STRING_:
				case TEXT:
				case TINYINT:
				case VARBINARY:
				case VARCHAR:
				case VARIANT:
					{
					setState(7096);
					data_type();
					}
					break;
				case TABLE:
					{
					setState(7097);
					match(TABLE);
					setState(7098);
					match(LR_BRACKET);
					setState(7107);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(7099);
						col_decl();
						setState(7104);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(7100);
							match(COMMA);
							setState(7101);
							col_decl();
							}
							}
							setState(7106);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(7109);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7113);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT || _la==NULL_) {
					{
					setState(7112);
					null_not_null();
					}
				}

				setState(7117);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LANGUAGE) {
					{
					setState(7115);
					match(LANGUAGE);
					setState(7116);
					_la = _input.LA(1);
					if ( !(_la==JAVA || _la==JAVASCRIPT || _la==PYTHON || _la==SQL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7129);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
					{
					setState(7119);
					match(CALLED);
					setState(7120);
					match(ON);
					setState(7121);
					match(NULL_);
					setState(7122);
					match(INPUT);
					}
					break;
				case RETURNS:
					{
					setState(7123);
					match(RETURNS);
					setState(7124);
					match(NULL_);
					setState(7125);
					match(ON);
					setState(7126);
					match(NULL_);
					setState(7127);
					match(INPUT);
					}
					break;
				case STRICT:
					{
					setState(7128);
					match(STRICT);
					}
					break;
				case AS:
				case COMMENT:
				case HANDLER:
				case IMMUTABLE:
				case IMPORTS:
				case PACKAGES:
				case RUNTIME_VERSION:
				case VOLATILE:
					break;
				default:
					break;
				}
				setState(7132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IMMUTABLE || _la==VOLATILE) {
					{
					setState(7131);
					_la = _input.LA(1);
					if ( !(_la==IMMUTABLE || _la==VOLATILE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7140);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,820,_ctx) ) {
				case 1:
					{
					setState(7134);
					match(PACKAGES);
					setState(7135);
					match(EQ);
					setState(7136);
					match(LR_BRACKET);
					setState(7137);
					string_list();
					setState(7138);
					match(RR_BRACKET);
					}
					break;
				}
				setState(7148);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RUNTIME_VERSION) {
					{
					setState(7142);
					match(RUNTIME_VERSION);
					setState(7143);
					match(EQ);
					setState(7146);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(7144);
						string();
						}
						break;
					case FLOAT:
						{
						setState(7145);
						match(FLOAT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(7156);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IMPORTS) {
					{
					setState(7150);
					match(IMPORTS);
					setState(7151);
					match(EQ);
					setState(7152);
					match(LR_BRACKET);
					setState(7153);
					string_list();
					setState(7154);
					match(RR_BRACKET);
					}
				}

				setState(7164);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PACKAGES) {
					{
					setState(7158);
					match(PACKAGES);
					setState(7159);
					match(EQ);
					setState(7160);
					match(LR_BRACKET);
					setState(7161);
					string_list();
					setState(7162);
					match(RR_BRACKET);
					}
				}

				setState(7169);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HANDLER) {
					{
					setState(7166);
					match(HANDLER);
					setState(7167);
					match(EQ);
					setState(7168);
					string();
					}
				}

				setState(7172);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(7171);
					comment_clause();
					}
				}

				setState(7174);
				match(AS);
				setState(7175);
				function_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7177);
				match(CREATE);
				setState(7179);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(7178);
					or_replace();
					}
				}

				setState(7182);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURE) {
					{
					setState(7181);
					match(SECURE);
					}
				}

				setState(7184);
				match(FUNCTION);
				setState(7185);
				object_name();
				setState(7186);
				match(LR_BRACKET);
				setState(7195);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(7187);
					arg_decl();
					setState(7192);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7188);
						match(COMMA);
						setState(7189);
						arg_decl();
						}
						}
						setState(7194);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(7197);
				match(RR_BRACKET);
				setState(7198);
				match(RETURNS);
				setState(7213);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
				case INT:
				case NUMBER:
				case OBJECT:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ:
				case TIMESTAMP_NTZ:
				case TIMESTAMP_TZ:
				case ARRAY:
				case BIGINT:
				case BINARY:
				case BOOLEAN:
				case BYTEINT:
				case CHAR_VARYING:
				case DATE:
				case DATETIME:
				case DECIMAL_:
				case DOUBLE:
				case DOUBLE_PRECISION:
				case FLOAT4:
				case FLOAT8:
				case FLOAT_:
				case GEOGRAPHY:
				case GEOMETRY:
				case INTEGER:
				case NCHAR:
				case NCHAR_VARYING:
				case NUMERIC:
				case NVARCHAR2:
				case NVARCHAR:
				case REAL_:
				case SMALLINT:
				case STRING_:
				case TEXT:
				case TINYINT:
				case VARBINARY:
				case VARCHAR:
				case VARIANT:
					{
					setState(7199);
					data_type();
					}
					break;
				case TABLE:
					{
					setState(7200);
					match(TABLE);
					setState(7201);
					match(LR_BRACKET);
					setState(7210);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(7202);
						col_decl();
						setState(7207);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(7203);
							match(COMMA);
							setState(7204);
							col_decl();
							}
							}
							setState(7209);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(7212);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7216);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT || _la==NULL_) {
					{
					setState(7215);
					null_not_null();
					}
				}

				setState(7228);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
					{
					setState(7218);
					match(CALLED);
					setState(7219);
					match(ON);
					setState(7220);
					match(NULL_);
					setState(7221);
					match(INPUT);
					}
					break;
				case RETURNS:
					{
					setState(7222);
					match(RETURNS);
					setState(7223);
					match(NULL_);
					setState(7224);
					match(ON);
					setState(7225);
					match(NULL_);
					setState(7226);
					match(INPUT);
					}
					break;
				case STRICT:
					{
					setState(7227);
					match(STRICT);
					}
					break;
				case AS:
				case COMMENT:
				case IMMUTABLE:
				case MEMOIZABLE:
				case VOLATILE:
					break;
				default:
					break;
				}
				setState(7231);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IMMUTABLE || _la==VOLATILE) {
					{
					setState(7230);
					_la = _input.LA(1);
					if ( !(_la==IMMUTABLE || _la==VOLATILE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7234);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MEMOIZABLE) {
					{
					setState(7233);
					match(MEMOIZABLE);
					}
				}

				setState(7237);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(7236);
					comment_clause();
					}
				}

				setState(7239);
				match(AS);
				setState(7240);
				function_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_managed_accountContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode MANAGED() { return getToken(SnowflakeParser.MANAGED, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode ADMIN_NAME() { return getToken(SnowflakeParser.ADMIN_NAME, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode ADMIN_PASSWORD() { return getToken(SnowflakeParser.ADMIN_PASSWORD, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public TerminalNode READER() { return getToken(SnowflakeParser.READER, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_managed_accountContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_managed_account; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_managed_account(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_managed_account(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_managed_account(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_managed_accountContext create_managed_account() throws RecognitionException {
		Create_managed_accountContext _localctx = new Create_managed_accountContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_create_managed_account);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7244);
			match(CREATE);
			setState(7245);
			match(MANAGED);
			setState(7246);
			match(ACCOUNT);
			setState(7247);
			id_();
			setState(7248);
			match(ADMIN_NAME);
			setState(7249);
			match(EQ);
			setState(7250);
			id_();
			setState(7251);
			match(COMMA);
			setState(7252);
			match(ADMIN_PASSWORD);
			setState(7253);
			match(EQ);
			setState(7254);
			string();
			setState(7255);
			match(COMMA);
			setState(7256);
			match(TYPE);
			setState(7257);
			match(EQ);
			setState(7258);
			match(READER);
			setState(7261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(7259);
				match(COMMA);
				setState(7260);
				comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_masking_policyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode MASKING() { return getToken(SnowflakeParser.MASKING, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public List<Arg_nameContext> arg_name() {
			return getRuleContexts(Arg_nameContext.class);
		}
		public Arg_nameContext arg_name(int i) {
			return getRuleContext(Arg_nameContext.class,i);
		}
		public List<Arg_data_typeContext> arg_data_type() {
			return getRuleContexts(Arg_data_typeContext.class);
		}
		public Arg_data_typeContext arg_data_type(int i) {
			return getRuleContext(Arg_data_typeContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode RETURNS() { return getToken(SnowflakeParser.RETURNS, 0); }
		public TerminalNode ARROW() { return getToken(SnowflakeParser.ARROW, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(SnowflakeParser.COMMA, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_masking_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_masking_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_masking_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_masking_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_masking_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_masking_policyContext create_masking_policy() throws RecognitionException {
		Create_masking_policyContext _localctx = new Create_masking_policyContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_create_masking_policy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7263);
			match(CREATE);
			setState(7265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(7264);
				or_replace();
				}
			}

			setState(7267);
			match(MASKING);
			setState(7268);
			match(POLICY);
			setState(7270);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,842,_ctx) ) {
			case 1:
				{
				setState(7269);
				if_not_exists();
				}
				break;
			}
			setState(7272);
			object_name();
			setState(7273);
			match(AS);
			setState(7274);
			match(LR_BRACKET);
			setState(7275);
			arg_name();
			setState(7276);
			arg_data_type();
			setState(7281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(7277);
				match(COMMA);
				setState(7278);
				arg_name();
				setState(7279);
				arg_data_type();
				}
			}

			setState(7283);
			match(RR_BRACKET);
			setState(7284);
			match(RETURNS);
			setState(7285);
			arg_data_type();
			setState(7286);
			match(ARROW);
			setState(7287);
			expr(0);
			setState(7289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(7288);
				comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Tag_declContext extends ParserRuleContext {
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Tag_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tag_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTag_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTag_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTag_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tag_declContext tag_decl() throws RecognitionException {
		Tag_declContext _localctx = new Tag_declContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_tag_decl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7291);
			object_name();
			setState(7292);
			match(EQ);
			setState(7293);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_list_in_parenthesesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Column_list_in_parenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_list_in_parentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterColumn_list_in_parentheses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitColumn_list_in_parentheses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitColumn_list_in_parentheses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_list_in_parenthesesContext column_list_in_parentheses() throws RecognitionException {
		Column_list_in_parenthesesContext _localctx = new Column_list_in_parenthesesContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_column_list_in_parentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7295);
			match(LR_BRACKET);
			setState(7296);
			column_list();
			setState(7297);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_materialized_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(SnowflakeParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(SnowflakeParser.VIEW, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public TerminalNode SECURE() { return getToken(SnowflakeParser.SECURE, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Column_list_with_commentContext column_list_with_comment() {
			return getRuleContext(Column_list_with_commentContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public List<View_colContext> view_col() {
			return getRuleContexts(View_colContext.class);
		}
		public View_colContext view_col(int i) {
			return getRuleContext(View_colContext.class,i);
		}
		public With_row_access_policyContext with_row_access_policy() {
			return getRuleContext(With_row_access_policyContext.class,0);
		}
		public With_tagsContext with_tags() {
			return getRuleContext(With_tagsContext.class,0);
		}
		public Copy_grantsContext copy_grants() {
			return getRuleContext(Copy_grantsContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Cluster_byContext cluster_by() {
			return getRuleContext(Cluster_byContext.class,0);
		}
		public Create_materialized_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_materialized_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_materialized_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_materialized_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_materialized_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_materialized_viewContext create_materialized_view() throws RecognitionException {
		Create_materialized_viewContext _localctx = new Create_materialized_viewContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_create_materialized_view);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7299);
			match(CREATE);
			setState(7301);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(7300);
				or_replace();
				}
			}

			setState(7304);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SECURE) {
				{
				setState(7303);
				match(SECURE);
				}
			}

			setState(7306);
			match(MATERIALIZED);
			setState(7307);
			match(VIEW);
			setState(7309);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,847,_ctx) ) {
			case 1:
				{
				setState(7308);
				if_not_exists();
				}
				break;
			}
			setState(7311);
			object_name();
			setState(7316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(7312);
				match(LR_BRACKET);
				setState(7313);
				column_list_with_comment();
				setState(7314);
				match(RR_BRACKET);
				}
			}

			setState(7321);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,849,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7318);
					view_col();
					}
					} 
				}
				setState(7323);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,849,_ctx);
			}
			setState(7325);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,850,_ctx) ) {
			case 1:
				{
				setState(7324);
				with_row_access_policy();
				}
				break;
			}
			setState(7328);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TAG || _la==WITH) {
				{
				setState(7327);
				with_tags();
				}
			}

			setState(7331);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COPY) {
				{
				setState(7330);
				copy_grants();
				}
			}

			setState(7334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(7333);
				comment_clause();
				}
			}

			setState(7337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTER) {
				{
				setState(7336);
				cluster_by();
				}
			}

			setState(7339);
			match(AS);
			setState(7340);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_network_policyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode NETWORK() { return getToken(SnowflakeParser.NETWORK, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode ALLOWED_IP_LIST() { return getToken(SnowflakeParser.ALLOWED_IP_LIST, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public List<String_listContext> string_list() {
			return getRuleContexts(String_listContext.class);
		}
		public String_listContext string_list(int i) {
			return getRuleContext(String_listContext.class,i);
		}
		public TerminalNode BLOCKED_IP_LIST() { return getToken(SnowflakeParser.BLOCKED_IP_LIST, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_network_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_network_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_network_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_network_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_network_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_network_policyContext create_network_policy() throws RecognitionException {
		Create_network_policyContext _localctx = new Create_network_policyContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_create_network_policy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7342);
			match(CREATE);
			setState(7344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(7343);
				or_replace();
				}
			}

			setState(7346);
			match(NETWORK);
			setState(7347);
			match(POLICY);
			setState(7348);
			id_();
			setState(7349);
			match(ALLOWED_IP_LIST);
			setState(7350);
			match(EQ);
			setState(7351);
			match(LR_BRACKET);
			setState(7353);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING) {
				{
				setState(7352);
				string_list();
				}
			}

			setState(7355);
			match(RR_BRACKET);
			setState(7363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCKED_IP_LIST) {
				{
				setState(7356);
				match(BLOCKED_IP_LIST);
				setState(7357);
				match(EQ);
				setState(7358);
				match(LR_BRACKET);
				setState(7360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STRING) {
					{
					setState(7359);
					string_list();
					}
				}

				setState(7362);
				match(RR_BRACKET);
				}
			}

			setState(7366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(7365);
				comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cloud_provider_params_autoContext extends ParserRuleContext {
		public TerminalNode NOTIFICATION_PROVIDER() { return getToken(SnowflakeParser.NOTIFICATION_PROVIDER, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode GCP_PUBSUB() { return getToken(SnowflakeParser.GCP_PUBSUB, 0); }
		public TerminalNode GCP_PUBSUB_SUBSCRIPTION_NAME() { return getToken(SnowflakeParser.GCP_PUBSUB_SUBSCRIPTION_NAME, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode AZURE_EVENT_GRID() { return getToken(SnowflakeParser.AZURE_EVENT_GRID, 0); }
		public TerminalNode AZURE_STORAGE_QUEUE_PRIMARY_URI() { return getToken(SnowflakeParser.AZURE_STORAGE_QUEUE_PRIMARY_URI, 0); }
		public TerminalNode AZURE_TENANT_ID() { return getToken(SnowflakeParser.AZURE_TENANT_ID, 0); }
		public Cloud_provider_params_autoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloud_provider_params_auto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCloud_provider_params_auto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCloud_provider_params_auto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCloud_provider_params_auto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cloud_provider_params_autoContext cloud_provider_params_auto() throws RecognitionException {
		Cloud_provider_params_autoContext _localctx = new Cloud_provider_params_autoContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_cloud_provider_params_auto);
		try {
			setState(7384);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,860,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7368);
				match(NOTIFICATION_PROVIDER);
				setState(7369);
				match(EQ);
				setState(7370);
				match(GCP_PUBSUB);
				setState(7371);
				match(GCP_PUBSUB_SUBSCRIPTION_NAME);
				setState(7372);
				match(EQ);
				setState(7373);
				string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7374);
				match(NOTIFICATION_PROVIDER);
				setState(7375);
				match(EQ);
				setState(7376);
				match(AZURE_EVENT_GRID);
				setState(7377);
				match(AZURE_STORAGE_QUEUE_PRIMARY_URI);
				setState(7378);
				match(EQ);
				setState(7379);
				string();
				setState(7380);
				match(AZURE_TENANT_ID);
				setState(7381);
				match(EQ);
				setState(7382);
				string();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cloud_provider_params_pushContext extends ParserRuleContext {
		public TerminalNode NOTIFICATION_PROVIDER() { return getToken(SnowflakeParser.NOTIFICATION_PROVIDER, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode AWS_SNS() { return getToken(SnowflakeParser.AWS_SNS, 0); }
		public TerminalNode AWS_SNS_TOPIC_ARN() { return getToken(SnowflakeParser.AWS_SNS_TOPIC_ARN, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode AWS_SNS_ROLE_ARN() { return getToken(SnowflakeParser.AWS_SNS_ROLE_ARN, 0); }
		public TerminalNode GCP_PUBSUB() { return getToken(SnowflakeParser.GCP_PUBSUB, 0); }
		public TerminalNode GCP_PUBSUB_TOPIC_NAME() { return getToken(SnowflakeParser.GCP_PUBSUB_TOPIC_NAME, 0); }
		public TerminalNode AZURE_EVENT_GRID() { return getToken(SnowflakeParser.AZURE_EVENT_GRID, 0); }
		public TerminalNode AZURE_EVENT_GRID_TOPIC_ENDPOINT() { return getToken(SnowflakeParser.AZURE_EVENT_GRID_TOPIC_ENDPOINT, 0); }
		public TerminalNode AZURE_TENANT_ID() { return getToken(SnowflakeParser.AZURE_TENANT_ID, 0); }
		public Cloud_provider_params_pushContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloud_provider_params_push; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCloud_provider_params_push(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCloud_provider_params_push(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCloud_provider_params_push(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cloud_provider_params_pushContext cloud_provider_params_push() throws RecognitionException {
		Cloud_provider_params_pushContext _localctx = new Cloud_provider_params_pushContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_cloud_provider_params_push);
		try {
			setState(7412);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7386);
				match(NOTIFICATION_PROVIDER);
				setState(7387);
				match(EQ);
				setState(7388);
				match(AWS_SNS);
				setState(7389);
				match(AWS_SNS_TOPIC_ARN);
				setState(7390);
				match(EQ);
				setState(7391);
				string();
				setState(7392);
				match(AWS_SNS_ROLE_ARN);
				setState(7393);
				match(EQ);
				setState(7394);
				string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7396);
				match(NOTIFICATION_PROVIDER);
				setState(7397);
				match(EQ);
				setState(7398);
				match(GCP_PUBSUB);
				setState(7399);
				match(GCP_PUBSUB_TOPIC_NAME);
				setState(7400);
				match(EQ);
				setState(7401);
				string();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7402);
				match(NOTIFICATION_PROVIDER);
				setState(7403);
				match(EQ);
				setState(7404);
				match(AZURE_EVENT_GRID);
				setState(7405);
				match(AZURE_EVENT_GRID_TOPIC_ENDPOINT);
				setState(7406);
				match(EQ);
				setState(7407);
				string();
				setState(7408);
				match(AZURE_TENANT_ID);
				setState(7409);
				match(EQ);
				setState(7410);
				string();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_notification_integrationContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode NOTIFICATION() { return getToken(SnowflakeParser.NOTIFICATION, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode ENABLED() { return getToken(SnowflakeParser.ENABLED, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public TerminalNode QUEUE() { return getToken(SnowflakeParser.QUEUE, 0); }
		public Cloud_provider_params_autoContext cloud_provider_params_auto() {
			return getRuleContext(Cloud_provider_params_autoContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode DIRECTION() { return getToken(SnowflakeParser.DIRECTION, 0); }
		public TerminalNode OUTBOUND() { return getToken(SnowflakeParser.OUTBOUND, 0); }
		public Cloud_provider_params_pushContext cloud_provider_params_push() {
			return getRuleContext(Cloud_provider_params_pushContext.class,0);
		}
		public Create_notification_integrationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_notification_integration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_notification_integration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_notification_integration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_notification_integration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_notification_integrationContext create_notification_integration() throws RecognitionException {
		Create_notification_integrationContext _localctx = new Create_notification_integrationContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_create_notification_integration);
		int _la;
		try {
			setState(7457);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7414);
				match(CREATE);
				setState(7416);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(7415);
					or_replace();
					}
				}

				setState(7418);
				match(NOTIFICATION);
				setState(7419);
				match(INTEGRATION);
				setState(7421);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,863,_ctx) ) {
				case 1:
					{
					setState(7420);
					if_not_exists();
					}
					break;
				}
				setState(7423);
				id_();
				setState(7424);
				match(ENABLED);
				setState(7425);
				match(EQ);
				setState(7426);
				true_false();
				setState(7427);
				match(TYPE);
				setState(7428);
				match(EQ);
				setState(7429);
				match(QUEUE);
				setState(7430);
				cloud_provider_params_auto();
				setState(7432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(7431);
					comment_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7434);
				match(CREATE);
				setState(7436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(7435);
					or_replace();
					}
				}

				setState(7438);
				match(NOTIFICATION);
				setState(7439);
				match(INTEGRATION);
				setState(7441);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,866,_ctx) ) {
				case 1:
					{
					setState(7440);
					if_not_exists();
					}
					break;
				}
				setState(7443);
				id_();
				setState(7444);
				match(ENABLED);
				setState(7445);
				match(EQ);
				setState(7446);
				true_false();
				setState(7447);
				match(DIRECTION);
				setState(7448);
				match(EQ);
				setState(7449);
				match(OUTBOUND);
				setState(7450);
				match(TYPE);
				setState(7451);
				match(EQ);
				setState(7452);
				match(QUEUE);
				setState(7453);
				cloud_provider_params_push();
				setState(7455);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(7454);
					comment_clause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_pipeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode PIPE() { return getToken(SnowflakeParser.PIPE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public Copy_into_tableContext copy_into_table() {
			return getRuleContext(Copy_into_tableContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode AUTO_INGEST() { return getToken(SnowflakeParser.AUTO_INGEST, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode ERROR_INTEGRATION() { return getToken(SnowflakeParser.ERROR_INTEGRATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode AWS_SNS_TOPIC() { return getToken(SnowflakeParser.AWS_SNS_TOPIC, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_pipeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_pipe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_pipe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_pipe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_pipe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_pipeContext create_pipe() throws RecognitionException {
		Create_pipeContext _localctx = new Create_pipeContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_create_pipe);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7459);
			match(CREATE);
			setState(7461);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(7460);
				or_replace();
				}
			}

			setState(7463);
			match(PIPE);
			setState(7465);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,870,_ctx) ) {
			case 1:
				{
				setState(7464);
				if_not_exists();
				}
				break;
			}
			setState(7467);
			object_name();
			setState(7471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTO_INGEST) {
				{
				setState(7468);
				match(AUTO_INGEST);
				setState(7469);
				match(EQ);
				setState(7470);
				true_false();
				}
			}

			setState(7476);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ERROR_INTEGRATION) {
				{
				setState(7473);
				match(ERROR_INTEGRATION);
				setState(7474);
				match(EQ);
				setState(7475);
				id_();
				}
			}

			setState(7481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AWS_SNS_TOPIC) {
				{
				setState(7478);
				match(AWS_SNS_TOPIC);
				setState(7479);
				match(EQ);
				setState(7480);
				string();
				}
			}

			setState(7486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTEGRATION) {
				{
				setState(7483);
				match(INTEGRATION);
				setState(7484);
				match(EQ);
				setState(7485);
				string();
				}
			}

			setState(7489);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(7488);
				comment_clause();
				}
			}

			setState(7491);
			match(AS);
			setState(7492);
			copy_into_table();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Caller_ownerContext extends ParserRuleContext {
		public TerminalNode CALLER() { return getToken(SnowflakeParser.CALLER, 0); }
		public TerminalNode OWNER() { return getToken(SnowflakeParser.OWNER, 0); }
		public Caller_ownerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caller_owner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCaller_owner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCaller_owner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCaller_owner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Caller_ownerContext caller_owner() throws RecognitionException {
		Caller_ownerContext _localctx = new Caller_ownerContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_caller_owner);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7494);
			_la = _input.LA(1);
			if ( !(_la==CALLER || _la==OWNER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Executa_asContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(SnowflakeParser.EXECUTE, 0); }
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public Caller_ownerContext caller_owner() {
			return getRuleContext(Caller_ownerContext.class,0);
		}
		public Executa_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executa_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterExecuta_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitExecuta_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitExecuta_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Executa_asContext executa_as() throws RecognitionException {
		Executa_asContext _localctx = new Executa_asContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_executa_as);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7496);
			match(EXECUTE);
			setState(7497);
			match(AS);
			setState(7498);
			caller_owner();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Procedure_definitionContext extends ParserRuleContext {
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode DBL_DOLLAR() { return getToken(SnowflakeParser.DBL_DOLLAR, 0); }
		public Procedure_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterProcedure_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitProcedure_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitProcedure_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_definitionContext procedure_definition() throws RecognitionException {
		Procedure_definitionContext _localctx = new Procedure_definitionContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_procedure_definition);
		try {
			setState(7502);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7500);
				string();
				}
				break;
			case DBL_DOLLAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(7501);
				match(DBL_DOLLAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Not_nullContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(SnowflakeParser.NOT, 0); }
		public TerminalNode NULL_() { return getToken(SnowflakeParser.NULL_, 0); }
		public Not_nullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not_null; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterNot_null(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitNot_null(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitNot_null(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Not_nullContext not_null() throws RecognitionException {
		Not_nullContext _localctx = new Not_nullContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_not_null);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7504);
			match(NOT);
			setState(7505);
			match(NULL_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_procedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(SnowflakeParser.PROCEDURE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public List<TerminalNode> RETURNS() { return getTokens(SnowflakeParser.RETURNS); }
		public TerminalNode RETURNS(int i) {
			return getToken(SnowflakeParser.RETURNS, i);
		}
		public TerminalNode LANGUAGE() { return getToken(SnowflakeParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(SnowflakeParser.SQL, 0); }
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public Procedure_definitionContext procedure_definition() {
			return getRuleContext(Procedure_definitionContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public List<Arg_declContext> arg_decl() {
			return getRuleContexts(Arg_declContext.class);
		}
		public Arg_declContext arg_decl(int i) {
			return getRuleContext(Arg_declContext.class,i);
		}
		public Not_nullContext not_null() {
			return getRuleContext(Not_nullContext.class,0);
		}
		public TerminalNode CALLED() { return getToken(SnowflakeParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public List<TerminalNode> NULL_() { return getTokens(SnowflakeParser.NULL_); }
		public TerminalNode NULL_(int i) {
			return getToken(SnowflakeParser.NULL_, i);
		}
		public TerminalNode INPUT() { return getToken(SnowflakeParser.INPUT, 0); }
		public TerminalNode STRICT() { return getToken(SnowflakeParser.STRICT, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Executa_asContext executa_as() {
			return getRuleContext(Executa_asContext.class,0);
		}
		public TerminalNode VOLATILE() { return getToken(SnowflakeParser.VOLATILE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(SnowflakeParser.IMMUTABLE, 0); }
		public List<Col_declContext> col_decl() {
			return getRuleContexts(Col_declContext.class);
		}
		public Col_declContext col_decl(int i) {
			return getRuleContext(Col_declContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode JAVASCRIPT() { return getToken(SnowflakeParser.JAVASCRIPT, 0); }
		public TerminalNode SECURE() { return getToken(SnowflakeParser.SECURE, 0); }
		public TerminalNode PYTHON() { return getToken(SnowflakeParser.PYTHON, 0); }
		public TerminalNode RUNTIME_VERSION() { return getToken(SnowflakeParser.RUNTIME_VERSION, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode PACKAGES() { return getToken(SnowflakeParser.PACKAGES, 0); }
		public List<String_listContext> string_list() {
			return getRuleContexts(String_listContext.class);
		}
		public String_listContext string_list(int i) {
			return getRuleContext(String_listContext.class,i);
		}
		public TerminalNode HANDLER() { return getToken(SnowflakeParser.HANDLER, 0); }
		public TerminalNode IMPORTS() { return getToken(SnowflakeParser.IMPORTS, 0); }
		public Create_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_procedureContext create_procedure() throws RecognitionException {
		Create_procedureContext _localctx = new Create_procedureContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_create_procedure);
		int _la;
		try {
			setState(7694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,908,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7507);
				match(CREATE);
				setState(7509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(7508);
					or_replace();
					}
				}

				setState(7511);
				match(PROCEDURE);
				setState(7512);
				object_name();
				setState(7513);
				match(LR_BRACKET);
				setState(7522);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(7514);
					arg_decl();
					setState(7519);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7515);
						match(COMMA);
						setState(7516);
						arg_decl();
						}
						}
						setState(7521);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(7524);
				match(RR_BRACKET);
				setState(7525);
				match(RETURNS);
				setState(7540);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
				case INT:
				case NUMBER:
				case OBJECT:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ:
				case TIMESTAMP_NTZ:
				case TIMESTAMP_TZ:
				case ARRAY:
				case BIGINT:
				case BINARY:
				case BOOLEAN:
				case BYTEINT:
				case CHAR_VARYING:
				case DATE:
				case DATETIME:
				case DECIMAL_:
				case DOUBLE:
				case DOUBLE_PRECISION:
				case FLOAT4:
				case FLOAT8:
				case FLOAT_:
				case GEOGRAPHY:
				case GEOMETRY:
				case INTEGER:
				case NCHAR:
				case NCHAR_VARYING:
				case NUMERIC:
				case NVARCHAR2:
				case NVARCHAR:
				case REAL_:
				case SMALLINT:
				case STRING_:
				case TEXT:
				case TINYINT:
				case VARBINARY:
				case VARCHAR:
				case VARIANT:
					{
					setState(7526);
					data_type();
					}
					break;
				case TABLE:
					{
					setState(7527);
					match(TABLE);
					setState(7528);
					match(LR_BRACKET);
					setState(7537);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(7529);
						col_decl();
						setState(7534);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(7530);
							match(COMMA);
							setState(7531);
							col_decl();
							}
							}
							setState(7536);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(7539);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7543);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(7542);
					not_null();
					}
				}

				setState(7545);
				match(LANGUAGE);
				setState(7546);
				match(SQL);
				setState(7557);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
					{
					setState(7547);
					match(CALLED);
					setState(7548);
					match(ON);
					setState(7549);
					match(NULL_);
					setState(7550);
					match(INPUT);
					}
					break;
				case RETURNS:
					{
					setState(7551);
					match(RETURNS);
					setState(7552);
					match(NULL_);
					setState(7553);
					match(ON);
					setState(7554);
					match(NULL_);
					setState(7555);
					match(INPUT);
					}
					break;
				case STRICT:
					{
					setState(7556);
					match(STRICT);
					}
					break;
				case AS:
				case COMMENT:
				case EXECUTE:
				case IMMUTABLE:
				case VOLATILE:
					break;
				default:
					break;
				}
				setState(7560);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IMMUTABLE || _la==VOLATILE) {
					{
					setState(7559);
					_la = _input.LA(1);
					if ( !(_la==IMMUTABLE || _la==VOLATILE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7563);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(7562);
					comment_clause();
					}
				}

				setState(7566);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXECUTE) {
					{
					setState(7565);
					executa_as();
					}
				}

				setState(7568);
				match(AS);
				setState(7569);
				procedure_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7571);
				match(CREATE);
				setState(7573);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(7572);
					or_replace();
					}
				}

				setState(7576);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURE) {
					{
					setState(7575);
					match(SECURE);
					}
				}

				setState(7578);
				match(PROCEDURE);
				setState(7579);
				object_name();
				setState(7580);
				match(LR_BRACKET);
				setState(7589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(7581);
					arg_decl();
					setState(7586);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7582);
						match(COMMA);
						setState(7583);
						arg_decl();
						}
						}
						setState(7588);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(7591);
				match(RR_BRACKET);
				setState(7592);
				match(RETURNS);
				setState(7593);
				data_type();
				setState(7595);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(7594);
					not_null();
					}
				}

				setState(7597);
				match(LANGUAGE);
				setState(7598);
				match(JAVASCRIPT);
				setState(7609);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
					{
					setState(7599);
					match(CALLED);
					setState(7600);
					match(ON);
					setState(7601);
					match(NULL_);
					setState(7602);
					match(INPUT);
					}
					break;
				case RETURNS:
					{
					setState(7603);
					match(RETURNS);
					setState(7604);
					match(NULL_);
					setState(7605);
					match(ON);
					setState(7606);
					match(NULL_);
					setState(7607);
					match(INPUT);
					}
					break;
				case STRICT:
					{
					setState(7608);
					match(STRICT);
					}
					break;
				case AS:
				case COMMENT:
				case EXECUTE:
				case IMMUTABLE:
				case VOLATILE:
					break;
				default:
					break;
				}
				setState(7612);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IMMUTABLE || _la==VOLATILE) {
					{
					setState(7611);
					_la = _input.LA(1);
					if ( !(_la==IMMUTABLE || _la==VOLATILE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(7614);
					comment_clause();
					}
				}

				setState(7618);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXECUTE) {
					{
					setState(7617);
					executa_as();
					}
				}

				setState(7620);
				match(AS);
				setState(7621);
				procedure_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7623);
				match(CREATE);
				setState(7625);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(7624);
					or_replace();
					}
				}

				setState(7628);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECURE) {
					{
					setState(7627);
					match(SECURE);
					}
				}

				setState(7630);
				match(PROCEDURE);
				setState(7631);
				object_name();
				setState(7632);
				match(LR_BRACKET);
				setState(7641);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(7633);
					arg_decl();
					setState(7638);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7634);
						match(COMMA);
						setState(7635);
						arg_decl();
						}
						}
						setState(7640);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(7643);
				match(RR_BRACKET);
				setState(7644);
				match(RETURNS);
				setState(7662);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHAR:
				case CHARACTER:
				case INT:
				case NUMBER:
				case OBJECT:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ:
				case TIMESTAMP_NTZ:
				case TIMESTAMP_TZ:
				case ARRAY:
				case BIGINT:
				case BINARY:
				case BOOLEAN:
				case BYTEINT:
				case CHAR_VARYING:
				case DATE:
				case DATETIME:
				case DECIMAL_:
				case DOUBLE:
				case DOUBLE_PRECISION:
				case FLOAT4:
				case FLOAT8:
				case FLOAT_:
				case GEOGRAPHY:
				case GEOMETRY:
				case INTEGER:
				case NCHAR:
				case NCHAR_VARYING:
				case NUMERIC:
				case NVARCHAR2:
				case NVARCHAR:
				case REAL_:
				case SMALLINT:
				case STRING_:
				case TEXT:
				case TINYINT:
				case VARBINARY:
				case VARCHAR:
				case VARIANT:
					{
					setState(7645);
					data_type();
					setState(7647);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(7646);
						not_null();
						}
					}

					}
					break;
				case TABLE:
					{
					setState(7649);
					match(TABLE);
					setState(7650);
					match(LR_BRACKET);
					setState(7659);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(7651);
						col_decl();
						setState(7656);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(7652);
							match(COMMA);
							setState(7653);
							col_decl();
							}
							}
							setState(7658);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(7661);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7664);
				match(LANGUAGE);
				setState(7665);
				match(PYTHON);
				setState(7666);
				match(RUNTIME_VERSION);
				setState(7667);
				match(EQ);
				setState(7668);
				string();
				setState(7675);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IMPORTS) {
					{
					setState(7669);
					match(IMPORTS);
					setState(7670);
					match(EQ);
					setState(7671);
					match(LR_BRACKET);
					setState(7672);
					string_list();
					setState(7673);
					match(RR_BRACKET);
					}
				}

				setState(7677);
				match(PACKAGES);
				setState(7678);
				match(EQ);
				setState(7679);
				match(LR_BRACKET);
				setState(7680);
				string_list();
				setState(7681);
				match(RR_BRACKET);
				setState(7682);
				match(HANDLER);
				setState(7683);
				match(EQ);
				setState(7684);
				string();
				setState(7686);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(7685);
					comment_clause();
					}
				}

				setState(7689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXECUTE) {
					{
					setState(7688);
					executa_as();
					}
				}

				setState(7691);
				match(AS);
				setState(7692);
				procedure_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_replication_groupContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode REPLICATION() { return getToken(SnowflakeParser.REPLICATION, 0); }
		public TerminalNode GROUP() { return getToken(SnowflakeParser.GROUP, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode OBJECT_TYPES() { return getToken(SnowflakeParser.OBJECT_TYPES, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<Object_typeContext> object_type() {
			return getRuleContexts(Object_typeContext.class);
		}
		public Object_typeContext object_type(int i) {
			return getRuleContext(Object_typeContext.class,i);
		}
		public TerminalNode ALLOWED_ACCOUNTS() { return getToken(SnowflakeParser.ALLOWED_ACCOUNTS, 0); }
		public List<Full_acctContext> full_acct() {
			return getRuleContexts(Full_acctContext.class);
		}
		public Full_acctContext full_acct(int i) {
			return getRuleContext(Full_acctContext.class,i);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode ALLOWED_DATABASES() { return getToken(SnowflakeParser.ALLOWED_DATABASES, 0); }
		public TerminalNode ALLOWED_SHARES() { return getToken(SnowflakeParser.ALLOWED_SHARES, 0); }
		public TerminalNode ALLOWED_INTEGRATION_TYPES() { return getToken(SnowflakeParser.ALLOWED_INTEGRATION_TYPES, 0); }
		public List<Integration_type_nameContext> integration_type_name() {
			return getRuleContexts(Integration_type_nameContext.class);
		}
		public Integration_type_nameContext integration_type_name(int i) {
			return getRuleContext(Integration_type_nameContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(SnowflakeParser.IGNORE, 0); }
		public TerminalNode EDITION() { return getToken(SnowflakeParser.EDITION, 0); }
		public TerminalNode CHECK() { return getToken(SnowflakeParser.CHECK, 0); }
		public TerminalNode REPLICATION_SCHEDULE() { return getToken(SnowflakeParser.REPLICATION_SCHEDULE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public TerminalNode REPLICA() { return getToken(SnowflakeParser.REPLICA, 0); }
		public TerminalNode OF() { return getToken(SnowflakeParser.OF, 0); }
		public List<TerminalNode> DOT() { return getTokens(SnowflakeParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SnowflakeParser.DOT, i);
		}
		public Create_replication_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_replication_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_replication_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_replication_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_replication_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_replication_groupContext create_replication_group() throws RecognitionException {
		Create_replication_groupContext _localctx = new Create_replication_groupContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_create_replication_group);
		int _la;
		try {
			setState(7785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,921,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7696);
				match(CREATE);
				setState(7697);
				match(REPLICATION);
				setState(7698);
				match(GROUP);
				setState(7700);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,909,_ctx) ) {
				case 1:
					{
					setState(7699);
					if_not_exists();
					}
					break;
				}
				setState(7702);
				id_();
				setState(7703);
				match(OBJECT_TYPES);
				setState(7704);
				match(EQ);
				setState(7705);
				object_type();
				setState(7710);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7706);
					match(COMMA);
					setState(7707);
					object_type();
					}
					}
					setState(7712);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALLOWED_DATABASES) {
					{
					setState(7713);
					match(ALLOWED_DATABASES);
					setState(7714);
					match(EQ);
					setState(7715);
					id_();
					setState(7720);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7716);
						match(COMMA);
						setState(7717);
						id_();
						}
						}
						setState(7722);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(7735);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALLOWED_SHARES) {
					{
					setState(7725);
					match(ALLOWED_SHARES);
					setState(7726);
					match(EQ);
					setState(7727);
					id_();
					setState(7732);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7728);
						match(COMMA);
						setState(7729);
						id_();
						}
						}
						setState(7734);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(7747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALLOWED_INTEGRATION_TYPES) {
					{
					setState(7737);
					match(ALLOWED_INTEGRATION_TYPES);
					setState(7738);
					match(EQ);
					setState(7739);
					integration_type_name();
					setState(7744);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7740);
						match(COMMA);
						setState(7741);
						integration_type_name();
						}
						}
						setState(7746);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(7749);
				match(ALLOWED_ACCOUNTS);
				setState(7750);
				match(EQ);
				setState(7751);
				full_acct();
				setState(7756);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7752);
					match(COMMA);
					setState(7753);
					full_acct();
					}
					}
					setState(7758);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7762);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE) {
					{
					setState(7759);
					match(IGNORE);
					setState(7760);
					match(EDITION);
					setState(7761);
					match(CHECK);
					}
				}

				setState(7767);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REPLICATION_SCHEDULE) {
					{
					setState(7764);
					match(REPLICATION_SCHEDULE);
					setState(7765);
					match(EQ);
					setState(7766);
					string();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7769);
				match(CREATE);
				setState(7770);
				match(REPLICATION);
				setState(7771);
				match(GROUP);
				setState(7773);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
				case 1:
					{
					setState(7772);
					if_not_exists();
					}
					break;
				}
				setState(7775);
				id_();
				setState(7776);
				match(AS);
				setState(7777);
				match(REPLICA);
				setState(7778);
				match(OF);
				setState(7779);
				id_();
				setState(7780);
				match(DOT);
				setState(7781);
				id_();
				setState(7782);
				match(DOT);
				setState(7783);
				id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_resource_monitorContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode RESOURCE() { return getToken(SnowflakeParser.RESOURCE, 0); }
		public TerminalNode MONITOR() { return getToken(SnowflakeParser.MONITOR, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public Credit_quotaContext credit_quota() {
			return getRuleContext(Credit_quotaContext.class,0);
		}
		public FrequencyContext frequency() {
			return getRuleContext(FrequencyContext.class,0);
		}
		public TerminalNode START_TIMESTAMP() { return getToken(SnowflakeParser.START_TIMESTAMP, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode END_TIMESTAMP() { return getToken(SnowflakeParser.END_TIMESTAMP, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public Notify_usersContext notify_users() {
			return getRuleContext(Notify_usersContext.class,0);
		}
		public TerminalNode TRIGGERS() { return getToken(SnowflakeParser.TRIGGERS, 0); }
		public TerminalNode IMMEDIATELY() { return getToken(SnowflakeParser.IMMEDIATELY, 0); }
		public List<Trigger_definitionContext> trigger_definition() {
			return getRuleContexts(Trigger_definitionContext.class);
		}
		public Trigger_definitionContext trigger_definition(int i) {
			return getRuleContext(Trigger_definitionContext.class,i);
		}
		public Create_resource_monitorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_resource_monitor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_resource_monitor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_resource_monitor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_resource_monitor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_resource_monitorContext create_resource_monitor() throws RecognitionException {
		Create_resource_monitorContext _localctx = new Create_resource_monitorContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_create_resource_monitor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7787);
			match(CREATE);
			setState(7789);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(7788);
				or_replace();
				}
			}

			setState(7791);
			match(RESOURCE);
			setState(7792);
			match(MONITOR);
			setState(7793);
			id_();
			setState(7794);
			match(WITH);
			setState(7796);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CREDIT_QUOTA) {
				{
				setState(7795);
				credit_quota();
				}
			}

			setState(7799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FREQUENCY) {
				{
				setState(7798);
				frequency();
				}
			}

			setState(7807);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==START_TIMESTAMP) {
				{
				setState(7801);
				match(START_TIMESTAMP);
				setState(7802);
				match(EQ);
				setState(7805);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(7803);
					string();
					}
					break;
				case IMMEDIATELY:
					{
					setState(7804);
					match(IMMEDIATELY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(7812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==END_TIMESTAMP) {
				{
				setState(7809);
				match(END_TIMESTAMP);
				setState(7810);
				match(EQ);
				setState(7811);
				string();
				}
			}

			setState(7815);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOTIFY_USERS) {
				{
				setState(7814);
				notify_users();
				}
			}

			setState(7823);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRIGGERS) {
				{
				setState(7817);
				match(TRIGGERS);
				setState(7819); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7818);
					trigger_definition();
					}
					}
					setState(7821); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ON );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_roleContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(SnowflakeParser.ROLE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public With_tagsContext with_tags() {
			return getRuleContext(With_tagsContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_roleContext create_role() throws RecognitionException {
		Create_roleContext _localctx = new Create_roleContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_create_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7825);
			match(CREATE);
			setState(7827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(7826);
				or_replace();
				}
			}

			setState(7829);
			match(ROLE);
			setState(7831);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,932,_ctx) ) {
			case 1:
				{
				setState(7830);
				if_not_exists();
				}
				break;
			}
			setState(7833);
			id_();
			setState(7835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TAG || _la==WITH) {
				{
				setState(7834);
				with_tags();
				}
			}

			setState(7838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(7837);
				comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_row_access_policyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode ROW() { return getToken(SnowflakeParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(SnowflakeParser.ACCESS, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public List<Arg_declContext> arg_decl() {
			return getRuleContexts(Arg_declContext.class);
		}
		public Arg_declContext arg_decl(int i) {
			return getRuleContext(Arg_declContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode RETURNS() { return getToken(SnowflakeParser.RETURNS, 0); }
		public TerminalNode BOOLEAN() { return getToken(SnowflakeParser.BOOLEAN, 0); }
		public TerminalNode ARROW() { return getToken(SnowflakeParser.ARROW, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_row_access_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_row_access_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_row_access_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_row_access_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_row_access_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_row_access_policyContext create_row_access_policy() throws RecognitionException {
		Create_row_access_policyContext _localctx = new Create_row_access_policyContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_create_row_access_policy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7840);
			match(CREATE);
			setState(7842);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(7841);
				or_replace();
				}
			}

			setState(7844);
			match(ROW);
			setState(7845);
			match(ACCESS);
			setState(7846);
			match(POLICY);
			setState(7848);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,936,_ctx) ) {
			case 1:
				{
				setState(7847);
				if_not_exists();
				}
				break;
			}
			setState(7850);
			id_();
			setState(7851);
			match(AS);
			setState(7852);
			match(LR_BRACKET);
			setState(7853);
			arg_decl();
			setState(7858);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7854);
				match(COMMA);
				setState(7855);
				arg_decl();
				}
				}
				setState(7860);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7861);
			match(RR_BRACKET);
			setState(7862);
			match(RETURNS);
			setState(7863);
			match(BOOLEAN);
			setState(7864);
			match(ARROW);
			setState(7865);
			expr(0);
			setState(7867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(7866);
				comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_schemaContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public TerminalNode TRANSIENT() { return getToken(SnowflakeParser.TRANSIENT, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Clone_at_beforeContext clone_at_before() {
			return getRuleContext(Clone_at_beforeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public TerminalNode MANAGED() { return getToken(SnowflakeParser.MANAGED, 0); }
		public TerminalNode ACCESS() { return getToken(SnowflakeParser.ACCESS, 0); }
		public TerminalNode DATA_RETENTION_TIME_IN_DAYS() { return getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<NumContext> num() {
			return getRuleContexts(NumContext.class);
		}
		public NumContext num(int i) {
			return getRuleContext(NumContext.class,i);
		}
		public TerminalNode MAX_DATA_EXTENSION_TIME_IN_DAYS() { return getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0); }
		public Default_ddl_collationContext default_ddl_collation() {
			return getRuleContext(Default_ddl_collationContext.class,0);
		}
		public With_tagsContext with_tags() {
			return getRuleContext(With_tagsContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_schemaContext create_schema() throws RecognitionException {
		Create_schemaContext _localctx = new Create_schemaContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_create_schema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7869);
			match(CREATE);
			setState(7871);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(7870);
				or_replace();
				}
			}

			setState(7874);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSIENT) {
				{
				setState(7873);
				match(TRANSIENT);
				}
			}

			setState(7876);
			match(SCHEMA);
			setState(7878);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
			case 1:
				{
				setState(7877);
				if_not_exists();
				}
				break;
			}
			setState(7880);
			schema_name();
			setState(7882);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLONE) {
				{
				setState(7881);
				clone_at_before();
				}
			}

			setState(7887);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,943,_ctx) ) {
			case 1:
				{
				setState(7884);
				match(WITH);
				setState(7885);
				match(MANAGED);
				setState(7886);
				match(ACCESS);
				}
				break;
			}
			setState(7892);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATA_RETENTION_TIME_IN_DAYS) {
				{
				setState(7889);
				match(DATA_RETENTION_TIME_IN_DAYS);
				setState(7890);
				match(EQ);
				setState(7891);
				num();
				}
			}

			setState(7897);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_DATA_EXTENSION_TIME_IN_DAYS) {
				{
				setState(7894);
				match(MAX_DATA_EXTENSION_TIME_IN_DAYS);
				setState(7895);
				match(EQ);
				setState(7896);
				num();
				}
			}

			setState(7900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_DDL_COLLATION_) {
				{
				setState(7899);
				default_ddl_collation();
				}
			}

			setState(7903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TAG || _la==WITH) {
				{
				setState(7902);
				with_tags();
				}
			}

			setState(7906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(7905);
				comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_security_integration_external_oauthContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode SECURITY() { return getToken(SnowflakeParser.SECURITY, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode EXTERNAL_OAUTH() { return getToken(SnowflakeParser.EXTERNAL_OAUTH, 0); }
		public TerminalNode ENABLED() { return getToken(SnowflakeParser.ENABLED, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode EXTERNAL_OAUTH_TYPE() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_TYPE, 0); }
		public TerminalNode EXTERNAL_OAUTH_ISSUER() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_ISSUER, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM, 0); }
		public TerminalNode EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE, 0); }
		public TerminalNode OKTA() { return getToken(SnowflakeParser.OKTA, 0); }
		public TerminalNode AZURE() { return getToken(SnowflakeParser.AZURE, 0); }
		public TerminalNode PING_FEDERATE() { return getToken(SnowflakeParser.PING_FEDERATE, 0); }
		public TerminalNode CUSTOM() { return getToken(SnowflakeParser.CUSTOM, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<String_listContext> string_list() {
			return getRuleContexts(String_listContext.class);
		}
		public String_listContext string_list(int i) {
			return getRuleContext(String_listContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public List<TerminalNode> EXTERNAL_OAUTH_JWS_KEYS_URL() { return getTokens(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL); }
		public TerminalNode EXTERNAL_OAUTH_JWS_KEYS_URL(int i) {
			return getToken(SnowflakeParser.EXTERNAL_OAUTH_JWS_KEYS_URL, i);
		}
		public TerminalNode EXTERNAL_OAUTH_BLOCKED_ROLES_LIST() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_BLOCKED_ROLES_LIST, 0); }
		public TerminalNode EXTERNAL_OAUTH_ALLOWED_ROLES_LIST() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_ALLOWED_ROLES_LIST, 0); }
		public TerminalNode EXTERNAL_OAUTH_RSA_PUBLIC_KEY() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY, 0); }
		public TerminalNode EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2, 0); }
		public TerminalNode EXTERNAL_OAUTH_AUDIENCE_LIST() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_AUDIENCE_LIST, 0); }
		public TerminalNode EXTERNAL_OAUTH_ANY_ROLE_MODE() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_ANY_ROLE_MODE, 0); }
		public TerminalNode EXTERNAL_OAUTH_SCOPE_DELIMITER() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_SCOPE_DELIMITER, 0); }
		public TerminalNode DISABLE() { return getToken(SnowflakeParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(SnowflakeParser.ENABLE, 0); }
		public TerminalNode ENABLE_FOR_PRIVILEGE() { return getToken(SnowflakeParser.ENABLE_FOR_PRIVILEGE, 0); }
		public Create_security_integration_external_oauthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_security_integration_external_oauth; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_security_integration_external_oauth(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_security_integration_external_oauth(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_security_integration_external_oauth(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_security_integration_external_oauthContext create_security_integration_external_oauth() throws RecognitionException {
		Create_security_integration_external_oauthContext _localctx = new Create_security_integration_external_oauthContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_create_security_integration_external_oauth);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7908);
			match(CREATE);
			setState(7910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(7909);
				or_replace();
				}
			}

			setState(7912);
			match(SECURITY);
			setState(7913);
			match(INTEGRATION);
			setState(7915);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,950,_ctx) ) {
			case 1:
				{
				setState(7914);
				if_not_exists();
				}
				break;
			}
			setState(7917);
			id_();
			setState(7918);
			match(TYPE);
			setState(7919);
			match(EQ);
			setState(7920);
			match(EXTERNAL_OAUTH);
			setState(7921);
			match(ENABLED);
			setState(7922);
			match(EQ);
			setState(7923);
			true_false();
			setState(7924);
			match(EXTERNAL_OAUTH_TYPE);
			setState(7925);
			match(EQ);
			setState(7926);
			_la = _input.LA(1);
			if ( !(_la==AZURE || _la==CUSTOM || _la==OKTA || _la==PING_FEDERATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7927);
			match(EXTERNAL_OAUTH_ISSUER);
			setState(7928);
			match(EQ);
			setState(7929);
			string();
			setState(7930);
			match(EXTERNAL_OAUTH_TOKEN_USER_MAPPING_CLAIM);
			setState(7931);
			match(EQ);
			setState(7937);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(7932);
				string();
				}
				break;
			case LR_BRACKET:
				{
				setState(7933);
				match(LR_BRACKET);
				setState(7934);
				string_list();
				setState(7935);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7939);
			match(EXTERNAL_OAUTH_SNOWFLAKE_USER_MAPPING_ATTRIBUTE);
			setState(7940);
			match(EQ);
			setState(7941);
			string();
			setState(7945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,952,_ctx) ) {
			case 1:
				{
				setState(7942);
				match(EXTERNAL_OAUTH_JWS_KEYS_URL);
				setState(7943);
				match(EQ);
				setState(7944);
				string();
				}
				break;
			}
			setState(7956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL_OAUTH_JWS_KEYS_URL) {
				{
				setState(7947);
				match(EXTERNAL_OAUTH_JWS_KEYS_URL);
				setState(7948);
				match(EQ);
				setState(7954);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(7949);
					string();
					}
					break;
				case LR_BRACKET:
					{
					setState(7950);
					match(LR_BRACKET);
					setState(7951);
					string_list();
					setState(7952);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(7964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL_OAUTH_BLOCKED_ROLES_LIST) {
				{
				setState(7958);
				match(EXTERNAL_OAUTH_BLOCKED_ROLES_LIST);
				setState(7959);
				match(EQ);
				setState(7960);
				match(LR_BRACKET);
				setState(7961);
				string_list();
				setState(7962);
				match(RR_BRACKET);
				}
			}

			setState(7972);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL_OAUTH_ALLOWED_ROLES_LIST) {
				{
				setState(7966);
				match(EXTERNAL_OAUTH_ALLOWED_ROLES_LIST);
				setState(7967);
				match(EQ);
				setState(7968);
				match(LR_BRACKET);
				setState(7969);
				string_list();
				setState(7970);
				match(RR_BRACKET);
				}
			}

			setState(7977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL_OAUTH_RSA_PUBLIC_KEY) {
				{
				setState(7974);
				match(EXTERNAL_OAUTH_RSA_PUBLIC_KEY);
				setState(7975);
				match(EQ);
				setState(7976);
				string();
				}
			}

			setState(7982);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2) {
				{
				setState(7979);
				match(EXTERNAL_OAUTH_RSA_PUBLIC_KEY_2);
				setState(7980);
				match(EQ);
				setState(7981);
				string();
				}
			}

			setState(7990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL_OAUTH_AUDIENCE_LIST) {
				{
				setState(7984);
				match(EXTERNAL_OAUTH_AUDIENCE_LIST);
				setState(7985);
				match(EQ);
				setState(7986);
				match(LR_BRACKET);
				setState(7987);
				string();
				setState(7988);
				match(RR_BRACKET);
				}
			}

			setState(7995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL_OAUTH_ANY_ROLE_MODE) {
				{
				setState(7992);
				match(EXTERNAL_OAUTH_ANY_ROLE_MODE);
				setState(7993);
				match(EQ);
				setState(7994);
				_la = _input.LA(1);
				if ( !(((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & 327681L) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(8000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL_OAUTH_SCOPE_DELIMITER) {
				{
				setState(7997);
				match(EXTERNAL_OAUTH_SCOPE_DELIMITER);
				setState(7998);
				match(EQ);
				setState(7999);
				string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Implicit_noneContext extends ParserRuleContext {
		public TerminalNode IMPLICIT() { return getToken(SnowflakeParser.IMPLICIT, 0); }
		public TerminalNode NONE() { return getToken(SnowflakeParser.NONE, 0); }
		public Implicit_noneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicit_none; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterImplicit_none(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitImplicit_none(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitImplicit_none(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implicit_noneContext implicit_none() throws RecognitionException {
		Implicit_noneContext _localctx = new Implicit_noneContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_implicit_none);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8002);
			_la = _input.LA(1);
			if ( !(_la==IMPLICIT || _la==NONE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_security_integration_snowflake_oauthContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode SECURITY() { return getToken(SnowflakeParser.SECURITY, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode OAUTH() { return getToken(SnowflakeParser.OAUTH, 0); }
		public TerminalNode OAUTH_CLIENT() { return getToken(SnowflakeParser.OAUTH_CLIENT, 0); }
		public Partner_applicationContext partner_application() {
			return getRuleContext(Partner_applicationContext.class,0);
		}
		public TerminalNode OAUTH_REDIRECT_URI() { return getToken(SnowflakeParser.OAUTH_REDIRECT_URI, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Enabled_true_falseContext enabled_true_false() {
			return getRuleContext(Enabled_true_falseContext.class,0);
		}
		public TerminalNode OAUTH_ISSUE_REFRESH_TOKENS() { return getToken(SnowflakeParser.OAUTH_ISSUE_REFRESH_TOKENS, 0); }
		public List<True_falseContext> true_false() {
			return getRuleContexts(True_falseContext.class);
		}
		public True_falseContext true_false(int i) {
			return getRuleContext(True_falseContext.class,i);
		}
		public TerminalNode OAUTH_REFRESH_TOKEN_VALIDITY() { return getToken(SnowflakeParser.OAUTH_REFRESH_TOKEN_VALIDITY, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode OAUTH_USE_SECONDARY_ROLES() { return getToken(SnowflakeParser.OAUTH_USE_SECONDARY_ROLES, 0); }
		public Implicit_noneContext implicit_none() {
			return getRuleContext(Implicit_noneContext.class,0);
		}
		public TerminalNode BLOCKED_ROLES_LIST() { return getToken(SnowflakeParser.BLOCKED_ROLES_LIST, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<String_listContext> string_list() {
			return getRuleContexts(String_listContext.class);
		}
		public String_listContext string_list(int i) {
			return getRuleContext(String_listContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode CUSTOM() { return getToken(SnowflakeParser.CUSTOM, 0); }
		public TerminalNode OAUTH_ALLOW_NON_TLS_REDIRECT_URI() { return getToken(SnowflakeParser.OAUTH_ALLOW_NON_TLS_REDIRECT_URI, 0); }
		public TerminalNode OAUTH_ENFORCE_PKCE() { return getToken(SnowflakeParser.OAUTH_ENFORCE_PKCE, 0); }
		public TerminalNode PRE_AUTHORIZED_ROLES_LIST() { return getToken(SnowflakeParser.PRE_AUTHORIZED_ROLES_LIST, 0); }
		public Network_policyContext network_policy() {
			return getRuleContext(Network_policyContext.class,0);
		}
		public TerminalNode OAUTH_CLIENT_RSA_PUBLIC_KEY() { return getToken(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY, 0); }
		public TerminalNode OAUTH_CLIENT_RSA_PUBLIC_KEY_2() { return getToken(SnowflakeParser.OAUTH_CLIENT_RSA_PUBLIC_KEY_2, 0); }
		public Create_security_integration_snowflake_oauthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_security_integration_snowflake_oauth; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_security_integration_snowflake_oauth(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_security_integration_snowflake_oauth(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_security_integration_snowflake_oauth(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_security_integration_snowflake_oauthContext create_security_integration_snowflake_oauth() throws RecognitionException {
		Create_security_integration_snowflake_oauthContext _localctx = new Create_security_integration_snowflake_oauthContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_create_security_integration_snowflake_oauth);
		int _la;
		try {
			setState(8131);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,984,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8004);
				match(CREATE);
				setState(8006);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(8005);
					or_replace();
					}
				}

				setState(8008);
				match(SECURITY);
				setState(8009);
				match(INTEGRATION);
				setState(8011);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,963,_ctx) ) {
				case 1:
					{
					setState(8010);
					if_not_exists();
					}
					break;
				}
				setState(8013);
				id_();
				setState(8014);
				match(TYPE);
				setState(8015);
				match(EQ);
				setState(8016);
				match(OAUTH);
				setState(8017);
				match(OAUTH_CLIENT);
				setState(8018);
				match(EQ);
				setState(8019);
				partner_application();
				setState(8020);
				match(OAUTH_REDIRECT_URI);
				setState(8021);
				match(EQ);
				setState(8022);
				string();
				setState(8024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENABLED) {
					{
					setState(8023);
					enabled_true_false();
					}
				}

				setState(8029);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OAUTH_ISSUE_REFRESH_TOKENS) {
					{
					setState(8026);
					match(OAUTH_ISSUE_REFRESH_TOKENS);
					setState(8027);
					match(EQ);
					setState(8028);
					true_false();
					}
				}

				setState(8034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OAUTH_REFRESH_TOKEN_VALIDITY) {
					{
					setState(8031);
					match(OAUTH_REFRESH_TOKEN_VALIDITY);
					setState(8032);
					match(EQ);
					setState(8033);
					num();
					}
				}

				setState(8039);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OAUTH_USE_SECONDARY_ROLES) {
					{
					setState(8036);
					match(OAUTH_USE_SECONDARY_ROLES);
					setState(8037);
					match(EQ);
					setState(8038);
					implicit_none();
					}
				}

				setState(8047);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BLOCKED_ROLES_LIST) {
					{
					setState(8041);
					match(BLOCKED_ROLES_LIST);
					setState(8042);
					match(EQ);
					setState(8043);
					match(LR_BRACKET);
					setState(8044);
					string_list();
					setState(8045);
					match(RR_BRACKET);
					}
				}

				setState(8050);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(8049);
					comment_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8052);
				match(CREATE);
				setState(8054);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(8053);
					or_replace();
					}
				}

				setState(8056);
				match(SECURITY);
				setState(8057);
				match(INTEGRATION);
				setState(8059);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,971,_ctx) ) {
				case 1:
					{
					setState(8058);
					if_not_exists();
					}
					break;
				}
				setState(8061);
				id_();
				setState(8062);
				match(TYPE);
				setState(8063);
				match(EQ);
				setState(8064);
				match(OAUTH);
				setState(8065);
				match(OAUTH_CLIENT);
				setState(8066);
				match(EQ);
				setState(8067);
				match(CUSTOM);
				setState(8068);
				match(OAUTH_REDIRECT_URI);
				setState(8069);
				match(EQ);
				setState(8070);
				string();
				setState(8072);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENABLED) {
					{
					setState(8071);
					enabled_true_false();
					}
				}

				setState(8077);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OAUTH_ALLOW_NON_TLS_REDIRECT_URI) {
					{
					setState(8074);
					match(OAUTH_ALLOW_NON_TLS_REDIRECT_URI);
					setState(8075);
					match(EQ);
					setState(8076);
					true_false();
					}
				}

				setState(8082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OAUTH_ENFORCE_PKCE) {
					{
					setState(8079);
					match(OAUTH_ENFORCE_PKCE);
					setState(8080);
					match(EQ);
					setState(8081);
					true_false();
					}
				}

				setState(8087);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OAUTH_USE_SECONDARY_ROLES) {
					{
					setState(8084);
					match(OAUTH_USE_SECONDARY_ROLES);
					setState(8085);
					match(EQ);
					setState(8086);
					implicit_none();
					}
				}

				setState(8095);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRE_AUTHORIZED_ROLES_LIST) {
					{
					setState(8089);
					match(PRE_AUTHORIZED_ROLES_LIST);
					setState(8090);
					match(EQ);
					setState(8091);
					match(LR_BRACKET);
					setState(8092);
					string_list();
					setState(8093);
					match(RR_BRACKET);
					}
				}

				setState(8103);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BLOCKED_ROLES_LIST) {
					{
					setState(8097);
					match(BLOCKED_ROLES_LIST);
					setState(8098);
					match(EQ);
					setState(8099);
					match(LR_BRACKET);
					setState(8100);
					string_list();
					setState(8101);
					match(RR_BRACKET);
					}
				}

				setState(8108);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OAUTH_ISSUE_REFRESH_TOKENS) {
					{
					setState(8105);
					match(OAUTH_ISSUE_REFRESH_TOKENS);
					setState(8106);
					match(EQ);
					setState(8107);
					true_false();
					}
				}

				setState(8113);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OAUTH_REFRESH_TOKEN_VALIDITY) {
					{
					setState(8110);
					match(OAUTH_REFRESH_TOKEN_VALIDITY);
					setState(8111);
					match(EQ);
					setState(8112);
					num();
					}
				}

				setState(8116);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NETWORK_POLICY) {
					{
					setState(8115);
					network_policy();
					}
				}

				setState(8121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OAUTH_CLIENT_RSA_PUBLIC_KEY) {
					{
					setState(8118);
					match(OAUTH_CLIENT_RSA_PUBLIC_KEY);
					setState(8119);
					match(EQ);
					setState(8120);
					string();
					}
				}

				setState(8126);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OAUTH_CLIENT_RSA_PUBLIC_KEY_2) {
					{
					setState(8123);
					match(OAUTH_CLIENT_RSA_PUBLIC_KEY_2);
					setState(8124);
					match(EQ);
					setState(8125);
					string();
					}
				}

				setState(8129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(8128);
					comment_clause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_security_integration_saml2Context extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode SECURITY() { return getToken(SnowflakeParser.SECURITY, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode SAML2() { return getToken(SnowflakeParser.SAML2, 0); }
		public Enabled_true_falseContext enabled_true_false() {
			return getRuleContext(Enabled_true_falseContext.class,0);
		}
		public TerminalNode SAML2_ISSUER() { return getToken(SnowflakeParser.SAML2_ISSUER, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode SAML2_SSO_URL() { return getToken(SnowflakeParser.SAML2_SSO_URL, 0); }
		public TerminalNode SAML2_PROVIDER() { return getToken(SnowflakeParser.SAML2_PROVIDER, 0); }
		public TerminalNode SAML2_X509_CERT() { return getToken(SnowflakeParser.SAML2_X509_CERT, 0); }
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode SAML2_SP_INITIATED_LOGIN_PAGE_LABEL() { return getToken(SnowflakeParser.SAML2_SP_INITIATED_LOGIN_PAGE_LABEL, 0); }
		public TerminalNode SAML2_ENABLE_SP_INITIATED() { return getToken(SnowflakeParser.SAML2_ENABLE_SP_INITIATED, 0); }
		public List<True_falseContext> true_false() {
			return getRuleContexts(True_falseContext.class);
		}
		public True_falseContext true_false(int i) {
			return getRuleContext(True_falseContext.class,i);
		}
		public TerminalNode SAML2_SNOWFLAKE_X509_CERT() { return getToken(SnowflakeParser.SAML2_SNOWFLAKE_X509_CERT, 0); }
		public TerminalNode SAML2_SIGN_REQUEST() { return getToken(SnowflakeParser.SAML2_SIGN_REQUEST, 0); }
		public TerminalNode SAML2_REQUESTED_NAMEID_FORMAT() { return getToken(SnowflakeParser.SAML2_REQUESTED_NAMEID_FORMAT, 0); }
		public TerminalNode SAML2_POST_LOGOUT_REDIRECT_URL() { return getToken(SnowflakeParser.SAML2_POST_LOGOUT_REDIRECT_URL, 0); }
		public TerminalNode SAML2_FORCE_AUTHN() { return getToken(SnowflakeParser.SAML2_FORCE_AUTHN, 0); }
		public TerminalNode SAML2_SNOWFLAKE_ISSUER_URL() { return getToken(SnowflakeParser.SAML2_SNOWFLAKE_ISSUER_URL, 0); }
		public TerminalNode SAML2_SNOWFLAKE_ACS_URL() { return getToken(SnowflakeParser.SAML2_SNOWFLAKE_ACS_URL, 0); }
		public Create_security_integration_saml2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_security_integration_saml2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_security_integration_saml2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_security_integration_saml2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_security_integration_saml2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_security_integration_saml2Context create_security_integration_saml2() throws RecognitionException {
		Create_security_integration_saml2Context _localctx = new Create_security_integration_saml2Context(_ctx, getState());
		enterRule(_localctx, 452, RULE_create_security_integration_saml2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8133);
			match(CREATE);
			setState(8135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(8134);
				or_replace();
				}
			}

			setState(8137);
			match(SECURITY);
			setState(8138);
			match(INTEGRATION);
			setState(8140);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(8139);
				if_not_exists();
				}
			}

			setState(8142);
			match(TYPE);
			setState(8143);
			match(EQ);
			setState(8144);
			match(SAML2);
			setState(8145);
			enabled_true_false();
			setState(8146);
			match(SAML2_ISSUER);
			setState(8147);
			match(EQ);
			setState(8148);
			string();
			setState(8149);
			match(SAML2_SSO_URL);
			setState(8150);
			match(EQ);
			setState(8151);
			string();
			setState(8152);
			match(SAML2_PROVIDER);
			setState(8153);
			match(EQ);
			setState(8154);
			string();
			setState(8155);
			match(SAML2_X509_CERT);
			setState(8156);
			match(EQ);
			setState(8157);
			string();
			setState(8161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAML2_SP_INITIATED_LOGIN_PAGE_LABEL) {
				{
				setState(8158);
				match(SAML2_SP_INITIATED_LOGIN_PAGE_LABEL);
				setState(8159);
				match(EQ);
				setState(8160);
				string();
				}
			}

			setState(8166);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAML2_ENABLE_SP_INITIATED) {
				{
				setState(8163);
				match(SAML2_ENABLE_SP_INITIATED);
				setState(8164);
				match(EQ);
				setState(8165);
				true_false();
				}
			}

			setState(8171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAML2_SNOWFLAKE_X509_CERT) {
				{
				setState(8168);
				match(SAML2_SNOWFLAKE_X509_CERT);
				setState(8169);
				match(EQ);
				setState(8170);
				string();
				}
			}

			setState(8176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAML2_SIGN_REQUEST) {
				{
				setState(8173);
				match(SAML2_SIGN_REQUEST);
				setState(8174);
				match(EQ);
				setState(8175);
				true_false();
				}
			}

			setState(8181);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAML2_REQUESTED_NAMEID_FORMAT) {
				{
				setState(8178);
				match(SAML2_REQUESTED_NAMEID_FORMAT);
				setState(8179);
				match(EQ);
				setState(8180);
				string();
				}
			}

			setState(8186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAML2_POST_LOGOUT_REDIRECT_URL) {
				{
				setState(8183);
				match(SAML2_POST_LOGOUT_REDIRECT_URL);
				setState(8184);
				match(EQ);
				setState(8185);
				string();
				}
			}

			setState(8191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAML2_FORCE_AUTHN) {
				{
				setState(8188);
				match(SAML2_FORCE_AUTHN);
				setState(8189);
				match(EQ);
				setState(8190);
				true_false();
				}
			}

			setState(8196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAML2_SNOWFLAKE_ISSUER_URL) {
				{
				setState(8193);
				match(SAML2_SNOWFLAKE_ISSUER_URL);
				setState(8194);
				match(EQ);
				setState(8195);
				string();
				}
			}

			setState(8201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAML2_SNOWFLAKE_ACS_URL) {
				{
				setState(8198);
				match(SAML2_SNOWFLAKE_ACS_URL);
				setState(8199);
				match(EQ);
				setState(8200);
				string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_security_integration_scimContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode SECURITY() { return getToken(SnowflakeParser.SECURITY, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode SCIM() { return getToken(SnowflakeParser.SCIM, 0); }
		public TerminalNode SCIM_CLIENT() { return getToken(SnowflakeParser.SCIM_CLIENT, 0); }
		public TerminalNode RUN_AS_ROLE() { return getToken(SnowflakeParser.RUN_AS_ROLE, 0); }
		public TerminalNode OKTA_Q() { return getToken(SnowflakeParser.OKTA_Q, 0); }
		public TerminalNode AZURE_Q() { return getToken(SnowflakeParser.AZURE_Q, 0); }
		public TerminalNode GENERIC_Q() { return getToken(SnowflakeParser.GENERIC_Q, 0); }
		public TerminalNode OKTA_PROVISIONER_Q() { return getToken(SnowflakeParser.OKTA_PROVISIONER_Q, 0); }
		public TerminalNode AAD_PROVISIONER_Q() { return getToken(SnowflakeParser.AAD_PROVISIONER_Q, 0); }
		public TerminalNode GENERIC_SCIM_PROVISIONER_Q() { return getToken(SnowflakeParser.GENERIC_SCIM_PROVISIONER_Q, 0); }
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Network_policyContext network_policy() {
			return getRuleContext(Network_policyContext.class,0);
		}
		public TerminalNode SYNC_PASSWORD() { return getToken(SnowflakeParser.SYNC_PASSWORD, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_security_integration_scimContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_security_integration_scim; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_security_integration_scim(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_security_integration_scim(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_security_integration_scim(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_security_integration_scimContext create_security_integration_scim() throws RecognitionException {
		Create_security_integration_scimContext _localctx = new Create_security_integration_scimContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_create_security_integration_scim);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8203);
			match(CREATE);
			setState(8205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(8204);
				or_replace();
				}
			}

			setState(8207);
			match(SECURITY);
			setState(8208);
			match(INTEGRATION);
			setState(8210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,997,_ctx) ) {
			case 1:
				{
				setState(8209);
				if_not_exists();
				}
				break;
			}
			setState(8212);
			id_();
			setState(8213);
			match(TYPE);
			setState(8214);
			match(EQ);
			setState(8215);
			match(SCIM);
			setState(8216);
			match(SCIM_CLIENT);
			setState(8217);
			match(EQ);
			setState(8218);
			_la = _input.LA(1);
			if ( !(_la==AZURE_Q || _la==GENERIC_Q || _la==OKTA_Q) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8219);
			match(RUN_AS_ROLE);
			setState(8220);
			match(EQ);
			setState(8221);
			_la = _input.LA(1);
			if ( !(_la==AAD_PROVISIONER_Q || _la==GENERIC_SCIM_PROVISIONER_Q || _la==OKTA_PROVISIONER_Q) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NETWORK_POLICY) {
				{
				setState(8222);
				network_policy();
				}
			}

			setState(8228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SYNC_PASSWORD) {
				{
				setState(8225);
				match(SYNC_PASSWORD);
				setState(8226);
				match(EQ);
				setState(8227);
				true_false();
				}
			}

			setState(8231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(8230);
				comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Network_policyContext extends ParserRuleContext {
		public TerminalNode NETWORK_POLICY() { return getToken(SnowflakeParser.NETWORK_POLICY, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Network_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterNetwork_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitNetwork_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitNetwork_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Network_policyContext network_policy() throws RecognitionException {
		Network_policyContext _localctx = new Network_policyContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_network_policy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8233);
			match(NETWORK_POLICY);
			setState(8234);
			match(EQ);
			setState(8235);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Partner_applicationContext extends ParserRuleContext {
		public TerminalNode TABLEAU_DESKTOP() { return getToken(SnowflakeParser.TABLEAU_DESKTOP, 0); }
		public TerminalNode TABLEAU_SERVER() { return getToken(SnowflakeParser.TABLEAU_SERVER, 0); }
		public TerminalNode LOOKER() { return getToken(SnowflakeParser.LOOKER, 0); }
		public Partner_applicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_application; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterPartner_application(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitPartner_application(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitPartner_application(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partner_applicationContext partner_application() throws RecognitionException {
		Partner_applicationContext _localctx = new Partner_applicationContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_partner_application);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8237);
			_la = _input.LA(1);
			if ( !(_la==LOOKER || _la==TABLEAU_DESKTOP || _la==TABLEAU_SERVER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Start_withContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(SnowflakeParser.START, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public Start_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterStart_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitStart_with(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitStart_with(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_withContext start_with() throws RecognitionException {
		Start_withContext _localctx = new Start_withContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_start_with);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8239);
			match(START);
			setState(8241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8240);
				match(WITH);
				}
			}

			setState(8244);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ) {
				{
				setState(8243);
				match(EQ);
				}
			}

			setState(8246);
			num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Increment_byContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(SnowflakeParser.INCREMENT, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode BY() { return getToken(SnowflakeParser.BY, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public Increment_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_increment_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterIncrement_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitIncrement_by(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitIncrement_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Increment_byContext increment_by() throws RecognitionException {
		Increment_byContext _localctx = new Increment_byContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_increment_by);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8248);
			match(INCREMENT);
			setState(8250);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(8249);
				match(BY);
				}
			}

			setState(8253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ) {
				{
				setState(8252);
				match(EQ);
				}
			}

			setState(8255);
			num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(SnowflakeParser.SEQUENCE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public Start_withContext start_with() {
			return getRuleContext(Start_withContext.class,0);
		}
		public Increment_byContext increment_by() {
			return getRuleContext(Increment_byContext.class,0);
		}
		public Order_noorderContext order_noorder() {
			return getRuleContext(Order_noorderContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8257);
			match(CREATE);
			setState(8259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(8258);
				or_replace();
				}
			}

			setState(8261);
			match(SEQUENCE);
			setState(8263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1006,_ctx) ) {
			case 1:
				{
				setState(8262);
				if_not_exists();
				}
				break;
			}
			setState(8265);
			object_name();
			setState(8267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8266);
				match(WITH);
				}
			}

			setState(8270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==START) {
				{
				setState(8269);
				start_with();
				}
			}

			setState(8273);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCREMENT) {
				{
				setState(8272);
				increment_by();
				}
			}

			setState(8276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOORDER || _la==ORDER) {
				{
				setState(8275);
				order_noorder();
				}
			}

			setState(8279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(8278);
				comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_session_policyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode SESSION() { return getToken(SnowflakeParser.SESSION, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public List<Session_policy_paramsContext> session_policy_params() {
			return getRuleContexts(Session_policy_paramsContext.class);
		}
		public Session_policy_paramsContext session_policy_params(int i) {
			return getRuleContext(Session_policy_paramsContext.class,i);
		}
		public Create_session_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_session_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_session_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_session_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_session_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_session_policyContext create_session_policy() throws RecognitionException {
		Create_session_policyContext _localctx = new Create_session_policyContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_create_session_policy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8281);
			match(CREATE);
			setState(8283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(8282);
				or_replace();
				}
			}

			setState(8285);
			match(SESSION);
			setState(8286);
			match(POLICY);
			setState(8288);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1013,_ctx) ) {
			case 1:
				{
				setState(8287);
				if_not_exists();
				}
				break;
			}
			setState(8290);
			object_name();
			setState(8294);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMENT || _la==SESSION_IDLE_TIMEOUT_MINS || _la==SESSION_UI_IDLE_TIMEOUT_MINS) {
				{
				{
				setState(8291);
				session_policy_params();
				}
				}
				setState(8296);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Session_policy_paramsContext extends ParserRuleContext {
		public Session_policy_param_nameContext session_policy_param_name() {
			return getRuleContext(Session_policy_param_nameContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Session_policy_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_session_policy_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSession_policy_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSession_policy_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSession_policy_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Session_policy_paramsContext session_policy_params() throws RecognitionException {
		Session_policy_paramsContext _localctx = new Session_policy_paramsContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_session_policy_params);
		try {
			setState(8302);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SESSION_IDLE_TIMEOUT_MINS:
			case SESSION_UI_IDLE_TIMEOUT_MINS:
				enterOuterAlt(_localctx, 1);
				{
				setState(8297);
				session_policy_param_name();
				setState(8298);
				match(EQ);
				setState(8299);
				num();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8301);
				comment_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Session_policy_param_nameContext extends ParserRuleContext {
		public TerminalNode SESSION_IDLE_TIMEOUT_MINS() { return getToken(SnowflakeParser.SESSION_IDLE_TIMEOUT_MINS, 0); }
		public TerminalNode SESSION_UI_IDLE_TIMEOUT_MINS() { return getToken(SnowflakeParser.SESSION_UI_IDLE_TIMEOUT_MINS, 0); }
		public Session_policy_param_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_session_policy_param_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSession_policy_param_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSession_policy_param_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSession_policy_param_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Session_policy_param_nameContext session_policy_param_name() throws RecognitionException {
		Session_policy_param_nameContext _localctx = new Session_policy_param_nameContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_session_policy_param_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8304);
			_la = _input.LA(1);
			if ( !(_la==SESSION_IDLE_TIMEOUT_MINS || _la==SESSION_UI_IDLE_TIMEOUT_MINS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_password_policyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode PASSWORD() { return getToken(SnowflakeParser.PASSWORD, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public List<Password_policy_paramsContext> password_policy_params() {
			return getRuleContexts(Password_policy_paramsContext.class);
		}
		public Password_policy_paramsContext password_policy_params(int i) {
			return getRuleContext(Password_policy_paramsContext.class,i);
		}
		public Create_password_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_password_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_password_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_password_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_password_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_password_policyContext create_password_policy() throws RecognitionException {
		Create_password_policyContext _localctx = new Create_password_policyContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_create_password_policy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8306);
			match(CREATE);
			setState(8308);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(8307);
				or_replace();
				}
			}

			setState(8310);
			match(PASSWORD);
			setState(8311);
			match(POLICY);
			setState(8313);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1017,_ctx) ) {
			case 1:
				{
				setState(8312);
				if_not_exists();
				}
				break;
			}
			setState(8315);
			object_name();
			setState(8319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMENT || ((((_la - 504)) & ~0x3f) == 0 && ((1L << (_la - 504)) & 2047L) != 0)) {
				{
				{
				setState(8316);
				password_policy_params();
				}
				}
				setState(8321);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Password_policy_paramsContext extends ParserRuleContext {
		public Password_policy_param_nameContext password_policy_param_name() {
			return getRuleContext(Password_policy_param_nameContext.class,0);
		}
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Password_policy_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_password_policy_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterPassword_policy_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitPassword_policy_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitPassword_policy_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Password_policy_paramsContext password_policy_params() throws RecognitionException {
		Password_policy_paramsContext _localctx = new Password_policy_paramsContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_password_policy_params);
		try {
			setState(8327);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PASSWORD_HISTORY:
			case PASSWORD_LOCKOUT_TIME_MINS:
			case PASSWORD_MAX_AGE_DAYS:
			case PASSWORD_MAX_LENGTH:
			case PASSWORD_MAX_RETRIES:
			case PASSWORD_MIN_AGE_DAYS:
			case PASSWORD_MIN_LENGTH:
			case PASSWORD_MIN_LOWER_CASE_CHARS:
			case PASSWORD_MIN_NUMERIC_CHARS:
			case PASSWORD_MIN_SPECIAL_CHARS:
			case PASSWORD_MIN_UPPER_CASE_CHARS:
				enterOuterAlt(_localctx, 1);
				{
				setState(8322);
				password_policy_param_name();
				setState(8323);
				match(EQ);
				setState(8324);
				num();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8326);
				comment_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Password_policy_param_nameContext extends ParserRuleContext {
		public TerminalNode PASSWORD_HISTORY() { return getToken(SnowflakeParser.PASSWORD_HISTORY, 0); }
		public TerminalNode PASSWORD_LOCKOUT_TIME_MINS() { return getToken(SnowflakeParser.PASSWORD_LOCKOUT_TIME_MINS, 0); }
		public TerminalNode PASSWORD_MAX_AGE_DAYS() { return getToken(SnowflakeParser.PASSWORD_MAX_AGE_DAYS, 0); }
		public TerminalNode PASSWORD_MAX_LENGTH() { return getToken(SnowflakeParser.PASSWORD_MAX_LENGTH, 0); }
		public TerminalNode PASSWORD_MAX_RETRIES() { return getToken(SnowflakeParser.PASSWORD_MAX_RETRIES, 0); }
		public TerminalNode PASSWORD_MIN_AGE_DAYS() { return getToken(SnowflakeParser.PASSWORD_MIN_AGE_DAYS, 0); }
		public TerminalNode PASSWORD_MIN_LENGTH() { return getToken(SnowflakeParser.PASSWORD_MIN_LENGTH, 0); }
		public TerminalNode PASSWORD_MIN_LOWER_CASE_CHARS() { return getToken(SnowflakeParser.PASSWORD_MIN_LOWER_CASE_CHARS, 0); }
		public TerminalNode PASSWORD_MIN_NUMERIC_CHARS() { return getToken(SnowflakeParser.PASSWORD_MIN_NUMERIC_CHARS, 0); }
		public TerminalNode PASSWORD_MIN_SPECIAL_CHARS() { return getToken(SnowflakeParser.PASSWORD_MIN_SPECIAL_CHARS, 0); }
		public TerminalNode PASSWORD_MIN_UPPER_CASE_CHARS() { return getToken(SnowflakeParser.PASSWORD_MIN_UPPER_CASE_CHARS, 0); }
		public Password_policy_param_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_password_policy_param_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterPassword_policy_param_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitPassword_policy_param_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitPassword_policy_param_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Password_policy_param_nameContext password_policy_param_name() throws RecognitionException {
		Password_policy_param_nameContext _localctx = new Password_policy_param_nameContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_password_policy_param_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8329);
			_la = _input.LA(1);
			if ( !(((((_la - 504)) & ~0x3f) == 0 && ((1L << (_la - 504)) & 2047L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_shareContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode SHARE() { return getToken(SnowflakeParser.SHARE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_shareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_share; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_share(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_share(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_share(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_shareContext create_share() throws RecognitionException {
		Create_shareContext _localctx = new Create_shareContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_create_share);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8331);
			match(CREATE);
			setState(8333);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(8332);
				or_replace();
				}
			}

			setState(8335);
			match(SHARE);
			setState(8336);
			id_();
			setState(8338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(8337);
				comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharacterContext extends ParserRuleContext {
		public TerminalNode CHAR_LITERAL() { return getToken(SnowflakeParser.CHAR_LITERAL, 0); }
		public TerminalNode AAD_PROVISIONER_Q() { return getToken(SnowflakeParser.AAD_PROVISIONER_Q, 0); }
		public TerminalNode ARRAY_Q() { return getToken(SnowflakeParser.ARRAY_Q, 0); }
		public TerminalNode AUTO_Q() { return getToken(SnowflakeParser.AUTO_Q, 0); }
		public TerminalNode AVRO_Q() { return getToken(SnowflakeParser.AVRO_Q, 0); }
		public TerminalNode AZURE_CSE_Q() { return getToken(SnowflakeParser.AZURE_CSE_Q, 0); }
		public TerminalNode AZURE_Q() { return getToken(SnowflakeParser.AZURE_Q, 0); }
		public TerminalNode BOTH_Q() { return getToken(SnowflakeParser.BOTH_Q, 0); }
		public TerminalNode CSV_Q() { return getToken(SnowflakeParser.CSV_Q, 0); }
		public TerminalNode GCS_SSE_KMS_Q() { return getToken(SnowflakeParser.GCS_SSE_KMS_Q, 0); }
		public TerminalNode GENERIC_Q() { return getToken(SnowflakeParser.GENERIC_Q, 0); }
		public TerminalNode GENERIC_SCIM_PROVISIONER_Q() { return getToken(SnowflakeParser.GENERIC_SCIM_PROVISIONER_Q, 0); }
		public TerminalNode JSON_Q() { return getToken(SnowflakeParser.JSON_Q, 0); }
		public TerminalNode NONE_Q() { return getToken(SnowflakeParser.NONE_Q, 0); }
		public TerminalNode OBJECT_Q() { return getToken(SnowflakeParser.OBJECT_Q, 0); }
		public TerminalNode OKTA_PROVISIONER_Q() { return getToken(SnowflakeParser.OKTA_PROVISIONER_Q, 0); }
		public TerminalNode OKTA_Q() { return getToken(SnowflakeParser.OKTA_Q, 0); }
		public TerminalNode ORC_Q() { return getToken(SnowflakeParser.ORC_Q, 0); }
		public TerminalNode PARQUET_Q() { return getToken(SnowflakeParser.PARQUET_Q, 0); }
		public TerminalNode S3() { return getToken(SnowflakeParser.S3, 0); }
		public TerminalNode SNOWPARK_OPTIMIZED() { return getToken(SnowflakeParser.SNOWPARK_OPTIMIZED, 0); }
		public TerminalNode XML_Q() { return getToken(SnowflakeParser.XML_Q, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterContext character() throws RecognitionException {
		CharacterContext _localctx = new CharacterContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_character);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8340);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4612811918334230530L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1048585L) != 0) || _la==CSV_Q || ((((_la - 288)) & ~0x3f) == 0 && ((1L << (_la - 288)) & 7L) != 0) || _la==JSON_Q || ((((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & 1126003522928641L) != 0) || _la==PARQUET_Q || _la==S3 || _la==SNOWPARK_OPTIMIZED || ((((_la - 831)) & ~0x3f) == 0 && ((1L << (_la - 831)) & 1152921504606847233L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Format_type_optionsContext extends ParserRuleContext {
		public TerminalNode COMPRESSION() { return getToken(SnowflakeParser.COMPRESSION, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode AUTO() { return getToken(SnowflakeParser.AUTO, 0); }
		public TerminalNode GZIP() { return getToken(SnowflakeParser.GZIP, 0); }
		public TerminalNode BZ2() { return getToken(SnowflakeParser.BZ2, 0); }
		public TerminalNode BROTLI() { return getToken(SnowflakeParser.BROTLI, 0); }
		public TerminalNode ZSTD() { return getToken(SnowflakeParser.ZSTD, 0); }
		public TerminalNode DEFLATE() { return getToken(SnowflakeParser.DEFLATE, 0); }
		public TerminalNode RAW_DEFLATE() { return getToken(SnowflakeParser.RAW_DEFLATE, 0); }
		public TerminalNode NONE() { return getToken(SnowflakeParser.NONE, 0); }
		public TerminalNode AUTO_Q() { return getToken(SnowflakeParser.AUTO_Q, 0); }
		public TerminalNode RECORD_DELIMITER() { return getToken(SnowflakeParser.RECORD_DELIMITER, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode FIELD_DELIMITER() { return getToken(SnowflakeParser.FIELD_DELIMITER, 0); }
		public TerminalNode FILE_EXTENSION() { return getToken(SnowflakeParser.FILE_EXTENSION, 0); }
		public TerminalNode SKIP_HEADER() { return getToken(SnowflakeParser.SKIP_HEADER, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode SKIP_BLANK_LINES() { return getToken(SnowflakeParser.SKIP_BLANK_LINES, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode DATE_FORMAT() { return getToken(SnowflakeParser.DATE_FORMAT, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(SnowflakeParser.TIME_FORMAT, 0); }
		public TerminalNode TIMESTAMP_FORMAT() { return getToken(SnowflakeParser.TIMESTAMP_FORMAT, 0); }
		public TerminalNode BINARY_FORMAT() { return getToken(SnowflakeParser.BINARY_FORMAT, 0); }
		public TerminalNode HEX() { return getToken(SnowflakeParser.HEX, 0); }
		public TerminalNode BASE64() { return getToken(SnowflakeParser.BASE64, 0); }
		public TerminalNode UTF8() { return getToken(SnowflakeParser.UTF8, 0); }
		public TerminalNode ESCAPE() { return getToken(SnowflakeParser.ESCAPE, 0); }
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public TerminalNode NONE_Q() { return getToken(SnowflakeParser.NONE_Q, 0); }
		public TerminalNode ESCAPE_UNENCLOSED_FIELD() { return getToken(SnowflakeParser.ESCAPE_UNENCLOSED_FIELD, 0); }
		public TerminalNode TRIM_SPACE() { return getToken(SnowflakeParser.TRIM_SPACE, 0); }
		public TerminalNode FIELD_OPTIONALLY_ENCLOSED_BY() { return getToken(SnowflakeParser.FIELD_OPTIONALLY_ENCLOSED_BY, 0); }
		public TerminalNode SINGLE_QUOTE() { return getToken(SnowflakeParser.SINGLE_QUOTE, 0); }
		public TerminalNode NULL_IF() { return getToken(SnowflakeParser.NULL_IF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public List<String_listContext> string_list() {
			return getRuleContexts(String_listContext.class);
		}
		public String_listContext string_list(int i) {
			return getRuleContext(String_listContext.class,i);
		}
		public TerminalNode ERROR_ON_COLUMN_COUNT_MISMATCH() { return getToken(SnowflakeParser.ERROR_ON_COLUMN_COUNT_MISMATCH, 0); }
		public TerminalNode REPLACE_INVALID_CHARACTERS() { return getToken(SnowflakeParser.REPLACE_INVALID_CHARACTERS, 0); }
		public TerminalNode EMPTY_FIELD_AS_NULL() { return getToken(SnowflakeParser.EMPTY_FIELD_AS_NULL, 0); }
		public TerminalNode SKIP_BYTE_ORDER_MARK() { return getToken(SnowflakeParser.SKIP_BYTE_ORDER_MARK, 0); }
		public TerminalNode ENCODING() { return getToken(SnowflakeParser.ENCODING, 0); }
		public TerminalNode ENABLE_OCTAL() { return getToken(SnowflakeParser.ENABLE_OCTAL, 0); }
		public TerminalNode ALLOW_DUPLICATE() { return getToken(SnowflakeParser.ALLOW_DUPLICATE, 0); }
		public TerminalNode STRIP_OUTER_ARRAY() { return getToken(SnowflakeParser.STRIP_OUTER_ARRAY, 0); }
		public TerminalNode STRIP_NULL_VALUES() { return getToken(SnowflakeParser.STRIP_NULL_VALUES, 0); }
		public TerminalNode IGNORE_UTF8_ERRORS() { return getToken(SnowflakeParser.IGNORE_UTF8_ERRORS, 0); }
		public TerminalNode LZO() { return getToken(SnowflakeParser.LZO, 0); }
		public TerminalNode SNAPPY() { return getToken(SnowflakeParser.SNAPPY, 0); }
		public TerminalNode SNAPPY_COMPRESSION() { return getToken(SnowflakeParser.SNAPPY_COMPRESSION, 0); }
		public TerminalNode BINARY_AS_TEXT() { return getToken(SnowflakeParser.BINARY_AS_TEXT, 0); }
		public TerminalNode PRESERVE_SPACE() { return getToken(SnowflakeParser.PRESERVE_SPACE, 0); }
		public TerminalNode STRIP_OUTER_ELEMENT() { return getToken(SnowflakeParser.STRIP_OUTER_ELEMENT, 0); }
		public TerminalNode DISABLE_SNOWFLAKE_DATA() { return getToken(SnowflakeParser.DISABLE_SNOWFLAKE_DATA, 0); }
		public TerminalNode DISABLE_AUTO_CONVERT() { return getToken(SnowflakeParser.DISABLE_AUTO_CONVERT, 0); }
		public Format_type_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_format_type_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFormat_type_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFormat_type_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFormat_type_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Format_type_optionsContext format_type_options() throws RecognitionException {
		Format_type_optionsContext _localctx = new Format_type_optionsContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_format_type_options);
		int _la;
		try {
			setState(8489);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1032,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8342);
				match(COMPRESSION);
				setState(8343);
				match(EQ);
				setState(8344);
				_la = _input.LA(1);
				if ( !(((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & 316659348799491L) != 0) || _la==DEFLATE || _la==GZIP || _la==NONE || _la==RAW_DEFLATE || _la==ZSTD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8345);
				match(RECORD_DELIMITER);
				setState(8346);
				match(EQ);
				setState(8349);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(8347);
					string();
					}
					break;
				case NONE:
					{
					setState(8348);
					match(NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8351);
				match(FIELD_DELIMITER);
				setState(8352);
				match(EQ);
				setState(8355);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(8353);
					string();
					}
					break;
				case NONE:
					{
					setState(8354);
					match(NONE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8357);
				match(FILE_EXTENSION);
				setState(8358);
				match(EQ);
				setState(8359);
				string();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8360);
				match(SKIP_HEADER);
				setState(8361);
				match(EQ);
				setState(8362);
				num();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8363);
				match(SKIP_BLANK_LINES);
				setState(8364);
				match(EQ);
				setState(8365);
				true_false();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8366);
				match(DATE_FORMAT);
				setState(8367);
				match(EQ);
				setState(8370);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(8368);
					string();
					}
					break;
				case AUTO:
					{
					setState(8369);
					match(AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8372);
				match(TIME_FORMAT);
				setState(8373);
				match(EQ);
				setState(8376);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(8374);
					string();
					}
					break;
				case AUTO:
					{
					setState(8375);
					match(AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8378);
				match(TIMESTAMP_FORMAT);
				setState(8379);
				match(EQ);
				setState(8382);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(8380);
					string();
					}
					break;
				case AUTO:
					{
					setState(8381);
					match(AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8384);
				match(BINARY_FORMAT);
				setState(8385);
				match(EQ);
				setState(8386);
				_la = _input.LA(1);
				if ( !(_la==BASE64 || _la==HEX || _la==UTF8) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8387);
				match(ESCAPE);
				setState(8388);
				match(EQ);
				setState(8392);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1027,_ctx) ) {
				case 1:
					{
					setState(8389);
					character();
					}
					break;
				case 2:
					{
					setState(8390);
					match(NONE);
					}
					break;
				case 3:
					{
					setState(8391);
					match(NONE_Q);
					}
					break;
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8394);
				match(ESCAPE_UNENCLOSED_FIELD);
				setState(8395);
				match(EQ);
				setState(8399);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(8396);
					string();
					}
					break;
				case NONE:
					{
					setState(8397);
					match(NONE);
					}
					break;
				case NONE_Q:
					{
					setState(8398);
					match(NONE_Q);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8401);
				match(TRIM_SPACE);
				setState(8402);
				match(EQ);
				setState(8403);
				true_false();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(8404);
				match(FIELD_OPTIONALLY_ENCLOSED_BY);
				setState(8405);
				match(EQ);
				setState(8410);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(8406);
					string();
					}
					break;
				case NONE:
					{
					setState(8407);
					match(NONE);
					}
					break;
				case NONE_Q:
					{
					setState(8408);
					match(NONE_Q);
					}
					break;
				case SINGLE_QUOTE:
					{
					setState(8409);
					match(SINGLE_QUOTE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(8412);
				match(NULL_IF);
				setState(8413);
				match(EQ);
				setState(8414);
				match(LR_BRACKET);
				setState(8418);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==STRING) {
					{
					{
					setState(8415);
					string_list();
					}
					}
					setState(8420);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(8421);
				match(RR_BRACKET);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(8422);
				match(ERROR_ON_COLUMN_COUNT_MISMATCH);
				setState(8423);
				match(EQ);
				setState(8424);
				true_false();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(8425);
				match(REPLACE_INVALID_CHARACTERS);
				setState(8426);
				match(EQ);
				setState(8427);
				true_false();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(8428);
				match(EMPTY_FIELD_AS_NULL);
				setState(8429);
				match(EQ);
				setState(8430);
				true_false();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(8431);
				match(SKIP_BYTE_ORDER_MARK);
				setState(8432);
				match(EQ);
				setState(8433);
				true_false();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(8434);
				match(ENCODING);
				setState(8435);
				match(EQ);
				setState(8438);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(8436);
					string();
					}
					break;
				case UTF8:
					{
					setState(8437);
					match(UTF8);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(8440);
				match(ENABLE_OCTAL);
				setState(8441);
				match(EQ);
				setState(8442);
				true_false();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(8443);
				match(ALLOW_DUPLICATE);
				setState(8444);
				match(EQ);
				setState(8445);
				true_false();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(8446);
				match(STRIP_OUTER_ARRAY);
				setState(8447);
				match(EQ);
				setState(8448);
				true_false();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(8449);
				match(STRIP_NULL_VALUES);
				setState(8450);
				match(EQ);
				setState(8451);
				true_false();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(8452);
				match(IGNORE_UTF8_ERRORS);
				setState(8453);
				match(EQ);
				setState(8454);
				true_false();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(8455);
				match(COMPRESSION);
				setState(8456);
				match(EQ);
				setState(8457);
				match(AUTO);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(8458);
				match(LZO);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(8459);
				match(SNAPPY);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(8460);
				match(NONE);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(8461);
				match(SNAPPY_COMPRESSION);
				setState(8462);
				match(EQ);
				setState(8463);
				true_false();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(8464);
				match(BINARY_AS_TEXT);
				setState(8465);
				match(EQ);
				setState(8466);
				true_false();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(8467);
				match(COMPRESSION);
				setState(8468);
				match(EQ);
				setState(8469);
				match(AUTO);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(8470);
				match(GZIP);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(8471);
				match(BZ2);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(8472);
				match(BROTLI);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(8473);
				match(ZSTD);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(8474);
				match(DEFLATE);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(8475);
				match(RAW_DEFLATE);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(8476);
				match(NONE);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(8477);
				match(PRESERVE_SPACE);
				setState(8478);
				match(EQ);
				setState(8479);
				true_false();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(8480);
				match(STRIP_OUTER_ELEMENT);
				setState(8481);
				match(EQ);
				setState(8482);
				true_false();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(8483);
				match(DISABLE_SNOWFLAKE_DATA);
				setState(8484);
				match(EQ);
				setState(8485);
				true_false();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(8486);
				match(DISABLE_AUTO_CONVERT);
				setState(8487);
				match(EQ);
				setState(8488);
				true_false();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_optionsContext extends ParserRuleContext {
		public TerminalNode ON_ERROR() { return getToken(SnowflakeParser.ON_ERROR, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode CONTINUE() { return getToken(SnowflakeParser.CONTINUE, 0); }
		public TerminalNode SKIP_FILE() { return getToken(SnowflakeParser.SKIP_FILE, 0); }
		public TerminalNode SKIP_FILE_N() { return getToken(SnowflakeParser.SKIP_FILE_N, 0); }
		public TerminalNode ABORT_STATEMENT() { return getToken(SnowflakeParser.ABORT_STATEMENT, 0); }
		public TerminalNode SIZE_LIMIT() { return getToken(SnowflakeParser.SIZE_LIMIT, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode PURGE() { return getToken(SnowflakeParser.PURGE, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode RETURN_FAILED_ONLY() { return getToken(SnowflakeParser.RETURN_FAILED_ONLY, 0); }
		public TerminalNode MATCH_BY_COLUMN_NAME() { return getToken(SnowflakeParser.MATCH_BY_COLUMN_NAME, 0); }
		public TerminalNode CASE_SENSITIVE() { return getToken(SnowflakeParser.CASE_SENSITIVE, 0); }
		public TerminalNode CASE_INSENSITIVE() { return getToken(SnowflakeParser.CASE_INSENSITIVE, 0); }
		public TerminalNode NONE() { return getToken(SnowflakeParser.NONE, 0); }
		public TerminalNode ENFORCE_LENGTH() { return getToken(SnowflakeParser.ENFORCE_LENGTH, 0); }
		public TerminalNode TRUNCATECOLUMNS() { return getToken(SnowflakeParser.TRUNCATECOLUMNS, 0); }
		public TerminalNode FORCE() { return getToken(SnowflakeParser.FORCE, 0); }
		public Copy_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCopy_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCopy_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCopy_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_optionsContext copy_options() throws RecognitionException {
		Copy_optionsContext _localctx = new Copy_optionsContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_copy_options);
		try {
			setState(8523);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON_ERROR:
				enterOuterAlt(_localctx, 1);
				{
				setState(8491);
				match(ON_ERROR);
				setState(8492);
				match(EQ);
				setState(8498);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1033,_ctx) ) {
				case 1:
					{
					setState(8493);
					match(CONTINUE);
					}
					break;
				case 2:
					{
					setState(8494);
					match(SKIP_FILE);
					}
					break;
				case 3:
					{
					setState(8495);
					match(SKIP_FILE_N);
					}
					break;
				case 4:
					{
					setState(8496);
					match(SKIP_FILE_N);
					setState(8497);
					match(ABORT_STATEMENT);
					}
					break;
				}
				}
				break;
			case SIZE_LIMIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8500);
				match(SIZE_LIMIT);
				setState(8501);
				match(EQ);
				setState(8502);
				num();
				}
				break;
			case PURGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8503);
				match(PURGE);
				setState(8504);
				match(EQ);
				setState(8505);
				true_false();
				}
				break;
			case RETURN_FAILED_ONLY:
				enterOuterAlt(_localctx, 4);
				{
				setState(8506);
				match(RETURN_FAILED_ONLY);
				setState(8507);
				match(EQ);
				setState(8508);
				true_false();
				}
				break;
			case MATCH_BY_COLUMN_NAME:
				enterOuterAlt(_localctx, 5);
				{
				setState(8509);
				match(MATCH_BY_COLUMN_NAME);
				setState(8510);
				match(EQ);
				setState(8511);
				match(CASE_SENSITIVE);
				}
				break;
			case CASE_INSENSITIVE:
				enterOuterAlt(_localctx, 6);
				{
				setState(8512);
				match(CASE_INSENSITIVE);
				}
				break;
			case NONE:
				enterOuterAlt(_localctx, 7);
				{
				setState(8513);
				match(NONE);
				}
				break;
			case ENFORCE_LENGTH:
				enterOuterAlt(_localctx, 8);
				{
				setState(8514);
				match(ENFORCE_LENGTH);
				setState(8515);
				match(EQ);
				setState(8516);
				true_false();
				}
				break;
			case TRUNCATECOLUMNS:
				enterOuterAlt(_localctx, 9);
				{
				setState(8517);
				match(TRUNCATECOLUMNS);
				setState(8518);
				match(EQ);
				setState(8519);
				true_false();
				}
				break;
			case FORCE:
				enterOuterAlt(_localctx, 10);
				{
				setState(8520);
				match(FORCE);
				setState(8521);
				match(EQ);
				setState(8522);
				true_false();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stage_encryption_opts_internalContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(SnowflakeParser.ENCRYPTION, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode SNOWFLAKE_FULL() { return getToken(SnowflakeParser.SNOWFLAKE_FULL, 0); }
		public TerminalNode SNOWFLAKE_SSE() { return getToken(SnowflakeParser.SNOWFLAKE_SSE, 0); }
		public Stage_encryption_opts_internalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stage_encryption_opts_internal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterStage_encryption_opts_internal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitStage_encryption_opts_internal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitStage_encryption_opts_internal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stage_encryption_opts_internalContext stage_encryption_opts_internal() throws RecognitionException {
		Stage_encryption_opts_internalContext _localctx = new Stage_encryption_opts_internalContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_stage_encryption_opts_internal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8525);
			match(ENCRYPTION);
			setState(8526);
			match(EQ);
			setState(8527);
			match(LR_BRACKET);
			setState(8528);
			match(TYPE);
			setState(8529);
			match(EQ);
			setState(8530);
			_la = _input.LA(1);
			if ( !(_la==SNOWFLAKE_FULL || _la==SNOWFLAKE_SSE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8531);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stage_typeContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Stage_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stage_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterStage_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitStage_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitStage_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stage_typeContext stage_type() throws RecognitionException {
		Stage_typeContext _localctx = new Stage_typeContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_stage_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8533);
			match(TYPE);
			setState(8534);
			match(EQ);
			setState(8535);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stage_master_keyContext extends ParserRuleContext {
		public TerminalNode MASTER_KEY() { return getToken(SnowflakeParser.MASTER_KEY, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Stage_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stage_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterStage_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitStage_master_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitStage_master_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stage_master_keyContext stage_master_key() throws RecognitionException {
		Stage_master_keyContext _localctx = new Stage_master_keyContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_stage_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8537);
			match(MASTER_KEY);
			setState(8538);
			match(EQ);
			setState(8539);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stage_kms_keyContext extends ParserRuleContext {
		public TerminalNode KMS_KEY_ID() { return getToken(SnowflakeParser.KMS_KEY_ID, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Stage_kms_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stage_kms_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterStage_kms_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitStage_kms_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitStage_kms_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stage_kms_keyContext stage_kms_key() throws RecognitionException {
		Stage_kms_keyContext _localctx = new Stage_kms_keyContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_stage_kms_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8541);
			match(KMS_KEY_ID);
			setState(8542);
			match(EQ);
			setState(8543);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stage_encryption_opts_awsContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(SnowflakeParser.ENCRYPTION, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Stage_master_keyContext stage_master_key() {
			return getRuleContext(Stage_master_keyContext.class,0);
		}
		public Stage_typeContext stage_type() {
			return getRuleContext(Stage_typeContext.class,0);
		}
		public Stage_kms_keyContext stage_kms_key() {
			return getRuleContext(Stage_kms_keyContext.class,0);
		}
		public Stage_encryption_opts_awsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stage_encryption_opts_aws; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterStage_encryption_opts_aws(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitStage_encryption_opts_aws(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitStage_encryption_opts_aws(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stage_encryption_opts_awsContext stage_encryption_opts_aws() throws RecognitionException {
		Stage_encryption_opts_awsContext _localctx = new Stage_encryption_opts_awsContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_stage_encryption_opts_aws);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8545);
			match(ENCRYPTION);
			setState(8546);
			match(EQ);
			setState(8547);
			match(LR_BRACKET);
			setState(8556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1037,_ctx) ) {
			case 1:
				{
				setState(8549);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE) {
					{
					setState(8548);
					stage_type();
					}
				}

				setState(8551);
				stage_master_key();
				}
				break;
			case 2:
				{
				setState(8552);
				stage_type();
				setState(8554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==KMS_KEY_ID) {
					{
					setState(8553);
					stage_kms_key();
					}
				}

				}
				break;
			}
			setState(8558);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aws_tokenContext extends ParserRuleContext {
		public TerminalNode AWS_TOKEN() { return getToken(SnowflakeParser.AWS_TOKEN, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Aws_tokenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aws_token; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAws_token(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAws_token(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAws_token(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aws_tokenContext aws_token() throws RecognitionException {
		Aws_tokenContext _localctx = new Aws_tokenContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_aws_token);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8560);
			match(AWS_TOKEN);
			setState(8561);
			match(EQ);
			setState(8562);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aws_key_idContext extends ParserRuleContext {
		public TerminalNode AWS_KEY_ID() { return getToken(SnowflakeParser.AWS_KEY_ID, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Aws_key_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aws_key_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAws_key_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAws_key_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAws_key_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aws_key_idContext aws_key_id() throws RecognitionException {
		Aws_key_idContext _localctx = new Aws_key_idContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_aws_key_id);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8564);
			match(AWS_KEY_ID);
			setState(8565);
			match(EQ);
			setState(8566);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aws_secret_keyContext extends ParserRuleContext {
		public TerminalNode AWS_SECRET_KEY() { return getToken(SnowflakeParser.AWS_SECRET_KEY, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Aws_secret_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aws_secret_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAws_secret_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAws_secret_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAws_secret_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aws_secret_keyContext aws_secret_key() throws RecognitionException {
		Aws_secret_keyContext _localctx = new Aws_secret_keyContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_aws_secret_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8568);
			match(AWS_SECRET_KEY);
			setState(8569);
			match(EQ);
			setState(8570);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aws_roleContext extends ParserRuleContext {
		public TerminalNode AWS_ROLE() { return getToken(SnowflakeParser.AWS_ROLE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Aws_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aws_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAws_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAws_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAws_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aws_roleContext aws_role() throws RecognitionException {
		Aws_roleContext _localctx = new Aws_roleContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_aws_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8572);
			match(AWS_ROLE);
			setState(8573);
			match(EQ);
			setState(8574);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Azure_encryption_valueContext extends ParserRuleContext {
		public TerminalNode MASTER_KEY() { return getToken(SnowflakeParser.MASTER_KEY, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public TerminalNode AZURE_CSE_Q() { return getToken(SnowflakeParser.AZURE_CSE_Q, 0); }
		public TerminalNode NONE_Q() { return getToken(SnowflakeParser.NONE_Q, 0); }
		public Azure_encryption_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_azure_encryption_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAzure_encryption_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAzure_encryption_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAzure_encryption_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Azure_encryption_valueContext azure_encryption_value() throws RecognitionException {
		Azure_encryption_valueContext _localctx = new Azure_encryption_valueContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_azure_encryption_value);
		int _la;
		try {
			setState(8594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1039,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE) {
					{
					setState(8576);
					match(TYPE);
					setState(8577);
					match(EQ);
					setState(8578);
					match(AZURE_CSE_Q);
					}
				}

				setState(8581);
				match(MASTER_KEY);
				setState(8582);
				match(EQ);
				setState(8583);
				string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8584);
				match(MASTER_KEY);
				setState(8585);
				match(EQ);
				setState(8586);
				string();
				setState(8587);
				match(TYPE);
				setState(8588);
				match(EQ);
				setState(8589);
				match(AZURE_CSE_Q);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8591);
				match(TYPE);
				setState(8592);
				match(EQ);
				setState(8593);
				match(NONE_Q);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stage_encryption_opts_azContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(SnowflakeParser.ENCRYPTION, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Azure_encryption_valueContext azure_encryption_value() {
			return getRuleContext(Azure_encryption_valueContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Stage_encryption_opts_azContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stage_encryption_opts_az; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterStage_encryption_opts_az(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitStage_encryption_opts_az(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitStage_encryption_opts_az(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stage_encryption_opts_azContext stage_encryption_opts_az() throws RecognitionException {
		Stage_encryption_opts_azContext _localctx = new Stage_encryption_opts_azContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_stage_encryption_opts_az);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8596);
			match(ENCRYPTION);
			setState(8597);
			match(EQ);
			setState(8598);
			match(LR_BRACKET);
			setState(8599);
			azure_encryption_value();
			setState(8600);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Storage_integration_eq_idContext extends ParserRuleContext {
		public TerminalNode STORAGE_INTEGRATION() { return getToken(SnowflakeParser.STORAGE_INTEGRATION, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Storage_integration_eq_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_integration_eq_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterStorage_integration_eq_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitStorage_integration_eq_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitStorage_integration_eq_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Storage_integration_eq_idContext storage_integration_eq_id() throws RecognitionException {
		Storage_integration_eq_idContext _localctx = new Storage_integration_eq_idContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_storage_integration_eq_id);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8602);
			match(STORAGE_INTEGRATION);
			setState(8603);
			match(EQ);
			setState(8604);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Az_credential_or_storage_integrationContext extends ParserRuleContext {
		public Storage_integration_eq_idContext storage_integration_eq_id() {
			return getRuleContext(Storage_integration_eq_idContext.class,0);
		}
		public TerminalNode CREDENTIALS() { return getToken(SnowflakeParser.CREDENTIALS, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode AZURE_SAS_TOKEN() { return getToken(SnowflakeParser.AZURE_SAS_TOKEN, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Az_credential_or_storage_integrationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_az_credential_or_storage_integration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAz_credential_or_storage_integration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAz_credential_or_storage_integration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAz_credential_or_storage_integration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Az_credential_or_storage_integrationContext az_credential_or_storage_integration() throws RecognitionException {
		Az_credential_or_storage_integrationContext _localctx = new Az_credential_or_storage_integrationContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_az_credential_or_storage_integration);
		try {
			setState(8615);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STORAGE_INTEGRATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(8606);
				storage_integration_eq_id();
				}
				break;
			case CREDENTIALS:
				enterOuterAlt(_localctx, 2);
				{
				setState(8607);
				match(CREDENTIALS);
				setState(8608);
				match(EQ);
				setState(8609);
				match(LR_BRACKET);
				setState(8610);
				match(AZURE_SAS_TOKEN);
				setState(8611);
				match(EQ);
				setState(8612);
				string();
				setState(8613);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Gcp_encryption_valueContext extends ParserRuleContext {
		public TerminalNode KMS_KEY_ID() { return getToken(SnowflakeParser.KMS_KEY_ID, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public TerminalNode GCS_SSE_KMS_Q() { return getToken(SnowflakeParser.GCS_SSE_KMS_Q, 0); }
		public TerminalNode NONE_Q() { return getToken(SnowflakeParser.NONE_Q, 0); }
		public Gcp_encryption_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gcp_encryption_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterGcp_encryption_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitGcp_encryption_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitGcp_encryption_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Gcp_encryption_valueContext gcp_encryption_value() throws RecognitionException {
		Gcp_encryption_valueContext _localctx = new Gcp_encryption_valueContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_gcp_encryption_value);
		int _la;
		try {
			setState(8635);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1042,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8620);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE) {
					{
					setState(8617);
					match(TYPE);
					setState(8618);
					match(EQ);
					setState(8619);
					match(GCS_SSE_KMS_Q);
					}
				}

				setState(8622);
				match(KMS_KEY_ID);
				setState(8623);
				match(EQ);
				setState(8624);
				string();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8625);
				match(KMS_KEY_ID);
				setState(8626);
				match(EQ);
				setState(8627);
				string();
				setState(8628);
				match(TYPE);
				setState(8629);
				match(EQ);
				setState(8630);
				match(GCS_SSE_KMS_Q);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8632);
				match(TYPE);
				setState(8633);
				match(EQ);
				setState(8634);
				match(NONE_Q);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stage_encryption_opts_gcpContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(SnowflakeParser.ENCRYPTION, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Gcp_encryption_valueContext gcp_encryption_value() {
			return getRuleContext(Gcp_encryption_valueContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Stage_encryption_opts_gcpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stage_encryption_opts_gcp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterStage_encryption_opts_gcp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitStage_encryption_opts_gcp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitStage_encryption_opts_gcp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stage_encryption_opts_gcpContext stage_encryption_opts_gcp() throws RecognitionException {
		Stage_encryption_opts_gcpContext _localctx = new Stage_encryption_opts_gcpContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_stage_encryption_opts_gcp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8637);
			match(ENCRYPTION);
			setState(8638);
			match(EQ);
			setState(8639);
			match(LR_BRACKET);
			setState(8640);
			gcp_encryption_value();
			setState(8641);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aws_credential_or_storage_integrationContext extends ParserRuleContext {
		public Storage_integration_eq_idContext storage_integration_eq_id() {
			return getRuleContext(Storage_integration_eq_idContext.class,0);
		}
		public TerminalNode CREDENTIALS() { return getToken(SnowflakeParser.CREDENTIALS, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Aws_key_idContext aws_key_id() {
			return getRuleContext(Aws_key_idContext.class,0);
		}
		public Aws_secret_keyContext aws_secret_key() {
			return getRuleContext(Aws_secret_keyContext.class,0);
		}
		public Aws_roleContext aws_role() {
			return getRuleContext(Aws_roleContext.class,0);
		}
		public Aws_tokenContext aws_token() {
			return getRuleContext(Aws_tokenContext.class,0);
		}
		public Aws_credential_or_storage_integrationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aws_credential_or_storage_integration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAws_credential_or_storage_integration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAws_credential_or_storage_integration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAws_credential_or_storage_integration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aws_credential_or_storage_integrationContext aws_credential_or_storage_integration() throws RecognitionException {
		Aws_credential_or_storage_integrationContext _localctx = new Aws_credential_or_storage_integrationContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_aws_credential_or_storage_integration);
		int _la;
		try {
			setState(8657);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STORAGE_INTEGRATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(8643);
				storage_integration_eq_id();
				}
				break;
			case CREDENTIALS:
				enterOuterAlt(_localctx, 2);
				{
				setState(8644);
				match(CREDENTIALS);
				setState(8645);
				match(EQ);
				setState(8646);
				match(LR_BRACKET);
				setState(8653);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AWS_KEY_ID:
					{
					setState(8647);
					aws_key_id();
					setState(8648);
					aws_secret_key();
					setState(8650);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AWS_TOKEN) {
						{
						setState(8649);
						aws_token();
						}
					}

					}
					break;
				case AWS_ROLE:
					{
					setState(8652);
					aws_role();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8655);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class External_stage_paramsContext extends ParserRuleContext {
		public Token s3_url;
		public Token gc_url;
		public Token azure_url;
		public TerminalNode URL() { return getToken(SnowflakeParser.URL, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode S3_PATH() { return getToken(SnowflakeParser.S3_PATH, 0); }
		public TerminalNode S3GOV_PATH() { return getToken(SnowflakeParser.S3GOV_PATH, 0); }
		public Stage_encryption_opts_awsContext stage_encryption_opts_aws() {
			return getRuleContext(Stage_encryption_opts_awsContext.class,0);
		}
		public Aws_credential_or_storage_integrationContext aws_credential_or_storage_integration() {
			return getRuleContext(Aws_credential_or_storage_integrationContext.class,0);
		}
		public TerminalNode GCS_PATH() { return getToken(SnowflakeParser.GCS_PATH, 0); }
		public Stage_encryption_opts_gcpContext stage_encryption_opts_gcp() {
			return getRuleContext(Stage_encryption_opts_gcpContext.class,0);
		}
		public Storage_integration_eq_idContext storage_integration_eq_id() {
			return getRuleContext(Storage_integration_eq_idContext.class,0);
		}
		public TerminalNode AZURE_PATH() { return getToken(SnowflakeParser.AZURE_PATH, 0); }
		public Stage_encryption_opts_azContext stage_encryption_opts_az() {
			return getRuleContext(Stage_encryption_opts_azContext.class,0);
		}
		public Az_credential_or_storage_integrationContext az_credential_or_storage_integration() {
			return getRuleContext(Az_credential_or_storage_integrationContext.class,0);
		}
		public External_stage_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_stage_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterExternal_stage_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitExternal_stage_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitExternal_stage_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_stage_paramsContext external_stage_params() throws RecognitionException {
		External_stage_paramsContext _localctx = new External_stage_paramsContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_external_stage_params);
		int _la;
		try {
			setState(8698);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1055,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8659);
				match(URL);
				setState(8660);
				match(EQ);
				setState(8661);
				((External_stage_paramsContext)_localctx).s3_url = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==S3_PATH || _la==S3GOV_PATH) ) {
					((External_stage_paramsContext)_localctx).s3_url = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8670);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1048,_ctx) ) {
				case 1:
					{
					setState(8663);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CREDENTIALS || _la==STORAGE_INTEGRATION) {
						{
						setState(8662);
						aws_credential_or_storage_integration();
						}
					}

					setState(8665);
					stage_encryption_opts_aws();
					}
					break;
				case 2:
					{
					setState(8667);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ENCRYPTION) {
						{
						setState(8666);
						stage_encryption_opts_aws();
						}
					}

					setState(8669);
					aws_credential_or_storage_integration();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8672);
				match(URL);
				setState(8673);
				match(EQ);
				setState(8674);
				((External_stage_paramsContext)_localctx).gc_url = match(GCS_PATH);
				setState(8683);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1051,_ctx) ) {
				case 1:
					{
					setState(8676);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STORAGE_INTEGRATION) {
						{
						setState(8675);
						storage_integration_eq_id();
						}
					}

					setState(8678);
					stage_encryption_opts_gcp();
					}
					break;
				case 2:
					{
					setState(8680);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ENCRYPTION) {
						{
						setState(8679);
						stage_encryption_opts_gcp();
						}
					}

					setState(8682);
					storage_integration_eq_id();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8685);
				match(URL);
				setState(8686);
				match(EQ);
				setState(8687);
				((External_stage_paramsContext)_localctx).azure_url = match(AZURE_PATH);
				setState(8696);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1054,_ctx) ) {
				case 1:
					{
					setState(8689);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CREDENTIALS || _la==STORAGE_INTEGRATION) {
						{
						setState(8688);
						az_credential_or_storage_integration();
						}
					}

					setState(8691);
					stage_encryption_opts_az();
					}
					break;
				case 2:
					{
					setState(8693);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ENCRYPTION) {
						{
						setState(8692);
						stage_encryption_opts_az();
						}
					}

					setState(8695);
					az_credential_or_storage_integration();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class True_falseContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(SnowflakeParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SnowflakeParser.FALSE, 0); }
		public True_falseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_true_false; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTrue_false(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTrue_false(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTrue_false(this);
			else return visitor.visitChildren(this);
		}
	}

	public final True_falseContext true_false() throws RecognitionException {
		True_falseContext _localctx = new True_falseContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_true_false);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8700);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EnableContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(SnowflakeParser.ENABLE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public EnableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterEnable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitEnable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitEnable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableContext enable() throws RecognitionException {
		EnableContext _localctx = new EnableContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_enable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8702);
			match(ENABLE);
			setState(8703);
			match(EQ);
			setState(8704);
			true_false();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Refresh_on_createContext extends ParserRuleContext {
		public TerminalNode REFRESH_ON_CREATE() { return getToken(SnowflakeParser.REFRESH_ON_CREATE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public Refresh_on_createContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refresh_on_create; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterRefresh_on_create(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitRefresh_on_create(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitRefresh_on_create(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Refresh_on_createContext refresh_on_create() throws RecognitionException {
		Refresh_on_createContext _localctx = new Refresh_on_createContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_refresh_on_create);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8706);
			match(REFRESH_ON_CREATE);
			setState(8707);
			match(EQ);
			setState(8708);
			true_false();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Auto_refreshContext extends ParserRuleContext {
		public TerminalNode AUTO_REFRESH() { return getToken(SnowflakeParser.AUTO_REFRESH, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public Auto_refreshContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auto_refresh; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAuto_refresh(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAuto_refresh(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAuto_refresh(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auto_refreshContext auto_refresh() throws RecognitionException {
		Auto_refreshContext _localctx = new Auto_refreshContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_auto_refresh);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8710);
			match(AUTO_REFRESH);
			setState(8711);
			match(EQ);
			setState(8712);
			true_false();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Notification_integrationContext extends ParserRuleContext {
		public TerminalNode NOTIFICATION_INTEGRATION() { return getToken(SnowflakeParser.NOTIFICATION_INTEGRATION, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Notification_integrationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notification_integration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterNotification_integration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitNotification_integration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitNotification_integration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Notification_integrationContext notification_integration() throws RecognitionException {
		Notification_integrationContext _localctx = new Notification_integrationContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_notification_integration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8714);
			match(NOTIFICATION_INTEGRATION);
			setState(8715);
			match(EQ);
			setState(8716);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Directory_table_internal_paramsContext extends ParserRuleContext {
		public TerminalNode DIRECTORY() { return getToken(SnowflakeParser.DIRECTORY, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public EnableContext enable() {
			return getRuleContext(EnableContext.class,0);
		}
		public TerminalNode REFRESH_ON_CREATE() { return getToken(SnowflakeParser.REFRESH_ON_CREATE, 0); }
		public TerminalNode FALSE() { return getToken(SnowflakeParser.FALSE, 0); }
		public Refresh_on_createContext refresh_on_create() {
			return getRuleContext(Refresh_on_createContext.class,0);
		}
		public Directory_table_internal_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_directory_table_internal_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDirectory_table_internal_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDirectory_table_internal_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDirectory_table_internal_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Directory_table_internal_paramsContext directory_table_internal_params() throws RecognitionException {
		Directory_table_internal_paramsContext _localctx = new Directory_table_internal_paramsContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_directory_table_internal_params);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8718);
			match(DIRECTORY);
			setState(8719);
			match(EQ);
			setState(8720);
			match(LR_BRACKET);
			setState(8731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1057,_ctx) ) {
			case 1:
				{
				setState(8721);
				enable();
				setState(8723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REFRESH_ON_CREATE) {
					{
					setState(8722);
					refresh_on_create();
					}
				}

				}
				break;
			case 2:
				{
				setState(8725);
				match(REFRESH_ON_CREATE);
				setState(8726);
				match(EQ);
				setState(8727);
				match(FALSE);
				}
				break;
			case 3:
				{
				setState(8728);
				refresh_on_create();
				setState(8729);
				enable();
				}
				break;
			}
			setState(8733);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Directory_table_external_paramsContext extends ParserRuleContext {
		public TerminalNode DIRECTORY() { return getToken(SnowflakeParser.DIRECTORY, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public EnableContext enable() {
			return getRuleContext(EnableContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Refresh_on_createContext refresh_on_create() {
			return getRuleContext(Refresh_on_createContext.class,0);
		}
		public Auto_refreshContext auto_refresh() {
			return getRuleContext(Auto_refreshContext.class,0);
		}
		public Notification_integrationContext notification_integration() {
			return getRuleContext(Notification_integrationContext.class,0);
		}
		public Directory_table_external_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_directory_table_external_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDirectory_table_external_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDirectory_table_external_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDirectory_table_external_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Directory_table_external_paramsContext directory_table_external_params() throws RecognitionException {
		Directory_table_external_paramsContext _localctx = new Directory_table_external_paramsContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_directory_table_external_params);
		int _la;
		try {
			setState(8777);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1066,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8735);
				match(DIRECTORY);
				setState(8736);
				match(EQ);
				setState(8737);
				match(LR_BRACKET);
				setState(8738);
				enable();
				setState(8740);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REFRESH_ON_CREATE) {
					{
					setState(8739);
					refresh_on_create();
					}
				}

				setState(8743);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO_REFRESH) {
					{
					setState(8742);
					auto_refresh();
					}
				}

				setState(8745);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8747);
				match(DIRECTORY);
				setState(8748);
				match(EQ);
				setState(8749);
				match(LR_BRACKET);
				setState(8750);
				enable();
				setState(8752);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO_REFRESH) {
					{
					setState(8751);
					auto_refresh();
					}
				}

				setState(8755);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REFRESH_ON_CREATE) {
					{
					setState(8754);
					refresh_on_create();
					}
				}

				setState(8758);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOTIFICATION_INTEGRATION) {
					{
					setState(8757);
					notification_integration();
					}
				}

				setState(8760);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8762);
				match(DIRECTORY);
				setState(8763);
				match(EQ);
				setState(8764);
				match(LR_BRACKET);
				setState(8765);
				enable();
				setState(8767);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REFRESH_ON_CREATE) {
					{
					setState(8766);
					refresh_on_create();
					}
				}

				setState(8770);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO_REFRESH) {
					{
					setState(8769);
					auto_refresh();
					}
				}

				setState(8773);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOTIFICATION_INTEGRATION) {
					{
					setState(8772);
					notification_integration();
					}
				}

				setState(8775);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_stageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode STAGE() { return getToken(SnowflakeParser.STAGE, 0); }
		public Object_name_or_identifierContext object_name_or_identifier() {
			return getRuleContext(Object_name_or_identifierContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public TemporaryContext temporary() {
			return getRuleContext(TemporaryContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Stage_encryption_opts_internalContext stage_encryption_opts_internal() {
			return getRuleContext(Stage_encryption_opts_internalContext.class,0);
		}
		public Directory_table_internal_paramsContext directory_table_internal_params() {
			return getRuleContext(Directory_table_internal_paramsContext.class,0);
		}
		public TerminalNode FILE_FORMAT() { return getToken(SnowflakeParser.FILE_FORMAT, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public TerminalNode COPY_OPTIONS_() { return getToken(SnowflakeParser.COPY_OPTIONS_, 0); }
		public Copy_optionsContext copy_options() {
			return getRuleContext(Copy_optionsContext.class,0);
		}
		public With_tagsContext with_tags() {
			return getRuleContext(With_tagsContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode FORMAT_NAME() { return getToken(SnowflakeParser.FORMAT_NAME, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public Type_fileformatContext type_fileformat() {
			return getRuleContext(Type_fileformatContext.class,0);
		}
		public List<Format_type_optionsContext> format_type_options() {
			return getRuleContexts(Format_type_optionsContext.class);
		}
		public Format_type_optionsContext format_type_options(int i) {
			return getRuleContext(Format_type_optionsContext.class,i);
		}
		public External_stage_paramsContext external_stage_params() {
			return getRuleContext(External_stage_paramsContext.class,0);
		}
		public Directory_table_external_paramsContext directory_table_external_params() {
			return getRuleContext(Directory_table_external_paramsContext.class,0);
		}
		public Create_stageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_stage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_stage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_stage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_stage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_stageContext create_stage() throws RecognitionException {
		Create_stageContext _localctx = new Create_stageContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_create_stage);
		int _la;
		try {
			setState(8883);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1088,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8779);
				match(CREATE);
				setState(8781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(8780);
					or_replace();
					}
				}

				setState(8784);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMP || _la==TEMPORARY) {
					{
					setState(8783);
					temporary();
					}
				}

				setState(8786);
				match(STAGE);
				setState(8788);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1069,_ctx) ) {
				case 1:
					{
					setState(8787);
					if_not_exists();
					}
					break;
				}
				setState(8790);
				object_name_or_identifier();
				setState(8792);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCRYPTION) {
					{
					setState(8791);
					stage_encryption_opts_internal();
					}
				}

				setState(8795);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DIRECTORY) {
					{
					setState(8794);
					directory_table_internal_params();
					}
				}

				setState(8816);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILE_FORMAT) {
					{
					setState(8797);
					match(FILE_FORMAT);
					setState(8798);
					match(EQ);
					setState(8799);
					match(LR_BRACKET);
					setState(8812);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FORMAT_NAME:
						{
						setState(8800);
						match(FORMAT_NAME);
						setState(8801);
						match(EQ);
						setState(8802);
						string();
						}
						break;
					case TYPE:
						{
						setState(8803);
						match(TYPE);
						setState(8804);
						match(EQ);
						setState(8805);
						type_fileformat();
						setState(8809);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==ALLOW_DUPLICATE || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 2251799813689859L) != 0) || ((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 7205918283424366593L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & 576462951326679059L) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 576478344489467905L) != 0) || ((((_la - 530)) & ~0x3f) == 0 && ((1L << (_la - 530)) & 35185512939521L) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & 246290604622035L) != 0) || ((((_la - 745)) & ~0x3f) == 0 && ((1L << (_la - 745)) & 268443649L) != 0) || _la==ZSTD) {
							{
							{
							setState(8806);
							format_type_options();
							}
							}
							setState(8811);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8814);
					match(RR_BRACKET);
					}
				}

				setState(8824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COPY_OPTIONS_) {
					{
					setState(8818);
					match(COPY_OPTIONS_);
					setState(8819);
					match(EQ);
					setState(8820);
					match(LR_BRACKET);
					setState(8821);
					copy_options();
					setState(8822);
					match(RR_BRACKET);
					}
				}

				setState(8827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TAG || _la==WITH) {
					{
					setState(8826);
					with_tags();
					}
				}

				setState(8830);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(8829);
					comment_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8832);
				match(CREATE);
				setState(8834);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(8833);
					or_replace();
					}
				}

				setState(8837);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TEMP || _la==TEMPORARY) {
					{
					setState(8836);
					temporary();
					}
				}

				setState(8839);
				match(STAGE);
				setState(8841);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1080,_ctx) ) {
				case 1:
					{
					setState(8840);
					if_not_exists();
					}
					break;
				}
				setState(8843);
				object_name_or_identifier();
				setState(8844);
				external_stage_params();
				setState(8846);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DIRECTORY) {
					{
					setState(8845);
					directory_table_external_params();
					}
				}

				setState(8867);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILE_FORMAT) {
					{
					setState(8848);
					match(FILE_FORMAT);
					setState(8849);
					match(EQ);
					setState(8850);
					match(LR_BRACKET);
					setState(8863);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FORMAT_NAME:
						{
						setState(8851);
						match(FORMAT_NAME);
						setState(8852);
						match(EQ);
						setState(8853);
						string();
						}
						break;
					case TYPE:
						{
						setState(8854);
						match(TYPE);
						setState(8855);
						match(EQ);
						setState(8856);
						type_fileformat();
						setState(8860);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==ALLOW_DUPLICATE || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 2251799813689859L) != 0) || ((((_la - 170)) & ~0x3f) == 0 && ((1L << (_la - 170)) & 7205918283424366593L) != 0) || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & 576462951326679059L) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & 576478344489467905L) != 0) || ((((_la - 530)) & ~0x3f) == 0 && ((1L << (_la - 530)) & 35185512939521L) != 0) || ((((_la - 665)) & ~0x3f) == 0 && ((1L << (_la - 665)) & 246290604622035L) != 0) || ((((_la - 745)) & ~0x3f) == 0 && ((1L << (_la - 745)) & 268443649L) != 0) || _la==ZSTD) {
							{
							{
							setState(8857);
							format_type_options();
							}
							}
							setState(8862);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8865);
					match(RR_BRACKET);
					}
				}

				setState(8875);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COPY_OPTIONS_) {
					{
					setState(8869);
					match(COPY_OPTIONS_);
					setState(8870);
					match(EQ);
					setState(8871);
					match(LR_BRACKET);
					setState(8872);
					copy_options();
					setState(8873);
					match(RR_BRACKET);
					}
				}

				setState(8878);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TAG || _la==WITH) {
					{
					setState(8877);
					with_tags();
					}
				}

				setState(8881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(8880);
					comment_clause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Alter_stageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public TerminalNode STAGE() { return getToken(SnowflakeParser.STAGE, 0); }
		public List<Object_name_or_identifierContext> object_name_or_identifier() {
			return getRuleContexts(Object_name_or_identifierContext.class);
		}
		public Object_name_or_identifierContext object_name_or_identifier(int i) {
			return getRuleContext(Object_name_or_identifierContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(SnowflakeParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Set_tagsContext set_tags() {
			return getRuleContext(Set_tagsContext.class,0);
		}
		public Unset_tagsContext unset_tags() {
			return getRuleContext(Unset_tagsContext.class,0);
		}
		public TerminalNode SET() { return getToken(SnowflakeParser.SET, 0); }
		public External_stage_paramsContext external_stage_params() {
			return getRuleContext(External_stage_paramsContext.class,0);
		}
		public File_formatContext file_format() {
			return getRuleContext(File_formatContext.class,0);
		}
		public TerminalNode COPY_OPTIONS_() { return getToken(SnowflakeParser.COPY_OPTIONS_, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Copy_optionsContext copy_options() {
			return getRuleContext(Copy_optionsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Alter_stageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_stage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlter_stage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlter_stage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlter_stage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_stageContext alter_stage() throws RecognitionException {
		Alter_stageContext _localctx = new Alter_stageContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_alter_stage);
		int _la;
		try {
			setState(8935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1097,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8885);
				match(ALTER);
				setState(8886);
				match(STAGE);
				setState(8888);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1089,_ctx) ) {
				case 1:
					{
					setState(8887);
					if_exists();
					}
					break;
				}
				setState(8890);
				object_name_or_identifier();
				setState(8891);
				match(RENAME);
				setState(8892);
				match(TO);
				setState(8893);
				object_name_or_identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8895);
				match(ALTER);
				setState(8896);
				match(STAGE);
				setState(8898);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1090,_ctx) ) {
				case 1:
					{
					setState(8897);
					if_exists();
					}
					break;
				}
				setState(8900);
				object_name_or_identifier();
				setState(8901);
				set_tags();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8903);
				match(ALTER);
				setState(8904);
				match(STAGE);
				setState(8906);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1091,_ctx) ) {
				case 1:
					{
					setState(8905);
					if_exists();
					}
					break;
				}
				setState(8908);
				object_name_or_identifier();
				setState(8909);
				unset_tags();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8911);
				match(ALTER);
				setState(8912);
				match(STAGE);
				setState(8914);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1092,_ctx) ) {
				case 1:
					{
					setState(8913);
					if_exists();
					}
					break;
				}
				setState(8916);
				object_name_or_identifier();
				setState(8917);
				match(SET);
				setState(8919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==URL) {
					{
					setState(8918);
					external_stage_params();
					}
				}

				setState(8922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILE_FORMAT) {
					{
					setState(8921);
					file_format();
					}
				}

				setState(8930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COPY_OPTIONS_) {
					{
					setState(8924);
					match(COPY_OPTIONS_);
					setState(8925);
					match(EQ);
					setState(8926);
					match(LR_BRACKET);
					setState(8927);
					copy_options();
					setState(8928);
					match(RR_BRACKET);
					}
				}

				setState(8933);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(8932);
					comment_clause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_stageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode STAGE() { return getToken(SnowflakeParser.STAGE, 0); }
		public Object_name_or_identifierContext object_name_or_identifier() {
			return getRuleContext(Object_name_or_identifierContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_stageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_stage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_stage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_stage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_stage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_stageContext drop_stage() throws RecognitionException {
		Drop_stageContext _localctx = new Drop_stageContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_drop_stage);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8937);
			match(DROP);
			setState(8938);
			match(STAGE);
			setState(8940);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1098,_ctx) ) {
			case 1:
				{
				setState(8939);
				if_exists();
				}
				break;
			}
			setState(8942);
			object_name_or_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_stageContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode STAGE() { return getToken(SnowflakeParser.STAGE, 0); }
		public Object_name_or_identifierContext object_name_or_identifier() {
			return getRuleContext(Object_name_or_identifierContext.class,0);
		}
		public Describe_stageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_stage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_stage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_stage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_stage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_stageContext describe_stage() throws RecognitionException {
		Describe_stageContext _localctx = new Describe_stageContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_describe_stage);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8944);
			describe();
			setState(8945);
			match(STAGE);
			setState(8946);
			object_name_or_identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_stagesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode STAGES() { return getToken(SnowflakeParser.STAGES, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public In_objContext in_obj() {
			return getRuleContext(In_objContext.class,0);
		}
		public Show_stagesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_stages; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_stages(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_stages(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_stages(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_stagesContext show_stages() throws RecognitionException {
		Show_stagesContext _localctx = new Show_stagesContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_show_stages);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8948);
			match(SHOW);
			setState(8949);
			match(STAGES);
			setState(8951);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(8950);
				like_pattern();
				}
			}

			setState(8954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(8953);
				in_obj();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cloud_provider_paramsContext extends ParserRuleContext {
		public TerminalNode STORAGE_PROVIDER() { return getToken(SnowflakeParser.STORAGE_PROVIDER, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode S3() { return getToken(SnowflakeParser.S3, 0); }
		public TerminalNode STORAGE_AWS_ROLE_ARN() { return getToken(SnowflakeParser.STORAGE_AWS_ROLE_ARN, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode STORAGE_AWS_OBJECT_ACL() { return getToken(SnowflakeParser.STORAGE_AWS_OBJECT_ACL, 0); }
		public TerminalNode GCS() { return getToken(SnowflakeParser.GCS, 0); }
		public TerminalNode AZURE() { return getToken(SnowflakeParser.AZURE, 0); }
		public TerminalNode AZURE_TENANT_ID() { return getToken(SnowflakeParser.AZURE_TENANT_ID, 0); }
		public Cloud_provider_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloud_provider_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCloud_provider_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCloud_provider_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCloud_provider_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cloud_provider_paramsContext cloud_provider_params() throws RecognitionException {
		Cloud_provider_paramsContext _localctx = new Cloud_provider_paramsContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_cloud_provider_params);
		int _la;
		try {
			setState(8976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1102,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8956);
				match(STORAGE_PROVIDER);
				setState(8957);
				match(EQ);
				setState(8958);
				match(S3);
				setState(8959);
				match(STORAGE_AWS_ROLE_ARN);
				setState(8960);
				match(EQ);
				setState(8961);
				string();
				setState(8965);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_AWS_OBJECT_ACL) {
					{
					setState(8962);
					match(STORAGE_AWS_OBJECT_ACL);
					setState(8963);
					match(EQ);
					setState(8964);
					string();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8967);
				match(STORAGE_PROVIDER);
				setState(8968);
				match(EQ);
				setState(8969);
				match(GCS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8970);
				match(STORAGE_PROVIDER);
				setState(8971);
				match(EQ);
				setState(8972);
				match(AZURE);
				setState(8973);
				match(AZURE_TENANT_ID);
				setState(8974);
				match(EQ);
				setState(8975);
				string();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cloud_provider_params2Context extends ParserRuleContext {
		public TerminalNode STORAGE_AWS_ROLE_ARN() { return getToken(SnowflakeParser.STORAGE_AWS_ROLE_ARN, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode STORAGE_AWS_OBJECT_ACL() { return getToken(SnowflakeParser.STORAGE_AWS_OBJECT_ACL, 0); }
		public TerminalNode AZURE_TENANT_ID() { return getToken(SnowflakeParser.AZURE_TENANT_ID, 0); }
		public Cloud_provider_params2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloud_provider_params2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCloud_provider_params2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCloud_provider_params2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCloud_provider_params2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cloud_provider_params2Context cloud_provider_params2() throws RecognitionException {
		Cloud_provider_params2Context _localctx = new Cloud_provider_params2Context(_ctx, getState());
		enterRule(_localctx, 546, RULE_cloud_provider_params2);
		int _la;
		try {
			setState(8989);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STORAGE_AWS_ROLE_ARN:
				enterOuterAlt(_localctx, 1);
				{
				setState(8978);
				match(STORAGE_AWS_ROLE_ARN);
				setState(8979);
				match(EQ);
				setState(8980);
				string();
				setState(8984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE_AWS_OBJECT_ACL) {
					{
					setState(8981);
					match(STORAGE_AWS_OBJECT_ACL);
					setState(8982);
					match(EQ);
					setState(8983);
					string();
					}
				}

				}
				break;
			case AZURE_TENANT_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(8986);
				match(AZURE_TENANT_ID);
				setState(8987);
				match(EQ);
				setState(8988);
				string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cloud_provider_params3Context extends ParserRuleContext {
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Cloud_provider_params3Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloud_provider_params3; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCloud_provider_params3(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCloud_provider_params3(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCloud_provider_params3(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cloud_provider_params3Context cloud_provider_params3() throws RecognitionException {
		Cloud_provider_params3Context _localctx = new Cloud_provider_params3Context(_ctx, getState());
		enterRule(_localctx, 548, RULE_cloud_provider_params3);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8991);
			match(INTEGRATION);
			setState(8992);
			match(EQ);
			setState(8993);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_storage_integrationContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode STORAGE() { return getToken(SnowflakeParser.STORAGE, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public List<TerminalNode> EQ() { return getTokens(SnowflakeParser.EQ); }
		public TerminalNode EQ(int i) {
			return getToken(SnowflakeParser.EQ, i);
		}
		public TerminalNode EXTERNAL_STAGE() { return getToken(SnowflakeParser.EXTERNAL_STAGE, 0); }
		public Cloud_provider_paramsContext cloud_provider_params() {
			return getRuleContext(Cloud_provider_paramsContext.class,0);
		}
		public TerminalNode ENABLED() { return getToken(SnowflakeParser.ENABLED, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode STORAGE_ALLOWED_LOCATIONS() { return getToken(SnowflakeParser.STORAGE_ALLOWED_LOCATIONS, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<String_listContext> string_list() {
			return getRuleContexts(String_listContext.class);
		}
		public String_listContext string_list(int i) {
			return getRuleContext(String_listContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode STORAGE_BLOCKED_LOCATIONS() { return getToken(SnowflakeParser.STORAGE_BLOCKED_LOCATIONS, 0); }
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_storage_integrationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_storage_integration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_storage_integration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_storage_integration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_storage_integration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_storage_integrationContext create_storage_integration() throws RecognitionException {
		Create_storage_integrationContext _localctx = new Create_storage_integrationContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_create_storage_integration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8995);
			match(CREATE);
			setState(8997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(8996);
				or_replace();
				}
			}

			setState(8999);
			match(STORAGE);
			setState(9000);
			match(INTEGRATION);
			setState(9002);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1106,_ctx) ) {
			case 1:
				{
				setState(9001);
				if_not_exists();
				}
				break;
			}
			setState(9004);
			id_();
			setState(9005);
			match(TYPE);
			setState(9006);
			match(EQ);
			setState(9007);
			match(EXTERNAL_STAGE);
			setState(9008);
			cloud_provider_params();
			setState(9009);
			match(ENABLED);
			setState(9010);
			match(EQ);
			setState(9011);
			true_false();
			setState(9012);
			match(STORAGE_ALLOWED_LOCATIONS);
			setState(9013);
			match(EQ);
			setState(9014);
			match(LR_BRACKET);
			setState(9015);
			string_list();
			setState(9016);
			match(RR_BRACKET);
			setState(9023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORAGE_BLOCKED_LOCATIONS) {
				{
				setState(9017);
				match(STORAGE_BLOCKED_LOCATIONS);
				setState(9018);
				match(EQ);
				setState(9019);
				match(LR_BRACKET);
				setState(9020);
				string_list();
				setState(9021);
				match(RR_BRACKET);
				}
			}

			setState(9026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(9025);
				comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Copy_grantsContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(SnowflakeParser.COPY, 0); }
		public TerminalNode GRANTS() { return getToken(SnowflakeParser.GRANTS, 0); }
		public Copy_grantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_grants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCopy_grants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCopy_grants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCopy_grants(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Copy_grantsContext copy_grants() throws RecognitionException {
		Copy_grantsContext _localctx = new Copy_grantsContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_copy_grants);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9028);
			match(COPY);
			setState(9029);
			match(GRANTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Append_onlyContext extends ParserRuleContext {
		public TerminalNode APPEND_ONLY() { return getToken(SnowflakeParser.APPEND_ONLY, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public Append_onlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_append_only; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAppend_only(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAppend_only(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAppend_only(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Append_onlyContext append_only() throws RecognitionException {
		Append_onlyContext _localctx = new Append_onlyContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_append_only);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9031);
			match(APPEND_ONLY);
			setState(9032);
			match(EQ);
			setState(9033);
			true_false();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Insert_onlyContext extends ParserRuleContext {
		public TerminalNode INSERT_ONLY() { return getToken(SnowflakeParser.INSERT_ONLY, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode TRUE() { return getToken(SnowflakeParser.TRUE, 0); }
		public Insert_onlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_only; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterInsert_only(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitInsert_only(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitInsert_only(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_onlyContext insert_only() throws RecognitionException {
		Insert_onlyContext _localctx = new Insert_onlyContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_insert_only);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9035);
			match(INSERT_ONLY);
			setState(9036);
			match(EQ);
			setState(9037);
			match(TRUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_initial_rowsContext extends ParserRuleContext {
		public TerminalNode SHOW_INITIAL_ROWS() { return getToken(SnowflakeParser.SHOW_INITIAL_ROWS, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public Show_initial_rowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_initial_rows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_initial_rows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_initial_rows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_initial_rows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_initial_rowsContext show_initial_rows() throws RecognitionException {
		Show_initial_rowsContext _localctx = new Show_initial_rowsContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_show_initial_rows);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9039);
			match(SHOW_INITIAL_ROWS);
			setState(9040);
			match(EQ);
			setState(9041);
			true_false();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Stream_timeContext extends ParserRuleContext {
		public At_before1Context at_before1() {
			return getRuleContext(At_before1Context.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SnowflakeParser.TIMESTAMP, 0); }
		public TerminalNode ASSOC() { return getToken(SnowflakeParser.ASSOC, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode OFFSET() { return getToken(SnowflakeParser.OFFSET, 0); }
		public TerminalNode STATEMENT() { return getToken(SnowflakeParser.STATEMENT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode STREAM() { return getToken(SnowflakeParser.STREAM, 0); }
		public Stream_timeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stream_time; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterStream_time(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitStream_time(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitStream_time(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Stream_timeContext stream_time() throws RecognitionException {
		Stream_timeContext _localctx = new Stream_timeContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_stream_time);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9043);
			at_before1();
			setState(9044);
			match(LR_BRACKET);
			setState(9057);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				{
				setState(9045);
				match(TIMESTAMP);
				setState(9046);
				match(ASSOC);
				setState(9047);
				string();
				}
				break;
			case OFFSET:
				{
				setState(9048);
				match(OFFSET);
				setState(9049);
				match(ASSOC);
				setState(9050);
				string();
				}
				break;
			case STATEMENT:
				{
				setState(9051);
				match(STATEMENT);
				setState(9052);
				match(ASSOC);
				setState(9053);
				id_();
				}
				break;
			case STREAM:
				{
				setState(9054);
				match(STREAM);
				setState(9055);
				match(ASSOC);
				setState(9056);
				string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9059);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_streamContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode STREAM() { return getToken(SnowflakeParser.STREAM, 0); }
		public List<Object_nameContext> object_name() {
			return getRuleContexts(Object_nameContext.class);
		}
		public Object_nameContext object_name(int i) {
			return getRuleContext(Object_nameContext.class,i);
		}
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SnowflakeParser.VIEW, 0); }
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public With_tagsContext with_tags() {
			return getRuleContext(With_tagsContext.class,0);
		}
		public Copy_grantsContext copy_grants() {
			return getRuleContext(Copy_grantsContext.class,0);
		}
		public Stream_timeContext stream_time() {
			return getRuleContext(Stream_timeContext.class,0);
		}
		public Append_onlyContext append_only() {
			return getRuleContext(Append_onlyContext.class,0);
		}
		public Show_initial_rowsContext show_initial_rows() {
			return getRuleContext(Show_initial_rowsContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(SnowflakeParser.EXTERNAL, 0); }
		public Insert_onlyContext insert_only() {
			return getRuleContext(Insert_onlyContext.class,0);
		}
		public TerminalNode STAGE() { return getToken(SnowflakeParser.STAGE, 0); }
		public Create_streamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_stream; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_stream(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_stream(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_stream(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_streamContext create_stream() throws RecognitionException {
		Create_streamContext _localctx = new Create_streamContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_create_stream);
		int _la;
		try {
			setState(9140);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1130,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9061);
				match(CREATE);
				setState(9063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(9062);
					or_replace();
					}
				}

				setState(9065);
				match(STREAM);
				setState(9067);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1111,_ctx) ) {
				case 1:
					{
					setState(9066);
					if_not_exists();
					}
					break;
				}
				setState(9069);
				object_name();
				setState(9071);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TAG || _la==WITH) {
					{
					setState(9070);
					with_tags();
					}
				}

				setState(9074);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COPY) {
					{
					setState(9073);
					copy_grants();
					}
				}

				setState(9076);
				match(ON);
				setState(9077);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9078);
				object_name();
				setState(9080);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT_KEYWORD || _la==BEFORE) {
					{
					setState(9079);
					stream_time();
					}
				}

				setState(9083);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==APPEND_ONLY) {
					{
					setState(9082);
					append_only();
					}
				}

				setState(9086);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SHOW_INITIAL_ROWS) {
					{
					setState(9085);
					show_initial_rows();
					}
				}

				setState(9089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(9088);
					comment_clause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9091);
				match(CREATE);
				setState(9093);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(9092);
					or_replace();
					}
				}

				setState(9095);
				match(STREAM);
				setState(9097);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1119,_ctx) ) {
				case 1:
					{
					setState(9096);
					if_not_exists();
					}
					break;
				}
				setState(9099);
				object_name();
				setState(9101);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TAG || _la==WITH) {
					{
					setState(9100);
					with_tags();
					}
				}

				setState(9104);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COPY) {
					{
					setState(9103);
					copy_grants();
					}
				}

				setState(9106);
				match(ON);
				setState(9107);
				match(EXTERNAL);
				setState(9108);
				match(TABLE);
				setState(9109);
				object_name();
				setState(9111);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT_KEYWORD || _la==BEFORE) {
					{
					setState(9110);
					stream_time();
					}
				}

				setState(9114);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INSERT_ONLY) {
					{
					setState(9113);
					insert_only();
					}
				}

				setState(9117);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(9116);
					comment_clause();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9119);
				match(CREATE);
				setState(9121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(9120);
					or_replace();
					}
				}

				setState(9123);
				match(STREAM);
				setState(9125);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1126,_ctx) ) {
				case 1:
					{
					setState(9124);
					if_not_exists();
					}
					break;
				}
				setState(9127);
				object_name();
				setState(9129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TAG || _la==WITH) {
					{
					setState(9128);
					with_tags();
					}
				}

				setState(9132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COPY) {
					{
					setState(9131);
					copy_grants();
					}
				}

				setState(9134);
				match(ON);
				setState(9135);
				match(STAGE);
				setState(9136);
				object_name();
				setState(9138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(9137);
					comment_clause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TemporaryContext extends ParserRuleContext {
		public TerminalNode TEMP() { return getToken(SnowflakeParser.TEMP, 0); }
		public TerminalNode TEMPORARY() { return getToken(SnowflakeParser.TEMPORARY, 0); }
		public TemporaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTemporary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTemporary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTemporary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TemporaryContext temporary() throws RecognitionException {
		TemporaryContext _localctx = new TemporaryContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_temporary);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9142);
			_la = _input.LA(1);
			if ( !(_la==TEMP || _la==TEMPORARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_typeContext extends ParserRuleContext {
		public TemporaryContext temporary() {
			return getRuleContext(TemporaryContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SnowflakeParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(SnowflakeParser.GLOBAL, 0); }
		public TerminalNode VOLATILE() { return getToken(SnowflakeParser.VOLATILE, 0); }
		public TerminalNode TRANSIENT() { return getToken(SnowflakeParser.TRANSIENT, 0); }
		public Table_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTable_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTable_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTable_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_typeContext table_type() throws RecognitionException {
		Table_typeContext _localctx = new Table_typeContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_table_type);
		int _la;
		try {
			setState(9150);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL:
			case LOCAL:
			case TEMP:
			case TEMPORARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(9145);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==LOCAL) {
					{
					setState(9144);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9147);
				temporary();
				}
				break;
			case VOLATILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9148);
				match(VOLATILE);
				}
				break;
			case TRANSIENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(9149);
				match(TRANSIENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_tagsContext extends ParserRuleContext {
		public TerminalNode TAG() { return getToken(SnowflakeParser.TAG, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public List<Tag_declContext> tag_decl() {
			return getRuleContexts(Tag_declContext.class);
		}
		public Tag_declContext tag_decl(int i) {
			return getRuleContext(Tag_declContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public With_tagsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_tags; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterWith_tags(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitWith_tags(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitWith_tags(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_tagsContext with_tags() throws RecognitionException {
		With_tagsContext _localctx = new With_tagsContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_with_tags);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9152);
				match(WITH);
				}
			}

			setState(9155);
			match(TAG);
			setState(9156);
			match(LR_BRACKET);
			setState(9157);
			tag_decl();
			setState(9162);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9158);
				match(COMMA);
				setState(9159);
				tag_decl();
				}
				}
				setState(9164);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9165);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_row_access_policyContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(SnowflakeParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(SnowflakeParser.ACCESS, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public With_row_access_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_row_access_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterWith_row_access_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitWith_row_access_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitWith_row_access_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_row_access_policyContext with_row_access_policy() throws RecognitionException {
		With_row_access_policyContext _localctx = new With_row_access_policyContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_with_row_access_policy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9167);
				match(WITH);
				}
			}

			setState(9170);
			match(ROW);
			setState(9171);
			match(ACCESS);
			setState(9172);
			match(POLICY);
			setState(9173);
			id_();
			setState(9174);
			match(ON);
			setState(9175);
			match(LR_BRACKET);
			setState(9176);
			column_name();
			setState(9181);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9177);
				match(COMMA);
				setState(9178);
				column_name();
				}
				}
				setState(9183);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9184);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cluster_byContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(SnowflakeParser.CLUSTER, 0); }
		public TerminalNode BY() { return getToken(SnowflakeParser.BY, 0); }
		public Expr_list_in_parenthesesContext expr_list_in_parentheses() {
			return getRuleContext(Expr_list_in_parenthesesContext.class,0);
		}
		public TerminalNode LINEAR() { return getToken(SnowflakeParser.LINEAR, 0); }
		public Cluster_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCluster_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCluster_by(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCluster_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cluster_byContext cluster_by() throws RecognitionException {
		Cluster_byContext _localctx = new Cluster_byContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_cluster_by);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9186);
			match(CLUSTER);
			setState(9187);
			match(BY);
			setState(9189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINEAR) {
				{
				setState(9188);
				match(LINEAR);
				}
			}

			setState(9191);
			expr_list_in_parentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Change_trackingContext extends ParserRuleContext {
		public TerminalNode CHANGE_TRACKING() { return getToken(SnowflakeParser.CHANGE_TRACKING, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public Change_trackingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_tracking; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterChange_tracking(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitChange_tracking(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitChange_tracking(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_trackingContext change_tracking() throws RecognitionException {
		Change_trackingContext _localctx = new Change_trackingContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_change_tracking);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9193);
			match(CHANGE_TRACKING);
			setState(9194);
			match(EQ);
			setState(9195);
			true_false();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_masking_policyContext extends ParserRuleContext {
		public TerminalNode MASKING() { return getToken(SnowflakeParser.MASKING, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public TerminalNode USING() { return getToken(SnowflakeParser.USING, 0); }
		public Column_list_in_parenthesesContext column_list_in_parentheses() {
			return getRuleContext(Column_list_in_parenthesesContext.class,0);
		}
		public With_masking_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_masking_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterWith_masking_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitWith_masking_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitWith_masking_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_masking_policyContext with_masking_policy() throws RecognitionException {
		With_masking_policyContext _localctx = new With_masking_policyContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_with_masking_policy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9198);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9197);
				match(WITH);
				}
			}

			setState(9200);
			match(MASKING);
			setState(9201);
			match(POLICY);
			setState(9202);
			id_();
			setState(9205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(9203);
				match(USING);
				setState(9204);
				column_list_in_parentheses();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CollateContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(SnowflakeParser.COLLATE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public CollateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCollate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateContext collate() throws RecognitionException {
		CollateContext _localctx = new CollateContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_collate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9207);
			match(COLLATE);
			setState(9208);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Order_noorderContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(SnowflakeParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(SnowflakeParser.NOORDER, 0); }
		public Order_noorderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_noorder; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterOrder_noorder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitOrder_noorder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitOrder_noorder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_noorderContext order_noorder() throws RecognitionException {
		Order_noorderContext _localctx = new Order_noorderContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_order_noorder);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9210);
			_la = _input.LA(1);
			if ( !(_la==NOORDER || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Default_valueContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SnowflakeParser.DEFAULT, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AUTOINCREMENT() { return getToken(SnowflakeParser.AUTOINCREMENT, 0); }
		public TerminalNode IDENTITY() { return getToken(SnowflakeParser.IDENTITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public List<NumContext> num() {
			return getRuleContexts(NumContext.class);
		}
		public NumContext num(int i) {
			return getRuleContext(NumContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(SnowflakeParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Start_withContext start_with() {
			return getRuleContext(Start_withContext.class,0);
		}
		public Increment_byContext increment_by() {
			return getRuleContext(Increment_byContext.class,0);
		}
		public Order_noorderContext order_noorder() {
			return getRuleContext(Order_noorderContext.class,0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDefault_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDefault_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDefault_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_valueContext default_value() throws RecognitionException {
		Default_valueContext _localctx = new Default_valueContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_default_value);
		int _la;
		try {
			setState(9231);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(9212);
				match(DEFAULT);
				setState(9213);
				expr(0);
				}
				break;
			case AUTOINCREMENT:
			case IDENTITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(9214);
				_la = _input.LA(1);
				if ( !(_la==AUTOINCREMENT || _la==IDENTITY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9226);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1140,_ctx) ) {
				case 1:
					{
					setState(9215);
					match(LR_BRACKET);
					setState(9216);
					num();
					setState(9217);
					match(COMMA);
					setState(9218);
					num();
					setState(9219);
					match(RR_BRACKET);
					}
					break;
				case 2:
					{
					setState(9221);
					start_with();
					}
					break;
				case 3:
					{
					setState(9222);
					increment_by();
					}
					break;
				case 4:
					{
					setState(9223);
					start_with();
					setState(9224);
					increment_by();
					}
					break;
				}
				setState(9229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOORDER || _la==ORDER) {
					{
					setState(9228);
					order_noorder();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Foreign_keyContext extends ParserRuleContext {
		public TerminalNode FOREIGN() { return getToken(SnowflakeParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(SnowflakeParser.KEY, 0); }
		public Foreign_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterForeign_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitForeign_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitForeign_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreign_keyContext foreign_key() throws RecognitionException {
		Foreign_keyContext _localctx = new Foreign_keyContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_foreign_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9233);
			match(FOREIGN);
			setState(9234);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Primary_keyContext extends ParserRuleContext {
		public TerminalNode PRIMARY() { return getToken(SnowflakeParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(SnowflakeParser.KEY, 0); }
		public Primary_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primary_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterPrimary_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitPrimary_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitPrimary_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Primary_keyContext primary_key() throws RecognitionException {
		Primary_keyContext _localctx = new Primary_keyContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_primary_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9236);
			match(PRIMARY);
			setState(9237);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Out_of_line_constraintContext extends ParserRuleContext {
		public List<Column_list_in_parenthesesContext> column_list_in_parentheses() {
			return getRuleContexts(Column_list_in_parenthesesContext.class);
		}
		public Column_list_in_parenthesesContext column_list_in_parentheses(int i) {
			return getRuleContext(Column_list_in_parenthesesContext.class,i);
		}
		public Foreign_keyContext foreign_key() {
			return getRuleContext(Foreign_keyContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(SnowflakeParser.REFERENCES, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Constraint_propertiesContext constraint_properties() {
			return getRuleContext(Constraint_propertiesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SnowflakeParser.CONSTRAINT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Inline_comment_clauseContext inline_comment_clause() {
			return getRuleContext(Inline_comment_clauseContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(SnowflakeParser.UNIQUE, 0); }
		public Primary_keyContext primary_key() {
			return getRuleContext(Primary_keyContext.class,0);
		}
		public List<Common_constraint_propertiesContext> common_constraint_properties() {
			return getRuleContexts(Common_constraint_propertiesContext.class);
		}
		public Common_constraint_propertiesContext common_constraint_properties(int i) {
			return getRuleContext(Common_constraint_propertiesContext.class,i);
		}
		public Out_of_line_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_out_of_line_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterOut_of_line_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitOut_of_line_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitOut_of_line_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Out_of_line_constraintContext out_of_line_constraint() throws RecognitionException {
		Out_of_line_constraintContext _localctx = new Out_of_line_constraintContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_out_of_line_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(9239);
				match(CONSTRAINT);
				setState(9240);
				id_();
				}
			}

			setState(9261);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(9245);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNIQUE:
					{
					setState(9243);
					match(UNIQUE);
					}
					break;
				case PRIMARY:
					{
					setState(9244);
					primary_key();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9247);
				column_list_in_parentheses();
				setState(9251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & 1100048506881L) != 0) || _la==INITIALLY || _la==NORELY || _la==NOT || _la==RELY) {
					{
					{
					setState(9248);
					common_constraint_properties();
					}
					}
					setState(9253);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FOREIGN:
				{
				setState(9254);
				foreign_key();
				setState(9255);
				column_list_in_parentheses();
				setState(9256);
				match(REFERENCES);
				setState(9257);
				object_name();
				setState(9258);
				column_list_in_parentheses();
				setState(9259);
				constraint_properties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(9263);
				inline_comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Full_col_declContext extends ParserRuleContext {
		public Col_declContext col_decl() {
			return getRuleContext(Col_declContext.class,0);
		}
		public List<CollateContext> collate() {
			return getRuleContexts(CollateContext.class);
		}
		public CollateContext collate(int i) {
			return getRuleContext(CollateContext.class,i);
		}
		public List<Inline_constraintContext> inline_constraint() {
			return getRuleContexts(Inline_constraintContext.class);
		}
		public Inline_constraintContext inline_constraint(int i) {
			return getRuleContext(Inline_constraintContext.class,i);
		}
		public List<Null_not_nullContext> null_not_null() {
			return getRuleContexts(Null_not_nullContext.class);
		}
		public Null_not_nullContext null_not_null(int i) {
			return getRuleContext(Null_not_nullContext.class,i);
		}
		public List<Default_valueContext> default_value() {
			return getRuleContexts(Default_valueContext.class);
		}
		public Default_valueContext default_value(int i) {
			return getRuleContext(Default_valueContext.class,i);
		}
		public With_masking_policyContext with_masking_policy() {
			return getRuleContext(With_masking_policyContext.class,0);
		}
		public With_tagsContext with_tags() {
			return getRuleContext(With_tagsContext.class,0);
		}
		public Inline_comment_clauseContext inline_comment_clause() {
			return getRuleContext(Inline_comment_clauseContext.class,0);
		}
		public Full_col_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_col_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFull_col_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFull_col_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFull_col_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_col_declContext full_col_decl() throws RecognitionException {
		Full_col_declContext _localctx = new Full_col_declContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_full_col_decl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9266);
			col_decl();
			setState(9273);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTOINCREMENT || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & 70368744194049L) != 0) || _la==FOREIGN || _la==IDENTITY || _la==NOT || _la==NULL_ || _la==PRIMARY || _la==UNIQUE) {
				{
				setState(9271);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLLATE:
					{
					setState(9267);
					collate();
					}
					break;
				case CONSTRAINT:
				case FOREIGN:
				case PRIMARY:
				case UNIQUE:
					{
					setState(9268);
					inline_constraint();
					}
					break;
				case NOT:
				case NULL_:
					{
					setState(9269);
					null_not_null();
					}
					break;
				case AUTOINCREMENT:
				case DEFAULT:
				case IDENTITY:
					{
					setState(9270);
					default_value();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(9275);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1150,_ctx) ) {
			case 1:
				{
				setState(9276);
				with_masking_policy();
				}
				break;
			}
			setState(9280);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TAG || _la==WITH) {
				{
				setState(9279);
				with_tags();
				}
			}

			setState(9283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(9282);
				inline_comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Materialized_col_declContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public With_masking_policyContext with_masking_policy() {
			return getRuleContext(With_masking_policyContext.class,0);
		}
		public With_tagsContext with_tags() {
			return getRuleContext(With_tagsContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Materialized_col_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materialized_col_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterMaterialized_col_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitMaterialized_col_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitMaterialized_col_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Materialized_col_declContext materialized_col_decl() throws RecognitionException {
		Materialized_col_declContext _localctx = new Materialized_col_declContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_materialized_col_decl);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9285);
			column_name();
			setState(9287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHAR || _la==CHARACTER || _la==INT || _la==NUMBER || _la==OBJECT || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & 8841L) != 0) || ((((_la - 838)) & ~0x3f) == 0 && ((1L << (_la - 838)) & 4294934525L) != 0)) {
				{
				setState(9286);
				data_type();
				}
			}

			setState(9290);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1154,_ctx) ) {
			case 1:
				{
				setState(9289);
				with_masking_policy();
				}
				break;
			}
			setState(9293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TAG || _la==WITH) {
				{
				setState(9292);
				with_tags();
				}
			}

			setState(9297);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(9295);
				match(COMMENT);
				setState(9296);
				string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Materialized_col_decl_listContext extends ParserRuleContext {
		public List<Materialized_col_declContext> materialized_col_decl() {
			return getRuleContexts(Materialized_col_declContext.class);
		}
		public Materialized_col_declContext materialized_col_decl(int i) {
			return getRuleContext(Materialized_col_declContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Materialized_col_decl_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materialized_col_decl_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterMaterialized_col_decl_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitMaterialized_col_decl_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitMaterialized_col_decl_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Materialized_col_decl_listContext materialized_col_decl_list() throws RecognitionException {
		Materialized_col_decl_listContext _localctx = new Materialized_col_decl_listContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_materialized_col_decl_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9299);
			materialized_col_decl();
			setState(9304);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9300);
				match(COMMA);
				setState(9301);
				materialized_col_decl();
				}
				}
				setState(9306);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_decl_itemContext extends ParserRuleContext {
		public Full_col_declContext full_col_decl() {
			return getRuleContext(Full_col_declContext.class,0);
		}
		public Out_of_line_constraintContext out_of_line_constraint() {
			return getRuleContext(Out_of_line_constraintContext.class,0);
		}
		public Column_decl_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_decl_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterColumn_decl_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitColumn_decl_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitColumn_decl_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_decl_itemContext column_decl_item() throws RecognitionException {
		Column_decl_itemContext _localctx = new Column_decl_itemContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_column_decl_item);
		try {
			setState(9309);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCOUNT:
			case ACCOUNTADMIN:
			case ACTION:
			case AES:
			case ALERT:
			case ALERTS:
			case ALLOW_OVERLAPPING_EXECUTION:
			case ANY_VALUE:
			case ARRAY_AGG:
			case AT_KEYWORD:
			case AVG:
			case CAST:
			case CEIL:
			case CHAR:
			case CHARACTER:
			case CHARINDEX:
			case CHECKSUM:
			case CLUSTER:
			case COLLATE:
			case COLLECTION:
			case COMMENT:
			case CONDITION:
			case CONFIGURATION:
			case CONTAINS:
			case COPY_OPTIONS_:
			case COUNT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASES:
			case DATEADD:
			case DATEDIFF:
			case DATE_PART:
			case DAYS:
			case DEFINITION:
			case DELTA:
			case DIRECTION:
			case DISPLAY_NAME:
			case DOWNSTREAM:
			case DYNAMIC:
			case EDITION:
			case EMAIL:
			case EMPTY_:
			case ENABLED:
			case EQUAL_NULL:
			case ERROR_INTEGRATION:
			case EVENT:
			case EXCHANGE:
			case EXPIRY_DATE:
			case EXPR:
			case FILE:
			case FILES:
			case FIRST_NAME:
			case FIRST_VALUE:
			case FLATTEN:
			case FREQUENCY:
			case FUNCTION:
			case GET:
			case GETDATE:
			case GLOBAL:
			case HIGH:
			case HOURS:
			case IDENTIFIER:
			case IDENTITY:
			case IF:
			case IFF:
			case IFNULL:
			case ILIKE:
			case IMPORTED:
			case INCREMENTAL:
			case INDEX:
			case INITIALIZE:
			case INPUT:
			case INT:
			case INTEGRATIONS:
			case INTERVAL:
			case JAVASCRIPT:
			case JOIN:
			case KEY:
			case LAG:
			case LANGUAGE:
			case LAST_NAME:
			case LAST_QUERY_ID:
			case LEAD:
			case LEFT:
			case LENGTH:
			case LIKE:
			case LOCAL:
			case LOW:
			case LOWER:
			case MAX_CONCURRENCY_LEVEL:
			case MEDIUM:
			case MIN:
			case MODE:
			case NAME:
			case NETWORK:
			case NOORDER:
			case NULLIF:
			case NUMBER:
			case NVL:
			case NVL2:
			case OBJECT:
			case OFFSET:
			case OLD:
			case ON_CREATE:
			case ON_ERROR:
			case ON_SCHEDULE:
			case OPTION:
			case ORDER:
			case ORGADMIN:
			case OUTBOUND:
			case OUTER:
			case OWNER:
			case PARTITION:
			case PASSWORD:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCKOUT_TIME_MINS:
			case PASSWORD_MAX_AGE_DAYS:
			case PASSWORD_MAX_LENGTH:
			case PASSWORD_MAX_RETRIES:
			case PASSWORD_MIN_AGE_DAYS:
			case PASSWORD_MIN_LENGTH:
			case PASSWORD_MIN_LOWER_CASE_CHARS:
			case PASSWORD_MIN_NUMERIC_CHARS:
			case PASSWORD_MIN_SPECIAL_CHARS:
			case PASSWORD_MIN_UPPER_CASE_CHARS:
			case PATH_:
			case PATTERN:
			case POLICIES:
			case POLICY:
			case PORT:
			case PRIORITY:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PUBLIC:
			case QUARTER:
			case QUERY:
			case QUERY_TAG:
			case RANK:
			case RECURSIVE:
			case REFERENCES:
			case REFRESH_MODE:
			case REGION:
			case REPLACE:
			case RESOURCE:
			case RESOURCES:
			case RESPECT:
			case RESTRICT:
			case RESULT:
			case RIGHT:
			case ROLE:
			case ROLES:
			case ROLLUP:
			case ROUND:
			case ROUNDING_MODE:
			case ROW_NUMBER:
			case SCALE:
			case SCHEDULE:
			case SCHEMAS:
			case SECURITYADMIN:
			case SEQUENCE:
			case SESSION:
			case SOURCE:
			case SPLIT:
			case SPLIT_PART:
			case SPLIT_TO_TABLE:
			case STAGE:
			case STAGES:
			case START_DATE:
			case STATE:
			case STATS:
			case STATUS:
			case STREAMS:
			case SUBSTR:
			case SUBSTRING:
			case SUM:
			case SYSADMIN:
			case TABLES:
			case TAG:
			case TAGS:
			case TARGET_LAG:
			case TASKS:
			case TEMP:
			case TIME:
			case TIMEADD:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMP_LTZ:
			case TIMESTAMP_NTZ:
			case TIMESTAMP_TZ:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMEZONE:
			case TO_BOOLEAN:
			case TO_DATE:
			case TO_TIMESTAMP:
			case TRUNC:
			case TRUNCATE:
			case TRY_CAST:
			case TYPE:
			case UPPER:
			case URL:
			case USER:
			case USERADMIN:
			case USERS:
			case VALUE:
			case VALUES:
			case VERSION:
			case VIEWS:
			case VISIBILITY:
			case WAREHOUSE:
			case WAREHOUSES:
			case WAREHOUSE_TYPE:
			case YEAR:
			case ARRAY:
			case BIGINT:
			case BINARY:
			case BOOLEAN:
			case BYTEINT:
			case CHAR_VARYING:
			case DATE:
			case DATETIME:
			case DECIMAL_:
			case DOUBLE:
			case DOUBLE_PRECISION:
			case FLOAT4:
			case FLOAT8:
			case FLOAT_:
			case FLOOR:
			case GEOGRAPHY:
			case GEOMETRY:
			case INTEGER:
			case NCHAR:
			case NCHAR_VARYING:
			case NUMERIC:
			case NVARCHAR2:
			case NVARCHAR:
			case REAL_:
			case SMALLINT:
			case STRING_:
			case TEXT:
			case TINYINT:
			case VARBINARY:
			case VARCHAR:
			case VARIANT:
			case DOUBLE_QUOTE_ID:
			case DOUBLE_QUOTE_BLANK:
			case ID:
			case ID2:
				enterOuterAlt(_localctx, 1);
				{
				setState(9307);
				full_col_decl();
				}
				break;
			case CONSTRAINT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9308);
				out_of_line_constraint();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_decl_item_listContext extends ParserRuleContext {
		public List<Column_decl_itemContext> column_decl_item() {
			return getRuleContexts(Column_decl_itemContext.class);
		}
		public Column_decl_itemContext column_decl_item(int i) {
			return getRuleContext(Column_decl_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Column_decl_item_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_decl_item_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterColumn_decl_item_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitColumn_decl_item_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitColumn_decl_item_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_decl_item_listContext column_decl_item_list() throws RecognitionException {
		Column_decl_item_listContext _localctx = new Column_decl_item_listContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_column_decl_item_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9311);
			column_decl_item();
			setState(9316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9312);
				match(COMMA);
				setState(9313);
				column_decl_item();
				}
				}
				setState(9318);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Create_table_clauseContext create_table_clause() {
			return getRuleContext(Create_table_clauseContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public Or_alterContext or_alter() {
			return getRuleContext(Or_alterContext.class,0);
		}
		public Table_typeContext table_type() {
			return getRuleContext(Table_typeContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_create_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9319);
			match(CREATE);
			setState(9322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1160,_ctx) ) {
			case 1:
				{
				setState(9320);
				or_replace();
				}
				break;
			case 2:
				{
				setState(9321);
				or_alter();
				}
				break;
			}
			setState(9325);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==LOCAL || ((((_la - 736)) & ~0x3f) == 0 && ((1L << (_la - 736)) & 17179869187L) != 0) || _la==VOLATILE) {
				{
				setState(9324);
				table_type();
				}
			}

			setState(9327);
			match(TABLE);
			setState(9336);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1164,_ctx) ) {
			case 1:
				{
				setState(9329);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1162,_ctx) ) {
				case 1:
					{
					setState(9328);
					if_not_exists();
					}
					break;
				}
				setState(9331);
				object_name();
				}
				break;
			case 2:
				{
				setState(9332);
				object_name();
				setState(9334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(9333);
					if_not_exists();
					}
				}

				}
				break;
			}
			setState(9346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1167,_ctx) ) {
			case 1:
				{
				setState(9339);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1165,_ctx) ) {
				case 1:
					{
					setState(9338);
					comment_clause();
					}
					break;
				}
				setState(9341);
				create_table_clause();
				}
				break;
			case 2:
				{
				setState(9342);
				create_table_clause();
				setState(9344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(9343);
					comment_clause();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_decl_item_list_parenContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Column_decl_item_listContext column_decl_item_list() {
			return getRuleContext(Column_decl_item_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Column_decl_item_list_parenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_decl_item_list_paren; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterColumn_decl_item_list_paren(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitColumn_decl_item_list_paren(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitColumn_decl_item_list_paren(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_decl_item_list_parenContext column_decl_item_list_paren() throws RecognitionException {
		Column_decl_item_list_parenContext _localctx = new Column_decl_item_list_parenContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_column_decl_item_list_paren);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9348);
			match(LR_BRACKET);
			setState(9349);
			column_decl_item_list();
			setState(9350);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_table_clauseContext extends ParserRuleContext {
		public Column_decl_item_list_parenContext column_decl_item_list_paren() {
			return getRuleContext(Column_decl_item_list_parenContext.class,0);
		}
		public Stage_file_formatContext stage_file_format() {
			return getRuleContext(Stage_file_formatContext.class,0);
		}
		public TerminalNode STAGE_COPY_OPTIONS() { return getToken(SnowflakeParser.STAGE_COPY_OPTIONS, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Copy_optionsContext copy_options() {
			return getRuleContext(Copy_optionsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Set_data_retention_paramsContext set_data_retention_params() {
			return getRuleContext(Set_data_retention_paramsContext.class,0);
		}
		public Change_trackingContext change_tracking() {
			return getRuleContext(Change_trackingContext.class,0);
		}
		public Default_ddl_collationContext default_ddl_collation() {
			return getRuleContext(Default_ddl_collationContext.class,0);
		}
		public Copy_grantsContext copy_grants() {
			return getRuleContext(Copy_grantsContext.class,0);
		}
		public List<Comment_clauseContext> comment_clause() {
			return getRuleContexts(Comment_clauseContext.class);
		}
		public Comment_clauseContext comment_clause(int i) {
			return getRuleContext(Comment_clauseContext.class,i);
		}
		public With_row_access_policyContext with_row_access_policy() {
			return getRuleContext(With_row_access_policyContext.class,0);
		}
		public With_tagsContext with_tags() {
			return getRuleContext(With_tagsContext.class,0);
		}
		public Cluster_byContext cluster_by() {
			return getRuleContext(Cluster_byContext.class,0);
		}
		public Create_table_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_table_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_table_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_table_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_clauseContext create_table_clause() throws RecognitionException {
		Create_table_clauseContext _localctx = new Create_table_clauseContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_create_table_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1171,_ctx) ) {
			case 1:
				{
				setState(9352);
				column_decl_item_list_paren();
				setState(9354);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTER) {
					{
					setState(9353);
					cluster_by();
					}
				}

				}
				break;
			case 2:
				{
				setState(9357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTER) {
					{
					setState(9356);
					cluster_by();
					}
				}

				setState(9360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(9359);
					comment_clause();
					}
				}

				setState(9362);
				column_decl_item_list_paren();
				}
				break;
			}
			setState(9366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STAGE_FILE_FORMAT || _la==TYPE) {
				{
				setState(9365);
				stage_file_format();
				}
			}

			setState(9374);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STAGE_COPY_OPTIONS) {
				{
				setState(9368);
				match(STAGE_COPY_OPTIONS);
				setState(9369);
				match(EQ);
				setState(9370);
				match(LR_BRACKET);
				setState(9371);
				copy_options();
				setState(9372);
				match(RR_BRACKET);
				}
			}

			setState(9377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DATA_RETENTION_TIME_IN_DAYS || _la==MAX_DATA_EXTENSION_TIME_IN_DAYS) {
				{
				setState(9376);
				set_data_retention_params();
				}
			}

			setState(9380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHANGE_TRACKING) {
				{
				setState(9379);
				change_tracking();
				}
			}

			setState(9383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT_DDL_COLLATION_) {
				{
				setState(9382);
				default_ddl_collation();
				}
			}

			setState(9386);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COPY) {
				{
				setState(9385);
				copy_grants();
				}
			}

			setState(9389);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1178,_ctx) ) {
			case 1:
				{
				setState(9388);
				comment_clause();
				}
				break;
			}
			setState(9392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1179,_ctx) ) {
			case 1:
				{
				setState(9391);
				with_row_access_policy();
				}
				break;
			}
			setState(9395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TAG || _la==WITH) {
				{
				setState(9394);
				with_tags();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_table_as_selectContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public Query_statementContext query_statement() {
			return getRuleContext(Query_statementContext.class,0);
		}
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public Table_typeContext table_type() {
			return getRuleContext(Table_typeContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Column_decl_item_listContext column_decl_item_list() {
			return getRuleContext(Column_decl_item_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Cluster_byContext cluster_by() {
			return getRuleContext(Cluster_byContext.class,0);
		}
		public Copy_grantsContext copy_grants() {
			return getRuleContext(Copy_grantsContext.class,0);
		}
		public With_row_access_policyContext with_row_access_policy() {
			return getRuleContext(With_row_access_policyContext.class,0);
		}
		public With_tagsContext with_tags() {
			return getRuleContext(With_tagsContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Create_table_as_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_as_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_table_as_select(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_table_as_select(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_table_as_select(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_as_selectContext create_table_as_select() throws RecognitionException {
		Create_table_as_selectContext _localctx = new Create_table_as_selectContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_create_table_as_select);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9397);
			match(CREATE);
			setState(9399);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(9398);
				or_replace();
				}
			}

			setState(9402);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==LOCAL || ((((_la - 736)) & ~0x3f) == 0 && ((1L << (_la - 736)) & 17179869187L) != 0) || _la==VOLATILE) {
				{
				setState(9401);
				table_type();
				}
			}

			setState(9404);
			match(TABLE);
			setState(9413);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1185,_ctx) ) {
			case 1:
				{
				setState(9406);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1183,_ctx) ) {
				case 1:
					{
					setState(9405);
					if_not_exists();
					}
					break;
				}
				setState(9408);
				object_name();
				}
				break;
			case 2:
				{
				setState(9409);
				object_name();
				setState(9411);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(9410);
					if_not_exists();
					}
				}

				}
				break;
			}
			setState(9419);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(9415);
				match(LR_BRACKET);
				setState(9416);
				column_decl_item_list();
				setState(9417);
				match(RR_BRACKET);
				}
			}

			setState(9422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTER) {
				{
				setState(9421);
				cluster_by();
				}
			}

			setState(9425);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COPY) {
				{
				setState(9424);
				copy_grants();
				}
			}

			setState(9428);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1189,_ctx) ) {
			case 1:
				{
				setState(9427);
				with_row_access_policy();
				}
				break;
			}
			setState(9431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TAG || _la==WITH) {
				{
				setState(9430);
				with_tags();
				}
			}

			setState(9434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(9433);
				comment_clause();
				}
			}

			setState(9436);
			match(AS);
			setState(9437);
			query_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_table_likeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public List<Object_nameContext> object_name() {
			return getRuleContexts(Object_nameContext.class);
		}
		public Object_nameContext object_name(int i) {
			return getRuleContext(Object_nameContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(SnowflakeParser.LIKE, 0); }
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public TerminalNode TRANSIENT() { return getToken(SnowflakeParser.TRANSIENT, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Cluster_byContext cluster_by() {
			return getRuleContext(Cluster_byContext.class,0);
		}
		public Copy_grantsContext copy_grants() {
			return getRuleContext(Copy_grantsContext.class,0);
		}
		public Create_table_likeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_like; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_table_like(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_table_like(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_table_like(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_table_likeContext create_table_like() throws RecognitionException {
		Create_table_likeContext _localctx = new Create_table_likeContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_create_table_like);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9439);
			match(CREATE);
			setState(9441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(9440);
				or_replace();
				}
			}

			setState(9444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRANSIENT) {
				{
				setState(9443);
				match(TRANSIENT);
				}
			}

			setState(9446);
			match(TABLE);
			setState(9448);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1194,_ctx) ) {
			case 1:
				{
				setState(9447);
				if_not_exists();
				}
				break;
			}
			setState(9450);
			object_name();
			setState(9451);
			match(LIKE);
			setState(9452);
			object_name();
			setState(9454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTER) {
				{
				setState(9453);
				cluster_by();
				}
			}

			setState(9457);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COPY) {
				{
				setState(9456);
				copy_grants();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_tagContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode TAG() { return getToken(SnowflakeParser.TAG, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Tag_allowed_valuesContext tag_allowed_values() {
			return getRuleContext(Tag_allowed_valuesContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_tagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_tag; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_tag(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_tag(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_tag(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tagContext create_tag() throws RecognitionException {
		Create_tagContext _localctx = new Create_tagContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_create_tag);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9459);
			match(CREATE);
			setState(9461);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(9460);
				or_replace();
				}
			}

			setState(9463);
			match(TAG);
			setState(9465);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1198,_ctx) ) {
			case 1:
				{
				setState(9464);
				if_not_exists();
				}
				break;
			}
			setState(9467);
			object_name();
			setState(9469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALLOWED_VALUES) {
				{
				setState(9468);
				tag_allowed_values();
				}
			}

			setState(9472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(9471);
				comment_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Tag_allowed_valuesContext extends ParserRuleContext {
		public TerminalNode ALLOWED_VALUES() { return getToken(SnowflakeParser.ALLOWED_VALUES, 0); }
		public String_listContext string_list() {
			return getRuleContext(String_listContext.class,0);
		}
		public Tag_allowed_valuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tag_allowed_values; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTag_allowed_values(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTag_allowed_values(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTag_allowed_values(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tag_allowed_valuesContext tag_allowed_values() throws RecognitionException {
		Tag_allowed_valuesContext _localctx = new Tag_allowed_valuesContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_tag_allowed_values);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9474);
			match(ALLOWED_VALUES);
			setState(9475);
			string_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Session_parameterContext extends ParserRuleContext {
		public TerminalNode ABORT_DETACHED_QUERY() { return getToken(SnowflakeParser.ABORT_DETACHED_QUERY, 0); }
		public TerminalNode ALLOW_CLIENT_MFA_CACHING() { return getToken(SnowflakeParser.ALLOW_CLIENT_MFA_CACHING, 0); }
		public TerminalNode ALLOW_ID_TOKEN() { return getToken(SnowflakeParser.ALLOW_ID_TOKEN, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(SnowflakeParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOCOMMIT_API_SUPPORTED() { return getToken(SnowflakeParser.AUTOCOMMIT_API_SUPPORTED, 0); }
		public TerminalNode BINARY_INPUT_FORMAT() { return getToken(SnowflakeParser.BINARY_INPUT_FORMAT, 0); }
		public TerminalNode BINARY_OUTPUT_FORMAT() { return getToken(SnowflakeParser.BINARY_OUTPUT_FORMAT, 0); }
		public TerminalNode CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS() { return getToken(SnowflakeParser.CLIENT_ENABLE_LOG_INFO_STATEMENT_PARAMETERS, 0); }
		public TerminalNode CLIENT_ENCRYPTION_KEY_SIZE() { return getToken(SnowflakeParser.CLIENT_ENCRYPTION_KEY_SIZE, 0); }
		public TerminalNode CLIENT_MEMORY_LIMIT() { return getToken(SnowflakeParser.CLIENT_MEMORY_LIMIT, 0); }
		public TerminalNode CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX() { return getToken(SnowflakeParser.CLIENT_METADATA_REQUEST_USE_CONNECTION_CTX, 0); }
		public TerminalNode CLIENT_METADATA_USE_SESSION_DATABASE() { return getToken(SnowflakeParser.CLIENT_METADATA_USE_SESSION_DATABASE, 0); }
		public TerminalNode CLIENT_PREFETCH_THREADS() { return getToken(SnowflakeParser.CLIENT_PREFETCH_THREADS, 0); }
		public TerminalNode CLIENT_RESULT_CHUNK_SIZE() { return getToken(SnowflakeParser.CLIENT_RESULT_CHUNK_SIZE, 0); }
		public TerminalNode CLIENT_RESULT_COLUMN_CASE_INSENSITIVE() { return getToken(SnowflakeParser.CLIENT_RESULT_COLUMN_CASE_INSENSITIVE, 0); }
		public TerminalNode CLIENT_SESSION_KEEP_ALIVE() { return getToken(SnowflakeParser.CLIENT_SESSION_KEEP_ALIVE, 0); }
		public TerminalNode CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY() { return getToken(SnowflakeParser.CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY, 0); }
		public TerminalNode CLIENT_TIMESTAMP_TYPE_MAPPING() { return getToken(SnowflakeParser.CLIENT_TIMESTAMP_TYPE_MAPPING, 0); }
		public TerminalNode DATA_RETENTION_TIME_IN_DAYS() { return getToken(SnowflakeParser.DATA_RETENTION_TIME_IN_DAYS, 0); }
		public TerminalNode DATE_INPUT_FORMAT() { return getToken(SnowflakeParser.DATE_INPUT_FORMAT, 0); }
		public TerminalNode DATE_OUTPUT_FORMAT() { return getToken(SnowflakeParser.DATE_OUTPUT_FORMAT, 0); }
		public TerminalNode DEFAULT_DDL_COLLATION_() { return getToken(SnowflakeParser.DEFAULT_DDL_COLLATION_, 0); }
		public TerminalNode ENABLE_INTERNAL_STAGES_PRIVATELINK() { return getToken(SnowflakeParser.ENABLE_INTERNAL_STAGES_PRIVATELINK, 0); }
		public TerminalNode ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION() { return getToken(SnowflakeParser.ENABLE_UNLOAD_PHYSICAL_TYPE_OPTIMIZATION, 0); }
		public TerminalNode ENFORCE_SESSION_POLICY() { return getToken(SnowflakeParser.ENFORCE_SESSION_POLICY, 0); }
		public TerminalNode ERROR_ON_NONDETERMINISTIC_MERGE() { return getToken(SnowflakeParser.ERROR_ON_NONDETERMINISTIC_MERGE, 0); }
		public TerminalNode ERROR_ON_NONDETERMINISTIC_UPDATE() { return getToken(SnowflakeParser.ERROR_ON_NONDETERMINISTIC_UPDATE, 0); }
		public TerminalNode EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST() { return getToken(SnowflakeParser.EXTERNAL_OAUTH_ADD_PRIVILEGED_ROLES_TO_BLOCKED_LIST, 0); }
		public TerminalNode GEOGRAPHY_OUTPUT_FORMAT() { return getToken(SnowflakeParser.GEOGRAPHY_OUTPUT_FORMAT, 0); }
		public TerminalNode GEOMETRY_OUTPUT_FORMAT() { return getToken(SnowflakeParser.GEOMETRY_OUTPUT_FORMAT, 0); }
		public TerminalNode INITIAL_REPLICATION_SIZE_LIMIT_IN_TB() { return getToken(SnowflakeParser.INITIAL_REPLICATION_SIZE_LIMIT_IN_TB, 0); }
		public TerminalNode JDBC_TREAT_DECIMAL_AS_INT() { return getToken(SnowflakeParser.JDBC_TREAT_DECIMAL_AS_INT, 0); }
		public TerminalNode JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC() { return getToken(SnowflakeParser.JDBC_TREAT_TIMESTAMP_NTZ_AS_UTC, 0); }
		public TerminalNode JDBC_USE_SESSION_TIMEZONE() { return getToken(SnowflakeParser.JDBC_USE_SESSION_TIMEZONE, 0); }
		public TerminalNode JSON_INDENT() { return getToken(SnowflakeParser.JSON_INDENT, 0); }
		public TerminalNode JS_TREAT_INTEGER_AS_BIGINT() { return getToken(SnowflakeParser.JS_TREAT_INTEGER_AS_BIGINT, 0); }
		public TerminalNode LOCK_TIMEOUT() { return getToken(SnowflakeParser.LOCK_TIMEOUT, 0); }
		public TerminalNode MAX_CONCURRENCY_LEVEL() { return getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0); }
		public TerminalNode MAX_DATA_EXTENSION_TIME_IN_DAYS() { return getToken(SnowflakeParser.MAX_DATA_EXTENSION_TIME_IN_DAYS, 0); }
		public TerminalNode MULTI_STATEMENT_COUNT() { return getToken(SnowflakeParser.MULTI_STATEMENT_COUNT, 0); }
		public TerminalNode MIN_DATA_RETENTION_TIME_IN_DAYS() { return getToken(SnowflakeParser.MIN_DATA_RETENTION_TIME_IN_DAYS, 0); }
		public TerminalNode NETWORK_POLICY() { return getToken(SnowflakeParser.NETWORK_POLICY, 0); }
		public TerminalNode SHARE_RESTRICTIONS() { return getToken(SnowflakeParser.SHARE_RESTRICTIONS, 0); }
		public TerminalNode PERIODIC_DATA_REKEYING() { return getToken(SnowflakeParser.PERIODIC_DATA_REKEYING, 0); }
		public TerminalNode PIPE_EXECUTION_PAUSED() { return getToken(SnowflakeParser.PIPE_EXECUTION_PAUSED, 0); }
		public TerminalNode PREVENT_UNLOAD_TO_INLINE_URL() { return getToken(SnowflakeParser.PREVENT_UNLOAD_TO_INLINE_URL, 0); }
		public TerminalNode PREVENT_UNLOAD_TO_INTERNAL_STAGES() { return getToken(SnowflakeParser.PREVENT_UNLOAD_TO_INTERNAL_STAGES, 0); }
		public TerminalNode QUERY_TAG() { return getToken(SnowflakeParser.QUERY_TAG, 0); }
		public TerminalNode QUOTED_IDENTIFIERS_IGNORE_CASE() { return getToken(SnowflakeParser.QUOTED_IDENTIFIERS_IGNORE_CASE, 0); }
		public TerminalNode REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION() { return getToken(SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_CREATION, 0); }
		public TerminalNode REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION() { return getToken(SnowflakeParser.REQUIRE_STORAGE_INTEGRATION_FOR_STAGE_OPERATION, 0); }
		public TerminalNode ROWS_PER_RESULTSET() { return getToken(SnowflakeParser.ROWS_PER_RESULTSET, 0); }
		public TerminalNode SAML_IDENTITY_PROVIDER() { return getToken(SnowflakeParser.SAML_IDENTITY_PROVIDER, 0); }
		public TerminalNode SIMULATED_DATA_SHARING_CONSUMER() { return getToken(SnowflakeParser.SIMULATED_DATA_SHARING_CONSUMER, 0); }
		public TerminalNode SSO_LOGIN_PAGE() { return getToken(SnowflakeParser.SSO_LOGIN_PAGE, 0); }
		public TerminalNode STATEMENT_QUEUED_TIMEOUT_IN_SECONDS() { return getToken(SnowflakeParser.STATEMENT_QUEUED_TIMEOUT_IN_SECONDS, 0); }
		public TerminalNode STATEMENT_TIMEOUT_IN_SECONDS() { return getToken(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS, 0); }
		public TerminalNode STRICT_JSON_OUTPUT() { return getToken(SnowflakeParser.STRICT_JSON_OUTPUT, 0); }
		public TerminalNode SUSPEND_TASK_AFTER_NUM_FAILURES() { return getToken(SnowflakeParser.SUSPEND_TASK_AFTER_NUM_FAILURES, 0); }
		public TerminalNode TIMESTAMP_DAY_IS_ALWAYS_24H() { return getToken(SnowflakeParser.TIMESTAMP_DAY_IS_ALWAYS_24H, 0); }
		public TerminalNode TIMESTAMP_INPUT_FORMAT() { return getToken(SnowflakeParser.TIMESTAMP_INPUT_FORMAT, 0); }
		public TerminalNode TIMESTAMP_LTZ_OUTPUT_FORMAT() { return getToken(SnowflakeParser.TIMESTAMP_LTZ_OUTPUT_FORMAT, 0); }
		public TerminalNode TIMESTAMP_NTZ_OUTPUT_FORMAT() { return getToken(SnowflakeParser.TIMESTAMP_NTZ_OUTPUT_FORMAT, 0); }
		public TerminalNode TIMESTAMP_OUTPUT_FORMAT() { return getToken(SnowflakeParser.TIMESTAMP_OUTPUT_FORMAT, 0); }
		public TerminalNode TIMESTAMP_TYPE_MAPPING() { return getToken(SnowflakeParser.TIMESTAMP_TYPE_MAPPING, 0); }
		public TerminalNode TIMESTAMP_TZ_OUTPUT_FORMAT() { return getToken(SnowflakeParser.TIMESTAMP_TZ_OUTPUT_FORMAT, 0); }
		public TerminalNode TIMEZONE() { return getToken(SnowflakeParser.TIMEZONE, 0); }
		public TerminalNode TIME_INPUT_FORMAT() { return getToken(SnowflakeParser.TIME_INPUT_FORMAT, 0); }
		public TerminalNode TIME_OUTPUT_FORMAT() { return getToken(SnowflakeParser.TIME_OUTPUT_FORMAT, 0); }
		public TerminalNode TRANSACTION_ABORT_ON_ERROR() { return getToken(SnowflakeParser.TRANSACTION_ABORT_ON_ERROR, 0); }
		public TerminalNode TRANSACTION_DEFAULT_ISOLATION_LEVEL() { return getToken(SnowflakeParser.TRANSACTION_DEFAULT_ISOLATION_LEVEL, 0); }
		public TerminalNode TWO_DIGIT_CENTURY_START() { return getToken(SnowflakeParser.TWO_DIGIT_CENTURY_START, 0); }
		public TerminalNode UNSUPPORTED_DDL_ACTION() { return getToken(SnowflakeParser.UNSUPPORTED_DDL_ACTION, 0); }
		public TerminalNode USE_CACHED_RESULT() { return getToken(SnowflakeParser.USE_CACHED_RESULT, 0); }
		public TerminalNode USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE() { return getToken(SnowflakeParser.USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE, 0); }
		public TerminalNode USER_TASK_TIMEOUT_MS() { return getToken(SnowflakeParser.USER_TASK_TIMEOUT_MS, 0); }
		public TerminalNode WEEK_OF_YEAR_POLICY() { return getToken(SnowflakeParser.WEEK_OF_YEAR_POLICY, 0); }
		public TerminalNode WEEK_START() { return getToken(SnowflakeParser.WEEK_START, 0); }
		public Session_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_session_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSession_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSession_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSession_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Session_parameterContext session_parameter() throws RecognitionException {
		Session_parameterContext _localctx = new Session_parameterContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_session_parameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9477);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 6755399524941832L) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & 549487378435L) != 0) || ((((_la - 167)) & ~0x3f) == 0 && ((1L << (_la - 167)) & -4538995105691859919L) != 0) || ((((_la - 245)) & ~0x3f) == 0 && ((1L << (_la - 245)) & 422212465065985L) != 0) || ((((_la - 338)) & ~0x3f) == 0 && ((1L << (_la - 338)) & 35184375349249L) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & 69214211L) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & 3458764535295383569L) != 0) || ((((_la - 609)) & ~0x3f) == 0 && ((1L << (_la - 609)) & 9570149212356609L) != 0) || ((((_la - 683)) & ~0x3f) == 0 && ((1L << (_la - 683)) & -6917528958854483967L) != 0) || ((((_la - 748)) & ~0x3f) == 0 && ((1L << (_la - 748)) & 6193001394084445L) != 0) || _la==WEEK_OF_YEAR_POLICY || _la==WEEK_START) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Session_parameter_listContext extends ParserRuleContext {
		public List<Session_parameterContext> session_parameter() {
			return getRuleContexts(Session_parameterContext.class);
		}
		public Session_parameterContext session_parameter(int i) {
			return getRuleContext(Session_parameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Session_parameter_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_session_parameter_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSession_parameter_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSession_parameter_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSession_parameter_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Session_parameter_listContext session_parameter_list() throws RecognitionException {
		Session_parameter_listContext _localctx = new Session_parameter_listContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_session_parameter_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9479);
			session_parameter();
			setState(9484);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9480);
				match(COMMA);
				setState(9481);
				session_parameter();
				}
				}
				setState(9486);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Session_params_listContext extends ParserRuleContext {
		public List<Session_paramsContext> session_params() {
			return getRuleContexts(Session_paramsContext.class);
		}
		public Session_paramsContext session_params(int i) {
			return getRuleContext(Session_paramsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Session_params_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_session_params_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSession_params_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSession_params_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSession_params_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Session_params_listContext session_params_list() throws RecognitionException {
		Session_params_listContext _localctx = new Session_params_listContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_session_params_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9487);
			session_params();
			setState(9492);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9488);
				match(COMMA);
				setState(9489);
				session_params();
				}
				}
				setState(9494);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_taskContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode TASK() { return getToken(SnowflakeParser.TASK, 0); }
		public List<Object_nameContext> object_name() {
			return getRuleContexts(Object_nameContext.class);
		}
		public Object_nameContext object_name(int i) {
			return getRuleContext(Object_nameContext.class,i);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public SqlContext sql() {
			return getRuleContext(SqlContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public List<Task_parametersContext> task_parameters() {
			return getRuleContexts(Task_parametersContext.class);
		}
		public Task_parametersContext task_parameters(int i) {
			return getRuleContext(Task_parametersContext.class,i);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Copy_grantsContext copy_grants() {
			return getRuleContext(Copy_grantsContext.class,0);
		}
		public TerminalNode AFTER() { return getToken(SnowflakeParser.AFTER, 0); }
		public TerminalNode WHEN() { return getToken(SnowflakeParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Create_taskContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_task; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_task(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_task(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_task(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_taskContext create_task() throws RecognitionException {
		Create_taskContext _localctx = new Create_taskContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_create_task);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9495);
			match(CREATE);
			setState(9497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(9496);
				or_replace();
				}
			}

			setState(9499);
			match(TASK);
			setState(9501);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1204,_ctx) ) {
			case 1:
				{
				setState(9500);
				if_not_exists();
				}
				break;
			}
			setState(9503);
			object_name();
			setState(9507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2251799947902984L) != 0) || _la==BINARY_INPUT_FORMAT || _la==BINARY_OUTPUT_FORMAT || ((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & 936748722493063171L) != 0) || _la==JSON_INDENT || _la==LOCK_TIMEOUT || _la==QUERY_TAG || _la==ROWS_PER_RESULTSET || ((((_la - 636)) & ~0x3f) == 0 && ((1L << (_la - 636)) & 1152921504673955841L) != 0) || ((((_la - 709)) & ~0x3f) == 0 && ((1L << (_la - 709)) & 1156631978393469953L) != 0) || ((((_la - 779)) & ~0x3f) == 0 && ((1L << (_la - 779)) & 1666450194689L) != 0)) {
				{
				{
				setState(9504);
				task_parameters();
				}
				}
				setState(9509);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9511);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(9510);
				comment_clause();
				}
			}

			setState(9514);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COPY) {
				{
				setState(9513);
				copy_grants();
				}
			}

			setState(9525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AFTER) {
				{
				setState(9516);
				match(AFTER);
				setState(9517);
				object_name();
				setState(9522);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9518);
					match(COMMA);
					setState(9519);
					object_name();
					}
					}
					setState(9524);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(9529);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(9527);
				match(WHEN);
				setState(9528);
				search_condition(0);
				}
			}

			setState(9531);
			match(AS);
			setState(9532);
			sql();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Task_parametersContext extends ParserRuleContext {
		public Task_computeContext task_compute() {
			return getRuleContext(Task_computeContext.class,0);
		}
		public Task_scheduleContext task_schedule() {
			return getRuleContext(Task_scheduleContext.class,0);
		}
		public Task_overlapContext task_overlap() {
			return getRuleContext(Task_overlapContext.class,0);
		}
		public Session_params_listContext session_params_list() {
			return getRuleContext(Session_params_listContext.class,0);
		}
		public Task_timeoutContext task_timeout() {
			return getRuleContext(Task_timeoutContext.class,0);
		}
		public Task_suspend_after_failure_numberContext task_suspend_after_failure_number() {
			return getRuleContext(Task_suspend_after_failure_numberContext.class,0);
		}
		public Task_error_integrationContext task_error_integration() {
			return getRuleContext(Task_error_integrationContext.class,0);
		}
		public Task_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_task_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTask_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTask_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTask_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Task_parametersContext task_parameters() throws RecognitionException {
		Task_parametersContext _localctx = new Task_parametersContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_task_parameters);
		try {
			setState(9541);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE:
			case WAREHOUSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9534);
				task_compute();
				}
				break;
			case SCHEDULE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9535);
				task_schedule();
				}
				break;
			case ALLOW_OVERLAPPING_EXECUTION:
				enterOuterAlt(_localctx, 3);
				{
				setState(9536);
				task_overlap();
				}
				break;
			case ABORT_DETACHED_QUERY:
			case AUTOCOMMIT:
			case BINARY_INPUT_FORMAT:
			case BINARY_OUTPUT_FORMAT:
			case DATE_INPUT_FORMAT:
			case DATE_OUTPUT_FORMAT:
			case ERROR_ON_NONDETERMINISTIC_MERGE:
			case ERROR_ON_NONDETERMINISTIC_UPDATE:
			case JSON_INDENT:
			case LOCK_TIMEOUT:
			case QUERY_TAG:
			case ROWS_PER_RESULTSET:
			case SIMULATED_DATA_SHARING_CONSUMER:
			case STATEMENT_TIMEOUT_IN_SECONDS:
			case STRICT_JSON_OUTPUT:
			case TIMESTAMP_DAY_IS_ALWAYS_24H:
			case TIMESTAMP_INPUT_FORMAT:
			case TIMESTAMP_LTZ_OUTPUT_FORMAT:
			case TIMESTAMP_NTZ_OUTPUT_FORMAT:
			case TIMESTAMP_OUTPUT_FORMAT:
			case TIMESTAMP_TYPE_MAPPING:
			case TIMESTAMP_TZ_OUTPUT_FORMAT:
			case TIMEZONE:
			case TIME_INPUT_FORMAT:
			case TIME_OUTPUT_FORMAT:
			case TRANSACTION_DEFAULT_ISOLATION_LEVEL:
			case TWO_DIGIT_CENTURY_START:
			case UNSUPPORTED_DDL_ACTION:
			case USE_CACHED_RESULT:
			case WEEK_OF_YEAR_POLICY:
			case WEEK_START:
				enterOuterAlt(_localctx, 4);
				{
				setState(9537);
				session_params_list();
				}
				break;
			case USER_TASK_TIMEOUT_MS:
				enterOuterAlt(_localctx, 5);
				{
				setState(9538);
				task_timeout();
				}
				break;
			case SUSPEND_TASK_AFTER_NUM_FAILURES:
				enterOuterAlt(_localctx, 6);
				{
				setState(9539);
				task_suspend_after_failure_number();
				}
				break;
			case ERROR_INTEGRATION:
				enterOuterAlt(_localctx, 7);
				{
				setState(9540);
				task_error_integration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Task_computeContext extends ParserRuleContext {
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE() { return getToken(SnowflakeParser.USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE, 0); }
		public Wh_common_sizeContext wh_common_size() {
			return getRuleContext(Wh_common_sizeContext.class,0);
		}
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Task_computeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_task_compute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTask_compute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTask_compute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTask_compute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Task_computeContext task_compute() throws RecognitionException {
		Task_computeContext _localctx = new Task_computeContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_task_compute);
		try {
			setState(9552);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAREHOUSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9543);
				match(WAREHOUSE);
				setState(9544);
				match(EQ);
				setState(9545);
				id_();
				}
				break;
			case USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9546);
				match(USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE);
				setState(9547);
				match(EQ);
				setState(9550);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LARGE:
				case MEDIUM:
				case SMALL:
				case XLARGE:
				case XSMALL:
				case XXLARGE:
					{
					setState(9548);
					wh_common_size();
					}
					break;
				case STRING:
					{
					setState(9549);
					string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Task_scheduleContext extends ParserRuleContext {
		public TerminalNode SCHEDULE() { return getToken(SnowflakeParser.SCHEDULE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Task_scheduleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_task_schedule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTask_schedule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTask_schedule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTask_schedule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Task_scheduleContext task_schedule() throws RecognitionException {
		Task_scheduleContext _localctx = new Task_scheduleContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_task_schedule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9554);
			match(SCHEDULE);
			setState(9555);
			match(EQ);
			setState(9556);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Task_timeoutContext extends ParserRuleContext {
		public TerminalNode USER_TASK_TIMEOUT_MS() { return getToken(SnowflakeParser.USER_TASK_TIMEOUT_MS, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public Task_timeoutContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_task_timeout; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTask_timeout(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTask_timeout(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTask_timeout(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Task_timeoutContext task_timeout() throws RecognitionException {
		Task_timeoutContext _localctx = new Task_timeoutContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_task_timeout);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9558);
			match(USER_TASK_TIMEOUT_MS);
			setState(9559);
			match(EQ);
			setState(9560);
			num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Task_suspend_after_failure_numberContext extends ParserRuleContext {
		public TerminalNode SUSPEND_TASK_AFTER_NUM_FAILURES() { return getToken(SnowflakeParser.SUSPEND_TASK_AFTER_NUM_FAILURES, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public Task_suspend_after_failure_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_task_suspend_after_failure_number; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTask_suspend_after_failure_number(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTask_suspend_after_failure_number(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTask_suspend_after_failure_number(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Task_suspend_after_failure_numberContext task_suspend_after_failure_number() throws RecognitionException {
		Task_suspend_after_failure_numberContext _localctx = new Task_suspend_after_failure_numberContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_task_suspend_after_failure_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9562);
			match(SUSPEND_TASK_AFTER_NUM_FAILURES);
			setState(9563);
			match(EQ);
			setState(9564);
			num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Task_error_integrationContext extends ParserRuleContext {
		public TerminalNode ERROR_INTEGRATION() { return getToken(SnowflakeParser.ERROR_INTEGRATION, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Task_error_integrationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_task_error_integration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTask_error_integration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTask_error_integration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTask_error_integration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Task_error_integrationContext task_error_integration() throws RecognitionException {
		Task_error_integrationContext _localctx = new Task_error_integrationContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_task_error_integration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9566);
			match(ERROR_INTEGRATION);
			setState(9567);
			match(EQ);
			setState(9568);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Task_overlapContext extends ParserRuleContext {
		public TerminalNode ALLOW_OVERLAPPING_EXECUTION() { return getToken(SnowflakeParser.ALLOW_OVERLAPPING_EXECUTION, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public Task_overlapContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_task_overlap; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTask_overlap(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTask_overlap(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTask_overlap(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Task_overlapContext task_overlap() throws RecognitionException {
		Task_overlapContext _localctx = new Task_overlapContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_task_overlap);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9570);
			match(ALLOW_OVERLAPPING_EXECUTION);
			setState(9571);
			match(EQ);
			setState(9572);
			true_false();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SqlContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(SnowflakeParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SnowflakeParser.IMMEDIATE, 0); }
		public TerminalNode DBL_DOLLAR() { return getToken(SnowflakeParser.DBL_DOLLAR, 0); }
		public Sql_commandContext sql_command() {
			return getRuleContext(Sql_commandContext.class,0);
		}
		public CallContext call() {
			return getRuleContext(CallContext.class,0);
		}
		public SqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlContext sql() throws RecognitionException {
		SqlContext _localctx = new SqlContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_sql);
		try {
			setState(9579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1214,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9574);
				match(EXECUTE);
				setState(9575);
				match(IMMEDIATE);
				setState(9576);
				match(DBL_DOLLAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9577);
				sql_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9578);
				call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(SnowflakeParser.CALL, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public CallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallContext call() throws RecognitionException {
		CallContext _localctx = new CallContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9581);
			match(CALL);
			setState(9582);
			object_name();
			setState(9583);
			match(LR_BRACKET);
			setState(9585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1154122173586186944L) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & -1952310041650266111L) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & -6623932939363678687L) != 0) || ((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & 1765411228149088333L) != 0) || ((((_la - 269)) & ~0x3f) == 0 && ((1L << (_la - 269)) & -8059217646345776633L) != 0) || ((((_la - 333)) & ~0x3f) == 0 && ((1L << (_la - 333)) & 63199777105663109L) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & 3459798102037250321L) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & 4037195539495538193L) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & -9199305648682479375L) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & 791828760629819L) != 0) || ((((_la - 677)) & ~0x3f) == 0 && ((1L << (_la - 677)) & -8231418552441028195L) != 0) || ((((_la - 741)) & ~0x3f) == 0 && ((1L << (_la - 741)) & 32370371808317767L) != 0) || ((((_la - 805)) & ~0x3f) == 0 && ((1L << (_la - 805)) & -6442316949L) != 0) || ((((_la - 869)) & ~0x3f) == 0 && ((1L << (_la - 869)) & 3380697611636099L) != 0)) {
				{
				setState(9584);
				expr_list();
				}
			}

			setState(9587);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_userContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(SnowflakeParser.USER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public Object_propertiesContext object_properties() {
			return getRuleContext(Object_propertiesContext.class,0);
		}
		public Object_paramsContext object_params() {
			return getRuleContext(Object_paramsContext.class,0);
		}
		public Session_paramsContext session_params() {
			return getRuleContext(Session_paramsContext.class,0);
		}
		public Create_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_user(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_user(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_userContext create_user() throws RecognitionException {
		Create_userContext _localctx = new Create_userContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_create_user);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9589);
			match(CREATE);
			setState(9591);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(9590);
				or_replace();
				}
			}

			setState(9593);
			match(USER);
			setState(9595);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1217,_ctx) ) {
			case 1:
				{
				setState(9594);
				if_not_exists();
				}
				break;
			}
			setState(9597);
			id_();
			setState(9599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 2305968353539260417L) != 0) || _la==DISPLAY_NAME || _la==EMAIL || _la==FIRST_NAME || ((((_la - 367)) & ~0x3f) == 0 && ((1L << (_la - 367)) & 144172362680631297L) != 0) || _la==PASSWORD || _la==RSA_PUBLIC_KEY || _la==RSA_PUBLIC_KEY_2) {
				{
				setState(9598);
				object_properties();
				}
			}

			setState(9602);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1219,_ctx) ) {
			case 1:
				{
				setState(9601);
				object_params();
				}
				break;
			}
			setState(9605);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ABORT_DETACHED_QUERY || _la==AUTOCOMMIT || _la==BINARY_INPUT_FORMAT || _la==BINARY_OUTPUT_FORMAT || ((((_la - 171)) & ~0x3f) == 0 && ((1L << (_la - 171)) & 864691128455135235L) != 0) || _la==JSON_INDENT || _la==LOCK_TIMEOUT || _la==QUERY_TAG || _la==ROWS_PER_RESULTSET || ((((_la - 662)) & ~0x3f) == 0 && ((1L << (_la - 662)) & 140754668224513L) != 0) || ((((_la - 744)) & ~0x3f) == 0 && ((1L << (_la - 744)) & 72066424524350933L) != 0) || _la==WEEK_OF_YEAR_POLICY || _la==WEEK_START) {
				{
				setState(9604);
				session_params();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class View_colContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public With_masking_policyContext with_masking_policy() {
			return getRuleContext(With_masking_policyContext.class,0);
		}
		public With_tagsContext with_tags() {
			return getRuleContext(With_tagsContext.class,0);
		}
		public View_colContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_col; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterView_col(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitView_col(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitView_col(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_colContext view_col() throws RecognitionException {
		View_colContext _localctx = new View_colContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_view_col);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9607);
			column_name();
			setState(9608);
			with_masking_policy();
			setState(9609);
			with_tags();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(SnowflakeParser.VIEW, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public Query_statementContext query_statement() {
			return getRuleContext(Query_statementContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public TerminalNode SECURE() { return getToken(SnowflakeParser.SECURE, 0); }
		public TerminalNode RECURSIVE() { return getToken(SnowflakeParser.RECURSIVE, 0); }
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Column_list_with_commentContext column_list_with_comment() {
			return getRuleContext(Column_list_with_commentContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public List<View_colContext> view_col() {
			return getRuleContexts(View_colContext.class);
		}
		public View_colContext view_col(int i) {
			return getRuleContext(View_colContext.class,i);
		}
		public With_row_access_policyContext with_row_access_policy() {
			return getRuleContext(With_row_access_policyContext.class,0);
		}
		public With_tagsContext with_tags() {
			return getRuleContext(With_tagsContext.class,0);
		}
		public Copy_grantsContext copy_grants() {
			return getRuleContext(Copy_grantsContext.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_create_view);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9611);
			match(CREATE);
			setState(9613);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(9612);
				or_replace();
				}
			}

			setState(9616);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SECURE) {
				{
				setState(9615);
				match(SECURE);
				}
			}

			setState(9619);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECURSIVE) {
				{
				setState(9618);
				match(RECURSIVE);
				}
			}

			setState(9621);
			match(VIEW);
			setState(9623);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1224,_ctx) ) {
			case 1:
				{
				setState(9622);
				if_not_exists();
				}
				break;
			}
			setState(9625);
			object_name();
			setState(9630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(9626);
				match(LR_BRACKET);
				setState(9627);
				column_list_with_comment();
				setState(9628);
				match(RR_BRACKET);
				}
			}

			setState(9635);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1226,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9632);
					view_col();
					}
					} 
				}
				setState(9637);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1226,_ctx);
			}
			setState(9639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1227,_ctx) ) {
			case 1:
				{
				setState(9638);
				with_row_access_policy();
				}
				break;
			}
			setState(9642);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TAG || _la==WITH) {
				{
				setState(9641);
				with_tags();
				}
			}

			setState(9645);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COPY) {
				{
				setState(9644);
				copy_grants();
				}
			}

			setState(9648);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(9647);
				comment_clause();
				}
			}

			setState(9650);
			match(AS);
			setState(9651);
			query_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Create_warehouseContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SnowflakeParser.CREATE, 0); }
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public Id_fnContext id_fn() {
			return getRuleContext(Id_fnContext.class,0);
		}
		public Or_replaceContext or_replace() {
			return getRuleContext(Or_replaceContext.class,0);
		}
		public If_not_existsContext if_not_exists() {
			return getRuleContext(If_not_existsContext.class,0);
		}
		public List<Wh_paramsContext> wh_params() {
			return getRuleContexts(Wh_paramsContext.class);
		}
		public Wh_paramsContext wh_params(int i) {
			return getRuleContext(Wh_paramsContext.class,i);
		}
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public List<Wh_propertiesContext> wh_properties() {
			return getRuleContexts(Wh_propertiesContext.class);
		}
		public Wh_propertiesContext wh_properties(int i) {
			return getRuleContext(Wh_propertiesContext.class,i);
		}
		public Create_warehouseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_warehouse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCreate_warehouse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCreate_warehouse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCreate_warehouse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_warehouseContext create_warehouse() throws RecognitionException {
		Create_warehouseContext _localctx = new Create_warehouseContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_create_warehouse);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9653);
			match(CREATE);
			setState(9655);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(9654);
				or_replace();
				}
			}

			setState(9657);
			match(WAREHOUSE);
			setState(9659);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1232,_ctx) ) {
			case 1:
				{
				setState(9658);
				if_not_exists();
				}
				break;
			}
			setState(9661);
			id_fn();
			setState(9670);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1235,_ctx) ) {
			case 1:
				{
				setState(9663);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(9662);
					match(WITH);
					}
				}

				setState(9666); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(9665);
						wh_properties();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(9668); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1234,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(9675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==MAX_CONCURRENCY_LEVEL || _la==STATEMENT_QUEUED_TIMEOUT_IN_SECONDS || _la==STATEMENT_TIMEOUT_IN_SECONDS) {
				{
				{
				setState(9672);
				wh_params();
				}
				}
				setState(9677);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Wh_common_sizeContext extends ParserRuleContext {
		public TerminalNode XSMALL() { return getToken(SnowflakeParser.XSMALL, 0); }
		public TerminalNode SMALL() { return getToken(SnowflakeParser.SMALL, 0); }
		public TerminalNode MEDIUM() { return getToken(SnowflakeParser.MEDIUM, 0); }
		public TerminalNode LARGE() { return getToken(SnowflakeParser.LARGE, 0); }
		public TerminalNode XLARGE() { return getToken(SnowflakeParser.XLARGE, 0); }
		public TerminalNode XXLARGE() { return getToken(SnowflakeParser.XXLARGE, 0); }
		public Wh_common_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wh_common_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterWh_common_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitWh_common_size(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitWh_common_size(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Wh_common_sizeContext wh_common_size() throws RecognitionException {
		Wh_common_sizeContext _localctx = new Wh_common_sizeContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_wh_common_size);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9678);
			_la = _input.LA(1);
			if ( !(_la==LARGE || _la==MEDIUM || _la==SMALL || ((((_la - 829)) & ~0x3f) == 0 && ((1L << (_la - 829)) & 25L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Wh_extra_sizeContext extends ParserRuleContext {
		public TerminalNode XXXLARGE() { return getToken(SnowflakeParser.XXXLARGE, 0); }
		public TerminalNode X4LARGE() { return getToken(SnowflakeParser.X4LARGE, 0); }
		public TerminalNode X5LARGE() { return getToken(SnowflakeParser.X5LARGE, 0); }
		public TerminalNode X6LARGE() { return getToken(SnowflakeParser.X6LARGE, 0); }
		public Wh_extra_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wh_extra_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterWh_extra_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitWh_extra_size(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitWh_extra_size(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Wh_extra_sizeContext wh_extra_size() throws RecognitionException {
		Wh_extra_sizeContext _localctx = new Wh_extra_sizeContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_wh_extra_size);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9680);
			_la = _input.LA(1);
			if ( !(((((_la - 826)) & ~0x3f) == 0 && ((1L << (_la - 826)) & 263L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Wh_propertiesContext extends ParserRuleContext {
		public TerminalNode WAREHOUSE_SIZE() { return getToken(SnowflakeParser.WAREHOUSE_SIZE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public Wh_common_sizeContext wh_common_size() {
			return getRuleContext(Wh_common_sizeContext.class,0);
		}
		public Wh_extra_sizeContext wh_extra_size() {
			return getRuleContext(Wh_extra_sizeContext.class,0);
		}
		public TerminalNode ID2() { return getToken(SnowflakeParser.ID2, 0); }
		public TerminalNode WAREHOUSE_TYPE() { return getToken(SnowflakeParser.WAREHOUSE_TYPE, 0); }
		public TerminalNode STANDARD() { return getToken(SnowflakeParser.STANDARD, 0); }
		public TerminalNode SNOWPARK_OPTIMIZED() { return getToken(SnowflakeParser.SNOWPARK_OPTIMIZED, 0); }
		public TerminalNode MAX_CLUSTER_COUNT() { return getToken(SnowflakeParser.MAX_CLUSTER_COUNT, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode MIN_CLUSTER_COUNT() { return getToken(SnowflakeParser.MIN_CLUSTER_COUNT, 0); }
		public TerminalNode SCALING_POLICY() { return getToken(SnowflakeParser.SCALING_POLICY, 0); }
		public TerminalNode ECONOMY() { return getToken(SnowflakeParser.ECONOMY, 0); }
		public TerminalNode AUTO_SUSPEND() { return getToken(SnowflakeParser.AUTO_SUSPEND, 0); }
		public TerminalNode NULL_() { return getToken(SnowflakeParser.NULL_, 0); }
		public TerminalNode AUTO_RESUME() { return getToken(SnowflakeParser.AUTO_RESUME, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode INITIALLY_SUSPENDED() { return getToken(SnowflakeParser.INITIALLY_SUSPENDED, 0); }
		public TerminalNode RESOURCE_MONITOR() { return getToken(SnowflakeParser.RESOURCE_MONITOR, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Comment_clauseContext comment_clause() {
			return getRuleContext(Comment_clauseContext.class,0);
		}
		public TerminalNode ENABLE_QUERY_ACCELERATION() { return getToken(SnowflakeParser.ENABLE_QUERY_ACCELERATION, 0); }
		public TerminalNode QUERY_ACCELERATION_MAX_SCALE_FACTOR() { return getToken(SnowflakeParser.QUERY_ACCELERATION_MAX_SCALE_FACTOR, 0); }
		public TerminalNode MAX_CONCURRENCY_LEVEL() { return getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0); }
		public Wh_propertiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wh_properties; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterWh_properties(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitWh_properties(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitWh_properties(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Wh_propertiesContext wh_properties() throws RecognitionException {
		Wh_propertiesContext _localctx = new Wh_propertiesContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_wh_properties);
		int _la;
		try {
			setState(9726);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAREHOUSE_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9682);
				match(WAREHOUSE_SIZE);
				setState(9683);
				match(EQ);
				setState(9687);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LARGE:
				case MEDIUM:
				case SMALL:
				case XLARGE:
				case XSMALL:
				case XXLARGE:
					{
					setState(9684);
					wh_common_size();
					}
					break;
				case X4LARGE:
				case X5LARGE:
				case X6LARGE:
				case XXXLARGE:
					{
					setState(9685);
					wh_extra_size();
					}
					break;
				case ID2:
					{
					setState(9686);
					match(ID2);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case WAREHOUSE_TYPE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9689);
				match(WAREHOUSE_TYPE);
				setState(9690);
				match(EQ);
				setState(9691);
				_la = _input.LA(1);
				if ( !(_la==SNOWPARK_OPTIMIZED || _la==STANDARD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MAX_CLUSTER_COUNT:
				enterOuterAlt(_localctx, 3);
				{
				setState(9692);
				match(MAX_CLUSTER_COUNT);
				setState(9693);
				match(EQ);
				setState(9694);
				num();
				}
				break;
			case MIN_CLUSTER_COUNT:
				enterOuterAlt(_localctx, 4);
				{
				setState(9695);
				match(MIN_CLUSTER_COUNT);
				setState(9696);
				match(EQ);
				setState(9697);
				num();
				}
				break;
			case SCALING_POLICY:
				enterOuterAlt(_localctx, 5);
				{
				setState(9698);
				match(SCALING_POLICY);
				setState(9699);
				match(EQ);
				setState(9700);
				_la = _input.LA(1);
				if ( !(_la==ECONOMY || _la==STANDARD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case AUTO_SUSPEND:
				enterOuterAlt(_localctx, 6);
				{
				setState(9701);
				match(AUTO_SUSPEND);
				setState(9705);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EQ:
					{
					setState(9702);
					match(EQ);
					setState(9703);
					num();
					}
					break;
				case NULL_:
					{
					setState(9704);
					match(NULL_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case AUTO_RESUME:
				enterOuterAlt(_localctx, 7);
				{
				setState(9707);
				match(AUTO_RESUME);
				setState(9708);
				match(EQ);
				setState(9709);
				true_false();
				}
				break;
			case INITIALLY_SUSPENDED:
				enterOuterAlt(_localctx, 8);
				{
				setState(9710);
				match(INITIALLY_SUSPENDED);
				setState(9711);
				match(EQ);
				setState(9712);
				true_false();
				}
				break;
			case RESOURCE_MONITOR:
				enterOuterAlt(_localctx, 9);
				{
				setState(9713);
				match(RESOURCE_MONITOR);
				setState(9714);
				match(EQ);
				setState(9715);
				id_();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 10);
				{
				setState(9716);
				comment_clause();
				}
				break;
			case ENABLE_QUERY_ACCELERATION:
				enterOuterAlt(_localctx, 11);
				{
				setState(9717);
				match(ENABLE_QUERY_ACCELERATION);
				setState(9718);
				match(EQ);
				setState(9719);
				true_false();
				}
				break;
			case QUERY_ACCELERATION_MAX_SCALE_FACTOR:
				enterOuterAlt(_localctx, 12);
				{
				setState(9720);
				match(QUERY_ACCELERATION_MAX_SCALE_FACTOR);
				setState(9721);
				match(EQ);
				setState(9722);
				num();
				}
				break;
			case MAX_CONCURRENCY_LEVEL:
				enterOuterAlt(_localctx, 13);
				{
				setState(9723);
				match(MAX_CONCURRENCY_LEVEL);
				setState(9724);
				match(EQ);
				setState(9725);
				num();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Wh_paramsContext extends ParserRuleContext {
		public TerminalNode MAX_CONCURRENCY_LEVEL() { return getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode STATEMENT_QUEUED_TIMEOUT_IN_SECONDS() { return getToken(SnowflakeParser.STATEMENT_QUEUED_TIMEOUT_IN_SECONDS, 0); }
		public TerminalNode STATEMENT_TIMEOUT_IN_SECONDS() { return getToken(SnowflakeParser.STATEMENT_TIMEOUT_IN_SECONDS, 0); }
		public With_tagsContext with_tags() {
			return getRuleContext(With_tagsContext.class,0);
		}
		public Wh_paramsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wh_params; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterWh_params(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitWh_params(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitWh_params(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Wh_paramsContext wh_params() throws RecognitionException {
		Wh_paramsContext _localctx = new Wh_paramsContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_wh_params);
		int _la;
		try {
			setState(9740);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX_CONCURRENCY_LEVEL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9728);
				match(MAX_CONCURRENCY_LEVEL);
				setState(9729);
				match(EQ);
				setState(9730);
				num();
				}
				break;
			case STATEMENT_QUEUED_TIMEOUT_IN_SECONDS:
				enterOuterAlt(_localctx, 2);
				{
				setState(9731);
				match(STATEMENT_QUEUED_TIMEOUT_IN_SECONDS);
				setState(9732);
				match(EQ);
				setState(9733);
				num();
				}
				break;
			case STATEMENT_TIMEOUT_IN_SECONDS:
				enterOuterAlt(_localctx, 3);
				{
				setState(9734);
				match(STATEMENT_TIMEOUT_IN_SECONDS);
				setState(9735);
				match(EQ);
				setState(9736);
				num();
				setState(9738);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TAG || _la==WITH) {
					{
					setState(9737);
					with_tags();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Trigger_definitionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(SnowflakeParser.PERCENT, 0); }
		public TerminalNode DO() { return getToken(SnowflakeParser.DO, 0); }
		public TerminalNode SUSPEND() { return getToken(SnowflakeParser.SUSPEND, 0); }
		public TerminalNode SUSPEND_IMMEDIATE() { return getToken(SnowflakeParser.SUSPEND_IMMEDIATE, 0); }
		public TerminalNode NOTIFY() { return getToken(SnowflakeParser.NOTIFY, 0); }
		public Trigger_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTrigger_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTrigger_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTrigger_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_definitionContext trigger_definition() throws RecognitionException {
		Trigger_definitionContext _localctx = new Trigger_definitionContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_trigger_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9742);
			match(ON);
			setState(9743);
			num();
			setState(9744);
			match(PERCENT);
			setState(9745);
			match(DO);
			setState(9746);
			_la = _input.LA(1);
			if ( !(_la==NOTIFY || _la==SUSPEND || _la==SUSPEND_IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_type_nameContext extends ParserRuleContext {
		public TerminalNode ROLE() { return getToken(SnowflakeParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(SnowflakeParser.USER, 0); }
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public TerminalNode NETWORK() { return getToken(SnowflakeParser.NETWORK, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public TerminalNode SESSION() { return getToken(SnowflakeParser.SESSION, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public TerminalNode VIEW() { return getToken(SnowflakeParser.VIEW, 0); }
		public TerminalNode STAGE() { return getToken(SnowflakeParser.STAGE, 0); }
		public TerminalNode FILE() { return getToken(SnowflakeParser.FILE, 0); }
		public TerminalNode FORMAT() { return getToken(SnowflakeParser.FORMAT, 0); }
		public TerminalNode STREAM() { return getToken(SnowflakeParser.STREAM, 0); }
		public TerminalNode TASK() { return getToken(SnowflakeParser.TASK, 0); }
		public TerminalNode MASKING() { return getToken(SnowflakeParser.MASKING, 0); }
		public TerminalNode ROW() { return getToken(SnowflakeParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(SnowflakeParser.ACCESS, 0); }
		public TerminalNode TAG() { return getToken(SnowflakeParser.TAG, 0); }
		public TerminalNode PIPE() { return getToken(SnowflakeParser.PIPE, 0); }
		public TerminalNode FUNCTION() { return getToken(SnowflakeParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(SnowflakeParser.PROCEDURE, 0); }
		public TerminalNode SEQUENCE() { return getToken(SnowflakeParser.SEQUENCE, 0); }
		public Object_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterObject_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitObject_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitObject_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_nameContext object_type_name() throws RecognitionException {
		Object_type_nameContext _localctx = new Object_type_nameContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_object_type_name);
		try {
			setState(9775);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9748);
				match(ROLE);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(9749);
				match(USER);
				}
				break;
			case WAREHOUSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(9750);
				match(WAREHOUSE);
				}
				break;
			case INTEGRATION:
				enterOuterAlt(_localctx, 4);
				{
				setState(9751);
				match(INTEGRATION);
				}
				break;
			case NETWORK:
				enterOuterAlt(_localctx, 5);
				{
				setState(9752);
				match(NETWORK);
				setState(9753);
				match(POLICY);
				}
				break;
			case SESSION:
				enterOuterAlt(_localctx, 6);
				{
				setState(9754);
				match(SESSION);
				setState(9755);
				match(POLICY);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 7);
				{
				setState(9756);
				match(DATABASE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 8);
				{
				setState(9757);
				match(SCHEMA);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 9);
				{
				setState(9758);
				match(TABLE);
				}
				break;
			case VIEW:
				enterOuterAlt(_localctx, 10);
				{
				setState(9759);
				match(VIEW);
				}
				break;
			case STAGE:
				enterOuterAlt(_localctx, 11);
				{
				setState(9760);
				match(STAGE);
				}
				break;
			case FILE:
				enterOuterAlt(_localctx, 12);
				{
				setState(9761);
				match(FILE);
				setState(9762);
				match(FORMAT);
				}
				break;
			case STREAM:
				enterOuterAlt(_localctx, 13);
				{
				setState(9763);
				match(STREAM);
				}
				break;
			case TASK:
				enterOuterAlt(_localctx, 14);
				{
				setState(9764);
				match(TASK);
				}
				break;
			case MASKING:
				enterOuterAlt(_localctx, 15);
				{
				setState(9765);
				match(MASKING);
				setState(9766);
				match(POLICY);
				}
				break;
			case ROW:
				enterOuterAlt(_localctx, 16);
				{
				setState(9767);
				match(ROW);
				setState(9768);
				match(ACCESS);
				setState(9769);
				match(POLICY);
				}
				break;
			case TAG:
				enterOuterAlt(_localctx, 17);
				{
				setState(9770);
				match(TAG);
				}
				break;
			case PIPE:
				enterOuterAlt(_localctx, 18);
				{
				setState(9771);
				match(PIPE);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 19);
				{
				setState(9772);
				match(FUNCTION);
				}
				break;
			case PROCEDURE:
				enterOuterAlt(_localctx, 20);
				{
				setState(9773);
				match(PROCEDURE);
				}
				break;
			case SEQUENCE:
				enterOuterAlt(_localctx, 21);
				{
				setState(9774);
				match(SEQUENCE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_type_pluralContext extends ParserRuleContext {
		public TerminalNode ALERTS() { return getToken(SnowflakeParser.ALERTS, 0); }
		public TerminalNode DATABASES() { return getToken(SnowflakeParser.DATABASES, 0); }
		public TerminalNode INTEGRATIONS() { return getToken(SnowflakeParser.INTEGRATIONS, 0); }
		public TerminalNode POLICIES() { return getToken(SnowflakeParser.POLICIES, 0); }
		public TerminalNode ROLES() { return getToken(SnowflakeParser.ROLES, 0); }
		public TerminalNode SCHEMAS() { return getToken(SnowflakeParser.SCHEMAS, 0); }
		public TerminalNode STAGES() { return getToken(SnowflakeParser.STAGES, 0); }
		public TerminalNode STREAMS() { return getToken(SnowflakeParser.STREAMS, 0); }
		public TerminalNode TABLES() { return getToken(SnowflakeParser.TABLES, 0); }
		public TerminalNode TAGS() { return getToken(SnowflakeParser.TAGS, 0); }
		public TerminalNode TASKS() { return getToken(SnowflakeParser.TASKS, 0); }
		public TerminalNode USERS() { return getToken(SnowflakeParser.USERS, 0); }
		public TerminalNode VIEWS() { return getToken(SnowflakeParser.VIEWS, 0); }
		public TerminalNode WAREHOUSES() { return getToken(SnowflakeParser.WAREHOUSES, 0); }
		public Object_type_pluralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_plural; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterObject_type_plural(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitObject_type_plural(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitObject_type_plural(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_pluralContext object_type_plural() throws RecognitionException {
		Object_type_pluralContext _localctx = new Object_type_pluralContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_object_type_plural);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9777);
			_la = _input.LA(1);
			if ( !(_la==ALERTS || _la==DATABASES || _la==INTEGRATIONS || _la==POLICIES || _la==ROLES || _la==SCHEMAS || ((((_la - 685)) & ~0x3f) == 0 && ((1L << (_la - 685)) & 1271035445903361L) != 0) || ((((_la - 795)) & ~0x3f) == 0 && ((1L << (_la - 795)) & 557057L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_commandContext extends ParserRuleContext {
		public Drop_objectContext drop_object() {
			return getRuleContext(Drop_objectContext.class,0);
		}
		public Drop_alertContext drop_alert() {
			return getRuleContext(Drop_alertContext.class,0);
		}
		public Drop_connectionContext drop_connection() {
			return getRuleContext(Drop_connectionContext.class,0);
		}
		public Drop_databaseContext drop_database() {
			return getRuleContext(Drop_databaseContext.class,0);
		}
		public Drop_dynamic_tableContext drop_dynamic_table() {
			return getRuleContext(Drop_dynamic_tableContext.class,0);
		}
		public Drop_external_tableContext drop_external_table() {
			return getRuleContext(Drop_external_tableContext.class,0);
		}
		public Drop_failover_groupContext drop_failover_group() {
			return getRuleContext(Drop_failover_groupContext.class,0);
		}
		public Drop_file_formatContext drop_file_format() {
			return getRuleContext(Drop_file_formatContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_integrationContext drop_integration() {
			return getRuleContext(Drop_integrationContext.class,0);
		}
		public Drop_managed_accountContext drop_managed_account() {
			return getRuleContext(Drop_managed_accountContext.class,0);
		}
		public Drop_masking_policyContext drop_masking_policy() {
			return getRuleContext(Drop_masking_policyContext.class,0);
		}
		public Drop_materialized_viewContext drop_materialized_view() {
			return getRuleContext(Drop_materialized_viewContext.class,0);
		}
		public Drop_network_policyContext drop_network_policy() {
			return getRuleContext(Drop_network_policyContext.class,0);
		}
		public Drop_password_policyContext drop_password_policy() {
			return getRuleContext(Drop_password_policyContext.class,0);
		}
		public Drop_pipeContext drop_pipe() {
			return getRuleContext(Drop_pipeContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_replication_groupContext drop_replication_group() {
			return getRuleContext(Drop_replication_groupContext.class,0);
		}
		public Drop_resource_monitorContext drop_resource_monitor() {
			return getRuleContext(Drop_resource_monitorContext.class,0);
		}
		public Drop_roleContext drop_role() {
			return getRuleContext(Drop_roleContext.class,0);
		}
		public Drop_row_access_policyContext drop_row_access_policy() {
			return getRuleContext(Drop_row_access_policyContext.class,0);
		}
		public Drop_schemaContext drop_schema() {
			return getRuleContext(Drop_schemaContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_session_policyContext drop_session_policy() {
			return getRuleContext(Drop_session_policyContext.class,0);
		}
		public Drop_shareContext drop_share() {
			return getRuleContext(Drop_shareContext.class,0);
		}
		public Drop_stageContext drop_stage() {
			return getRuleContext(Drop_stageContext.class,0);
		}
		public Drop_streamContext drop_stream() {
			return getRuleContext(Drop_streamContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Drop_tagContext drop_tag() {
			return getRuleContext(Drop_tagContext.class,0);
		}
		public Drop_taskContext drop_task() {
			return getRuleContext(Drop_taskContext.class,0);
		}
		public Drop_userContext drop_user() {
			return getRuleContext(Drop_userContext.class,0);
		}
		public Drop_viewContext drop_view() {
			return getRuleContext(Drop_viewContext.class,0);
		}
		public Drop_warehouseContext drop_warehouse() {
			return getRuleContext(Drop_warehouseContext.class,0);
		}
		public Drop_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_commandContext drop_command() throws RecognitionException {
		Drop_commandContext _localctx = new Drop_commandContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_drop_command);
		try {
			setState(9812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1243,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9779);
				drop_object();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9780);
				drop_alert();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9781);
				drop_connection();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9782);
				drop_database();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9783);
				drop_dynamic_table();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9784);
				drop_external_table();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9785);
				drop_failover_group();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9786);
				drop_file_format();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9787);
				drop_function();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9788);
				drop_integration();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9789);
				drop_managed_account();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9790);
				drop_masking_policy();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9791);
				drop_materialized_view();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(9792);
				drop_network_policy();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(9793);
				drop_password_policy();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(9794);
				drop_pipe();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(9795);
				drop_procedure();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(9796);
				drop_replication_group();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(9797);
				drop_resource_monitor();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(9798);
				drop_role();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(9799);
				drop_row_access_policy();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(9800);
				drop_schema();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(9801);
				drop_sequence();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(9802);
				drop_session_policy();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(9803);
				drop_share();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(9804);
				drop_stage();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(9805);
				drop_stream();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(9806);
				drop_table();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(9807);
				drop_tag();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(9808);
				drop_task();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(9809);
				drop_user();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(9810);
				drop_view();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(9811);
				drop_warehouse();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_objectContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public Object_typeContext object_type() {
			return getRuleContext(Object_typeContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Drop_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_object; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_object(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_object(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_object(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_objectContext drop_object() throws RecognitionException {
		Drop_objectContext _localctx = new Drop_objectContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_drop_object);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9814);
			match(DROP);
			setState(9815);
			object_type();
			setState(9816);
			if_exists();
			setState(9817);
			id_();
			setState(9819);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9818);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_alertContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode ALERT() { return getToken(SnowflakeParser.ALERT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_alertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_alert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_alert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_alert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_alert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_alertContext drop_alert() throws RecognitionException {
		Drop_alertContext _localctx = new Drop_alertContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_drop_alert);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9821);
			match(DROP);
			setState(9822);
			match(ALERT);
			setState(9823);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_connectionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode CONNECTION() { return getToken(SnowflakeParser.CONNECTION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_connectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_connection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_connection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_connection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_connection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_connectionContext drop_connection() throws RecognitionException {
		Drop_connectionContext _localctx = new Drop_connectionContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_drop_connection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9825);
			match(DROP);
			setState(9826);
			match(CONNECTION);
			setState(9828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1245,_ctx) ) {
			case 1:
				{
				setState(9827);
				if_exists();
				}
				break;
			}
			setState(9830);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_databaseContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Drop_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_databaseContext drop_database() throws RecognitionException {
		Drop_databaseContext _localctx = new Drop_databaseContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_drop_database);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9832);
			match(DROP);
			setState(9833);
			match(DATABASE);
			setState(9835);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1246,_ctx) ) {
			case 1:
				{
				setState(9834);
				if_exists();
				}
				break;
			}
			setState(9837);
			id_();
			setState(9839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9838);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_dynamic_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode DYNAMIC() { return getToken(SnowflakeParser.DYNAMIC, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_dynamic_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_dynamic_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_dynamic_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_dynamic_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_dynamic_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_dynamic_tableContext drop_dynamic_table() throws RecognitionException {
		Drop_dynamic_tableContext _localctx = new Drop_dynamic_tableContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_drop_dynamic_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9841);
			match(DROP);
			setState(9842);
			match(DYNAMIC);
			setState(9843);
			match(TABLE);
			setState(9844);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_external_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(SnowflakeParser.EXTERNAL, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_external_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_external_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_external_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_external_tableContext drop_external_table() throws RecognitionException {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_drop_external_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9846);
			match(DROP);
			setState(9847);
			match(EXTERNAL);
			setState(9848);
			match(TABLE);
			setState(9850);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1248,_ctx) ) {
			case 1:
				{
				setState(9849);
				if_exists();
				}
				break;
			}
			setState(9852);
			object_name();
			setState(9854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9853);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_failover_groupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode FAILOVER() { return getToken(SnowflakeParser.FAILOVER, 0); }
		public TerminalNode GROUP() { return getToken(SnowflakeParser.GROUP, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_failover_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_failover_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_failover_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_failover_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_failover_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_failover_groupContext drop_failover_group() throws RecognitionException {
		Drop_failover_groupContext _localctx = new Drop_failover_groupContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_drop_failover_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9856);
			match(DROP);
			setState(9857);
			match(FAILOVER);
			setState(9858);
			match(GROUP);
			setState(9860);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1250,_ctx) ) {
			case 1:
				{
				setState(9859);
				if_exists();
				}
				break;
			}
			setState(9862);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_file_formatContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode FILE() { return getToken(SnowflakeParser.FILE, 0); }
		public TerminalNode FORMAT() { return getToken(SnowflakeParser.FORMAT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_file_formatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_file_format; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_file_format(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_file_format(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_file_format(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_file_formatContext drop_file_format() throws RecognitionException {
		Drop_file_formatContext _localctx = new Drop_file_formatContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_drop_file_format);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9864);
			match(DROP);
			setState(9865);
			match(FILE);
			setState(9866);
			match(FORMAT);
			setState(9868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1251,_ctx) ) {
			case 1:
				{
				setState(9867);
				if_exists();
				}
				break;
			}
			setState(9870);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(SnowflakeParser.FUNCTION, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Arg_typesContext arg_types() {
			return getRuleContext(Arg_typesContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_drop_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9872);
			match(DROP);
			setState(9873);
			match(FUNCTION);
			setState(9875);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1252,_ctx) ) {
			case 1:
				{
				setState(9874);
				if_exists();
				}
				break;
			}
			setState(9877);
			object_name();
			setState(9878);
			arg_types();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_integrationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public TerminalNode API() { return getToken(SnowflakeParser.API, 0); }
		public TerminalNode NOTIFICATION() { return getToken(SnowflakeParser.NOTIFICATION, 0); }
		public TerminalNode SECURITY() { return getToken(SnowflakeParser.SECURITY, 0); }
		public TerminalNode STORAGE() { return getToken(SnowflakeParser.STORAGE, 0); }
		public Drop_integrationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_integration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_integration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_integration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_integration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_integrationContext drop_integration() throws RecognitionException {
		Drop_integrationContext _localctx = new Drop_integrationContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_drop_integration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9880);
			match(DROP);
			setState(9882);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==API || _la==NOTIFICATION || _la==SECURITY || _la==STORAGE) {
				{
				setState(9881);
				_la = _input.LA(1);
				if ( !(_la==API || _la==NOTIFICATION || _la==SECURITY || _la==STORAGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9884);
			match(INTEGRATION);
			setState(9886);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1254,_ctx) ) {
			case 1:
				{
				setState(9885);
				if_exists();
				}
				break;
			}
			setState(9888);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_managed_accountContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode MANAGED() { return getToken(SnowflakeParser.MANAGED, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_managed_accountContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_managed_account; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_managed_account(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_managed_account(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_managed_account(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_managed_accountContext drop_managed_account() throws RecognitionException {
		Drop_managed_accountContext _localctx = new Drop_managed_accountContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_drop_managed_account);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9890);
			match(DROP);
			setState(9891);
			match(MANAGED);
			setState(9892);
			match(ACCOUNT);
			setState(9893);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_masking_policyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode MASKING() { return getToken(SnowflakeParser.MASKING, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_masking_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_masking_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_masking_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_masking_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_masking_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_masking_policyContext drop_masking_policy() throws RecognitionException {
		Drop_masking_policyContext _localctx = new Drop_masking_policyContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_drop_masking_policy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9895);
			match(DROP);
			setState(9896);
			match(MASKING);
			setState(9897);
			match(POLICY);
			setState(9898);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_materialized_viewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode MATERIALIZED() { return getToken(SnowflakeParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(SnowflakeParser.VIEW, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_materialized_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_materialized_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_materialized_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_materialized_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_materialized_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_materialized_viewContext drop_materialized_view() throws RecognitionException {
		Drop_materialized_viewContext _localctx = new Drop_materialized_viewContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_drop_materialized_view);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9900);
			match(DROP);
			setState(9901);
			match(MATERIALIZED);
			setState(9902);
			match(VIEW);
			setState(9904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1255,_ctx) ) {
			case 1:
				{
				setState(9903);
				if_exists();
				}
				break;
			}
			setState(9906);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_network_policyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode NETWORK() { return getToken(SnowflakeParser.NETWORK, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_network_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_network_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_network_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_network_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_network_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_network_policyContext drop_network_policy() throws RecognitionException {
		Drop_network_policyContext _localctx = new Drop_network_policyContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_drop_network_policy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9908);
			match(DROP);
			setState(9909);
			match(NETWORK);
			setState(9910);
			match(POLICY);
			setState(9912);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1256,_ctx) ) {
			case 1:
				{
				setState(9911);
				if_exists();
				}
				break;
			}
			setState(9914);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_pipeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode PIPE() { return getToken(SnowflakeParser.PIPE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_pipeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_pipe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_pipe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_pipe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_pipe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_pipeContext drop_pipe() throws RecognitionException {
		Drop_pipeContext _localctx = new Drop_pipeContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_drop_pipe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9916);
			match(DROP);
			setState(9917);
			match(PIPE);
			setState(9919);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1257,_ctx) ) {
			case 1:
				{
				setState(9918);
				if_exists();
				}
				break;
			}
			setState(9921);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(SnowflakeParser.PROCEDURE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Arg_typesContext arg_types() {
			return getRuleContext(Arg_typesContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9923);
			match(DROP);
			setState(9924);
			match(PROCEDURE);
			setState(9926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1258,_ctx) ) {
			case 1:
				{
				setState(9925);
				if_exists();
				}
				break;
			}
			setState(9928);
			object_name();
			setState(9929);
			arg_types();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_replication_groupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode REPLICATION() { return getToken(SnowflakeParser.REPLICATION, 0); }
		public TerminalNode GROUP() { return getToken(SnowflakeParser.GROUP, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_replication_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_replication_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_replication_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_replication_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_replication_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_replication_groupContext drop_replication_group() throws RecognitionException {
		Drop_replication_groupContext _localctx = new Drop_replication_groupContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_drop_replication_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9931);
			match(DROP);
			setState(9932);
			match(REPLICATION);
			setState(9933);
			match(GROUP);
			setState(9935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1259,_ctx) ) {
			case 1:
				{
				setState(9934);
				if_exists();
				}
				break;
			}
			setState(9937);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_resource_monitorContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode RESOURCE() { return getToken(SnowflakeParser.RESOURCE, 0); }
		public TerminalNode MONITOR() { return getToken(SnowflakeParser.MONITOR, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_resource_monitorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_resource_monitor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_resource_monitor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_resource_monitor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_resource_monitor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_resource_monitorContext drop_resource_monitor() throws RecognitionException {
		Drop_resource_monitorContext _localctx = new Drop_resource_monitorContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_drop_resource_monitor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9939);
			match(DROP);
			setState(9940);
			match(RESOURCE);
			setState(9941);
			match(MONITOR);
			setState(9942);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_roleContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(SnowflakeParser.ROLE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_roleContext drop_role() throws RecognitionException {
		Drop_roleContext _localctx = new Drop_roleContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_drop_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9944);
			match(DROP);
			setState(9945);
			match(ROLE);
			setState(9947);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1260,_ctx) ) {
			case 1:
				{
				setState(9946);
				if_exists();
				}
				break;
			}
			setState(9949);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_row_access_policyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode ROW() { return getToken(SnowflakeParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(SnowflakeParser.ACCESS, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_row_access_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_row_access_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_row_access_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_row_access_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_row_access_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_row_access_policyContext drop_row_access_policy() throws RecognitionException {
		Drop_row_access_policyContext _localctx = new Drop_row_access_policyContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_drop_row_access_policy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9951);
			match(DROP);
			setState(9952);
			match(ROW);
			setState(9953);
			match(ACCESS);
			setState(9954);
			match(POLICY);
			setState(9956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1261,_ctx) ) {
			case 1:
				{
				setState(9955);
				if_exists();
				}
				break;
			}
			setState(9958);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_schemaContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Drop_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_schemaContext drop_schema() throws RecognitionException {
		Drop_schemaContext _localctx = new Drop_schemaContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_drop_schema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9960);
			match(DROP);
			setState(9961);
			match(SCHEMA);
			setState(9963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1262,_ctx) ) {
			case 1:
				{
				setState(9962);
				if_exists();
				}
				break;
			}
			setState(9965);
			schema_name();
			setState(9967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9966);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_sequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(SnowflakeParser.SEQUENCE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_drop_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9969);
			match(DROP);
			setState(9970);
			match(SEQUENCE);
			setState(9972);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1264,_ctx) ) {
			case 1:
				{
				setState(9971);
				if_exists();
				}
				break;
			}
			setState(9974);
			object_name();
			setState(9976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(9975);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_session_policyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode SESSION() { return getToken(SnowflakeParser.SESSION, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_session_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_session_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_session_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_session_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_session_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_session_policyContext drop_session_policy() throws RecognitionException {
		Drop_session_policyContext _localctx = new Drop_session_policyContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_drop_session_policy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9978);
			match(DROP);
			setState(9979);
			match(SESSION);
			setState(9980);
			match(POLICY);
			setState(9982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1266,_ctx) ) {
			case 1:
				{
				setState(9981);
				if_exists();
				}
				break;
			}
			setState(9984);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_password_policyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode PASSWORD() { return getToken(SnowflakeParser.PASSWORD, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_password_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_password_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_password_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_password_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_password_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_password_policyContext drop_password_policy() throws RecognitionException {
		Drop_password_policyContext _localctx = new Drop_password_policyContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_drop_password_policy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9986);
			match(DROP);
			setState(9987);
			match(PASSWORD);
			setState(9988);
			match(POLICY);
			setState(9990);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1267,_ctx) ) {
			case 1:
				{
				setState(9989);
				if_exists();
				}
				break;
			}
			setState(9992);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_shareContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode SHARE() { return getToken(SnowflakeParser.SHARE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Drop_shareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_share; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_share(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_share(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_share(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_shareContext drop_share() throws RecognitionException {
		Drop_shareContext _localctx = new Drop_shareContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_drop_share);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9994);
			match(DROP);
			setState(9995);
			match(SHARE);
			setState(9996);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_streamContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode STREAM() { return getToken(SnowflakeParser.STREAM, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_streamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_stream; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_stream(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_stream(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_stream(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_streamContext drop_stream() throws RecognitionException {
		Drop_streamContext _localctx = new Drop_streamContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_drop_stream);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9998);
			match(DROP);
			setState(9999);
			match(STREAM);
			setState(10001);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1268,_ctx) ) {
			case 1:
				{
				setState(10000);
				if_exists();
				}
				break;
			}
			setState(10003);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Cascade_restrictContext cascade_restrict() {
			return getRuleContext(Cascade_restrictContext.class,0);
		}
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_drop_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10005);
			match(DROP);
			setState(10006);
			match(TABLE);
			setState(10008);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1269,_ctx) ) {
			case 1:
				{
				setState(10007);
				if_exists();
				}
				break;
			}
			setState(10010);
			object_name();
			setState(10012);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(10011);
				cascade_restrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_tagContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode TAG() { return getToken(SnowflakeParser.TAG, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_tagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_tag; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_tag(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_tag(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_tag(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_tagContext drop_tag() throws RecognitionException {
		Drop_tagContext _localctx = new Drop_tagContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_drop_tag);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10014);
			match(DROP);
			setState(10015);
			match(TAG);
			setState(10017);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1271,_ctx) ) {
			case 1:
				{
				setState(10016);
				if_exists();
				}
				break;
			}
			setState(10019);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_taskContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode TASK() { return getToken(SnowflakeParser.TASK, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_taskContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_task; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_task(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_task(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_task(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_taskContext drop_task() throws RecognitionException {
		Drop_taskContext _localctx = new Drop_taskContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_drop_task);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10021);
			match(DROP);
			setState(10022);
			match(TASK);
			setState(10024);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1272,_ctx) ) {
			case 1:
				{
				setState(10023);
				if_exists();
				}
				break;
			}
			setState(10026);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_userContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode USER() { return getToken(SnowflakeParser.USER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_user(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_user(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_userContext drop_user() throws RecognitionException {
		Drop_userContext _localctx = new Drop_userContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_drop_user);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10028);
			match(DROP);
			setState(10029);
			match(USER);
			setState(10031);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1273,_ctx) ) {
			case 1:
				{
				setState(10030);
				if_exists();
				}
				break;
			}
			setState(10033);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_viewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(SnowflakeParser.VIEW, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_viewContext drop_view() throws RecognitionException {
		Drop_viewContext _localctx = new Drop_viewContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_drop_view);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10035);
			match(DROP);
			setState(10036);
			match(VIEW);
			setState(10038);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1274,_ctx) ) {
			case 1:
				{
				setState(10037);
				if_exists();
				}
				break;
			}
			setState(10040);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Drop_warehouseContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SnowflakeParser.DROP, 0); }
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public Id_fnContext id_fn() {
			return getRuleContext(Id_fnContext.class,0);
		}
		public If_existsContext if_exists() {
			return getRuleContext(If_existsContext.class,0);
		}
		public Drop_warehouseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_warehouse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDrop_warehouse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDrop_warehouse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDrop_warehouse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_warehouseContext drop_warehouse() throws RecognitionException {
		Drop_warehouseContext _localctx = new Drop_warehouseContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_drop_warehouse);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10042);
			match(DROP);
			setState(10043);
			match(WAREHOUSE);
			setState(10045);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1275,_ctx) ) {
			case 1:
				{
				setState(10044);
				if_exists();
				}
				break;
			}
			setState(10047);
			id_fn();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cascade_restrictContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(SnowflakeParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(SnowflakeParser.RESTRICT, 0); }
		public Cascade_restrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cascade_restrict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCascade_restrict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCascade_restrict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCascade_restrict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cascade_restrictContext cascade_restrict() throws RecognitionException {
		Cascade_restrictContext _localctx = new Cascade_restrictContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_cascade_restrict);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10049);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Arg_typesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Data_type_listContext data_type_list() {
			return getRuleContext(Data_type_listContext.class,0);
		}
		public Arg_typesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_types; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterArg_types(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitArg_types(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitArg_types(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arg_typesContext arg_types() throws RecognitionException {
		Arg_typesContext _localctx = new Arg_typesContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_arg_types);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10051);
			match(LR_BRACKET);
			setState(10053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHAR || _la==CHARACTER || _la==INT || _la==NUMBER || _la==OBJECT || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & 8841L) != 0) || ((((_la - 838)) & ~0x3f) == 0 && ((1L << (_la - 838)) & 4294934525L) != 0)) {
				{
				setState(10052);
				data_type_list();
				}
			}

			setState(10055);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Undrop_commandContext extends ParserRuleContext {
		public Undrop_databaseContext undrop_database() {
			return getRuleContext(Undrop_databaseContext.class,0);
		}
		public Undrop_schemaContext undrop_schema() {
			return getRuleContext(Undrop_schemaContext.class,0);
		}
		public Undrop_tableContext undrop_table() {
			return getRuleContext(Undrop_tableContext.class,0);
		}
		public Undrop_tagContext undrop_tag() {
			return getRuleContext(Undrop_tagContext.class,0);
		}
		public Undrop_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undrop_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterUndrop_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitUndrop_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitUndrop_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Undrop_commandContext undrop_command() throws RecognitionException {
		Undrop_commandContext _localctx = new Undrop_commandContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_undrop_command);
		try {
			setState(10061);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1277,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10057);
				undrop_database();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10058);
				undrop_schema();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10059);
				undrop_table();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10060);
				undrop_tag();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Undrop_databaseContext extends ParserRuleContext {
		public TerminalNode UNDROP() { return getToken(SnowflakeParser.UNDROP, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Undrop_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undrop_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterUndrop_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitUndrop_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitUndrop_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Undrop_databaseContext undrop_database() throws RecognitionException {
		Undrop_databaseContext _localctx = new Undrop_databaseContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_undrop_database);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10063);
			match(UNDROP);
			setState(10064);
			match(DATABASE);
			setState(10065);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Undrop_schemaContext extends ParserRuleContext {
		public TerminalNode UNDROP() { return getToken(SnowflakeParser.UNDROP, 0); }
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Undrop_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undrop_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterUndrop_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitUndrop_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitUndrop_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Undrop_schemaContext undrop_schema() throws RecognitionException {
		Undrop_schemaContext _localctx = new Undrop_schemaContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_undrop_schema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10067);
			match(UNDROP);
			setState(10068);
			match(SCHEMA);
			setState(10069);
			schema_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Undrop_tableContext extends ParserRuleContext {
		public TerminalNode UNDROP() { return getToken(SnowflakeParser.UNDROP, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Undrop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undrop_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterUndrop_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitUndrop_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitUndrop_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Undrop_tableContext undrop_table() throws RecognitionException {
		Undrop_tableContext _localctx = new Undrop_tableContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_undrop_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10071);
			match(UNDROP);
			setState(10072);
			match(TABLE);
			setState(10073);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Undrop_tagContext extends ParserRuleContext {
		public TerminalNode UNDROP() { return getToken(SnowflakeParser.UNDROP, 0); }
		public TerminalNode TAG() { return getToken(SnowflakeParser.TAG, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Undrop_tagContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_undrop_tag; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterUndrop_tag(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitUndrop_tag(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitUndrop_tag(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Undrop_tagContext undrop_tag() throws RecognitionException {
		Undrop_tagContext _localctx = new Undrop_tagContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_undrop_tag);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10075);
			match(UNDROP);
			setState(10076);
			match(TAG);
			setState(10077);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Use_commandContext extends ParserRuleContext {
		public Use_databaseContext use_database() {
			return getRuleContext(Use_databaseContext.class,0);
		}
		public Use_roleContext use_role() {
			return getRuleContext(Use_roleContext.class,0);
		}
		public Use_schemaContext use_schema() {
			return getRuleContext(Use_schemaContext.class,0);
		}
		public Use_secondary_rolesContext use_secondary_roles() {
			return getRuleContext(Use_secondary_rolesContext.class,0);
		}
		public Use_warehouseContext use_warehouse() {
			return getRuleContext(Use_warehouseContext.class,0);
		}
		public Use_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterUse_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitUse_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitUse_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Use_commandContext use_command() throws RecognitionException {
		Use_commandContext _localctx = new Use_commandContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_use_command);
		try {
			setState(10084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1278,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10079);
				use_database();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10080);
				use_role();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10081);
				use_schema();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10082);
				use_secondary_roles();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10083);
				use_warehouse();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Use_databaseContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(SnowflakeParser.USE, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Use_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterUse_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitUse_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitUse_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Use_databaseContext use_database() throws RecognitionException {
		Use_databaseContext _localctx = new Use_databaseContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_use_database);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10086);
			match(USE);
			setState(10087);
			match(DATABASE);
			setState(10088);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Use_roleContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(SnowflakeParser.USE, 0); }
		public TerminalNode ROLE() { return getToken(SnowflakeParser.ROLE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Use_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterUse_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitUse_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitUse_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Use_roleContext use_role() throws RecognitionException {
		Use_roleContext _localctx = new Use_roleContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_use_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10090);
			match(USE);
			setState(10091);
			match(ROLE);
			setState(10092);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Use_schemaContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(SnowflakeParser.USE, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public TerminalNode DOT() { return getToken(SnowflakeParser.DOT, 0); }
		public Use_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterUse_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitUse_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitUse_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Use_schemaContext use_schema() throws RecognitionException {
		Use_schemaContext _localctx = new Use_schemaContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_use_schema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10094);
			match(USE);
			setState(10096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SCHEMA) {
				{
				setState(10095);
				match(SCHEMA);
				}
			}

			setState(10101);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1280,_ctx) ) {
			case 1:
				{
				setState(10098);
				id_();
				setState(10099);
				match(DOT);
				}
				break;
			}
			setState(10103);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Use_secondary_rolesContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(SnowflakeParser.USE, 0); }
		public TerminalNode SECONDARY() { return getToken(SnowflakeParser.SECONDARY, 0); }
		public TerminalNode ROLES() { return getToken(SnowflakeParser.ROLES, 0); }
		public TerminalNode ALL() { return getToken(SnowflakeParser.ALL, 0); }
		public TerminalNode NONE() { return getToken(SnowflakeParser.NONE, 0); }
		public Use_secondary_rolesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_secondary_roles; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterUse_secondary_roles(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitUse_secondary_roles(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitUse_secondary_roles(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Use_secondary_rolesContext use_secondary_roles() throws RecognitionException {
		Use_secondary_rolesContext _localctx = new Use_secondary_rolesContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_use_secondary_roles);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10105);
			match(USE);
			setState(10106);
			match(SECONDARY);
			setState(10107);
			match(ROLES);
			setState(10108);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==NONE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Use_warehouseContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(SnowflakeParser.USE, 0); }
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public Id_fnContext id_fn() {
			return getRuleContext(Id_fnContext.class,0);
		}
		public Use_warehouseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_warehouse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterUse_warehouse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitUse_warehouse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitUse_warehouse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Use_warehouseContext use_warehouse() throws RecognitionException {
		Use_warehouseContext _localctx = new Use_warehouseContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_use_warehouse);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10110);
			match(USE);
			setState(10111);
			match(WAREHOUSE);
			setState(10112);
			id_fn();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comment_clauseContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Comment_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterComment_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitComment_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitComment_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_clauseContext comment_clause() throws RecognitionException {
		Comment_clauseContext _localctx = new Comment_clauseContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_comment_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10114);
			match(COMMENT);
			setState(10115);
			match(EQ);
			setState(10116);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Inline_comment_clauseContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Inline_comment_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inline_comment_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterInline_comment_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitInline_comment_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitInline_comment_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Inline_comment_clauseContext inline_comment_clause() throws RecognitionException {
		Inline_comment_clauseContext _localctx = new Inline_comment_clauseContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_inline_comment_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10118);
			match(COMMENT);
			setState(10119);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class If_suspendedContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(SnowflakeParser.IF, 0); }
		public TerminalNode SUSPENDED() { return getToken(SnowflakeParser.SUSPENDED, 0); }
		public If_suspendedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_suspended; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterIf_suspended(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitIf_suspended(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitIf_suspended(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_suspendedContext if_suspended() throws RecognitionException {
		If_suspendedContext _localctx = new If_suspendedContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_if_suspended);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10121);
			match(IF);
			setState(10122);
			match(SUSPENDED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class If_existsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(SnowflakeParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SnowflakeParser.EXISTS, 0); }
		public If_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_exists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterIf_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitIf_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitIf_exists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_existsContext if_exists() throws RecognitionException {
		If_existsContext _localctx = new If_existsContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_if_exists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10124);
			match(IF);
			setState(10125);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class If_not_existsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(SnowflakeParser.IF, 0); }
		public TerminalNode NOT() { return getToken(SnowflakeParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(SnowflakeParser.EXISTS, 0); }
		public If_not_existsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_not_exists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterIf_not_exists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitIf_not_exists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitIf_not_exists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_not_existsContext if_not_exists() throws RecognitionException {
		If_not_existsContext _localctx = new If_not_existsContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_if_not_exists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10127);
			match(IF);
			setState(10128);
			match(NOT);
			setState(10129);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Or_replaceContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(SnowflakeParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SnowflakeParser.REPLACE, 0); }
		public Or_replaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_or_replace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterOr_replace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitOr_replace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitOr_replace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Or_replaceContext or_replace() throws RecognitionException {
		Or_replaceContext _localctx = new Or_replaceContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_or_replace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10131);
			match(OR);
			setState(10132);
			match(REPLACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Or_alterContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(SnowflakeParser.OR, 0); }
		public TerminalNode ALTER() { return getToken(SnowflakeParser.ALTER, 0); }
		public Or_alterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_or_alter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterOr_alter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitOr_alter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitOr_alter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Or_alterContext or_alter() throws RecognitionException {
		Or_alterContext _localctx = new Or_alterContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_or_alter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10134);
			match(OR);
			setState(10135);
			match(ALTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DescribeContext extends ParserRuleContext {
		public TerminalNode DESC() { return getToken(SnowflakeParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(SnowflakeParser.DESCRIBE, 0); }
		public DescribeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeContext describe() throws RecognitionException {
		DescribeContext _localctx = new DescribeContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_describe);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10137);
			_la = _input.LA(1);
			if ( !(_la==DESC || _la==DESCRIBE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_commandContext extends ParserRuleContext {
		public Describe_alertContext describe_alert() {
			return getRuleContext(Describe_alertContext.class,0);
		}
		public Describe_databaseContext describe_database() {
			return getRuleContext(Describe_databaseContext.class,0);
		}
		public Describe_dynamic_tableContext describe_dynamic_table() {
			return getRuleContext(Describe_dynamic_tableContext.class,0);
		}
		public Describe_event_tableContext describe_event_table() {
			return getRuleContext(Describe_event_tableContext.class,0);
		}
		public Describe_external_tableContext describe_external_table() {
			return getRuleContext(Describe_external_tableContext.class,0);
		}
		public Describe_file_formatContext describe_file_format() {
			return getRuleContext(Describe_file_formatContext.class,0);
		}
		public Describe_functionContext describe_function() {
			return getRuleContext(Describe_functionContext.class,0);
		}
		public Describe_integrationContext describe_integration() {
			return getRuleContext(Describe_integrationContext.class,0);
		}
		public Describe_masking_policyContext describe_masking_policy() {
			return getRuleContext(Describe_masking_policyContext.class,0);
		}
		public Describe_materialized_viewContext describe_materialized_view() {
			return getRuleContext(Describe_materialized_viewContext.class,0);
		}
		public Describe_network_policyContext describe_network_policy() {
			return getRuleContext(Describe_network_policyContext.class,0);
		}
		public Describe_password_policyContext describe_password_policy() {
			return getRuleContext(Describe_password_policyContext.class,0);
		}
		public Describe_pipeContext describe_pipe() {
			return getRuleContext(Describe_pipeContext.class,0);
		}
		public Describe_procedureContext describe_procedure() {
			return getRuleContext(Describe_procedureContext.class,0);
		}
		public Describe_resultContext describe_result() {
			return getRuleContext(Describe_resultContext.class,0);
		}
		public Describe_row_access_policyContext describe_row_access_policy() {
			return getRuleContext(Describe_row_access_policyContext.class,0);
		}
		public Describe_schemaContext describe_schema() {
			return getRuleContext(Describe_schemaContext.class,0);
		}
		public Describe_search_optimizationContext describe_search_optimization() {
			return getRuleContext(Describe_search_optimizationContext.class,0);
		}
		public Describe_sequenceContext describe_sequence() {
			return getRuleContext(Describe_sequenceContext.class,0);
		}
		public Describe_session_policyContext describe_session_policy() {
			return getRuleContext(Describe_session_policyContext.class,0);
		}
		public Describe_shareContext describe_share() {
			return getRuleContext(Describe_shareContext.class,0);
		}
		public Describe_stageContext describe_stage() {
			return getRuleContext(Describe_stageContext.class,0);
		}
		public Describe_streamContext describe_stream() {
			return getRuleContext(Describe_streamContext.class,0);
		}
		public Describe_tableContext describe_table() {
			return getRuleContext(Describe_tableContext.class,0);
		}
		public Describe_taskContext describe_task() {
			return getRuleContext(Describe_taskContext.class,0);
		}
		public Describe_transactionContext describe_transaction() {
			return getRuleContext(Describe_transactionContext.class,0);
		}
		public Describe_userContext describe_user() {
			return getRuleContext(Describe_userContext.class,0);
		}
		public Describe_viewContext describe_view() {
			return getRuleContext(Describe_viewContext.class,0);
		}
		public Describe_warehouseContext describe_warehouse() {
			return getRuleContext(Describe_warehouseContext.class,0);
		}
		public Describe_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_commandContext describe_command() throws RecognitionException {
		Describe_commandContext _localctx = new Describe_commandContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_describe_command);
		try {
			setState(10168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10139);
				describe_alert();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10140);
				describe_database();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10141);
				describe_dynamic_table();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10142);
				describe_event_table();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10143);
				describe_external_table();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10144);
				describe_file_format();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10145);
				describe_function();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10146);
				describe_integration();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10147);
				describe_masking_policy();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10148);
				describe_materialized_view();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10149);
				describe_network_policy();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(10150);
				describe_password_policy();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(10151);
				describe_pipe();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(10152);
				describe_procedure();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(10153);
				describe_result();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(10154);
				describe_row_access_policy();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(10155);
				describe_schema();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(10156);
				describe_search_optimization();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(10157);
				describe_sequence();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(10158);
				describe_session_policy();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(10159);
				describe_share();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(10160);
				describe_stage();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(10161);
				describe_stream();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(10162);
				describe_table();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(10163);
				describe_task();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(10164);
				describe_transaction();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(10165);
				describe_user();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(10166);
				describe_view();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(10167);
				describe_warehouse();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_alertContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode ALERT() { return getToken(SnowflakeParser.ALERT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Describe_alertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_alert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_alert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_alert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_alert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_alertContext describe_alert() throws RecognitionException {
		Describe_alertContext _localctx = new Describe_alertContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_describe_alert);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10170);
			describe();
			setState(10171);
			match(ALERT);
			setState(10172);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_databaseContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Describe_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_databaseContext describe_database() throws RecognitionException {
		Describe_databaseContext _localctx = new Describe_databaseContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_describe_database);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10174);
			describe();
			setState(10175);
			match(DATABASE);
			setState(10176);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_dynamic_tableContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode DYNAMIC() { return getToken(SnowflakeParser.DYNAMIC, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Describe_dynamic_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_dynamic_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_dynamic_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_dynamic_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_dynamic_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_dynamic_tableContext describe_dynamic_table() throws RecognitionException {
		Describe_dynamic_tableContext _localctx = new Describe_dynamic_tableContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_describe_dynamic_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10178);
			describe();
			setState(10179);
			match(DYNAMIC);
			setState(10180);
			match(TABLE);
			setState(10181);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_event_tableContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode EVENT() { return getToken(SnowflakeParser.EVENT, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Describe_event_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_event_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_event_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_event_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_event_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_event_tableContext describe_event_table() throws RecognitionException {
		Describe_event_tableContext _localctx = new Describe_event_tableContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_describe_event_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10183);
			describe();
			setState(10184);
			match(EVENT);
			setState(10185);
			match(TABLE);
			setState(10186);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_external_tableContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(SnowflakeParser.EXTERNAL, 0); }
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode COLUMNS() { return getToken(SnowflakeParser.COLUMNS, 0); }
		public TerminalNode STAGE() { return getToken(SnowflakeParser.STAGE, 0); }
		public Describe_external_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_external_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_external_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_external_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_external_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_external_tableContext describe_external_table() throws RecognitionException {
		Describe_external_tableContext _localctx = new Describe_external_tableContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_describe_external_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10188);
			describe();
			setState(10190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(10189);
				match(EXTERNAL);
				}
			}

			setState(10192);
			match(TABLE);
			setState(10193);
			object_name();
			setState(10197);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE) {
				{
				setState(10194);
				match(TYPE);
				setState(10195);
				match(EQ);
				setState(10196);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==STAGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_file_formatContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode FILE() { return getToken(SnowflakeParser.FILE, 0); }
		public TerminalNode FORMAT() { return getToken(SnowflakeParser.FORMAT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Describe_file_formatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_file_format; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_file_format(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_file_format(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_file_format(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_file_formatContext describe_file_format() throws RecognitionException {
		Describe_file_formatContext _localctx = new Describe_file_formatContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_describe_file_format);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10199);
			describe();
			setState(10200);
			match(FILE);
			setState(10201);
			match(FORMAT);
			setState(10202);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_functionContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(SnowflakeParser.FUNCTION, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Arg_typesContext arg_types() {
			return getRuleContext(Arg_typesContext.class,0);
		}
		public Describe_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_functionContext describe_function() throws RecognitionException {
		Describe_functionContext _localctx = new Describe_functionContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_describe_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10204);
			describe();
			setState(10205);
			match(FUNCTION);
			setState(10206);
			object_name();
			setState(10207);
			arg_types();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_integrationContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode API() { return getToken(SnowflakeParser.API, 0); }
		public TerminalNode NOTIFICATION() { return getToken(SnowflakeParser.NOTIFICATION, 0); }
		public TerminalNode SECURITY() { return getToken(SnowflakeParser.SECURITY, 0); }
		public TerminalNode STORAGE() { return getToken(SnowflakeParser.STORAGE, 0); }
		public Describe_integrationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_integration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_integration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_integration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_integration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_integrationContext describe_integration() throws RecognitionException {
		Describe_integrationContext _localctx = new Describe_integrationContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_describe_integration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10209);
			describe();
			setState(10211);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==API || _la==NOTIFICATION || _la==SECURITY || _la==STORAGE) {
				{
				setState(10210);
				_la = _input.LA(1);
				if ( !(_la==API || _la==NOTIFICATION || _la==SECURITY || _la==STORAGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(10213);
			match(INTEGRATION);
			setState(10214);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_masking_policyContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode MASKING() { return getToken(SnowflakeParser.MASKING, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Describe_masking_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_masking_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_masking_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_masking_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_masking_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_masking_policyContext describe_masking_policy() throws RecognitionException {
		Describe_masking_policyContext _localctx = new Describe_masking_policyContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_describe_masking_policy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10216);
			describe();
			setState(10217);
			match(MASKING);
			setState(10218);
			match(POLICY);
			setState(10219);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_materialized_viewContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(SnowflakeParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(SnowflakeParser.VIEW, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Describe_materialized_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_materialized_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_materialized_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_materialized_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_materialized_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_materialized_viewContext describe_materialized_view() throws RecognitionException {
		Describe_materialized_viewContext _localctx = new Describe_materialized_viewContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_describe_materialized_view);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10221);
			describe();
			setState(10222);
			match(MATERIALIZED);
			setState(10223);
			match(VIEW);
			setState(10224);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_network_policyContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode NETWORK() { return getToken(SnowflakeParser.NETWORK, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Describe_network_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_network_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_network_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_network_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_network_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_network_policyContext describe_network_policy() throws RecognitionException {
		Describe_network_policyContext _localctx = new Describe_network_policyContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_describe_network_policy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10226);
			describe();
			setState(10227);
			match(NETWORK);
			setState(10228);
			match(POLICY);
			setState(10229);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_pipeContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode PIPE() { return getToken(SnowflakeParser.PIPE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Describe_pipeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_pipe; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_pipe(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_pipe(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_pipe(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_pipeContext describe_pipe() throws RecognitionException {
		Describe_pipeContext _localctx = new Describe_pipeContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_describe_pipe);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10231);
			describe();
			setState(10232);
			match(PIPE);
			setState(10233);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_procedureContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(SnowflakeParser.PROCEDURE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Arg_typesContext arg_types() {
			return getRuleContext(Arg_typesContext.class,0);
		}
		public Describe_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_procedureContext describe_procedure() throws RecognitionException {
		Describe_procedureContext _localctx = new Describe_procedureContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_describe_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10235);
			describe();
			setState(10236);
			match(PROCEDURE);
			setState(10237);
			object_name();
			setState(10238);
			arg_types();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_resultContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode RESULT() { return getToken(SnowflakeParser.RESULT, 0); }
		public TerminalNode STRING() { return getToken(SnowflakeParser.STRING, 0); }
		public TerminalNode LAST_QUERY_ID() { return getToken(SnowflakeParser.LAST_QUERY_ID, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Describe_resultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_result; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_result(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_result(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_result(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_resultContext describe_result() throws RecognitionException {
		Describe_resultContext _localctx = new Describe_resultContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_describe_result);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10240);
			describe();
			setState(10241);
			match(RESULT);
			setState(10246);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(10242);
				match(STRING);
				}
				break;
			case LAST_QUERY_ID:
				{
				setState(10243);
				match(LAST_QUERY_ID);
				setState(10244);
				match(LR_BRACKET);
				setState(10245);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_row_access_policyContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode ROW() { return getToken(SnowflakeParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(SnowflakeParser.ACCESS, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Describe_row_access_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_row_access_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_row_access_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_row_access_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_row_access_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_row_access_policyContext describe_row_access_policy() throws RecognitionException {
		Describe_row_access_policyContext _localctx = new Describe_row_access_policyContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_describe_row_access_policy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10248);
			describe();
			setState(10249);
			match(ROW);
			setState(10250);
			match(ACCESS);
			setState(10251);
			match(POLICY);
			setState(10252);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_schemaContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Describe_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_schemaContext describe_schema() throws RecognitionException {
		Describe_schemaContext _localctx = new Describe_schemaContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_describe_schema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10254);
			describe();
			setState(10255);
			match(SCHEMA);
			setState(10256);
			schema_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_search_optimizationContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode SEARCH() { return getToken(SnowflakeParser.SEARCH, 0); }
		public TerminalNode OPTIMIZATION() { return getToken(SnowflakeParser.OPTIMIZATION, 0); }
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Describe_search_optimizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_search_optimization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_search_optimization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_search_optimization(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_search_optimization(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_search_optimizationContext describe_search_optimization() throws RecognitionException {
		Describe_search_optimizationContext _localctx = new Describe_search_optimizationContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_describe_search_optimization);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10258);
			describe();
			setState(10259);
			match(SEARCH);
			setState(10260);
			match(OPTIMIZATION);
			setState(10261);
			match(ON);
			setState(10262);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_sequenceContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(SnowflakeParser.SEQUENCE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Describe_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_sequenceContext describe_sequence() throws RecognitionException {
		Describe_sequenceContext _localctx = new Describe_sequenceContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_describe_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10264);
			describe();
			setState(10265);
			match(SEQUENCE);
			setState(10266);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_session_policyContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(SnowflakeParser.SESSION, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Describe_session_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_session_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_session_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_session_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_session_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_session_policyContext describe_session_policy() throws RecognitionException {
		Describe_session_policyContext _localctx = new Describe_session_policyContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_describe_session_policy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10268);
			describe();
			setState(10269);
			match(SESSION);
			setState(10270);
			match(POLICY);
			setState(10271);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_password_policyContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode PASSWORD() { return getToken(SnowflakeParser.PASSWORD, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Describe_password_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_password_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_password_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_password_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_password_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_password_policyContext describe_password_policy() throws RecognitionException {
		Describe_password_policyContext _localctx = new Describe_password_policyContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_describe_password_policy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10273);
			describe();
			setState(10274);
			match(PASSWORD);
			setState(10275);
			match(POLICY);
			setState(10276);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_shareContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode SHARE() { return getToken(SnowflakeParser.SHARE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Describe_shareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_share; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_share(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_share(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_share(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_shareContext describe_share() throws RecognitionException {
		Describe_shareContext _localctx = new Describe_shareContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_describe_share);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10278);
			describe();
			setState(10279);
			match(SHARE);
			setState(10280);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_streamContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode STREAM() { return getToken(SnowflakeParser.STREAM, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Describe_streamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_stream; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_stream(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_stream(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_stream(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_streamContext describe_stream() throws RecognitionException {
		Describe_streamContext _localctx = new Describe_streamContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_describe_stream);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10282);
			describe();
			setState(10283);
			match(STREAM);
			setState(10284);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_tableContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode COLUMNS() { return getToken(SnowflakeParser.COLUMNS, 0); }
		public TerminalNode STAGE() { return getToken(SnowflakeParser.STAGE, 0); }
		public Describe_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_tableContext describe_table() throws RecognitionException {
		Describe_tableContext _localctx = new Describe_tableContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_describe_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10286);
			describe();
			setState(10287);
			match(TABLE);
			setState(10288);
			object_name();
			setState(10292);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE) {
				{
				setState(10289);
				match(TYPE);
				setState(10290);
				match(EQ);
				setState(10291);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==STAGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_taskContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode TASK() { return getToken(SnowflakeParser.TASK, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Describe_taskContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_task; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_task(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_task(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_task(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_taskContext describe_task() throws RecognitionException {
		Describe_taskContext _localctx = new Describe_taskContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_describe_task);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10294);
			describe();
			setState(10295);
			match(TASK);
			setState(10296);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_transactionContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(SnowflakeParser.TRANSACTION, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public Describe_transactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_transaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_transaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_transaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_transaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_transactionContext describe_transaction() throws RecognitionException {
		Describe_transactionContext _localctx = new Describe_transactionContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_describe_transaction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10298);
			describe();
			setState(10299);
			match(TRANSACTION);
			setState(10300);
			num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_userContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode USER() { return getToken(SnowflakeParser.USER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Describe_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_user(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_user(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_userContext describe_user() throws RecognitionException {
		Describe_userContext _localctx = new Describe_userContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_describe_user);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10302);
			describe();
			setState(10303);
			match(USER);
			setState(10304);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_viewContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(SnowflakeParser.VIEW, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Describe_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_viewContext describe_view() throws RecognitionException {
		Describe_viewContext _localctx = new Describe_viewContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_describe_view);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10306);
			describe();
			setState(10307);
			match(VIEW);
			setState(10308);
			object_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Describe_warehouseContext extends ParserRuleContext {
		public DescribeContext describe() {
			return getRuleContext(DescribeContext.class,0);
		}
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Describe_warehouseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describe_warehouse; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDescribe_warehouse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDescribe_warehouse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDescribe_warehouse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Describe_warehouseContext describe_warehouse() throws RecognitionException {
		Describe_warehouseContext _localctx = new Describe_warehouseContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_describe_warehouse);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10310);
			describe();
			setState(10311);
			match(WAREHOUSE);
			setState(10312);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_commandContext extends ParserRuleContext {
		public Show_alertsContext show_alerts() {
			return getRuleContext(Show_alertsContext.class,0);
		}
		public Show_channelsContext show_channels() {
			return getRuleContext(Show_channelsContext.class,0);
		}
		public Show_columnsContext show_columns() {
			return getRuleContext(Show_columnsContext.class,0);
		}
		public Show_connectionsContext show_connections() {
			return getRuleContext(Show_connectionsContext.class,0);
		}
		public Show_databasesContext show_databases() {
			return getRuleContext(Show_databasesContext.class,0);
		}
		public Show_databases_in_failover_groupContext show_databases_in_failover_group() {
			return getRuleContext(Show_databases_in_failover_groupContext.class,0);
		}
		public Show_databases_in_replication_groupContext show_databases_in_replication_group() {
			return getRuleContext(Show_databases_in_replication_groupContext.class,0);
		}
		public Show_delegated_authorizationsContext show_delegated_authorizations() {
			return getRuleContext(Show_delegated_authorizationsContext.class,0);
		}
		public Show_dynamic_tablesContext show_dynamic_tables() {
			return getRuleContext(Show_dynamic_tablesContext.class,0);
		}
		public Show_event_tablesContext show_event_tables() {
			return getRuleContext(Show_event_tablesContext.class,0);
		}
		public Show_external_functionsContext show_external_functions() {
			return getRuleContext(Show_external_functionsContext.class,0);
		}
		public Show_external_tablesContext show_external_tables() {
			return getRuleContext(Show_external_tablesContext.class,0);
		}
		public Show_failover_groupsContext show_failover_groups() {
			return getRuleContext(Show_failover_groupsContext.class,0);
		}
		public Show_file_formatsContext show_file_formats() {
			return getRuleContext(Show_file_formatsContext.class,0);
		}
		public Show_functionsContext show_functions() {
			return getRuleContext(Show_functionsContext.class,0);
		}
		public Show_global_accountsContext show_global_accounts() {
			return getRuleContext(Show_global_accountsContext.class,0);
		}
		public Show_grantsContext show_grants() {
			return getRuleContext(Show_grantsContext.class,0);
		}
		public Show_integrationsContext show_integrations() {
			return getRuleContext(Show_integrationsContext.class,0);
		}
		public Show_locksContext show_locks() {
			return getRuleContext(Show_locksContext.class,0);
		}
		public Show_managed_accountsContext show_managed_accounts() {
			return getRuleContext(Show_managed_accountsContext.class,0);
		}
		public Show_masking_policiesContext show_masking_policies() {
			return getRuleContext(Show_masking_policiesContext.class,0);
		}
		public Show_materialized_viewsContext show_materialized_views() {
			return getRuleContext(Show_materialized_viewsContext.class,0);
		}
		public Show_network_policiesContext show_network_policies() {
			return getRuleContext(Show_network_policiesContext.class,0);
		}
		public Show_objectsContext show_objects() {
			return getRuleContext(Show_objectsContext.class,0);
		}
		public Show_organization_accountsContext show_organization_accounts() {
			return getRuleContext(Show_organization_accountsContext.class,0);
		}
		public Show_parametersContext show_parameters() {
			return getRuleContext(Show_parametersContext.class,0);
		}
		public Show_password_policiesContext show_password_policies() {
			return getRuleContext(Show_password_policiesContext.class,0);
		}
		public Show_pipesContext show_pipes() {
			return getRuleContext(Show_pipesContext.class,0);
		}
		public Show_primary_keysContext show_primary_keys() {
			return getRuleContext(Show_primary_keysContext.class,0);
		}
		public Show_proceduresContext show_procedures() {
			return getRuleContext(Show_proceduresContext.class,0);
		}
		public Show_regionsContext show_regions() {
			return getRuleContext(Show_regionsContext.class,0);
		}
		public Show_replication_accountsContext show_replication_accounts() {
			return getRuleContext(Show_replication_accountsContext.class,0);
		}
		public Show_replication_databasesContext show_replication_databases() {
			return getRuleContext(Show_replication_databasesContext.class,0);
		}
		public Show_replication_groupsContext show_replication_groups() {
			return getRuleContext(Show_replication_groupsContext.class,0);
		}
		public Show_resource_monitorsContext show_resource_monitors() {
			return getRuleContext(Show_resource_monitorsContext.class,0);
		}
		public Show_rolesContext show_roles() {
			return getRuleContext(Show_rolesContext.class,0);
		}
		public Show_row_access_policiesContext show_row_access_policies() {
			return getRuleContext(Show_row_access_policiesContext.class,0);
		}
		public Show_schemasContext show_schemas() {
			return getRuleContext(Show_schemasContext.class,0);
		}
		public Show_sequencesContext show_sequences() {
			return getRuleContext(Show_sequencesContext.class,0);
		}
		public Show_session_policiesContext show_session_policies() {
			return getRuleContext(Show_session_policiesContext.class,0);
		}
		public Show_sharesContext show_shares() {
			return getRuleContext(Show_sharesContext.class,0);
		}
		public Show_shares_in_failover_groupContext show_shares_in_failover_group() {
			return getRuleContext(Show_shares_in_failover_groupContext.class,0);
		}
		public Show_shares_in_replication_groupContext show_shares_in_replication_group() {
			return getRuleContext(Show_shares_in_replication_groupContext.class,0);
		}
		public Show_stagesContext show_stages() {
			return getRuleContext(Show_stagesContext.class,0);
		}
		public Show_streamsContext show_streams() {
			return getRuleContext(Show_streamsContext.class,0);
		}
		public Show_tablesContext show_tables() {
			return getRuleContext(Show_tablesContext.class,0);
		}
		public Show_tagsContext show_tags() {
			return getRuleContext(Show_tagsContext.class,0);
		}
		public Show_tasksContext show_tasks() {
			return getRuleContext(Show_tasksContext.class,0);
		}
		public Show_transactionsContext show_transactions() {
			return getRuleContext(Show_transactionsContext.class,0);
		}
		public Show_user_functionsContext show_user_functions() {
			return getRuleContext(Show_user_functionsContext.class,0);
		}
		public Show_usersContext show_users() {
			return getRuleContext(Show_usersContext.class,0);
		}
		public Show_variablesContext show_variables() {
			return getRuleContext(Show_variablesContext.class,0);
		}
		public Show_viewsContext show_views() {
			return getRuleContext(Show_viewsContext.class,0);
		}
		public Show_warehousesContext show_warehouses() {
			return getRuleContext(Show_warehousesContext.class,0);
		}
		public Show_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_commandContext show_command() throws RecognitionException {
		Show_commandContext _localctx = new Show_commandContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_show_command);
		try {
			setState(10368);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1287,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10314);
				show_alerts();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10315);
				show_channels();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10316);
				show_columns();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10317);
				show_connections();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10318);
				show_databases();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(10319);
				show_databases_in_failover_group();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(10320);
				show_databases_in_replication_group();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(10321);
				show_delegated_authorizations();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(10322);
				show_dynamic_tables();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(10323);
				show_event_tables();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(10324);
				show_external_functions();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(10325);
				show_external_tables();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(10326);
				show_failover_groups();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(10327);
				show_file_formats();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(10328);
				show_functions();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(10329);
				show_global_accounts();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(10330);
				show_grants();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(10331);
				show_integrations();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(10332);
				show_locks();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(10333);
				show_managed_accounts();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(10334);
				show_masking_policies();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(10335);
				show_materialized_views();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(10336);
				show_network_policies();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(10337);
				show_objects();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(10338);
				show_organization_accounts();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(10339);
				show_parameters();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(10340);
				show_password_policies();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(10341);
				show_pipes();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(10342);
				show_primary_keys();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(10343);
				show_procedures();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(10344);
				show_regions();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(10345);
				show_replication_accounts();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(10346);
				show_replication_databases();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(10347);
				show_replication_groups();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(10348);
				show_resource_monitors();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(10349);
				show_roles();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(10350);
				show_row_access_policies();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(10351);
				show_schemas();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(10352);
				show_sequences();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(10353);
				show_session_policies();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(10354);
				show_shares();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(10355);
				show_shares_in_failover_group();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(10356);
				show_shares_in_replication_group();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(10357);
				show_stages();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(10358);
				show_streams();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(10359);
				show_tables();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(10360);
				show_tags();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(10361);
				show_tasks();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(10362);
				show_transactions();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(10363);
				show_user_functions();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(10364);
				show_users();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(10365);
				show_variables();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(10366);
				show_views();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(10367);
				show_warehouses();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_alertsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode ALERTS() { return getToken(SnowflakeParser.ALERTS, 0); }
		public TerminalNode TERSE() { return getToken(SnowflakeParser.TERSE, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public Starts_withContext starts_with() {
			return getRuleContext(Starts_withContext.class,0);
		}
		public Limit_rowsContext limit_rows() {
			return getRuleContext(Limit_rowsContext.class,0);
		}
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Show_alertsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_alerts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_alerts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_alerts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_alerts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_alertsContext show_alerts() throws RecognitionException {
		Show_alertsContext _localctx = new Show_alertsContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_show_alerts);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10370);
			match(SHOW);
			setState(10372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TERSE) {
				{
				setState(10371);
				match(TERSE);
				}
			}

			setState(10374);
			match(ALERTS);
			setState(10376);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10375);
				like_pattern();
				}
			}

			setState(10390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10378);
				match(IN);
				setState(10388);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACCOUNT:
					{
					setState(10379);
					match(ACCOUNT);
					}
					break;
				case DATABASE:
					{
					setState(10380);
					match(DATABASE);
					setState(10382);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(10381);
						id_();
						}
					}

					}
					break;
				case SCHEMA:
					{
					setState(10384);
					match(SCHEMA);
					setState(10386);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(10385);
						schema_name();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(10393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STARTS) {
				{
				setState(10392);
				starts_with();
				}
			}

			setState(10396);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(10395);
				limit_rows();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_channelsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode CHANNELS() { return getToken(SnowflakeParser.CHANNELS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Show_channelsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_channels; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_channels(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_channels(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_channels(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_channelsContext show_channels() throws RecognitionException {
		Show_channelsContext _localctx = new Show_channelsContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_show_channels);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10398);
			match(SHOW);
			setState(10399);
			match(CHANNELS);
			setState(10401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10400);
				like_pattern();
				}
			}

			setState(10420);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10403);
				match(IN);
				setState(10418);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1300,_ctx) ) {
				case 1:
					{
					setState(10404);
					match(ACCOUNT);
					}
					break;
				case 2:
					{
					setState(10405);
					match(DATABASE);
					setState(10407);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(10406);
						id_();
						}
					}

					}
					break;
				case 3:
					{
					setState(10409);
					match(SCHEMA);
					setState(10411);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(10410);
						schema_name();
						}
					}

					}
					break;
				case 4:
					{
					setState(10413);
					match(TABLE);
					}
					break;
				case 5:
					{
					setState(10415);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TABLE) {
						{
						setState(10414);
						match(TABLE);
						}
					}

					setState(10417);
					object_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_columnsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode COLUMNS() { return getToken(SnowflakeParser.COLUMNS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode VIEW() { return getToken(SnowflakeParser.VIEW, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Show_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_columns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_columns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_columns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_columnsContext show_columns() throws RecognitionException {
		Show_columnsContext _localctx = new Show_columnsContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_show_columns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10422);
			match(SHOW);
			setState(10423);
			match(COLUMNS);
			setState(10425);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10424);
				like_pattern();
				}
			}

			setState(10449);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10427);
				match(IN);
				setState(10447);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1307,_ctx) ) {
				case 1:
					{
					setState(10428);
					match(ACCOUNT);
					}
					break;
				case 2:
					{
					setState(10429);
					match(DATABASE);
					setState(10431);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(10430);
						id_();
						}
					}

					}
					break;
				case 3:
					{
					setState(10433);
					match(SCHEMA);
					setState(10435);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(10434);
						schema_name();
						}
					}

					}
					break;
				case 4:
					{
					setState(10437);
					match(TABLE);
					}
					break;
				case 5:
					{
					setState(10439);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TABLE) {
						{
						setState(10438);
						match(TABLE);
						}
					}

					setState(10441);
					object_name();
					}
					break;
				case 6:
					{
					setState(10442);
					match(VIEW);
					}
					break;
				case 7:
					{
					setState(10444);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==VIEW) {
						{
						setState(10443);
						match(VIEW);
						}
					}

					setState(10446);
					object_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_connectionsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode CONNECTIONS() { return getToken(SnowflakeParser.CONNECTIONS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public Show_connectionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_connections; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_connections(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_connections(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_connections(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_connectionsContext show_connections() throws RecognitionException {
		Show_connectionsContext _localctx = new Show_connectionsContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_show_connections);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10451);
			match(SHOW);
			setState(10452);
			match(CONNECTIONS);
			setState(10454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10453);
				like_pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Starts_withContext extends ParserRuleContext {
		public TerminalNode STARTS() { return getToken(SnowflakeParser.STARTS, 0); }
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Starts_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_starts_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterStarts_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitStarts_with(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitStarts_with(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Starts_withContext starts_with() throws RecognitionException {
		Starts_withContext _localctx = new Starts_withContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_starts_with);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10456);
			match(STARTS);
			setState(10457);
			match(WITH);
			setState(10458);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Limit_rowsContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(SnowflakeParser.LIMIT, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SnowflakeParser.FROM, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Limit_rowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_rows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterLimit_rows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitLimit_rows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitLimit_rows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_rowsContext limit_rows() throws RecognitionException {
		Limit_rowsContext _localctx = new Limit_rowsContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_limit_rows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10460);
			match(LIMIT);
			setState(10461);
			num();
			setState(10464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(10462);
				match(FROM);
				setState(10463);
				string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_databasesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(SnowflakeParser.DATABASES, 0); }
		public TerminalNode TERSE() { return getToken(SnowflakeParser.TERSE, 0); }
		public TerminalNode HISTORY() { return getToken(SnowflakeParser.HISTORY, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public Starts_withContext starts_with() {
			return getRuleContext(Starts_withContext.class,0);
		}
		public Limit_rowsContext limit_rows() {
			return getRuleContext(Limit_rowsContext.class,0);
		}
		public Show_databasesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_databases; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_databases(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_databases(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_databases(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_databasesContext show_databases() throws RecognitionException {
		Show_databasesContext _localctx = new Show_databasesContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_show_databases);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10466);
			match(SHOW);
			setState(10468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TERSE) {
				{
				setState(10467);
				match(TERSE);
				}
			}

			setState(10470);
			match(DATABASES);
			setState(10472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HISTORY) {
				{
				setState(10471);
				match(HISTORY);
				}
			}

			setState(10475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10474);
				like_pattern();
				}
			}

			setState(10478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STARTS) {
				{
				setState(10477);
				starts_with();
				}
			}

			setState(10481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(10480);
				limit_rows();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_databases_in_failover_groupContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(SnowflakeParser.DATABASES, 0); }
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode FAILOVER() { return getToken(SnowflakeParser.FAILOVER, 0); }
		public TerminalNode GROUP() { return getToken(SnowflakeParser.GROUP, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Show_databases_in_failover_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_databases_in_failover_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_databases_in_failover_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_databases_in_failover_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_databases_in_failover_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_databases_in_failover_groupContext show_databases_in_failover_group() throws RecognitionException {
		Show_databases_in_failover_groupContext _localctx = new Show_databases_in_failover_groupContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_show_databases_in_failover_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10483);
			match(SHOW);
			setState(10484);
			match(DATABASES);
			setState(10485);
			match(IN);
			setState(10486);
			match(FAILOVER);
			setState(10487);
			match(GROUP);
			setState(10488);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_databases_in_replication_groupContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(SnowflakeParser.DATABASES, 0); }
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode REPLICATION() { return getToken(SnowflakeParser.REPLICATION, 0); }
		public TerminalNode GROUP() { return getToken(SnowflakeParser.GROUP, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Show_databases_in_replication_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_databases_in_replication_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_databases_in_replication_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_databases_in_replication_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_databases_in_replication_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_databases_in_replication_groupContext show_databases_in_replication_group() throws RecognitionException {
		Show_databases_in_replication_groupContext _localctx = new Show_databases_in_replication_groupContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_show_databases_in_replication_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10490);
			match(SHOW);
			setState(10491);
			match(DATABASES);
			setState(10492);
			match(IN);
			setState(10493);
			match(REPLICATION);
			setState(10494);
			match(GROUP);
			setState(10495);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_delegated_authorizationsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode DELEGATED() { return getToken(SnowflakeParser.DELEGATED, 0); }
		public TerminalNode AUTHORIZATIONS() { return getToken(SnowflakeParser.AUTHORIZATIONS, 0); }
		public TerminalNode BY() { return getToken(SnowflakeParser.BY, 0); }
		public TerminalNode USER() { return getToken(SnowflakeParser.USER, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public TerminalNode SECURITY() { return getToken(SnowflakeParser.SECURITY, 0); }
		public TerminalNode INTEGRATION() { return getToken(SnowflakeParser.INTEGRATION, 0); }
		public Show_delegated_authorizationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_delegated_authorizations; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_delegated_authorizations(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_delegated_authorizations(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_delegated_authorizations(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_delegated_authorizationsContext show_delegated_authorizations() throws RecognitionException {
		Show_delegated_authorizationsContext _localctx = new Show_delegated_authorizationsContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_show_delegated_authorizations);
		try {
			setState(10513);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1316,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10497);
				match(SHOW);
				setState(10498);
				match(DELEGATED);
				setState(10499);
				match(AUTHORIZATIONS);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10500);
				match(SHOW);
				setState(10501);
				match(DELEGATED);
				setState(10502);
				match(AUTHORIZATIONS);
				setState(10503);
				match(BY);
				setState(10504);
				match(USER);
				setState(10505);
				id_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10506);
				match(SHOW);
				setState(10507);
				match(DELEGATED);
				setState(10508);
				match(AUTHORIZATIONS);
				setState(10509);
				match(TO);
				setState(10510);
				match(SECURITY);
				setState(10511);
				match(INTEGRATION);
				setState(10512);
				id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_dynamic_tablesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode DYNAMIC() { return getToken(SnowflakeParser.DYNAMIC, 0); }
		public TerminalNode TABLES() { return getToken(SnowflakeParser.TABLES, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public Starts_withContext starts_with() {
			return getRuleContext(Starts_withContext.class,0);
		}
		public Limit_rowsContext limit_rows() {
			return getRuleContext(Limit_rowsContext.class,0);
		}
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Show_dynamic_tablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_dynamic_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_dynamic_tables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_dynamic_tables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_dynamic_tables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_dynamic_tablesContext show_dynamic_tables() throws RecognitionException {
		Show_dynamic_tablesContext _localctx = new Show_dynamic_tablesContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_show_dynamic_tables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10515);
			match(SHOW);
			setState(10516);
			match(DYNAMIC);
			setState(10517);
			match(TABLES);
			setState(10519);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10518);
				like_pattern();
				}
			}

			setState(10535);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10521);
				match(IN);
				setState(10533);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1321,_ctx) ) {
				case 1:
					{
					setState(10522);
					match(ACCOUNT);
					}
					break;
				case 2:
					{
					setState(10523);
					match(DATABASE);
					setState(10525);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(10524);
						id_();
						}
					}

					}
					break;
				case 3:
					{
					setState(10528);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SCHEMA) {
						{
						setState(10527);
						match(SCHEMA);
						}
					}

					setState(10531);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(10530);
						schema_name();
						}
					}

					}
					break;
				}
				}
			}

			setState(10538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STARTS) {
				{
				setState(10537);
				starts_with();
				}
			}

			setState(10541);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(10540);
				limit_rows();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_event_tablesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode EVENT() { return getToken(SnowflakeParser.EVENT, 0); }
		public TerminalNode TABLES() { return getToken(SnowflakeParser.TABLES, 0); }
		public TerminalNode TERSE() { return getToken(SnowflakeParser.TERSE, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public Starts_withContext starts_with() {
			return getRuleContext(Starts_withContext.class,0);
		}
		public Limit_rowsContext limit_rows() {
			return getRuleContext(Limit_rowsContext.class,0);
		}
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Show_event_tablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_event_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_event_tables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_event_tables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_event_tables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_event_tablesContext show_event_tables() throws RecognitionException {
		Show_event_tablesContext _localctx = new Show_event_tablesContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_show_event_tables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10543);
			match(SHOW);
			setState(10545);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TERSE) {
				{
				setState(10544);
				match(TERSE);
				}
			}

			setState(10547);
			match(EVENT);
			setState(10548);
			match(TABLES);
			setState(10550);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10549);
				like_pattern();
				}
			}

			setState(10566);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10552);
				match(IN);
				setState(10564);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1330,_ctx) ) {
				case 1:
					{
					setState(10553);
					match(ACCOUNT);
					}
					break;
				case 2:
					{
					setState(10554);
					match(DATABASE);
					setState(10556);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(10555);
						id_();
						}
					}

					}
					break;
				case 3:
					{
					setState(10559);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SCHEMA) {
						{
						setState(10558);
						match(SCHEMA);
						}
					}

					setState(10562);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(10561);
						schema_name();
						}
					}

					}
					break;
				}
				}
			}

			setState(10569);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STARTS) {
				{
				setState(10568);
				starts_with();
				}
			}

			setState(10572);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(10571);
				limit_rows();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_external_functionsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode EXTERNAL() { return getToken(SnowflakeParser.EXTERNAL, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SnowflakeParser.FUNCTIONS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public Show_external_functionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_external_functions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_external_functions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_external_functions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_external_functions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_external_functionsContext show_external_functions() throws RecognitionException {
		Show_external_functionsContext _localctx = new Show_external_functionsContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_show_external_functions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10574);
			match(SHOW);
			setState(10575);
			match(EXTERNAL);
			setState(10576);
			match(FUNCTIONS);
			setState(10578);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10577);
				like_pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_external_tablesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode EXTERNAL() { return getToken(SnowflakeParser.EXTERNAL, 0); }
		public TerminalNode TABLES() { return getToken(SnowflakeParser.TABLES, 0); }
		public TerminalNode TERSE() { return getToken(SnowflakeParser.TERSE, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public Starts_withContext starts_with() {
			return getRuleContext(Starts_withContext.class,0);
		}
		public Limit_rowsContext limit_rows() {
			return getRuleContext(Limit_rowsContext.class,0);
		}
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Show_external_tablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_external_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_external_tables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_external_tables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_external_tables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_external_tablesContext show_external_tables() throws RecognitionException {
		Show_external_tablesContext _localctx = new Show_external_tablesContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_show_external_tables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10580);
			match(SHOW);
			setState(10582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TERSE) {
				{
				setState(10581);
				match(TERSE);
				}
			}

			setState(10584);
			match(EXTERNAL);
			setState(10585);
			match(TABLES);
			setState(10587);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10586);
				like_pattern();
				}
			}

			setState(10603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10589);
				match(IN);
				setState(10601);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1340,_ctx) ) {
				case 1:
					{
					setState(10590);
					match(ACCOUNT);
					}
					break;
				case 2:
					{
					setState(10591);
					match(DATABASE);
					setState(10593);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(10592);
						id_();
						}
					}

					}
					break;
				case 3:
					{
					setState(10596);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SCHEMA) {
						{
						setState(10595);
						match(SCHEMA);
						}
					}

					setState(10599);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(10598);
						schema_name();
						}
					}

					}
					break;
				}
				}
			}

			setState(10606);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STARTS) {
				{
				setState(10605);
				starts_with();
				}
			}

			setState(10609);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(10608);
				limit_rows();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_failover_groupsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode FAILOVER() { return getToken(SnowflakeParser.FAILOVER, 0); }
		public TerminalNode GROUPS() { return getToken(SnowflakeParser.GROUPS, 0); }
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Show_failover_groupsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_failover_groups; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_failover_groups(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_failover_groups(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_failover_groups(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_failover_groupsContext show_failover_groups() throws RecognitionException {
		Show_failover_groupsContext _localctx = new Show_failover_groupsContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_show_failover_groups);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10611);
			match(SHOW);
			setState(10612);
			match(FAILOVER);
			setState(10613);
			match(GROUPS);
			setState(10617);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10614);
				match(IN);
				setState(10615);
				match(ACCOUNT);
				setState(10616);
				id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_file_formatsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode FILE() { return getToken(SnowflakeParser.FILE, 0); }
		public TerminalNode FORMATS() { return getToken(SnowflakeParser.FORMATS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Show_file_formatsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_file_formats; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_file_formats(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_file_formats(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_file_formats(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_file_formatsContext show_file_formats() throws RecognitionException {
		Show_file_formatsContext _localctx = new Show_file_formatsContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_show_file_formats);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10619);
			match(SHOW);
			setState(10620);
			match(FILE);
			setState(10621);
			match(FORMATS);
			setState(10623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10622);
				like_pattern();
				}
			}

			setState(10636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10625);
				match(IN);
				setState(10634);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1346,_ctx) ) {
				case 1:
					{
					setState(10626);
					match(ACCOUNT);
					}
					break;
				case 2:
					{
					setState(10627);
					match(DATABASE);
					}
					break;
				case 3:
					{
					setState(10628);
					match(DATABASE);
					setState(10629);
					id_();
					}
					break;
				case 4:
					{
					setState(10630);
					match(SCHEMA);
					}
					break;
				case 5:
					{
					setState(10631);
					match(SCHEMA);
					setState(10632);
					schema_name();
					}
					break;
				case 6:
					{
					setState(10633);
					schema_name();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_functionsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SnowflakeParser.FUNCTIONS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Show_functionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_functions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_functions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_functions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_functions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_functionsContext show_functions() throws RecognitionException {
		Show_functionsContext _localctx = new Show_functionsContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_show_functions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10638);
			match(SHOW);
			setState(10639);
			match(FUNCTIONS);
			setState(10641);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10640);
				like_pattern();
				}
			}

			setState(10654);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10643);
				match(IN);
				setState(10652);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1349,_ctx) ) {
				case 1:
					{
					setState(10644);
					match(ACCOUNT);
					}
					break;
				case 2:
					{
					setState(10645);
					match(DATABASE);
					}
					break;
				case 3:
					{
					setState(10646);
					match(DATABASE);
					setState(10647);
					id_();
					}
					break;
				case 4:
					{
					setState(10648);
					match(SCHEMA);
					}
					break;
				case 5:
					{
					setState(10649);
					match(SCHEMA);
					setState(10650);
					id_();
					}
					break;
				case 6:
					{
					setState(10651);
					id_();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_global_accountsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode GLOBAL() { return getToken(SnowflakeParser.GLOBAL, 0); }
		public TerminalNode ACCOUNTS() { return getToken(SnowflakeParser.ACCOUNTS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public Show_global_accountsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_global_accounts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_global_accounts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_global_accounts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_global_accounts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_global_accountsContext show_global_accounts() throws RecognitionException {
		Show_global_accountsContext _localctx = new Show_global_accountsContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_show_global_accounts);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10656);
			match(SHOW);
			setState(10657);
			match(GLOBAL);
			setState(10658);
			match(ACCOUNTS);
			setState(10660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10659);
				like_pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_grantsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(SnowflakeParser.GRANTS, 0); }
		public Show_grants_optsContext show_grants_opts() {
			return getRuleContext(Show_grants_optsContext.class,0);
		}
		public TerminalNode FUTURE() { return getToken(SnowflakeParser.FUTURE, 0); }
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Show_grantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_grants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_grants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_grants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_grants(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_grantsContext show_grants() throws RecognitionException {
		Show_grantsContext _localctx = new Show_grantsContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_show_grants);
		int _la;
		try {
			setState(10679);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1353,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10662);
				match(SHOW);
				setState(10663);
				match(GRANTS);
				setState(10665);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF || _la==ON || _la==TO) {
					{
					setState(10664);
					show_grants_opts();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10667);
				match(SHOW);
				setState(10668);
				match(FUTURE);
				setState(10669);
				match(GRANTS);
				setState(10670);
				match(IN);
				setState(10671);
				match(SCHEMA);
				setState(10672);
				schema_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10673);
				match(SHOW);
				setState(10674);
				match(FUTURE);
				setState(10675);
				match(GRANTS);
				setState(10676);
				match(IN);
				setState(10677);
				match(DATABASE);
				setState(10678);
				id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_grants_optsContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public Object_typeContext object_type() {
			return getRuleContext(Object_typeContext.class,0);
		}
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public TerminalNode ROLE() { return getToken(SnowflakeParser.ROLE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode USER() { return getToken(SnowflakeParser.USER, 0); }
		public TerminalNode SHARE() { return getToken(SnowflakeParser.SHARE, 0); }
		public TerminalNode OF() { return getToken(SnowflakeParser.OF, 0); }
		public Show_grants_optsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_grants_opts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_grants_opts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_grants_opts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_grants_opts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_grants_optsContext show_grants_opts() throws RecognitionException {
		Show_grants_optsContext _localctx = new Show_grants_optsContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_show_grants_opts);
		try {
			setState(10702);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1355,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10681);
				match(ON);
				setState(10682);
				match(ACCOUNT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10683);
				match(ON);
				setState(10684);
				object_type();
				setState(10685);
				object_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10687);
				match(TO);
				setState(10694);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ROLE:
					{
					setState(10688);
					match(ROLE);
					setState(10689);
					id_();
					}
					break;
				case USER:
					{
					setState(10690);
					match(USER);
					setState(10691);
					id_();
					}
					break;
				case SHARE:
					{
					setState(10692);
					match(SHARE);
					setState(10693);
					id_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10696);
				match(OF);
				setState(10697);
				match(ROLE);
				setState(10698);
				id_();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(10699);
				match(OF);
				setState(10700);
				match(SHARE);
				setState(10701);
				id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_integrationsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode INTEGRATIONS() { return getToken(SnowflakeParser.INTEGRATIONS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public TerminalNode API() { return getToken(SnowflakeParser.API, 0); }
		public TerminalNode NOTIFICATION() { return getToken(SnowflakeParser.NOTIFICATION, 0); }
		public TerminalNode SECURITY() { return getToken(SnowflakeParser.SECURITY, 0); }
		public TerminalNode STORAGE() { return getToken(SnowflakeParser.STORAGE, 0); }
		public Show_integrationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_integrations; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_integrations(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_integrations(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_integrations(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_integrationsContext show_integrations() throws RecognitionException {
		Show_integrationsContext _localctx = new Show_integrationsContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_show_integrations);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10704);
			match(SHOW);
			setState(10706);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==API || _la==NOTIFICATION || _la==SECURITY || _la==STORAGE) {
				{
				setState(10705);
				_la = _input.LA(1);
				if ( !(_la==API || _la==NOTIFICATION || _la==SECURITY || _la==STORAGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(10708);
			match(INTEGRATIONS);
			setState(10710);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10709);
				like_pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_locksContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode LOCKS() { return getToken(SnowflakeParser.LOCKS, 0); }
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public Show_locksContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_locks; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_locks(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_locks(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_locks(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_locksContext show_locks() throws RecognitionException {
		Show_locksContext _localctx = new Show_locksContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_show_locks);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10712);
			match(SHOW);
			setState(10713);
			match(LOCKS);
			setState(10716);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10714);
				match(IN);
				setState(10715);
				match(ACCOUNT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_managed_accountsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode MANAGED() { return getToken(SnowflakeParser.MANAGED, 0); }
		public TerminalNode ACCOUNTS() { return getToken(SnowflakeParser.ACCOUNTS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public Show_managed_accountsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_managed_accounts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_managed_accounts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_managed_accounts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_managed_accounts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_managed_accountsContext show_managed_accounts() throws RecognitionException {
		Show_managed_accountsContext _localctx = new Show_managed_accountsContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_show_managed_accounts);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10718);
			match(SHOW);
			setState(10719);
			match(MANAGED);
			setState(10720);
			match(ACCOUNTS);
			setState(10722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10721);
				like_pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_masking_policiesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode MASKING() { return getToken(SnowflakeParser.MASKING, 0); }
		public TerminalNode POLICIES() { return getToken(SnowflakeParser.POLICIES, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public In_objContext in_obj() {
			return getRuleContext(In_objContext.class,0);
		}
		public Show_masking_policiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_masking_policies; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_masking_policies(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_masking_policies(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_masking_policies(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_masking_policiesContext show_masking_policies() throws RecognitionException {
		Show_masking_policiesContext _localctx = new Show_masking_policiesContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_show_masking_policies);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10724);
			match(SHOW);
			setState(10725);
			match(MASKING);
			setState(10726);
			match(POLICIES);
			setState(10728);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10727);
				like_pattern();
				}
			}

			setState(10731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10730);
				in_obj();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class In_objContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public In_objContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_obj; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterIn_obj(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitIn_obj(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitIn_obj(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_objContext in_obj() throws RecognitionException {
		In_objContext _localctx = new In_objContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_in_obj);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10733);
			match(IN);
			setState(10742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1362,_ctx) ) {
			case 1:
				{
				setState(10734);
				match(ACCOUNT);
				}
				break;
			case 2:
				{
				setState(10735);
				match(DATABASE);
				}
				break;
			case 3:
				{
				setState(10736);
				match(DATABASE);
				setState(10737);
				id_();
				}
				break;
			case 4:
				{
				setState(10738);
				match(SCHEMA);
				}
				break;
			case 5:
				{
				setState(10739);
				match(SCHEMA);
				setState(10740);
				schema_name();
				}
				break;
			case 6:
				{
				setState(10741);
				schema_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class In_obj_2Context extends ParserRuleContext {
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public In_obj_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_obj_2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterIn_obj_2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitIn_obj_2(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitIn_obj_2(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_obj_2Context in_obj_2() throws RecognitionException {
		In_obj_2Context _localctx = new In_obj_2Context(_ctx, getState());
		enterRule(_localctx, 880, RULE_in_obj_2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10744);
			match(IN);
			setState(10757);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1365,_ctx) ) {
			case 1:
				{
				setState(10745);
				match(ACCOUNT);
				}
				break;
			case 2:
				{
				setState(10746);
				match(DATABASE);
				setState(10748);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(10747);
					id_();
					}
				}

				}
				break;
			case 3:
				{
				setState(10750);
				match(SCHEMA);
				setState(10752);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(10751);
					schema_name();
					}
				}

				}
				break;
			case 4:
				{
				setState(10754);
				match(TABLE);
				}
				break;
			case 5:
				{
				setState(10755);
				match(TABLE);
				setState(10756);
				object_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_materialized_viewsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(SnowflakeParser.MATERIALIZED, 0); }
		public TerminalNode VIEWS() { return getToken(SnowflakeParser.VIEWS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public In_objContext in_obj() {
			return getRuleContext(In_objContext.class,0);
		}
		public Show_materialized_viewsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_materialized_views; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_materialized_views(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_materialized_views(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_materialized_views(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_materialized_viewsContext show_materialized_views() throws RecognitionException {
		Show_materialized_viewsContext _localctx = new Show_materialized_viewsContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_show_materialized_views);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10759);
			match(SHOW);
			setState(10760);
			match(MATERIALIZED);
			setState(10761);
			match(VIEWS);
			setState(10763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10762);
				like_pattern();
				}
			}

			setState(10766);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10765);
				in_obj();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_network_policiesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode NETWORK() { return getToken(SnowflakeParser.NETWORK, 0); }
		public TerminalNode POLICIES() { return getToken(SnowflakeParser.POLICIES, 0); }
		public Show_network_policiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_network_policies; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_network_policies(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_network_policies(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_network_policies(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_network_policiesContext show_network_policies() throws RecognitionException {
		Show_network_policiesContext _localctx = new Show_network_policiesContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_show_network_policies);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10768);
			match(SHOW);
			setState(10769);
			match(NETWORK);
			setState(10770);
			match(POLICIES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_objectsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode OBJECTS() { return getToken(SnowflakeParser.OBJECTS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public In_objContext in_obj() {
			return getRuleContext(In_objContext.class,0);
		}
		public Show_objectsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_objects; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_objects(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_objects(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_objects(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_objectsContext show_objects() throws RecognitionException {
		Show_objectsContext _localctx = new Show_objectsContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_show_objects);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10772);
			match(SHOW);
			setState(10773);
			match(OBJECTS);
			setState(10775);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10774);
				like_pattern();
				}
			}

			setState(10778);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10777);
				in_obj();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_organization_accountsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode ORGANIZATION() { return getToken(SnowflakeParser.ORGANIZATION, 0); }
		public TerminalNode ACCOUNTS() { return getToken(SnowflakeParser.ACCOUNTS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public Show_organization_accountsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_organization_accounts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_organization_accounts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_organization_accounts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_organization_accounts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_organization_accountsContext show_organization_accounts() throws RecognitionException {
		Show_organization_accountsContext _localctx = new Show_organization_accountsContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_show_organization_accounts);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10780);
			match(SHOW);
			setState(10781);
			match(ORGANIZATION);
			setState(10782);
			match(ACCOUNTS);
			setState(10784);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10783);
				like_pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class In_forContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode FOR() { return getToken(SnowflakeParser.FOR, 0); }
		public In_forContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_for; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterIn_for(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitIn_for(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitIn_for(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_forContext in_for() throws RecognitionException {
		In_forContext _localctx = new In_forContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_in_for);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10786);
			_la = _input.LA(1);
			if ( !(_la==FOR || _la==IN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_parametersContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode PARAMETERS() { return getToken(SnowflakeParser.PARAMETERS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public In_forContext in_for() {
			return getRuleContext(In_forContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(SnowflakeParser.SESSION, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode USER() { return getToken(SnowflakeParser.USER, 0); }
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public TerminalNode TASK() { return getToken(SnowflakeParser.TASK, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Show_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_parameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_parameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_parametersContext show_parameters() throws RecognitionException {
		Show_parametersContext _localctx = new Show_parametersContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_show_parameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10788);
			match(SHOW);
			setState(10789);
			match(PARAMETERS);
			setState(10791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10790);
				like_pattern();
				}
			}

			setState(10808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR || _la==IN) {
				{
				setState(10793);
				in_for();
				setState(10806);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SESSION:
					{
					setState(10794);
					match(SESSION);
					}
					break;
				case ACCOUNT:
					{
					setState(10795);
					match(ACCOUNT);
					}
					break;
				case USER:
					{
					setState(10796);
					match(USER);
					setState(10798);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(10797);
						id_();
						}
					}

					}
					break;
				case DATABASE:
				case SCHEMA:
				case TASK:
				case WAREHOUSE:
					{
					setState(10800);
					_la = _input.LA(1);
					if ( !(_la==DATABASE || _la==SCHEMA || _la==TASK || _la==WAREHOUSE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(10802);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(10801);
						id_();
						}
					}

					}
					break;
				case TABLE:
					{
					setState(10804);
					match(TABLE);
					setState(10805);
					object_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_pipesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode PIPES() { return getToken(SnowflakeParser.PIPES, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public In_objContext in_obj() {
			return getRuleContext(In_objContext.class,0);
		}
		public Show_pipesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_pipes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_pipes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_pipes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_pipes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_pipesContext show_pipes() throws RecognitionException {
		Show_pipesContext _localctx = new Show_pipesContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_show_pipes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10810);
			match(SHOW);
			setState(10811);
			match(PIPES);
			setState(10813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10812);
				like_pattern();
				}
			}

			setState(10816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10815);
				in_obj();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_primary_keysContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode PRIMARY() { return getToken(SnowflakeParser.PRIMARY, 0); }
		public TerminalNode KEYS() { return getToken(SnowflakeParser.KEYS, 0); }
		public TerminalNode TERSE() { return getToken(SnowflakeParser.TERSE, 0); }
		public In_obj_2Context in_obj_2() {
			return getRuleContext(In_obj_2Context.class,0);
		}
		public Show_primary_keysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_primary_keys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_primary_keys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_primary_keys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_primary_keys(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_primary_keysContext show_primary_keys() throws RecognitionException {
		Show_primary_keysContext _localctx = new Show_primary_keysContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_show_primary_keys);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10818);
			match(SHOW);
			setState(10820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TERSE) {
				{
				setState(10819);
				match(TERSE);
				}
			}

			setState(10822);
			match(PRIMARY);
			setState(10823);
			match(KEYS);
			setState(10825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10824);
				in_obj_2();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_proceduresContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode PROCEDURES() { return getToken(SnowflakeParser.PROCEDURES, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public In_objContext in_obj() {
			return getRuleContext(In_objContext.class,0);
		}
		public Show_proceduresContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_procedures; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_procedures(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_procedures(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_procedures(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_proceduresContext show_procedures() throws RecognitionException {
		Show_proceduresContext _localctx = new Show_proceduresContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_show_procedures);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10827);
			match(SHOW);
			setState(10828);
			match(PROCEDURES);
			setState(10830);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10829);
				like_pattern();
				}
			}

			setState(10833);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10832);
				in_obj();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_regionsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode REGIONS() { return getToken(SnowflakeParser.REGIONS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public Show_regionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_regions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_regions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_regions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_regions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_regionsContext show_regions() throws RecognitionException {
		Show_regionsContext _localctx = new Show_regionsContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_show_regions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10835);
			match(SHOW);
			setState(10836);
			match(REGIONS);
			setState(10838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10837);
				like_pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_replication_accountsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode REPLICATION() { return getToken(SnowflakeParser.REPLICATION, 0); }
		public TerminalNode ACCOUNTS() { return getToken(SnowflakeParser.ACCOUNTS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public Show_replication_accountsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_replication_accounts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_replication_accounts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_replication_accounts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_replication_accounts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_replication_accountsContext show_replication_accounts() throws RecognitionException {
		Show_replication_accountsContext _localctx = new Show_replication_accountsContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_show_replication_accounts);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10840);
			match(SHOW);
			setState(10841);
			match(REPLICATION);
			setState(10842);
			match(ACCOUNTS);
			setState(10844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10843);
				like_pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_replication_databasesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode REPLICATION() { return getToken(SnowflakeParser.REPLICATION, 0); }
		public TerminalNode DATABASES() { return getToken(SnowflakeParser.DATABASES, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public TerminalNode PRIMARY() { return getToken(SnowflakeParser.PRIMARY, 0); }
		public Account_identifierContext account_identifier() {
			return getRuleContext(Account_identifierContext.class,0);
		}
		public TerminalNode DOT() { return getToken(SnowflakeParser.DOT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Show_replication_databasesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_replication_databases; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_replication_databases(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_replication_databases(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_replication_databases(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_replication_databasesContext show_replication_databases() throws RecognitionException {
		Show_replication_databasesContext _localctx = new Show_replication_databasesContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_show_replication_databases);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10846);
			match(SHOW);
			setState(10847);
			match(REPLICATION);
			setState(10848);
			match(DATABASES);
			setState(10850);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10849);
				like_pattern();
				}
			}

			setState(10858);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(10852);
				match(WITH);
				setState(10853);
				match(PRIMARY);
				setState(10854);
				account_identifier();
				setState(10855);
				match(DOT);
				setState(10856);
				id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_replication_groupsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode REPLICATION() { return getToken(SnowflakeParser.REPLICATION, 0); }
		public TerminalNode GROUPS() { return getToken(SnowflakeParser.GROUPS, 0); }
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Show_replication_groupsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_replication_groups; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_replication_groups(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_replication_groups(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_replication_groups(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_replication_groupsContext show_replication_groups() throws RecognitionException {
		Show_replication_groupsContext _localctx = new Show_replication_groupsContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_show_replication_groups);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10860);
			match(SHOW);
			setState(10861);
			match(REPLICATION);
			setState(10862);
			match(GROUPS);
			setState(10866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10863);
				match(IN);
				setState(10864);
				match(ACCOUNT);
				setState(10865);
				id_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_resource_monitorsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode RESOURCE() { return getToken(SnowflakeParser.RESOURCE, 0); }
		public TerminalNode MONITORS() { return getToken(SnowflakeParser.MONITORS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public Show_resource_monitorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_resource_monitors; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_resource_monitors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_resource_monitors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_resource_monitors(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_resource_monitorsContext show_resource_monitors() throws RecognitionException {
		Show_resource_monitorsContext _localctx = new Show_resource_monitorsContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_show_resource_monitors);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10868);
			match(SHOW);
			setState(10869);
			match(RESOURCE);
			setState(10870);
			match(MONITORS);
			setState(10872);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10871);
				like_pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_rolesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode ROLES() { return getToken(SnowflakeParser.ROLES, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public Show_rolesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_roles; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_roles(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_roles(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_roles(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_rolesContext show_roles() throws RecognitionException {
		Show_rolesContext _localctx = new Show_rolesContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_show_roles);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10874);
			match(SHOW);
			setState(10875);
			match(ROLES);
			setState(10877);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10876);
				like_pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_row_access_policiesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode ROW() { return getToken(SnowflakeParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(SnowflakeParser.ACCESS, 0); }
		public TerminalNode POLICIES() { return getToken(SnowflakeParser.POLICIES, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public In_objContext in_obj() {
			return getRuleContext(In_objContext.class,0);
		}
		public Show_row_access_policiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_row_access_policies; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_row_access_policies(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_row_access_policies(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_row_access_policies(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_row_access_policiesContext show_row_access_policies() throws RecognitionException {
		Show_row_access_policiesContext _localctx = new Show_row_access_policiesContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_show_row_access_policies);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10879);
			match(SHOW);
			setState(10880);
			match(ROW);
			setState(10881);
			match(ACCESS);
			setState(10882);
			match(POLICIES);
			setState(10884);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10883);
				like_pattern();
				}
			}

			setState(10887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10886);
				in_obj();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_schemasContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode SCHEMAS() { return getToken(SnowflakeParser.SCHEMAS, 0); }
		public TerminalNode TERSE() { return getToken(SnowflakeParser.TERSE, 0); }
		public TerminalNode HISTORY() { return getToken(SnowflakeParser.HISTORY, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public Starts_withContext starts_with() {
			return getRuleContext(Starts_withContext.class,0);
		}
		public Limit_rowsContext limit_rows() {
			return getRuleContext(Limit_rowsContext.class,0);
		}
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Show_schemasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_schemas; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_schemas(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_schemas(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_schemas(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_schemasContext show_schemas() throws RecognitionException {
		Show_schemasContext _localctx = new Show_schemasContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_show_schemas);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10889);
			match(SHOW);
			setState(10891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TERSE) {
				{
				setState(10890);
				match(TERSE);
				}
			}

			setState(10893);
			match(SCHEMAS);
			setState(10895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HISTORY) {
				{
				setState(10894);
				match(HISTORY);
				}
			}

			setState(10898);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10897);
				like_pattern();
				}
			}

			setState(10908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10900);
				match(IN);
				setState(10906);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ACCOUNT:
					{
					setState(10901);
					match(ACCOUNT);
					}
					break;
				case DATABASE:
					{
					setState(10902);
					match(DATABASE);
					setState(10904);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(10903);
						id_();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(10911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STARTS) {
				{
				setState(10910);
				starts_with();
				}
			}

			setState(10914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(10913);
				limit_rows();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_sequencesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode SEQUENCES() { return getToken(SnowflakeParser.SEQUENCES, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public In_objContext in_obj() {
			return getRuleContext(In_objContext.class,0);
		}
		public Show_sequencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_sequences; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_sequences(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_sequences(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_sequences(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_sequencesContext show_sequences() throws RecognitionException {
		Show_sequencesContext _localctx = new Show_sequencesContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_show_sequences);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10916);
			match(SHOW);
			setState(10917);
			match(SEQUENCES);
			setState(10919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10918);
				like_pattern();
				}
			}

			setState(10922);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10921);
				in_obj();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_session_policiesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode SESSION() { return getToken(SnowflakeParser.SESSION, 0); }
		public TerminalNode POLICIES() { return getToken(SnowflakeParser.POLICIES, 0); }
		public Show_session_policiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_session_policies; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_session_policies(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_session_policies(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_session_policies(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_session_policiesContext show_session_policies() throws RecognitionException {
		Show_session_policiesContext _localctx = new Show_session_policiesContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_show_session_policies);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10924);
			match(SHOW);
			setState(10925);
			match(SESSION);
			setState(10926);
			match(POLICIES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_password_policiesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode PASSWORD() { return getToken(SnowflakeParser.PASSWORD, 0); }
		public TerminalNode POLICIES() { return getToken(SnowflakeParser.POLICIES, 0); }
		public Show_password_policiesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_password_policies; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_password_policies(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_password_policies(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_password_policies(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_password_policiesContext show_password_policies() throws RecognitionException {
		Show_password_policiesContext _localctx = new Show_password_policiesContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_show_password_policies);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10928);
			match(SHOW);
			setState(10929);
			match(PASSWORD);
			setState(10930);
			match(POLICIES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_sharesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode SHARES() { return getToken(SnowflakeParser.SHARES, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public Show_sharesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_shares; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_shares(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_shares(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_shares(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_sharesContext show_shares() throws RecognitionException {
		Show_sharesContext _localctx = new Show_sharesContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_show_shares);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10932);
			match(SHOW);
			setState(10933);
			match(SHARES);
			setState(10935);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10934);
				like_pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_shares_in_failover_groupContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode SHARES() { return getToken(SnowflakeParser.SHARES, 0); }
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode FAILOVER() { return getToken(SnowflakeParser.FAILOVER, 0); }
		public TerminalNode GROUP() { return getToken(SnowflakeParser.GROUP, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Show_shares_in_failover_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_shares_in_failover_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_shares_in_failover_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_shares_in_failover_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_shares_in_failover_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_shares_in_failover_groupContext show_shares_in_failover_group() throws RecognitionException {
		Show_shares_in_failover_groupContext _localctx = new Show_shares_in_failover_groupContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_show_shares_in_failover_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10937);
			match(SHOW);
			setState(10938);
			match(SHARES);
			setState(10939);
			match(IN);
			setState(10940);
			match(FAILOVER);
			setState(10941);
			match(GROUP);
			setState(10942);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_shares_in_replication_groupContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode SHARES() { return getToken(SnowflakeParser.SHARES, 0); }
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode REPLICATION() { return getToken(SnowflakeParser.REPLICATION, 0); }
		public TerminalNode GROUP() { return getToken(SnowflakeParser.GROUP, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Show_shares_in_replication_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_shares_in_replication_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_shares_in_replication_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_shares_in_replication_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_shares_in_replication_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_shares_in_replication_groupContext show_shares_in_replication_group() throws RecognitionException {
		Show_shares_in_replication_groupContext _localctx = new Show_shares_in_replication_groupContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_show_shares_in_replication_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10944);
			match(SHOW);
			setState(10945);
			match(SHARES);
			setState(10946);
			match(IN);
			setState(10947);
			match(REPLICATION);
			setState(10948);
			match(GROUP);
			setState(10949);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_streamsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode STREAMS() { return getToken(SnowflakeParser.STREAMS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public In_objContext in_obj() {
			return getRuleContext(In_objContext.class,0);
		}
		public Show_streamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_streams; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_streams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_streams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_streams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_streamsContext show_streams() throws RecognitionException {
		Show_streamsContext _localctx = new Show_streamsContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_show_streams);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10951);
			match(SHOW);
			setState(10952);
			match(STREAMS);
			setState(10954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10953);
				like_pattern();
				}
			}

			setState(10957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10956);
				in_obj();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_tablesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode TABLES() { return getToken(SnowflakeParser.TABLES, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public In_objContext in_obj() {
			return getRuleContext(In_objContext.class,0);
		}
		public Show_tablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_tables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_tables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_tables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_tablesContext show_tables() throws RecognitionException {
		Show_tablesContext _localctx = new Show_tablesContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_show_tables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10959);
			match(SHOW);
			setState(10960);
			match(TABLES);
			setState(10962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10961);
				like_pattern();
				}
			}

			setState(10965);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10964);
				in_obj();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_tagsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode TAGS() { return getToken(SnowflakeParser.TAGS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Show_tagsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_tags; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_tags(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_tags(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_tags(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_tagsContext show_tags() throws RecognitionException {
		Show_tagsContext _localctx = new Show_tagsContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_show_tags);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10967);
			match(SHOW);
			setState(10968);
			match(TAGS);
			setState(10970);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1406,_ctx) ) {
			case 1:
				{
				setState(10969);
				like_pattern();
				}
				break;
			}
			setState(10981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1407,_ctx) ) {
			case 1:
				{
				setState(10972);
				match(IN);
				setState(10973);
				match(ACCOUNT);
				}
				break;
			case 2:
				{
				setState(10974);
				match(DATABASE);
				}
				break;
			case 3:
				{
				setState(10975);
				match(DATABASE);
				setState(10976);
				id_();
				}
				break;
			case 4:
				{
				setState(10977);
				match(SCHEMA);
				}
				break;
			case 5:
				{
				setState(10978);
				match(SCHEMA);
				setState(10979);
				schema_name();
				}
				break;
			case 6:
				{
				setState(10980);
				schema_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_tasksContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode TASKS() { return getToken(SnowflakeParser.TASKS, 0); }
		public TerminalNode TERSE() { return getToken(SnowflakeParser.TERSE, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public Starts_withContext starts_with() {
			return getRuleContext(Starts_withContext.class,0);
		}
		public Limit_rowsContext limit_rows() {
			return getRuleContext(Limit_rowsContext.class,0);
		}
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Show_tasksContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_tasks; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_tasks(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_tasks(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_tasks(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_tasksContext show_tasks() throws RecognitionException {
		Show_tasksContext _localctx = new Show_tasksContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_show_tasks);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10983);
			match(SHOW);
			setState(10985);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TERSE) {
				{
				setState(10984);
				match(TERSE);
				}
			}

			setState(10987);
			match(TASKS);
			setState(10989);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(10988);
				like_pattern();
				}
			}

			setState(11005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(10991);
				match(IN);
				setState(11003);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1413,_ctx) ) {
				case 1:
					{
					setState(10992);
					match(ACCOUNT);
					}
					break;
				case 2:
					{
					setState(10993);
					match(DATABASE);
					setState(10995);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(10994);
						id_();
						}
					}

					}
					break;
				case 3:
					{
					setState(10998);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SCHEMA) {
						{
						setState(10997);
						match(SCHEMA);
						}
					}

					setState(11001);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(11000);
						schema_name();
						}
					}

					}
					break;
				}
				}
			}

			setState(11008);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STARTS) {
				{
				setState(11007);
				starts_with();
				}
			}

			setState(11011);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(11010);
				limit_rows();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_transactionsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode TRANSACTIONS() { return getToken(SnowflakeParser.TRANSACTIONS, 0); }
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public Show_transactionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_transactions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_transactions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_transactions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_transactions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_transactionsContext show_transactions() throws RecognitionException {
		Show_transactionsContext _localctx = new Show_transactionsContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_show_transactions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11013);
			match(SHOW);
			setState(11014);
			match(TRANSACTIONS);
			setState(11017);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(11015);
				match(IN);
				setState(11016);
				match(ACCOUNT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_user_functionsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode USER() { return getToken(SnowflakeParser.USER, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SnowflakeParser.FUNCTIONS, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public In_objContext in_obj() {
			return getRuleContext(In_objContext.class,0);
		}
		public Show_user_functionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_user_functions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_user_functions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_user_functions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_user_functions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_user_functionsContext show_user_functions() throws RecognitionException {
		Show_user_functionsContext _localctx = new Show_user_functionsContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_show_user_functions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11019);
			match(SHOW);
			setState(11020);
			match(USER);
			setState(11021);
			match(FUNCTIONS);
			setState(11023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(11022);
				like_pattern();
				}
			}

			setState(11026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(11025);
				in_obj();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_usersContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode USERS() { return getToken(SnowflakeParser.USERS, 0); }
		public TerminalNode TERSE() { return getToken(SnowflakeParser.TERSE, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public TerminalNode STARTS() { return getToken(SnowflakeParser.STARTS, 0); }
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public TerminalNode LIMIT() { return getToken(SnowflakeParser.LIMIT, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SnowflakeParser.FROM, 0); }
		public Show_usersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_users; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_users(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_users(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_users(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_usersContext show_users() throws RecognitionException {
		Show_usersContext _localctx = new Show_usersContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_show_users);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11028);
			match(SHOW);
			setState(11030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TERSE) {
				{
				setState(11029);
				match(TERSE);
				}
			}

			setState(11032);
			match(USERS);
			setState(11034);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(11033);
				like_pattern();
				}
			}

			setState(11039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STARTS) {
				{
				setState(11036);
				match(STARTS);
				setState(11037);
				match(WITH);
				setState(11038);
				string();
				}
			}

			setState(11043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(11041);
				match(LIMIT);
				setState(11042);
				num();
				}
			}

			setState(11047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(11045);
				match(FROM);
				setState(11046);
				string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_variablesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode VARIABLES() { return getToken(SnowflakeParser.VARIABLES, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public Show_variablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_variables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_variables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_variables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_variables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_variablesContext show_variables() throws RecognitionException {
		Show_variablesContext _localctx = new Show_variablesContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_show_variables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11049);
			match(SHOW);
			setState(11050);
			match(VARIABLES);
			setState(11052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(11051);
				like_pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_viewsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode VIEWS() { return getToken(SnowflakeParser.VIEWS, 0); }
		public TerminalNode TERSE() { return getToken(SnowflakeParser.TERSE, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public Starts_withContext starts_with() {
			return getRuleContext(Starts_withContext.class,0);
		}
		public Limit_rowsContext limit_rows() {
			return getRuleContext(Limit_rowsContext.class,0);
		}
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode DATABASE() { return getToken(SnowflakeParser.DATABASE, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(SnowflakeParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Show_viewsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_views; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_views(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_views(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_views(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_viewsContext show_views() throws RecognitionException {
		Show_viewsContext _localctx = new Show_viewsContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_show_views);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11054);
			match(SHOW);
			setState(11056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TERSE) {
				{
				setState(11055);
				match(TERSE);
				}
			}

			setState(11058);
			match(VIEWS);
			setState(11060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(11059);
				like_pattern();
				}
			}

			setState(11076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(11062);
				match(IN);
				setState(11074);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1431,_ctx) ) {
				case 1:
					{
					setState(11063);
					match(ACCOUNT);
					}
					break;
				case 2:
					{
					setState(11064);
					match(DATABASE);
					setState(11066);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(11065);
						id_();
						}
					}

					}
					break;
				case 3:
					{
					setState(11069);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SCHEMA) {
						{
						setState(11068);
						match(SCHEMA);
						}
					}

					setState(11072);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
						{
						setState(11071);
						schema_name();
						}
					}

					}
					break;
				}
				}
			}

			setState(11079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STARTS) {
				{
				setState(11078);
				starts_with();
				}
			}

			setState(11082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(11081);
				limit_rows();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Show_warehousesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode WAREHOUSES() { return getToken(SnowflakeParser.WAREHOUSES, 0); }
		public Like_patternContext like_pattern() {
			return getRuleContext(Like_patternContext.class,0);
		}
		public Show_warehousesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_warehouses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterShow_warehouses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitShow_warehouses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitShow_warehouses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_warehousesContext show_warehouses() throws RecognitionException {
		Show_warehousesContext _localctx = new Show_warehousesContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_show_warehouses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11084);
			match(SHOW);
			setState(11085);
			match(WAREHOUSES);
			setState(11087);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE) {
				{
				setState(11086);
				like_pattern();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Like_patternContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(SnowflakeParser.LIKE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Like_patternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_pattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterLike_pattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitLike_pattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitLike_pattern(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_patternContext like_pattern() throws RecognitionException {
		Like_patternContext _localctx = new Like_patternContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_like_pattern);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11089);
			match(LIKE);
			setState(11090);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Account_identifierContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Account_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_account_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAccount_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAccount_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAccount_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Account_identifierContext account_identifier() throws RecognitionException {
		Account_identifierContext _localctx = new Account_identifierContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_account_identifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11092);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Schema_nameContext extends ParserRuleContext {
		public Id_Context d;
		public Id_Context s;
		public TerminalNode DOT() { return getToken(SnowflakeParser.DOT, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSchema_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSchema_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_schema_name);
		try {
			setState(11099);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1436,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11094);
				((Schema_nameContext)_localctx).d = id_();
				setState(11095);
				match(DOT);
				setState(11096);
				((Schema_nameContext)_localctx).s = id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11098);
				((Schema_nameContext)_localctx).s = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_typeContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode PARAMETERS() { return getToken(SnowflakeParser.PARAMETERS, 0); }
		public TerminalNode DATABASES() { return getToken(SnowflakeParser.DATABASES, 0); }
		public TerminalNode INTEGRATIONS() { return getToken(SnowflakeParser.INTEGRATIONS, 0); }
		public TerminalNode NETWORK() { return getToken(SnowflakeParser.NETWORK, 0); }
		public TerminalNode POLICIES() { return getToken(SnowflakeParser.POLICIES, 0); }
		public TerminalNode RESOURCE() { return getToken(SnowflakeParser.RESOURCE, 0); }
		public TerminalNode MONITORS() { return getToken(SnowflakeParser.MONITORS, 0); }
		public TerminalNode ROLES() { return getToken(SnowflakeParser.ROLES, 0); }
		public TerminalNode SHARES() { return getToken(SnowflakeParser.SHARES, 0); }
		public TerminalNode USERS() { return getToken(SnowflakeParser.USERS, 0); }
		public TerminalNode WAREHOUSES() { return getToken(SnowflakeParser.WAREHOUSES, 0); }
		public Object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterObject_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitObject_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitObject_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_typeContext object_type() throws RecognitionException {
		Object_typeContext _localctx = new Object_typeContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_object_type);
		try {
			setState(11113);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCOUNT:
				enterOuterAlt(_localctx, 1);
				{
				setState(11101);
				match(ACCOUNT);
				setState(11102);
				match(PARAMETERS);
				}
				break;
			case DATABASES:
				enterOuterAlt(_localctx, 2);
				{
				setState(11103);
				match(DATABASES);
				}
				break;
			case INTEGRATIONS:
				enterOuterAlt(_localctx, 3);
				{
				setState(11104);
				match(INTEGRATIONS);
				}
				break;
			case NETWORK:
				enterOuterAlt(_localctx, 4);
				{
				setState(11105);
				match(NETWORK);
				setState(11106);
				match(POLICIES);
				}
				break;
			case RESOURCE:
				enterOuterAlt(_localctx, 5);
				{
				setState(11107);
				match(RESOURCE);
				setState(11108);
				match(MONITORS);
				}
				break;
			case ROLES:
				enterOuterAlt(_localctx, 6);
				{
				setState(11109);
				match(ROLES);
				}
				break;
			case SHARES:
				enterOuterAlt(_localctx, 7);
				{
				setState(11110);
				match(SHARES);
				}
				break;
			case USERS:
				enterOuterAlt(_localctx, 8);
				{
				setState(11111);
				match(USERS);
				}
				break;
			case WAREHOUSES:
				enterOuterAlt(_localctx, 9);
				{
				setState(11112);
				match(WAREHOUSES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_type_listContext extends ParserRuleContext {
		public List<Object_typeContext> object_type() {
			return getRuleContexts(Object_typeContext.class);
		}
		public Object_typeContext object_type(int i) {
			return getRuleContext(Object_typeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Object_type_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterObject_type_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitObject_type_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitObject_type_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_listContext object_type_list() throws RecognitionException {
		Object_type_listContext _localctx = new Object_type_listContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_object_type_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11115);
			object_type();
			setState(11120);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(11116);
				match(COMMA);
				setState(11117);
				object_type();
				}
				}
				setState(11122);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Tag_valueContext extends ParserRuleContext {
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Tag_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tag_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTag_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTag_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTag_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tag_valueContext tag_value() throws RecognitionException {
		Tag_valueContext _localctx = new Tag_valueContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_tag_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11123);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Arg_data_typeContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Arg_data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterArg_data_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitArg_data_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitArg_data_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arg_data_typeContext arg_data_type() throws RecognitionException {
		Arg_data_typeContext _localctx = new Arg_data_typeContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_arg_data_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11125);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Arg_nameContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Arg_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterArg_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitArg_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitArg_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arg_nameContext arg_name() throws RecognitionException {
		Arg_nameContext _localctx = new Arg_nameContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_arg_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11127);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Param_nameContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Param_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterParam_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitParam_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitParam_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Param_nameContext param_name() throws RecognitionException {
		Param_nameContext _localctx = new Param_nameContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_param_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11129);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Region_group_idContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Region_group_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_region_group_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterRegion_group_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitRegion_group_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitRegion_group_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Region_group_idContext region_group_id() throws RecognitionException {
		Region_group_idContext _localctx = new Region_group_idContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_region_group_id);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11131);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Snowflake_region_idContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public Snowflake_region_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_snowflake_region_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSnowflake_region_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSnowflake_region_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSnowflake_region_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Snowflake_region_idContext snowflake_region_id() throws RecognitionException {
		Snowflake_region_idContext _localctx = new Snowflake_region_idContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_snowflake_region_id);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11133);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StringContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(SnowflakeParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringContext string() throws RecognitionException {
		StringContext _localctx = new StringContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11135);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class String_listContext extends ParserRuleContext {
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public String_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterString_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitString_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitString_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_listContext string_list() throws RecognitionException {
		String_listContext _localctx = new String_listContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_string_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11137);
			string();
			setState(11142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(11138);
				match(COMMA);
				setState(11139);
				string();
				}
				}
				setState(11144);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Id_fnContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode IDENTIFIER() { return getToken(SnowflakeParser.IDENTIFIER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Id_fnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_fn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterId_fn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitId_fn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitId_fn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_fnContext id_fn() throws RecognitionException {
		Id_fnContext _localctx = new Id_fnContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_id_fn);
		try {
			setState(11151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1440,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11145);
				id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11146);
				match(IDENTIFIER);
				setState(11147);
				match(LR_BRACKET);
				setState(11148);
				id_();
				setState(11149);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Id_Context extends ParserRuleContext {
		public TerminalNode ID() { return getToken(SnowflakeParser.ID, 0); }
		public TerminalNode ID2() { return getToken(SnowflakeParser.ID2, 0); }
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(SnowflakeParser.DOUBLE_QUOTE_ID, 0); }
		public TerminalNode DOUBLE_QUOTE_BLANK() { return getToken(SnowflakeParser.DOUBLE_QUOTE_BLANK, 0); }
		public KeywordContext keyword() {
			return getRuleContext(KeywordContext.class,0);
		}
		public Non_reserved_wordsContext non_reserved_words() {
			return getRuleContext(Non_reserved_wordsContext.class,0);
		}
		public Object_type_pluralContext object_type_plural() {
			return getRuleContext(Object_type_pluralContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Builtin_functionContext builtin_function() {
			return getRuleContext(Builtin_functionContext.class,0);
		}
		public Unary_or_binary_builtin_functionContext unary_or_binary_builtin_function() {
			return getRuleContext(Unary_or_binary_builtin_functionContext.class,0);
		}
		public Binary_builtin_functionContext binary_builtin_function() {
			return getRuleContext(Binary_builtin_functionContext.class,0);
		}
		public Binary_or_ternary_builtin_functionContext binary_or_ternary_builtin_function() {
			return getRuleContext(Binary_or_ternary_builtin_functionContext.class,0);
		}
		public Ternary_builtin_functionContext ternary_builtin_function() {
			return getRuleContext(Ternary_builtin_functionContext.class,0);
		}
		public Id_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterId_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitId_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitId_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_Context id_() throws RecognitionException {
		Id_Context _localctx = new Id_Context(_ctx, getState());
		enterRule(_localctx, 976, RULE_id_);
		try {
			setState(11166);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1441,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11153);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11154);
				match(ID2);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11155);
				match(DOUBLE_QUOTE_ID);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11156);
				match(DOUBLE_QUOTE_BLANK);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11157);
				keyword();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(11158);
				non_reserved_words();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(11159);
				object_type_plural();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(11160);
				data_type();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(11161);
				builtin_function();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(11162);
				unary_or_binary_builtin_function();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(11163);
				binary_builtin_function();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(11164);
				binary_or_ternary_builtin_function();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(11165);
				ternary_builtin_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeywordContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(SnowflakeParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(SnowflakeParser.ACTION, 0); }
		public TerminalNode ALERT() { return getToken(SnowflakeParser.ALERT, 0); }
		public TerminalNode AT_KEYWORD() { return getToken(SnowflakeParser.AT_KEYWORD, 0); }
		public TerminalNode CLUSTER() { return getToken(SnowflakeParser.CLUSTER, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public TerminalNode CONDITION() { return getToken(SnowflakeParser.CONDITION, 0); }
		public TerminalNode COPY_OPTIONS_() { return getToken(SnowflakeParser.COPY_OPTIONS_, 0); }
		public TerminalNode DIRECTION() { return getToken(SnowflakeParser.DIRECTION, 0); }
		public TerminalNode EMAIL() { return getToken(SnowflakeParser.EMAIL, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(SnowflakeParser.FIRST_VALUE, 0); }
		public TerminalNode FLATTEN() { return getToken(SnowflakeParser.FLATTEN, 0); }
		public TerminalNode FUNCTION() { return getToken(SnowflakeParser.FUNCTION, 0); }
		public TerminalNode IF() { return getToken(SnowflakeParser.IF, 0); }
		public TerminalNode JOIN() { return getToken(SnowflakeParser.JOIN, 0); }
		public TerminalNode KEY() { return getToken(SnowflakeParser.KEY, 0); }
		public TerminalNode LAG() { return getToken(SnowflakeParser.LAG, 0); }
		public TerminalNode LANGUAGE() { return getToken(SnowflakeParser.LANGUAGE, 0); }
		public TerminalNode LENGTH() { return getToken(SnowflakeParser.LENGTH, 0); }
		public TerminalNode MAX_CONCURRENCY_LEVEL() { return getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0); }
		public TerminalNode MODE() { return getToken(SnowflakeParser.MODE, 0); }
		public TerminalNode NOORDER() { return getToken(SnowflakeParser.NOORDER, 0); }
		public TerminalNode ORDER() { return getToken(SnowflakeParser.ORDER, 0); }
		public TerminalNode OUTER() { return getToken(SnowflakeParser.OUTER, 0); }
		public TerminalNode POLICY() { return getToken(SnowflakeParser.POLICY, 0); }
		public TerminalNode RECURSIVE() { return getToken(SnowflakeParser.RECURSIVE, 0); }
		public TerminalNode REGION() { return getToken(SnowflakeParser.REGION, 0); }
		public TerminalNode ROLE() { return getToken(SnowflakeParser.ROLE, 0); }
		public TerminalNode ROLLUP() { return getToken(SnowflakeParser.ROLLUP, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(SnowflakeParser.ROW_NUMBER, 0); }
		public TerminalNode SEQUENCE() { return getToken(SnowflakeParser.SEQUENCE, 0); }
		public TerminalNode SESSION() { return getToken(SnowflakeParser.SESSION, 0); }
		public TerminalNode STAGE() { return getToken(SnowflakeParser.STAGE, 0); }
		public TerminalNode TAG() { return getToken(SnowflakeParser.TAG, 0); }
		public TerminalNode TARGET_LAG() { return getToken(SnowflakeParser.TARGET_LAG, 0); }
		public TerminalNode TEMP() { return getToken(SnowflakeParser.TEMP, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SnowflakeParser.TIMESTAMP, 0); }
		public TerminalNode TYPE() { return getToken(SnowflakeParser.TYPE, 0); }
		public TerminalNode USER() { return getToken(SnowflakeParser.USER, 0); }
		public TerminalNode VALUE() { return getToken(SnowflakeParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(SnowflakeParser.VALUES, 0); }
		public TerminalNode WAREHOUSE() { return getToken(SnowflakeParser.WAREHOUSE, 0); }
		public TerminalNode WAREHOUSE_TYPE() { return getToken(SnowflakeParser.WAREHOUSE_TYPE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordContext keyword() throws RecognitionException {
		KeywordContext _localctx = new KeywordContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11168);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 70368744211008L) != 0) || ((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & 4198529L) != 0) || _la==DIRECTION || _la==EMAIL || ((((_la - 270)) & ~0x3f) == 0 && ((1L << (_la - 270)) & 140737488357379L) != 0) || ((((_la - 355)) & ~0x3f) == 0 && ((1L << (_la - 355)) & 2305983746702574369L) != 0) || ((((_la - 435)) & ~0x3f) == 0 && ((1L << (_la - 435)) & 19140298416324609L) != 0) || ((((_la - 527)) & ~0x3f) == 0 && ((1L << (_la - 527)) & 1116691496961L) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & 703687441777161L) != 0) || ((((_la - 684)) & ~0x3f) == 0 && ((1L << (_la - 684)) & 581668039372570625L) != 0) || ((((_la - 780)) & ~0x3f) == 0 && ((1L << (_la - 780)) & 77410082817L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Non_reserved_wordsContext extends ParserRuleContext {
		public TerminalNode ACCOUNTADMIN() { return getToken(SnowflakeParser.ACCOUNTADMIN, 0); }
		public TerminalNode AES() { return getToken(SnowflakeParser.AES, 0); }
		public TerminalNode ALLOW_OVERLAPPING_EXECUTION() { return getToken(SnowflakeParser.ALLOW_OVERLAPPING_EXECUTION, 0); }
		public TerminalNode ARRAY_AGG() { return getToken(SnowflakeParser.ARRAY_AGG, 0); }
		public TerminalNode CHECKSUM() { return getToken(SnowflakeParser.CHECKSUM, 0); }
		public TerminalNode COLLECTION() { return getToken(SnowflakeParser.COLLECTION, 0); }
		public TerminalNode COMMENT() { return getToken(SnowflakeParser.COMMENT, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SnowflakeParser.CONFIGURATION, 0); }
		public TerminalNode DATA() { return getToken(SnowflakeParser.DATA, 0); }
		public TerminalNode DAYS() { return getToken(SnowflakeParser.DAYS, 0); }
		public TerminalNode DEFINITION() { return getToken(SnowflakeParser.DEFINITION, 0); }
		public TerminalNode DELTA() { return getToken(SnowflakeParser.DELTA, 0); }
		public TerminalNode DISPLAY_NAME() { return getToken(SnowflakeParser.DISPLAY_NAME, 0); }
		public TerminalNode DOWNSTREAM() { return getToken(SnowflakeParser.DOWNSTREAM, 0); }
		public TerminalNode DYNAMIC() { return getToken(SnowflakeParser.DYNAMIC, 0); }
		public TerminalNode EDITION() { return getToken(SnowflakeParser.EDITION, 0); }
		public TerminalNode EMAIL() { return getToken(SnowflakeParser.EMAIL, 0); }
		public TerminalNode EMPTY_() { return getToken(SnowflakeParser.EMPTY_, 0); }
		public TerminalNode ENABLED() { return getToken(SnowflakeParser.ENABLED, 0); }
		public TerminalNode ERROR_INTEGRATION() { return getToken(SnowflakeParser.ERROR_INTEGRATION, 0); }
		public TerminalNode EVENT() { return getToken(SnowflakeParser.EVENT, 0); }
		public TerminalNode EXCHANGE() { return getToken(SnowflakeParser.EXCHANGE, 0); }
		public TerminalNode EXPIRY_DATE() { return getToken(SnowflakeParser.EXPIRY_DATE, 0); }
		public TerminalNode EXPR() { return getToken(SnowflakeParser.EXPR, 0); }
		public TerminalNode FILE() { return getToken(SnowflakeParser.FILE, 0); }
		public TerminalNode FILES() { return getToken(SnowflakeParser.FILES, 0); }
		public TerminalNode FIRST_NAME() { return getToken(SnowflakeParser.FIRST_NAME, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(SnowflakeParser.FIRST_VALUE, 0); }
		public TerminalNode FREQUENCY() { return getToken(SnowflakeParser.FREQUENCY, 0); }
		public TerminalNode GLOBAL() { return getToken(SnowflakeParser.GLOBAL, 0); }
		public TerminalNode HIGH() { return getToken(SnowflakeParser.HIGH, 0); }
		public TerminalNode HOURS() { return getToken(SnowflakeParser.HOURS, 0); }
		public TerminalNode IDENTIFIER() { return getToken(SnowflakeParser.IDENTIFIER, 0); }
		public TerminalNode IDENTITY() { return getToken(SnowflakeParser.IDENTITY, 0); }
		public TerminalNode INCREMENTAL() { return getToken(SnowflakeParser.INCREMENTAL, 0); }
		public TerminalNode IMPORTED() { return getToken(SnowflakeParser.IMPORTED, 0); }
		public TerminalNode INDEX() { return getToken(SnowflakeParser.INDEX, 0); }
		public TerminalNode INITIALIZE() { return getToken(SnowflakeParser.INITIALIZE, 0); }
		public TerminalNode INPUT() { return getToken(SnowflakeParser.INPUT, 0); }
		public TerminalNode INTERVAL() { return getToken(SnowflakeParser.INTERVAL, 0); }
		public TerminalNode JAVASCRIPT() { return getToken(SnowflakeParser.JAVASCRIPT, 0); }
		public TerminalNode LAST_NAME() { return getToken(SnowflakeParser.LAST_NAME, 0); }
		public TerminalNode LAST_QUERY_ID() { return getToken(SnowflakeParser.LAST_QUERY_ID, 0); }
		public TerminalNode LEAD() { return getToken(SnowflakeParser.LEAD, 0); }
		public TerminalNode LOCAL() { return getToken(SnowflakeParser.LOCAL, 0); }
		public TerminalNode LOW() { return getToken(SnowflakeParser.LOW, 0); }
		public TerminalNode MAX_CONCURRENCY_LEVEL() { return getToken(SnowflakeParser.MAX_CONCURRENCY_LEVEL, 0); }
		public TerminalNode MEDIUM() { return getToken(SnowflakeParser.MEDIUM, 0); }
		public TerminalNode MODE() { return getToken(SnowflakeParser.MODE, 0); }
		public TerminalNode NAME() { return getToken(SnowflakeParser.NAME, 0); }
		public TerminalNode NETWORK() { return getToken(SnowflakeParser.NETWORK, 0); }
		public TerminalNode NULLIF() { return getToken(SnowflakeParser.NULLIF, 0); }
		public TerminalNode NVL() { return getToken(SnowflakeParser.NVL, 0); }
		public TerminalNode OFFSET() { return getToken(SnowflakeParser.OFFSET, 0); }
		public TerminalNode OLD() { return getToken(SnowflakeParser.OLD, 0); }
		public TerminalNode ON_CREATE() { return getToken(SnowflakeParser.ON_CREATE, 0); }
		public TerminalNode ON_ERROR() { return getToken(SnowflakeParser.ON_ERROR, 0); }
		public TerminalNode ON_SCHEDULE() { return getToken(SnowflakeParser.ON_SCHEDULE, 0); }
		public TerminalNode OPTION() { return getToken(SnowflakeParser.OPTION, 0); }
		public TerminalNode ORGADMIN() { return getToken(SnowflakeParser.ORGADMIN, 0); }
		public TerminalNode OUTBOUND() { return getToken(SnowflakeParser.OUTBOUND, 0); }
		public TerminalNode OUTER() { return getToken(SnowflakeParser.OUTER, 0); }
		public TerminalNode OWNER() { return getToken(SnowflakeParser.OWNER, 0); }
		public TerminalNode PARTITION() { return getToken(SnowflakeParser.PARTITION, 0); }
		public TerminalNode PASSWORD() { return getToken(SnowflakeParser.PASSWORD, 0); }
		public TerminalNode PASSWORD_HISTORY() { return getToken(SnowflakeParser.PASSWORD_HISTORY, 0); }
		public TerminalNode PASSWORD_LOCKOUT_TIME_MINS() { return getToken(SnowflakeParser.PASSWORD_LOCKOUT_TIME_MINS, 0); }
		public TerminalNode PASSWORD_MAX_AGE_DAYS() { return getToken(SnowflakeParser.PASSWORD_MAX_AGE_DAYS, 0); }
		public TerminalNode PASSWORD_MAX_LENGTH() { return getToken(SnowflakeParser.PASSWORD_MAX_LENGTH, 0); }
		public TerminalNode PASSWORD_MAX_RETRIES() { return getToken(SnowflakeParser.PASSWORD_MAX_RETRIES, 0); }
		public TerminalNode PASSWORD_MIN_AGE_DAYS() { return getToken(SnowflakeParser.PASSWORD_MIN_AGE_DAYS, 0); }
		public TerminalNode PASSWORD_MIN_LENGTH() { return getToken(SnowflakeParser.PASSWORD_MIN_LENGTH, 0); }
		public TerminalNode PASSWORD_MIN_LOWER_CASE_CHARS() { return getToken(SnowflakeParser.PASSWORD_MIN_LOWER_CASE_CHARS, 0); }
		public TerminalNode PASSWORD_MIN_NUMERIC_CHARS() { return getToken(SnowflakeParser.PASSWORD_MIN_NUMERIC_CHARS, 0); }
		public TerminalNode PASSWORD_MIN_SPECIAL_CHARS() { return getToken(SnowflakeParser.PASSWORD_MIN_SPECIAL_CHARS, 0); }
		public TerminalNode PASSWORD_MIN_UPPER_CASE_CHARS() { return getToken(SnowflakeParser.PASSWORD_MIN_UPPER_CASE_CHARS, 0); }
		public TerminalNode PATH_() { return getToken(SnowflakeParser.PATH_, 0); }
		public TerminalNode PATTERN() { return getToken(SnowflakeParser.PATTERN, 0); }
		public TerminalNode PORT() { return getToken(SnowflakeParser.PORT, 0); }
		public TerminalNode PRIORITY() { return getToken(SnowflakeParser.PRIORITY, 0); }
		public TerminalNode PROCEDURE_NAME() { return getToken(SnowflakeParser.PROCEDURE_NAME, 0); }
		public TerminalNode PROPERTY() { return getToken(SnowflakeParser.PROPERTY, 0); }
		public TerminalNode PROVIDER() { return getToken(SnowflakeParser.PROVIDER, 0); }
		public TerminalNode PUBLIC() { return getToken(SnowflakeParser.PUBLIC, 0); }
		public TerminalNode QUARTER() { return getToken(SnowflakeParser.QUARTER, 0); }
		public TerminalNode QUERY() { return getToken(SnowflakeParser.QUERY, 0); }
		public TerminalNode QUERY_TAG() { return getToken(SnowflakeParser.QUERY_TAG, 0); }
		public TerminalNode RANK() { return getToken(SnowflakeParser.RANK, 0); }
		public TerminalNode RECURSIVE() { return getToken(SnowflakeParser.RECURSIVE, 0); }
		public TerminalNode REFERENCES() { return getToken(SnowflakeParser.REFERENCES, 0); }
		public TerminalNode REFRESH_MODE() { return getToken(SnowflakeParser.REFRESH_MODE, 0); }
		public TerminalNode RESOURCE() { return getToken(SnowflakeParser.RESOURCE, 0); }
		public TerminalNode RESOURCES() { return getToken(SnowflakeParser.RESOURCES, 0); }
		public TerminalNode RESPECT() { return getToken(SnowflakeParser.RESPECT, 0); }
		public TerminalNode RESTRICT() { return getToken(SnowflakeParser.RESTRICT, 0); }
		public TerminalNode RESULT() { return getToken(SnowflakeParser.RESULT, 0); }
		public TerminalNode ROLE() { return getToken(SnowflakeParser.ROLE, 0); }
		public TerminalNode ROUNDING_MODE() { return getToken(SnowflakeParser.ROUNDING_MODE, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(SnowflakeParser.ROW_NUMBER, 0); }
		public TerminalNode SCALE() { return getToken(SnowflakeParser.SCALE, 0); }
		public TerminalNode SCHEDULE() { return getToken(SnowflakeParser.SCHEDULE, 0); }
		public TerminalNode SECURITYADMIN() { return getToken(SnowflakeParser.SECURITYADMIN, 0); }
		public TerminalNode SOURCE() { return getToken(SnowflakeParser.SOURCE, 0); }
		public TerminalNode START_DATE() { return getToken(SnowflakeParser.START_DATE, 0); }
		public TerminalNode STATE() { return getToken(SnowflakeParser.STATE, 0); }
		public TerminalNode STATS() { return getToken(SnowflakeParser.STATS, 0); }
		public TerminalNode STATUS() { return getToken(SnowflakeParser.STATUS, 0); }
		public TerminalNode SYSADMIN() { return getToken(SnowflakeParser.SYSADMIN, 0); }
		public TerminalNode TAG() { return getToken(SnowflakeParser.TAG, 0); }
		public TerminalNode TAGS() { return getToken(SnowflakeParser.TAGS, 0); }
		public TerminalNode TARGET_LAG() { return getToken(SnowflakeParser.TARGET_LAG, 0); }
		public TerminalNode TIMEZONE() { return getToken(SnowflakeParser.TIMEZONE, 0); }
		public TerminalNode URL() { return getToken(SnowflakeParser.URL, 0); }
		public TerminalNode USERADMIN() { return getToken(SnowflakeParser.USERADMIN, 0); }
		public TerminalNode VALUE() { return getToken(SnowflakeParser.VALUE, 0); }
		public TerminalNode VALUES() { return getToken(SnowflakeParser.VALUES, 0); }
		public TerminalNode VERSION() { return getToken(SnowflakeParser.VERSION, 0); }
		public TerminalNode VISIBILITY() { return getToken(SnowflakeParser.VISIBILITY, 0); }
		public TerminalNode WAREHOUSE_TYPE() { return getToken(SnowflakeParser.WAREHOUSE_TYPE, 0); }
		public TerminalNode YEAR() { return getToken(SnowflakeParser.YEAR, 0); }
		public Non_reserved_wordsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_reserved_words; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterNon_reserved_words(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitNon_reserved_words(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitNon_reserved_words(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_reserved_wordsContext non_reserved_words() throws RecognitionException {
		Non_reserved_wordsContext _localctx = new Non_reserved_wordsContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_non_reserved_words);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11170);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4398180737152L) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & 1154047404581978113L) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & 365363316025606161L) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & 8162778619592803L) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & 146372210574231641L) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & 290271111692305L) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & 2307813282585005585L) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & 24066111146905841L) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & 17635135717921L) != 0) || ((((_la - 677)) & ~0x3f) == 0 && ((1L << (_la - 677)) & 126135973941690369L) != 0) || ((((_la - 757)) & ~0x3f) == 0 && ((1L << (_la - 757)) & 597571521585610753L) != 0) || _la==YEAR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Builtin_functionContext extends ParserRuleContext {
		public TerminalNode SUM() { return getToken(SnowflakeParser.SUM, 0); }
		public TerminalNode AVG() { return getToken(SnowflakeParser.AVG, 0); }
		public TerminalNode MIN() { return getToken(SnowflakeParser.MIN, 0); }
		public TerminalNode COUNT() { return getToken(SnowflakeParser.COUNT, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SnowflakeParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(SnowflakeParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(SnowflakeParser.CURRENT_DATE, 0); }
		public TerminalNode UPPER() { return getToken(SnowflakeParser.UPPER, 0); }
		public TerminalNode LOWER() { return getToken(SnowflakeParser.LOWER, 0); }
		public TerminalNode TO_BOOLEAN() { return getToken(SnowflakeParser.TO_BOOLEAN, 0); }
		public TerminalNode IDENTIFIER() { return getToken(SnowflakeParser.IDENTIFIER, 0); }
		public TerminalNode FLATTEN() { return getToken(SnowflakeParser.FLATTEN, 0); }
		public TerminalNode SPLIT_TO_TABLE() { return getToken(SnowflakeParser.SPLIT_TO_TABLE, 0); }
		public TerminalNode CAST() { return getToken(SnowflakeParser.CAST, 0); }
		public TerminalNode TRY_CAST() { return getToken(SnowflakeParser.TRY_CAST, 0); }
		public TerminalNode ANY_VALUE() { return getToken(SnowflakeParser.ANY_VALUE, 0); }
		public TerminalNode GETDATE() { return getToken(SnowflakeParser.GETDATE, 0); }
		public Builtin_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_builtin_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterBuiltin_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitBuiltin_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitBuiltin_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Builtin_functionContext builtin_function() throws RecognitionException {
		Builtin_functionContext _localctx = new Builtin_functionContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_builtin_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11172);
			_la = _input.LA(1);
			if ( !(_la==ANY_VALUE || _la==AVG || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & 126135973938462721L) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & 17592202821633L) != 0) || _la==LOWER || _la==MIN || _la==SPLIT_TO_TABLE || _la==SUM || ((((_la - 762)) & ~0x3f) == 0 && ((1L << (_la - 762)) & 134283265L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Unary_or_binary_builtin_functionContext extends ParserRuleContext {
		public TerminalNode FLOOR() { return getToken(SnowflakeParser.FLOOR, 0); }
		public TerminalNode TRUNCATE() { return getToken(SnowflakeParser.TRUNCATE, 0); }
		public TerminalNode TRUNC() { return getToken(SnowflakeParser.TRUNC, 0); }
		public TerminalNode CEIL() { return getToken(SnowflakeParser.CEIL, 0); }
		public TerminalNode ROUND() { return getToken(SnowflakeParser.ROUND, 0); }
		public Unary_or_binary_builtin_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_or_binary_builtin_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterUnary_or_binary_builtin_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitUnary_or_binary_builtin_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitUnary_or_binary_builtin_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_or_binary_builtin_functionContext unary_or_binary_builtin_function() throws RecognitionException {
		Unary_or_binary_builtin_functionContext _localctx = new Unary_or_binary_builtin_functionContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_unary_or_binary_builtin_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11174);
			_la = _input.LA(1);
			if ( !(_la==CEIL || _la==ROUND || _la==TRUNC || _la==TRUNCATE || _la==FLOOR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Binary_builtin_functionContext extends ParserRuleContext {
		public Token ifnull;
		public Token to_date;
		public TerminalNode IFNULL() { return getToken(SnowflakeParser.IFNULL, 0); }
		public TerminalNode NVL() { return getToken(SnowflakeParser.NVL, 0); }
		public TerminalNode GET() { return getToken(SnowflakeParser.GET, 0); }
		public TerminalNode LEFT() { return getToken(SnowflakeParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SnowflakeParser.RIGHT, 0); }
		public TerminalNode DATE_PART() { return getToken(SnowflakeParser.DATE_PART, 0); }
		public TerminalNode TO_DATE() { return getToken(SnowflakeParser.TO_DATE, 0); }
		public TerminalNode DATE() { return getToken(SnowflakeParser.DATE, 0); }
		public TerminalNode SPLIT() { return getToken(SnowflakeParser.SPLIT, 0); }
		public TerminalNode NULLIF() { return getToken(SnowflakeParser.NULLIF, 0); }
		public TerminalNode EQUAL_NULL() { return getToken(SnowflakeParser.EQUAL_NULL, 0); }
		public TerminalNode CONTAINS() { return getToken(SnowflakeParser.CONTAINS, 0); }
		public TerminalNode COLLATE() { return getToken(SnowflakeParser.COLLATE, 0); }
		public TerminalNode TO_TIMESTAMP() { return getToken(SnowflakeParser.TO_TIMESTAMP, 0); }
		public Binary_builtin_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_builtin_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterBinary_builtin_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitBinary_builtin_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitBinary_builtin_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Binary_builtin_functionContext binary_builtin_function() throws RecognitionException {
		Binary_builtin_functionContext _localctx = new Binary_builtin_functionContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_binary_builtin_function);
		int _la;
		try {
			setState(11188);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IFNULL:
			case NVL:
				enterOuterAlt(_localctx, 1);
				{
				setState(11176);
				((Binary_builtin_functionContext)_localctx).ifnull = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IFNULL || _la==NVL) ) {
					((Binary_builtin_functionContext)_localctx).ifnull = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case GET:
				enterOuterAlt(_localctx, 2);
				{
				setState(11177);
				match(GET);
				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 3);
				{
				setState(11178);
				match(LEFT);
				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 4);
				{
				setState(11179);
				match(RIGHT);
				}
				break;
			case DATE_PART:
				enterOuterAlt(_localctx, 5);
				{
				setState(11180);
				match(DATE_PART);
				}
				break;
			case TO_DATE:
			case DATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(11181);
				((Binary_builtin_functionContext)_localctx).to_date = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==TO_DATE || _la==DATE) ) {
					((Binary_builtin_functionContext)_localctx).to_date = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SPLIT:
				enterOuterAlt(_localctx, 7);
				{
				setState(11182);
				match(SPLIT);
				}
				break;
			case NULLIF:
				enterOuterAlt(_localctx, 8);
				{
				setState(11183);
				match(NULLIF);
				}
				break;
			case EQUAL_NULL:
				enterOuterAlt(_localctx, 9);
				{
				setState(11184);
				match(EQUAL_NULL);
				}
				break;
			case CONTAINS:
				enterOuterAlt(_localctx, 10);
				{
				setState(11185);
				match(CONTAINS);
				}
				break;
			case COLLATE:
				enterOuterAlt(_localctx, 11);
				{
				setState(11186);
				match(COLLATE);
				}
				break;
			case TO_TIMESTAMP:
				enterOuterAlt(_localctx, 12);
				{
				setState(11187);
				match(TO_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Binary_or_ternary_builtin_functionContext extends ParserRuleContext {
		public Token substring;
		public TerminalNode CHARINDEX() { return getToken(SnowflakeParser.CHARINDEX, 0); }
		public TerminalNode REPLACE() { return getToken(SnowflakeParser.REPLACE, 0); }
		public TerminalNode SUBSTRING() { return getToken(SnowflakeParser.SUBSTRING, 0); }
		public TerminalNode SUBSTR() { return getToken(SnowflakeParser.SUBSTR, 0); }
		public TerminalNode LIKE() { return getToken(SnowflakeParser.LIKE, 0); }
		public TerminalNode ILIKE() { return getToken(SnowflakeParser.ILIKE, 0); }
		public Binary_or_ternary_builtin_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_or_ternary_builtin_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterBinary_or_ternary_builtin_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitBinary_or_ternary_builtin_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitBinary_or_ternary_builtin_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Binary_or_ternary_builtin_functionContext binary_or_ternary_builtin_function() throws RecognitionException {
		Binary_or_ternary_builtin_functionContext _localctx = new Binary_or_ternary_builtin_functionContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_binary_or_ternary_builtin_function);
		int _la;
		try {
			setState(11195);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARINDEX:
				enterOuterAlt(_localctx, 1);
				{
				setState(11190);
				match(CHARINDEX);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(11191);
				match(REPLACE);
				}
				break;
			case SUBSTR:
			case SUBSTRING:
				enterOuterAlt(_localctx, 3);
				{
				setState(11192);
				((Binary_or_ternary_builtin_functionContext)_localctx).substring = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
					((Binary_or_ternary_builtin_functionContext)_localctx).substring = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case LIKE:
				enterOuterAlt(_localctx, 4);
				{
				setState(11193);
				match(LIKE);
				}
				break;
			case ILIKE:
				enterOuterAlt(_localctx, 5);
				{
				setState(11194);
				match(ILIKE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Ternary_builtin_functionContext extends ParserRuleContext {
		public Token dateadd;
		public Token datefiff;
		public TerminalNode DATEADD() { return getToken(SnowflakeParser.DATEADD, 0); }
		public TerminalNode TIMEADD() { return getToken(SnowflakeParser.TIMEADD, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(SnowflakeParser.TIMESTAMPADD, 0); }
		public TerminalNode DATEDIFF() { return getToken(SnowflakeParser.DATEDIFF, 0); }
		public TerminalNode TIMEDIFF() { return getToken(SnowflakeParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(SnowflakeParser.TIMESTAMPDIFF, 0); }
		public TerminalNode SPLIT_PART() { return getToken(SnowflakeParser.SPLIT_PART, 0); }
		public TerminalNode NVL2() { return getToken(SnowflakeParser.NVL2, 0); }
		public TerminalNode IFF() { return getToken(SnowflakeParser.IFF, 0); }
		public Ternary_builtin_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ternary_builtin_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTernary_builtin_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTernary_builtin_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTernary_builtin_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ternary_builtin_functionContext ternary_builtin_function() throws RecognitionException {
		Ternary_builtin_functionContext _localctx = new Ternary_builtin_functionContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_ternary_builtin_function);
		int _la;
		try {
			setState(11202);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATEADD:
			case TIMEADD:
			case TIMESTAMPADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(11197);
				((Ternary_builtin_functionContext)_localctx).dateadd = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATEADD || _la==TIMEADD || _la==TIMESTAMPADD) ) {
					((Ternary_builtin_functionContext)_localctx).dateadd = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DATEDIFF:
			case TIMEDIFF:
			case TIMESTAMPDIFF:
				enterOuterAlt(_localctx, 2);
				{
				setState(11198);
				((Ternary_builtin_functionContext)_localctx).datefiff = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATEDIFF || _la==TIMEDIFF || _la==TIMESTAMPDIFF) ) {
					((Ternary_builtin_functionContext)_localctx).datefiff = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SPLIT_PART:
				enterOuterAlt(_localctx, 3);
				{
				setState(11199);
				match(SPLIT_PART);
				}
				break;
			case NVL2:
				enterOuterAlt(_localctx, 4);
				{
				setState(11200);
				match(NVL2);
				}
				break;
			case IFF:
				enterOuterAlt(_localctx, 5);
				{
				setState(11201);
				match(IFF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class List_functionContext extends ParserRuleContext {
		public TerminalNode CONCAT() { return getToken(SnowflakeParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(SnowflakeParser.CONCAT_WS, 0); }
		public TerminalNode COALESCE() { return getToken(SnowflakeParser.COALESCE, 0); }
		public TerminalNode HASH() { return getToken(SnowflakeParser.HASH, 0); }
		public List_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterList_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitList_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitList_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final List_functionContext list_function() throws RecognitionException {
		List_functionContext _localctx = new List_functionContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_list_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11204);
			_la = _input.LA(1);
			if ( !(((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & 769L) != 0) || _la==HASH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PatternContext extends ParserRuleContext {
		public TerminalNode PATTERN() { return getToken(SnowflakeParser.PATTERN, 0); }
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public PatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitPattern(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PatternContext pattern() throws RecognitionException {
		PatternContext _localctx = new PatternContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_pattern);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11206);
			match(PATTERN);
			setState(11207);
			match(EQ);
			setState(11208);
			string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_nameContext extends ParserRuleContext {
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode DOT() { return getToken(SnowflakeParser.DOT, 0); }
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitColumn_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11213);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1445,_ctx) ) {
			case 1:
				{
				setState(11210);
				id_();
				setState(11211);
				match(DOT);
				}
				break;
			}
			setState(11215);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_listContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterColumn_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitColumn_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitColumn_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_listContext column_list() throws RecognitionException {
		Column_listContext _localctx = new Column_listContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11217);
			column_name();
			setState(11222);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(11218);
				match(COMMA);
				setState(11219);
				column_name();
				}
				}
				setState(11224);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_list_with_commentContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> COMMENT() { return getTokens(SnowflakeParser.COMMENT); }
		public TerminalNode COMMENT(int i) {
			return getToken(SnowflakeParser.COMMENT, i);
		}
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Column_list_with_commentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_list_with_comment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterColumn_list_with_comment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitColumn_list_with_comment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitColumn_list_with_comment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_list_with_commentContext column_list_with_comment() throws RecognitionException {
		Column_list_with_commentContext _localctx = new Column_list_with_commentContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_column_list_with_comment);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11225);
			column_name();
			setState(11228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMENT) {
				{
				setState(11226);
				match(COMMENT);
				setState(11227);
				string();
				}
			}

			setState(11238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(11230);
				match(COMMA);
				setState(11231);
				column_name();
				setState(11234);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMENT) {
					{
					setState(11232);
					match(COMMENT);
					setState(11233);
					string();
					}
				}

				}
				}
				setState(11240);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_nameContext extends ParserRuleContext {
		public Id_varContext d;
		public Id_varContext s;
		public Id_varContext o;
		public List<TerminalNode> DOT() { return getTokens(SnowflakeParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SnowflakeParser.DOT, i);
		}
		public List<Id_varContext> id_var() {
			return getRuleContexts(Id_varContext.class);
		}
		public Id_varContext id_var(int i) {
			return getRuleContext(Id_varContext.class,i);
		}
		public Object_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterObject_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitObject_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitObject_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_nameContext object_name() throws RecognitionException {
		Object_nameContext _localctx = new Object_nameContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_object_name);
		try {
			setState(11252);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1450,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11241);
				((Object_nameContext)_localctx).d = id_var();
				setState(11242);
				match(DOT);
				setState(11243);
				((Object_nameContext)_localctx).s = id_var();
				setState(11244);
				match(DOT);
				setState(11245);
				((Object_nameContext)_localctx).o = id_var();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11247);
				((Object_nameContext)_localctx).s = id_var();
				setState(11248);
				match(DOT);
				setState(11249);
				((Object_nameContext)_localctx).o = id_var();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11251);
				((Object_nameContext)_localctx).o = id_var();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Id_varContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode DOLLAR() { return getToken(SnowflakeParser.DOLLAR, 0); }
		public TerminalNode LCB() { return getToken(SnowflakeParser.LCB, 0); }
		public TerminalNode RCB() { return getToken(SnowflakeParser.RCB, 0); }
		public Id_varContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_var; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterId_var(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitId_var(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitId_var(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_varContext id_var() throws RecognitionException {
		Id_varContext _localctx = new Id_varContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_id_var);
		try {
			setState(11260);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCOUNT:
			case ACCOUNTADMIN:
			case ACTION:
			case AES:
			case ALERT:
			case ALERTS:
			case ALLOW_OVERLAPPING_EXECUTION:
			case ANY_VALUE:
			case ARRAY_AGG:
			case AT_KEYWORD:
			case AVG:
			case CAST:
			case CEIL:
			case CHAR:
			case CHARACTER:
			case CHARINDEX:
			case CHECKSUM:
			case CLUSTER:
			case COLLATE:
			case COLLECTION:
			case COMMENT:
			case CONDITION:
			case CONFIGURATION:
			case CONTAINS:
			case COPY_OPTIONS_:
			case COUNT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASES:
			case DATEADD:
			case DATEDIFF:
			case DATE_PART:
			case DAYS:
			case DEFINITION:
			case DELTA:
			case DIRECTION:
			case DISPLAY_NAME:
			case DOWNSTREAM:
			case DYNAMIC:
			case EDITION:
			case EMAIL:
			case EMPTY_:
			case ENABLED:
			case EQUAL_NULL:
			case ERROR_INTEGRATION:
			case EVENT:
			case EXCHANGE:
			case EXPIRY_DATE:
			case EXPR:
			case FILE:
			case FILES:
			case FIRST_NAME:
			case FIRST_VALUE:
			case FLATTEN:
			case FREQUENCY:
			case FUNCTION:
			case GET:
			case GETDATE:
			case GLOBAL:
			case HIGH:
			case HOURS:
			case IDENTIFIER:
			case IDENTITY:
			case IF:
			case IFF:
			case IFNULL:
			case ILIKE:
			case IMPORTED:
			case INCREMENTAL:
			case INDEX:
			case INITIALIZE:
			case INPUT:
			case INT:
			case INTEGRATIONS:
			case INTERVAL:
			case JAVASCRIPT:
			case JOIN:
			case KEY:
			case LAG:
			case LANGUAGE:
			case LAST_NAME:
			case LAST_QUERY_ID:
			case LEAD:
			case LEFT:
			case LENGTH:
			case LIKE:
			case LOCAL:
			case LOW:
			case LOWER:
			case MAX_CONCURRENCY_LEVEL:
			case MEDIUM:
			case MIN:
			case MODE:
			case NAME:
			case NETWORK:
			case NOORDER:
			case NULLIF:
			case NUMBER:
			case NVL:
			case NVL2:
			case OBJECT:
			case OFFSET:
			case OLD:
			case ON_CREATE:
			case ON_ERROR:
			case ON_SCHEDULE:
			case OPTION:
			case ORDER:
			case ORGADMIN:
			case OUTBOUND:
			case OUTER:
			case OWNER:
			case PARTITION:
			case PASSWORD:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCKOUT_TIME_MINS:
			case PASSWORD_MAX_AGE_DAYS:
			case PASSWORD_MAX_LENGTH:
			case PASSWORD_MAX_RETRIES:
			case PASSWORD_MIN_AGE_DAYS:
			case PASSWORD_MIN_LENGTH:
			case PASSWORD_MIN_LOWER_CASE_CHARS:
			case PASSWORD_MIN_NUMERIC_CHARS:
			case PASSWORD_MIN_SPECIAL_CHARS:
			case PASSWORD_MIN_UPPER_CASE_CHARS:
			case PATH_:
			case PATTERN:
			case POLICIES:
			case POLICY:
			case PORT:
			case PRIORITY:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PUBLIC:
			case QUARTER:
			case QUERY:
			case QUERY_TAG:
			case RANK:
			case RECURSIVE:
			case REFERENCES:
			case REFRESH_MODE:
			case REGION:
			case REPLACE:
			case RESOURCE:
			case RESOURCES:
			case RESPECT:
			case RESTRICT:
			case RESULT:
			case RIGHT:
			case ROLE:
			case ROLES:
			case ROLLUP:
			case ROUND:
			case ROUNDING_MODE:
			case ROW_NUMBER:
			case SCALE:
			case SCHEDULE:
			case SCHEMAS:
			case SECURITYADMIN:
			case SEQUENCE:
			case SESSION:
			case SOURCE:
			case SPLIT:
			case SPLIT_PART:
			case SPLIT_TO_TABLE:
			case STAGE:
			case STAGES:
			case START_DATE:
			case STATE:
			case STATS:
			case STATUS:
			case STREAMS:
			case SUBSTR:
			case SUBSTRING:
			case SUM:
			case SYSADMIN:
			case TABLES:
			case TAG:
			case TAGS:
			case TARGET_LAG:
			case TASKS:
			case TEMP:
			case TIME:
			case TIMEADD:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMP_LTZ:
			case TIMESTAMP_NTZ:
			case TIMESTAMP_TZ:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMEZONE:
			case TO_BOOLEAN:
			case TO_DATE:
			case TO_TIMESTAMP:
			case TRUNC:
			case TRUNCATE:
			case TRY_CAST:
			case TYPE:
			case UPPER:
			case URL:
			case USER:
			case USERADMIN:
			case USERS:
			case VALUE:
			case VALUES:
			case VERSION:
			case VIEWS:
			case VISIBILITY:
			case WAREHOUSE:
			case WAREHOUSES:
			case WAREHOUSE_TYPE:
			case YEAR:
			case ARRAY:
			case BIGINT:
			case BINARY:
			case BOOLEAN:
			case BYTEINT:
			case CHAR_VARYING:
			case DATE:
			case DATETIME:
			case DECIMAL_:
			case DOUBLE:
			case DOUBLE_PRECISION:
			case FLOAT4:
			case FLOAT8:
			case FLOAT_:
			case FLOOR:
			case GEOGRAPHY:
			case GEOMETRY:
			case INTEGER:
			case NCHAR:
			case NCHAR_VARYING:
			case NUMERIC:
			case NVARCHAR2:
			case NVARCHAR:
			case REAL_:
			case SMALLINT:
			case STRING_:
			case TEXT:
			case TINYINT:
			case VARBINARY:
			case VARCHAR:
			case VARIANT:
			case DOUBLE_QUOTE_ID:
			case DOUBLE_QUOTE_BLANK:
			case ID:
			case ID2:
				enterOuterAlt(_localctx, 1);
				{
				setState(11254);
				id_();
				}
				break;
			case DOLLAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(11255);
				match(DOLLAR);
				setState(11256);
				match(LCB);
				setState(11257);
				id_();
				setState(11258);
				match(RCB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_name_or_identifierContext extends ParserRuleContext {
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode IDENTIFIER() { return getToken(SnowflakeParser.IDENTIFIER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Object_name_or_identifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_name_or_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterObject_name_or_identifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitObject_name_or_identifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitObject_name_or_identifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_name_or_identifierContext object_name_or_identifier() throws RecognitionException {
		Object_name_or_identifierContext _localctx = new Object_name_or_identifierContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_object_name_or_identifier);
		try {
			setState(11268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1452,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11262);
				object_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11263);
				match(IDENTIFIER);
				setState(11264);
				match(LR_BRACKET);
				setState(11265);
				string();
				setState(11266);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(SnowflakeParser.DECIMAL, 0); }
		public NumContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_num; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterNum(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitNum(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitNum(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumContext num() throws RecognitionException {
		NumContext _localctx = new NumContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_num);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11270);
			match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expr_listContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Expr_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterExpr_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitExpr_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitExpr_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_listContext expr_list() throws RecognitionException {
		Expr_listContext _localctx = new Expr_listContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_expr_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11272);
			expr(0);
			setState(11277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(11273);
				match(COMMA);
				setState(11274);
				expr(0);
				}
				}
				setState(11279);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expr_list_sortedContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<Asc_descContext> asc_desc() {
			return getRuleContexts(Asc_descContext.class);
		}
		public Asc_descContext asc_desc(int i) {
			return getRuleContext(Asc_descContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Expr_list_sortedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list_sorted; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterExpr_list_sorted(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitExpr_list_sorted(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitExpr_list_sorted(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_list_sortedContext expr_list_sorted() throws RecognitionException {
		Expr_list_sortedContext _localctx = new Expr_list_sortedContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_expr_list_sorted);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11280);
			expr(0);
			setState(11282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(11281);
				asc_desc();
				}
			}

			setState(11291);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(11284);
				match(COMMA);
				setState(11285);
				expr(0);
				setState(11287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(11286);
					asc_desc();
					}
				}

				}
				}
				setState(11293);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExprContext extends ParserRuleContext {
		public ExprContext l;
		public Token op;
		public ExprContext r;
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(SnowflakeParser.DOT, 0); }
		public TerminalNode NEXTVAL() { return getToken(SnowflakeParser.NEXTVAL, 0); }
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public Iff_exprContext iff_expr() {
			return getRuleContext(Iff_exprContext.class,0);
		}
		public Bracket_expressionContext bracket_expression() {
			return getRuleContext(Bracket_expressionContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode PLUS() { return getToken(SnowflakeParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SnowflakeParser.MINUS, 0); }
		public List<TerminalNode> NOT() { return getTokens(SnowflakeParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(SnowflakeParser.NOT, i);
		}
		public Arr_literalContext arr_literal() {
			return getRuleContext(Arr_literalContext.class,0);
		}
		public Cast_exprContext cast_expr() {
			return getRuleContext(Cast_exprContext.class,0);
		}
		public Try_cast_exprContext try_cast_expr() {
			return getRuleContext(Try_cast_exprContext.class,0);
		}
		public Json_literalContext json_literal() {
			return getRuleContext(Json_literalContext.class,0);
		}
		public Trim_expressionContext trim_expression() {
			return getRuleContext(Trim_expressionContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Primitive_expressionContext primitive_expression() {
			return getRuleContext(Primitive_expressionContext.class,0);
		}
		public TerminalNode COLON() { return getToken(SnowflakeParser.COLON, 0); }
		public TerminalNode STAR() { return getToken(SnowflakeParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(SnowflakeParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(SnowflakeParser.MODULE, 0); }
		public TerminalNode PIPE_PIPE() { return getToken(SnowflakeParser.PIPE_PIPE, 0); }
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public TerminalNode AND() { return getToken(SnowflakeParser.AND, 0); }
		public TerminalNode OR() { return getToken(SnowflakeParser.OR, 0); }
		public TerminalNode RLIKE() { return getToken(SnowflakeParser.RLIKE, 0); }
		public TerminalNode LSB() { return getToken(SnowflakeParser.LSB, 0); }
		public TerminalNode RSB() { return getToken(SnowflakeParser.RSB, 0); }
		public TerminalNode VALUE() { return getToken(SnowflakeParser.VALUE, 0); }
		public TerminalNode COLLATE() { return getToken(SnowflakeParser.COLLATE, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode COLON_COLON() { return getToken(SnowflakeParser.COLON_COLON, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode IS() { return getToken(SnowflakeParser.IS, 0); }
		public Null_not_nullContext null_not_null() {
			return getRuleContext(Null_not_nullContext.class,0);
		}
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SnowflakeParser.LIKE, 0); }
		public TerminalNode ILIKE() { return getToken(SnowflakeParser.ILIKE, 0); }
		public TerminalNode ESCAPE() { return getToken(SnowflakeParser.ESCAPE, 0); }
		public TerminalNode ANY() { return getToken(SnowflakeParser.ANY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 1014;
		enterRecursionRule(_localctx, 1014, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(11318);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1458,_ctx) ) {
			case 1:
				{
				setState(11295);
				object_name();
				setState(11296);
				match(DOT);
				setState(11297);
				match(NEXTVAL);
				}
				break;
			case 2:
				{
				setState(11299);
				case_expression();
				}
				break;
			case 3:
				{
				setState(11300);
				iff_expr();
				}
				break;
			case 4:
				{
				setState(11301);
				bracket_expression();
				}
				break;
			case 5:
				{
				setState(11302);
				((ExprContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11303);
				expr(22);
				}
				break;
			case 6:
				{
				setState(11305); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(11304);
						((ExprContext)_localctx).op = match(NOT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(11307); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1457,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(11309);
				expr(18);
				}
				break;
			case 7:
				{
				setState(11310);
				arr_literal();
				}
				break;
			case 8:
				{
				setState(11311);
				cast_expr();
				}
				break;
			case 9:
				{
				setState(11312);
				try_cast_expr();
				}
				break;
			case 10:
				{
				setState(11313);
				json_literal();
				}
				break;
			case 11:
				{
				setState(11314);
				trim_expression();
				}
				break;
			case 12:
				{
				setState(11315);
				function_call();
				}
				break;
			case 13:
				{
				setState(11316);
				subquery();
				}
				break;
			case 14:
				{
				setState(11317);
				primitive_expression();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(11411);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1469,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(11409);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1468,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(11320);
						if (!(precpred(_ctx, 28))) throw new FailedPredicateException(this, "precpred(_ctx, 28)");
						setState(11321);
						match(COLON);
						setState(11322);
						expr(29);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(11323);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(11324);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & 7L) != 0)) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(11325);
						expr(22);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(11326);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(11327);
						((ExprContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 901)) & ~0x3f) == 0 && ((1L << (_la - 901)) & 786433L) != 0)) ) {
							((ExprContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(11328);
						expr(21);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(11329);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(11330);
						comparison_operator();
						setState(11331);
						((ExprContext)_localctx).r = expr(20);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(11333);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(11334);
						match(AND);
						setState(11335);
						expr(18);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(11336);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(11337);
						match(OR);
						setState(11338);
						expr(17);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(11339);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(11341);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(11340);
							match(NOT);
							}
						}

						setState(11343);
						match(RLIKE);
						setState(11344);
						expr(4);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(11345);
						if (!(precpred(_ctx, 29))) throw new FailedPredicateException(this, "precpred(_ctx, 29)");
						setState(11346);
						match(LSB);
						setState(11347);
						expr(0);
						setState(11348);
						match(RSB);
						}
						break;
					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(11350);
						if (!(precpred(_ctx, 27))) throw new FailedPredicateException(this, "precpred(_ctx, 27)");
						setState(11351);
						match(DOT);
						setState(11354);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1460,_ctx) ) {
						case 1:
							{
							setState(11352);
							match(VALUE);
							}
							break;
						case 2:
							{
							setState(11353);
							expr(0);
							}
							break;
						}
						}
						break;
					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(11356);
						if (!(precpred(_ctx, 26))) throw new FailedPredicateException(this, "precpred(_ctx, 26)");
						setState(11357);
						match(COLLATE);
						setState(11358);
						string();
						}
						break;
					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(11359);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(11360);
						over_clause();
						}
						break;
					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(11361);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(11362);
						match(COLON_COLON);
						setState(11363);
						data_type();
						}
						break;
					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(11364);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(11365);
						match(IS);
						setState(11366);
						null_not_null();
						}
						break;
					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(11367);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(11369);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(11368);
							match(NOT);
							}
						}

						setState(11371);
						match(IN);
						setState(11372);
						match(LR_BRACKET);
						setState(11375);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1462,_ctx) ) {
						case 1:
							{
							setState(11373);
							subquery();
							}
							break;
						case 2:
							{
							setState(11374);
							expr_list();
							}
							break;
						}
						setState(11377);
						match(RR_BRACKET);
						}
						break;
					case 15:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(11379);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(11381);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(11380);
							match(NOT);
							}
						}

						setState(11383);
						_la = _input.LA(1);
						if ( !(_la==ILIKE || _la==LIKE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(11384);
						expr(0);
						setState(11387);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1464,_ctx) ) {
						case 1:
							{
							setState(11385);
							match(ESCAPE);
							setState(11386);
							expr(0);
							}
							break;
						}
						}
						break;
					case 16:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(11389);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(11391);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(11390);
							match(NOT);
							}
						}

						setState(11393);
						_la = _input.LA(1);
						if ( !(_la==ILIKE || _la==LIKE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(11394);
						match(ANY);
						setState(11395);
						match(LR_BRACKET);
						setState(11396);
						expr(0);
						setState(11401);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(11397);
							match(COMMA);
							setState(11398);
							expr(0);
							}
							}
							setState(11403);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(11404);
						match(RR_BRACKET);
						setState(11407);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1467,_ctx) ) {
						case 1:
							{
							setState(11405);
							match(ESCAPE);
							setState(11406);
							expr(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				setState(11413);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1469,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Iff_exprContext extends ParserRuleContext {
		public TerminalNode IFF() { return getToken(SnowflakeParser.IFF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Iff_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_iff_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterIff_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitIff_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitIff_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Iff_exprContext iff_expr() throws RecognitionException {
		Iff_exprContext _localctx = new Iff_exprContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_iff_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11414);
			match(IFF);
			setState(11415);
			match(LR_BRACKET);
			setState(11416);
			search_condition(0);
			setState(11417);
			match(COMMA);
			setState(11418);
			expr(0);
			setState(11419);
			match(COMMA);
			setState(11420);
			expr(0);
			setState(11421);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Trim_expressionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode TRIM() { return getToken(SnowflakeParser.TRIM, 0); }
		public TerminalNode LTRIM() { return getToken(SnowflakeParser.LTRIM, 0); }
		public TerminalNode RTRIM() { return getToken(SnowflakeParser.RTRIM, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public List<StringContext> string() {
			return getRuleContexts(StringContext.class);
		}
		public StringContext string(int i) {
			return getRuleContext(StringContext.class,i);
		}
		public Trim_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTrim_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTrim_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTrim_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trim_expressionContext trim_expression() throws RecognitionException {
		Trim_expressionContext _localctx = new Trim_expressionContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_trim_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11423);
			_la = _input.LA(1);
			if ( !(_la==LTRIM || _la==RTRIM || _la==TRIM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(11424);
			match(LR_BRACKET);
			setState(11425);
			expr(0);
			setState(11430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(11426);
				match(COMMA);
				setState(11427);
				string();
				}
				}
				setState(11432);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(11433);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Try_cast_exprContext extends ParserRuleContext {
		public TerminalNode TRY_CAST() { return getToken(SnowflakeParser.TRY_CAST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Try_cast_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_try_cast_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTry_cast_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTry_cast_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTry_cast_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Try_cast_exprContext try_cast_expr() throws RecognitionException {
		Try_cast_exprContext _localctx = new Try_cast_exprContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_try_cast_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11435);
			match(TRY_CAST);
			setState(11436);
			match(LR_BRACKET);
			setState(11437);
			expr(0);
			setState(11438);
			match(AS);
			setState(11439);
			data_type();
			setState(11440);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Cast_exprContext extends ParserRuleContext {
		public TerminalNode CAST() { return getToken(SnowflakeParser.CAST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SnowflakeParser.TIMESTAMP, 0); }
		public TerminalNode DATE() { return getToken(SnowflakeParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(SnowflakeParser.TIME, 0); }
		public TerminalNode INTERVAL() { return getToken(SnowflakeParser.INTERVAL, 0); }
		public Cast_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCast_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCast_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCast_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cast_exprContext cast_expr() throws RecognitionException {
		Cast_exprContext _localctx = new Cast_exprContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_cast_expr);
		int _la;
		try {
			setState(11451);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CAST:
				enterOuterAlt(_localctx, 1);
				{
				setState(11442);
				match(CAST);
				setState(11443);
				match(LR_BRACKET);
				setState(11444);
				expr(0);
				setState(11445);
				match(AS);
				setState(11446);
				data_type();
				setState(11447);
				match(RR_BRACKET);
				}
				break;
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case DATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(11449);
				_la = _input.LA(1);
				if ( !(_la==INTERVAL || _la==TIME || _la==TIMESTAMP || _la==DATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11450);
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Json_literalContext extends ParserRuleContext {
		public TerminalNode LCB() { return getToken(SnowflakeParser.LCB, 0); }
		public List<Kv_pairContext> kv_pair() {
			return getRuleContexts(Kv_pairContext.class);
		}
		public Kv_pairContext kv_pair(int i) {
			return getRuleContext(Kv_pairContext.class,i);
		}
		public TerminalNode RCB() { return getToken(SnowflakeParser.RCB, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Json_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterJson_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitJson_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitJson_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Json_literalContext json_literal() throws RecognitionException {
		Json_literalContext _localctx = new Json_literalContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_json_literal);
		int _la;
		try {
			setState(11466);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1473,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11453);
				match(LCB);
				setState(11454);
				kv_pair();
				setState(11459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(11455);
					match(COMMA);
					setState(11456);
					kv_pair();
					}
					}
					setState(11461);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(11462);
				match(RCB);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11464);
				match(LCB);
				setState(11465);
				match(RCB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Kv_pairContext extends ParserRuleContext {
		public Token key;
		public TerminalNode COLON() { return getToken(SnowflakeParser.COLON, 0); }
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public TerminalNode STRING() { return getToken(SnowflakeParser.STRING, 0); }
		public Kv_pairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kv_pair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterKv_pair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitKv_pair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitKv_pair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Kv_pairContext kv_pair() throws RecognitionException {
		Kv_pairContext _localctx = new Kv_pairContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_kv_pair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11468);
			((Kv_pairContext)_localctx).key = match(STRING);
			setState(11469);
			match(COLON);
			setState(11470);
			value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValueContext value() throws RecognitionException {
		ValueContext _localctx = new ValueContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11472);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Arr_literalContext extends ParserRuleContext {
		public TerminalNode LSB() { return getToken(SnowflakeParser.LSB, 0); }
		public List<ValueContext> value() {
			return getRuleContexts(ValueContext.class);
		}
		public ValueContext value(int i) {
			return getRuleContext(ValueContext.class,i);
		}
		public TerminalNode RSB() { return getToken(SnowflakeParser.RSB, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Arr_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arr_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterArr_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitArr_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitArr_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arr_literalContext arr_literal() throws RecognitionException {
		Arr_literalContext _localctx = new Arr_literalContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_arr_literal);
		int _la;
		try {
			setState(11487);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1475,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11474);
				match(LSB);
				setState(11475);
				value();
				setState(11480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(11476);
					match(COMMA);
					setState(11477);
					value();
					}
					}
					setState(11482);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(11483);
				match(RSB);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11485);
				match(LSB);
				setState(11486);
				match(RSB);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Data_type_sizeContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Data_type_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterData_type_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitData_type_size(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitData_type_size(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_type_sizeContext data_type_size() throws RecognitionException {
		Data_type_sizeContext _localctx = new Data_type_sizeContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_data_type_size);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11489);
			match(LR_BRACKET);
			setState(11490);
			num();
			setState(11491);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Data_typeContext extends ParserRuleContext {
		public Token int_alias;
		public Token number_alias;
		public Token float_alias;
		public Token char_alias;
		public Token varchar_alias;
		public Token binary_alias;
		public TerminalNode INT() { return getToken(SnowflakeParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(SnowflakeParser.INTEGER, 0); }
		public TerminalNode SMALLINT() { return getToken(SnowflakeParser.SMALLINT, 0); }
		public TerminalNode TINYINT() { return getToken(SnowflakeParser.TINYINT, 0); }
		public TerminalNode BYTEINT() { return getToken(SnowflakeParser.BYTEINT, 0); }
		public TerminalNode BIGINT() { return getToken(SnowflakeParser.BIGINT, 0); }
		public TerminalNode NUMBER() { return getToken(SnowflakeParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(SnowflakeParser.NUMERIC, 0); }
		public TerminalNode DECIMAL_() { return getToken(SnowflakeParser.DECIMAL_, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public List<NumContext> num() {
			return getRuleContexts(NumContext.class);
		}
		public NumContext num(int i) {
			return getRuleContext(NumContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(SnowflakeParser.COMMA, 0); }
		public TerminalNode FLOAT_() { return getToken(SnowflakeParser.FLOAT_, 0); }
		public TerminalNode FLOAT4() { return getToken(SnowflakeParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(SnowflakeParser.FLOAT8, 0); }
		public TerminalNode DOUBLE() { return getToken(SnowflakeParser.DOUBLE, 0); }
		public TerminalNode DOUBLE_PRECISION() { return getToken(SnowflakeParser.DOUBLE_PRECISION, 0); }
		public TerminalNode REAL_() { return getToken(SnowflakeParser.REAL_, 0); }
		public TerminalNode BOOLEAN() { return getToken(SnowflakeParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(SnowflakeParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(SnowflakeParser.DATETIME, 0); }
		public Data_type_sizeContext data_type_size() {
			return getRuleContext(Data_type_sizeContext.class,0);
		}
		public TerminalNode TIME() { return getToken(SnowflakeParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SnowflakeParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ() { return getToken(SnowflakeParser.TIMESTAMP_LTZ, 0); }
		public TerminalNode TIMESTAMP_NTZ() { return getToken(SnowflakeParser.TIMESTAMP_NTZ, 0); }
		public TerminalNode TIMESTAMP_TZ() { return getToken(SnowflakeParser.TIMESTAMP_TZ, 0); }
		public TerminalNode CHAR() { return getToken(SnowflakeParser.CHAR, 0); }
		public TerminalNode NCHAR() { return getToken(SnowflakeParser.NCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(SnowflakeParser.CHARACTER, 0); }
		public TerminalNode CHAR_VARYING() { return getToken(SnowflakeParser.CHAR_VARYING, 0); }
		public TerminalNode NCHAR_VARYING() { return getToken(SnowflakeParser.NCHAR_VARYING, 0); }
		public TerminalNode NVARCHAR2() { return getToken(SnowflakeParser.NVARCHAR2, 0); }
		public TerminalNode NVARCHAR() { return getToken(SnowflakeParser.NVARCHAR, 0); }
		public TerminalNode STRING_() { return getToken(SnowflakeParser.STRING_, 0); }
		public TerminalNode TEXT() { return getToken(SnowflakeParser.TEXT, 0); }
		public TerminalNode VARCHAR() { return getToken(SnowflakeParser.VARCHAR, 0); }
		public TerminalNode BINARY() { return getToken(SnowflakeParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(SnowflakeParser.VARBINARY, 0); }
		public TerminalNode VARIANT() { return getToken(SnowflakeParser.VARIANT, 0); }
		public TerminalNode OBJECT() { return getToken(SnowflakeParser.OBJECT, 0); }
		public TerminalNode ARRAY() { return getToken(SnowflakeParser.ARRAY, 0); }
		public TerminalNode GEOGRAPHY() { return getToken(SnowflakeParser.GEOGRAPHY, 0); }
		public TerminalNode GEOMETRY() { return getToken(SnowflakeParser.GEOMETRY, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterData_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitData_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitData_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_data_type);
		int _la;
		try {
			setState(11549);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT:
			case BIGINT:
			case BYTEINT:
			case INTEGER:
			case SMALLINT:
			case TINYINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(11493);
				((Data_typeContext)_localctx).int_alias = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INT || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 75563017L) != 0)) ) {
					((Data_typeContext)_localctx).int_alias = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case NUMBER:
			case DECIMAL_:
			case NUMERIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(11494);
				((Data_typeContext)_localctx).number_alias = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NUMBER || _la==DECIMAL_ || _la==NUMERIC) ) {
					((Data_typeContext)_localctx).number_alias = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11503);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1477,_ctx) ) {
				case 1:
					{
					setState(11495);
					match(LR_BRACKET);
					setState(11496);
					num();
					setState(11499);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(11497);
						match(COMMA);
						setState(11498);
						num();
						}
					}

					setState(11501);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case DOUBLE:
			case DOUBLE_PRECISION:
			case FLOAT4:
			case FLOAT8:
			case FLOAT_:
			case REAL_:
				enterOuterAlt(_localctx, 3);
				{
				setState(11505);
				((Data_typeContext)_localctx).float_alias = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 848)) & ~0x3f) == 0 && ((1L << (_la - 848)) & 16415L) != 0)) ) {
					((Data_typeContext)_localctx).float_alias = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 4);
				{
				setState(11506);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(11507);
				match(DATE);
				}
				break;
			case DATETIME:
				enterOuterAlt(_localctx, 6);
				{
				setState(11508);
				match(DATETIME);
				setState(11510);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1478,_ctx) ) {
				case 1:
					{
					setState(11509);
					data_type_size();
					}
					break;
				}
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(11512);
				match(TIME);
				setState(11514);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1479,_ctx) ) {
				case 1:
					{
					setState(11513);
					data_type_size();
					}
					break;
				}
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 8);
				{
				setState(11516);
				match(TIMESTAMP);
				setState(11518);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1480,_ctx) ) {
				case 1:
					{
					setState(11517);
					data_type_size();
					}
					break;
				}
				}
				break;
			case TIMESTAMP_LTZ:
				enterOuterAlt(_localctx, 9);
				{
				setState(11520);
				match(TIMESTAMP_LTZ);
				setState(11522);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1481,_ctx) ) {
				case 1:
					{
					setState(11521);
					data_type_size();
					}
					break;
				}
				}
				break;
			case TIMESTAMP_NTZ:
				enterOuterAlt(_localctx, 10);
				{
				setState(11524);
				match(TIMESTAMP_NTZ);
				setState(11526);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1482,_ctx) ) {
				case 1:
					{
					setState(11525);
					data_type_size();
					}
					break;
				}
				}
				break;
			case TIMESTAMP_TZ:
				enterOuterAlt(_localctx, 11);
				{
				setState(11528);
				match(TIMESTAMP_TZ);
				setState(11530);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1483,_ctx) ) {
				case 1:
					{
					setState(11529);
					data_type_size();
					}
					break;
				}
				}
				break;
			case CHAR:
			case CHARACTER:
			case NCHAR:
				enterOuterAlt(_localctx, 12);
				{
				setState(11532);
				((Data_typeContext)_localctx).char_alias = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHAR || _la==CHARACTER || _la==NCHAR) ) {
					((Data_typeContext)_localctx).char_alias = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11534);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1484,_ctx) ) {
				case 1:
					{
					setState(11533);
					data_type_size();
					}
					break;
				}
				}
				break;
			case CHAR_VARYING:
			case NCHAR_VARYING:
			case NVARCHAR2:
			case NVARCHAR:
			case STRING_:
			case TEXT:
			case VARCHAR:
				enterOuterAlt(_localctx, 13);
				{
				setState(11536);
				((Data_typeContext)_localctx).varchar_alias = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 844)) & ~0x3f) == 0 && ((1L << (_la - 844)) & 20135937L) != 0)) ) {
					((Data_typeContext)_localctx).varchar_alias = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11538);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1485,_ctx) ) {
				case 1:
					{
					setState(11537);
					data_type_size();
					}
					break;
				}
				}
				break;
			case BINARY:
			case VARBINARY:
				enterOuterAlt(_localctx, 14);
				{
				setState(11540);
				((Data_typeContext)_localctx).binary_alias = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==VARBINARY) ) {
					((Data_typeContext)_localctx).binary_alias = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11542);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1486,_ctx) ) {
				case 1:
					{
					setState(11541);
					data_type_size();
					}
					break;
				}
				}
				break;
			case VARIANT:
				enterOuterAlt(_localctx, 15);
				{
				setState(11544);
				match(VARIANT);
				}
				break;
			case OBJECT:
				enterOuterAlt(_localctx, 16);
				{
				setState(11545);
				match(OBJECT);
				}
				break;
			case ARRAY:
				enterOuterAlt(_localctx, 17);
				{
				setState(11546);
				match(ARRAY);
				}
				break;
			case GEOGRAPHY:
				enterOuterAlt(_localctx, 18);
				{
				setState(11547);
				match(GEOGRAPHY);
				}
				break;
			case GEOMETRY:
				enterOuterAlt(_localctx, 19);
				{
				setState(11548);
				match(GEOMETRY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Primitive_expressionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SnowflakeParser.DEFAULT, 0); }
		public TerminalNode NULL_() { return getToken(SnowflakeParser.NULL_, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(SnowflakeParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SnowflakeParser.DOT, i);
		}
		public TerminalNode STAR() { return getToken(SnowflakeParser.STAR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public LiteralContext literal() {
			return getRuleContext(LiteralContext.class,0);
		}
		public TerminalNode ARRAY_Q() { return getToken(SnowflakeParser.ARRAY_Q, 0); }
		public TerminalNode AUTO_Q() { return getToken(SnowflakeParser.AUTO_Q, 0); }
		public TerminalNode AZURE_Q() { return getToken(SnowflakeParser.AZURE_Q, 0); }
		public TerminalNode BOTH_Q() { return getToken(SnowflakeParser.BOTH_Q, 0); }
		public TerminalNode NONE_Q() { return getToken(SnowflakeParser.NONE_Q, 0); }
		public TerminalNode OBJECT_Q() { return getToken(SnowflakeParser.OBJECT_Q, 0); }
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterPrimitive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitPrimitive_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitPrimitive_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Primitive_expressionContext primitive_expression() throws RecognitionException {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_primitive_expression);
		try {
			int _alt;
			setState(11573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1489,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11551);
				match(DEFAULT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11552);
				match(NULL_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11553);
				id_();
				setState(11558);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1488,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(11554);
						match(DOT);
						setState(11555);
						id_();
						}
						} 
					}
					setState(11560);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1488,_ctx);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11561);
				id_();
				setState(11562);
				match(DOT);
				setState(11563);
				match(STAR);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11565);
				full_column_name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(11566);
				literal();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(11567);
				match(ARRAY_Q);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(11568);
				match(AUTO_Q);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(11569);
				match(AZURE_Q);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(11570);
				match(BOTH_Q);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(11571);
				match(NONE_Q);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(11572);
				match(OBJECT_Q);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Order_by_exprContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(SnowflakeParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SnowflakeParser.BY, 0); }
		public Expr_list_sortedContext expr_list_sorted() {
			return getRuleContext(Expr_list_sortedContext.class,0);
		}
		public Order_by_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterOrder_by_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitOrder_by_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitOrder_by_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_exprContext order_by_expr() throws RecognitionException {
		Order_by_exprContext _localctx = new Order_by_exprContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_order_by_expr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11575);
			match(ORDER);
			setState(11576);
			match(BY);
			setState(11577);
			expr_list_sorted();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Asc_descContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(SnowflakeParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SnowflakeParser.DESC, 0); }
		public Asc_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asc_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAsc_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAsc_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAsc_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Asc_descContext asc_desc() throws RecognitionException {
		Asc_descContext _localctx = new Asc_descContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_asc_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11579);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(SnowflakeParser.OVER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Partition_byContext partition_by() {
			return getRuleContext(Partition_byContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Order_by_exprContext order_by_expr() {
			return getRuleContext(Order_by_exprContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_over_clause);
		int _la;
		try {
			setState(11597);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1491,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11581);
				match(OVER);
				setState(11582);
				match(LR_BRACKET);
				setState(11583);
				partition_by();
				setState(11585);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(11584);
					order_by_expr();
					}
				}

				setState(11587);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11589);
				match(OVER);
				setState(11590);
				match(LR_BRACKET);
				setState(11591);
				order_by_expr();
				setState(11592);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11594);
				match(OVER);
				setState(11595);
				match(LR_BRACKET);
				setState(11596);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Function_callContext extends ParserRuleContext {
		public Token to_date;
		public Token length;
		public Round_exprContext round_expr() {
			return getRuleContext(Round_exprContext.class,0);
		}
		public Unary_or_binary_builtin_functionContext unary_or_binary_builtin_function() {
			return getRuleContext(Unary_or_binary_builtin_functionContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Binary_builtin_functionContext binary_builtin_function() {
			return getRuleContext(Binary_builtin_functionContext.class,0);
		}
		public Binary_or_ternary_builtin_functionContext binary_or_ternary_builtin_function() {
			return getRuleContext(Binary_or_ternary_builtin_functionContext.class,0);
		}
		public Ternary_builtin_functionContext ternary_builtin_function() {
			return getRuleContext(Ternary_builtin_functionContext.class,0);
		}
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return getRuleContext(Ranking_windowed_functionContext.class,0);
		}
		public Aggregate_functionContext aggregate_function() {
			return getRuleContext(Aggregate_functionContext.class,0);
		}
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Param_assoc_listContext param_assoc_list() {
			return getRuleContext(Param_assoc_listContext.class,0);
		}
		public List_functionContext list_function() {
			return getRuleContext(List_functionContext.class,0);
		}
		public TerminalNode TO_DATE() { return getToken(SnowflakeParser.TO_DATE, 0); }
		public TerminalNode DATE() { return getToken(SnowflakeParser.DATE, 0); }
		public TerminalNode LENGTH() { return getToken(SnowflakeParser.LENGTH, 0); }
		public TerminalNode LEN() { return getToken(SnowflakeParser.LEN, 0); }
		public TerminalNode TO_BOOLEAN() { return getToken(SnowflakeParser.TO_BOOLEAN, 0); }
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFunction_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFunction_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_function_call);
		int _la;
		try {
			setState(11676);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1495,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11599);
				round_expr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11600);
				unary_or_binary_builtin_function();
				setState(11601);
				match(LR_BRACKET);
				setState(11602);
				expr(0);
				setState(11607);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(11603);
					match(COMMA);
					setState(11604);
					expr(0);
					}
					}
					setState(11609);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(11610);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11612);
				binary_builtin_function();
				setState(11613);
				match(LR_BRACKET);
				setState(11614);
				expr(0);
				setState(11615);
				match(COMMA);
				setState(11616);
				expr(0);
				setState(11617);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11619);
				binary_or_ternary_builtin_function();
				setState(11620);
				match(LR_BRACKET);
				setState(11621);
				expr(0);
				setState(11622);
				match(COMMA);
				setState(11623);
				expr(0);
				setState(11628);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(11624);
					match(COMMA);
					setState(11625);
					expr(0);
					}
					}
					setState(11630);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(11631);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11633);
				ternary_builtin_function();
				setState(11634);
				match(LR_BRACKET);
				setState(11635);
				expr(0);
				setState(11636);
				match(COMMA);
				setState(11637);
				expr(0);
				setState(11638);
				match(COMMA);
				setState(11639);
				expr(0);
				setState(11640);
				match(RR_BRACKET);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(11642);
				ranking_windowed_function();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(11643);
				aggregate_function();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(11644);
				object_name();
				setState(11645);
				match(LR_BRACKET);
				setState(11647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1154122173586186944L) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & -1952310041650266111L) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & -6623932939363678687L) != 0) || ((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & 1765411228149088333L) != 0) || ((((_la - 269)) & ~0x3f) == 0 && ((1L << (_la - 269)) & -8059217646345776633L) != 0) || ((((_la - 333)) & ~0x3f) == 0 && ((1L << (_la - 333)) & 63199777105663109L) != 0) || ((((_la - 402)) & ~0x3f) == 0 && ((1L << (_la - 402)) & 3459798102037250321L) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & 4037195539495538193L) != 0) || ((((_la - 536)) & ~0x3f) == 0 && ((1L << (_la - 536)) & -9199305648682479375L) != 0) || ((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & 791828760629819L) != 0) || ((((_la - 677)) & ~0x3f) == 0 && ((1L << (_la - 677)) & -8231418552441028195L) != 0) || ((((_la - 741)) & ~0x3f) == 0 && ((1L << (_la - 741)) & 32370371808317767L) != 0) || ((((_la - 805)) & ~0x3f) == 0 && ((1L << (_la - 805)) & -6442316949L) != 0) || ((((_la - 869)) & ~0x3f) == 0 && ((1L << (_la - 869)) & 3380697611636099L) != 0)) {
					{
					setState(11646);
					expr_list();
					}
				}

				setState(11649);
				match(RR_BRACKET);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(11651);
				object_name();
				setState(11652);
				match(LR_BRACKET);
				setState(11653);
				param_assoc_list();
				setState(11654);
				match(RR_BRACKET);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(11656);
				list_function();
				setState(11657);
				match(LR_BRACKET);
				setState(11658);
				expr_list();
				setState(11659);
				match(RR_BRACKET);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(11661);
				((Function_callContext)_localctx).to_date = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==TO_DATE || _la==DATE) ) {
					((Function_callContext)_localctx).to_date = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11662);
				match(LR_BRACKET);
				setState(11663);
				expr(0);
				setState(11664);
				match(RR_BRACKET);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(11666);
				((Function_callContext)_localctx).length = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LEN || _la==LENGTH) ) {
					((Function_callContext)_localctx).length = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11667);
				match(LR_BRACKET);
				setState(11668);
				expr(0);
				setState(11669);
				match(RR_BRACKET);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(11671);
				match(TO_BOOLEAN);
				setState(11672);
				match(LR_BRACKET);
				setState(11673);
				expr(0);
				setState(11674);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Param_assoc_listContext extends ParserRuleContext {
		public List<Param_assocContext> param_assoc() {
			return getRuleContexts(Param_assocContext.class);
		}
		public Param_assocContext param_assoc(int i) {
			return getRuleContext(Param_assocContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Param_assoc_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_assoc_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterParam_assoc_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitParam_assoc_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitParam_assoc_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Param_assoc_listContext param_assoc_list() throws RecognitionException {
		Param_assoc_listContext _localctx = new Param_assoc_listContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_param_assoc_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11678);
			param_assoc();
			setState(11683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(11679);
				match(COMMA);
				setState(11680);
				param_assoc();
				}
				}
				setState(11685);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Param_assocContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public TerminalNode ASSOC() { return getToken(SnowflakeParser.ASSOC, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Param_assocContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_assoc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterParam_assoc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitParam_assoc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitParam_assoc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Param_assocContext param_assoc() throws RecognitionException {
		Param_assocContext _localctx = new Param_assocContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_param_assoc);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11686);
			id_();
			setState(11687);
			match(ASSOC);
			setState(11688);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Ignore_or_repect_nullsContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(SnowflakeParser.NULLS, 0); }
		public TerminalNode IGNORE() { return getToken(SnowflakeParser.IGNORE, 0); }
		public TerminalNode RESPECT() { return getToken(SnowflakeParser.RESPECT, 0); }
		public Ignore_or_repect_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignore_or_repect_nulls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterIgnore_or_repect_nulls(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitIgnore_or_repect_nulls(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitIgnore_or_repect_nulls(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ignore_or_repect_nullsContext ignore_or_repect_nulls() throws RecognitionException {
		Ignore_or_repect_nullsContext _localctx = new Ignore_or_repect_nullsContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_ignore_or_repect_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11690);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(11691);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Ranking_windowed_functionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode RANK() { return getToken(SnowflakeParser.RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(SnowflakeParser.DENSE_RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(SnowflakeParser.ROW_NUMBER, 0); }
		public TerminalNode NTILE() { return getToken(SnowflakeParser.NTILE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode LEAD() { return getToken(SnowflakeParser.LEAD, 0); }
		public TerminalNode LAG() { return getToken(SnowflakeParser.LAG, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Ignore_or_repect_nullsContext ignore_or_repect_nulls() {
			return getRuleContext(Ignore_or_repect_nullsContext.class,0);
		}
		public TerminalNode FIRST_VALUE() { return getToken(SnowflakeParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(SnowflakeParser.LAST_VALUE, 0); }
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ranking_windowed_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterRanking_windowed_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitRanking_windowed_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitRanking_windowed_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ranking_windowed_functionContext ranking_windowed_function() throws RecognitionException {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_ranking_windowed_function);
		int _la;
		try {
			setState(11728);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DENSE_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(11693);
				_la = _input.LA(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11694);
				match(LR_BRACKET);
				setState(11695);
				match(RR_BRACKET);
				setState(11696);
				over_clause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(11697);
				match(NTILE);
				setState(11698);
				match(LR_BRACKET);
				setState(11699);
				expr(0);
				setState(11700);
				match(RR_BRACKET);
				setState(11701);
				over_clause();
				}
				break;
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 3);
				{
				setState(11703);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11704);
				match(LR_BRACKET);
				setState(11705);
				expr(0);
				setState(11711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(11706);
					match(COMMA);
					setState(11707);
					expr(0);
					setState(11708);
					match(COMMA);
					setState(11709);
					expr(0);
					}
				}

				setState(11713);
				match(RR_BRACKET);
				setState(11715);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(11714);
					ignore_or_repect_nulls();
					}
				}

				setState(11717);
				over_clause();
				}
				break;
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(11719);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11720);
				match(LR_BRACKET);
				setState(11721);
				expr(0);
				setState(11722);
				match(RR_BRACKET);
				setState(11724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(11723);
					ignore_or_repect_nulls();
					}
				}

				setState(11726);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Aggregate_functionContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public TerminalNode DISTINCT() { return getToken(SnowflakeParser.DISTINCT, 0); }
		public TerminalNode STAR() { return getToken(SnowflakeParser.STAR, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode LISTAGG() { return getToken(SnowflakeParser.LISTAGG, 0); }
		public TerminalNode ARRAY_AGG() { return getToken(SnowflakeParser.ARRAY_AGG, 0); }
		public TerminalNode COMMA() { return getToken(SnowflakeParser.COMMA, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode WITHIN() { return getToken(SnowflakeParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(SnowflakeParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Aggregate_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAggregate_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAggregate_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAggregate_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_functionContext aggregate_function() throws RecognitionException {
		Aggregate_functionContext _localctx = new Aggregate_functionContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_aggregate_function);
		int _la;
		try {
			setState(11762);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1505,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11730);
				id_();
				setState(11731);
				match(LR_BRACKET);
				setState(11733);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTINCT) {
					{
					setState(11732);
					match(DISTINCT);
					}
				}

				setState(11735);
				expr_list();
				setState(11736);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11738);
				id_();
				setState(11739);
				match(LR_BRACKET);
				setState(11740);
				match(STAR);
				setState(11741);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11743);
				_la = _input.LA(1);
				if ( !(_la==ARRAY_AGG || _la==LISTAGG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11744);
				match(LR_BRACKET);
				setState(11746);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DISTINCT) {
					{
					setState(11745);
					match(DISTINCT);
					}
				}

				setState(11748);
				expr(0);
				setState(11751);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(11749);
					match(COMMA);
					setState(11750);
					string();
					}
				}

				setState(11753);
				match(RR_BRACKET);
				setState(11760);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1504,_ctx) ) {
				case 1:
					{
					setState(11754);
					match(WITHIN);
					setState(11755);
					match(GROUP);
					setState(11756);
					match(LR_BRACKET);
					setState(11757);
					order_by_clause();
					setState(11758);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LiteralContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(SnowflakeParser.STRING, 0); }
		public TerminalNode DECIMAL() { return getToken(SnowflakeParser.DECIMAL, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public TerminalNode REAL() { return getToken(SnowflakeParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(SnowflakeParser.FLOAT, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode NULL_() { return getToken(SnowflakeParser.NULL_, 0); }
		public TerminalNode AT_Q() { return getToken(SnowflakeParser.AT_Q, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralContext literal() throws RecognitionException {
		LiteralContext _localctx = new LiteralContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_literal);
		int _la;
		try {
			setState(11776);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1508,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11764);
				match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11766);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(11765);
					sign();
					}
				}

				setState(11768);
				match(DECIMAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11770);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(11769);
					sign();
					}
				}

				setState(11772);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11773);
				true_false();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11774);
				match(NULL_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(11775);
				match(AT_Q);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SignContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(SnowflakeParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SnowflakeParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11778);
			_la = _input.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Full_column_nameContext extends ParserRuleContext {
		public Id_Context db_name;
		public Id_Context schema;
		public Id_Context tab_name;
		public Id_Context col_name;
		public List<TerminalNode> DOT() { return getTokens(SnowflakeParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SnowflakeParser.DOT, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public Full_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFull_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFull_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFull_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_column_nameContext full_column_name() throws RecognitionException {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_full_column_name);
		int _la;
		try {
			setState(11808);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1515,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(11780);
					((Full_column_nameContext)_localctx).db_name = id_();
					}
				}

				setState(11783);
				match(DOT);
				setState(11785);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(11784);
					((Full_column_nameContext)_localctx).schema = id_();
					}
				}

				setState(11787);
				match(DOT);
				setState(11789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(11788);
					((Full_column_nameContext)_localctx).tab_name = id_();
					}
				}

				setState(11791);
				match(DOT);
				setState(11792);
				((Full_column_nameContext)_localctx).col_name = id_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11794);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(11793);
					((Full_column_nameContext)_localctx).schema = id_();
					}
				}

				setState(11796);
				match(DOT);
				setState(11798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(11797);
					((Full_column_nameContext)_localctx).tab_name = id_();
					}
				}

				setState(11800);
				match(DOT);
				setState(11801);
				((Full_column_nameContext)_localctx).col_name = id_();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11803);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0)) {
					{
					setState(11802);
					((Full_column_nameContext)_localctx).tab_name = id_();
					}
				}

				setState(11805);
				match(DOT);
				setState(11806);
				((Full_column_nameContext)_localctx).col_name = id_();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11807);
				((Full_column_nameContext)_localctx).col_name = id_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Bracket_expressionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bracket_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterBracket_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitBracket_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitBracket_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bracket_expressionContext bracket_expression() throws RecognitionException {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_bracket_expression);
		try {
			setState(11818);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1516,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11810);
				match(LR_BRACKET);
				setState(11811);
				expr_list();
				setState(11812);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11814);
				match(LR_BRACKET);
				setState(11815);
				subquery();
				setState(11816);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Case_expressionContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(SnowflakeParser.CASE, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode END() { return getToken(SnowflakeParser.END, 0); }
		public List<Switch_sectionContext> switch_section() {
			return getRuleContexts(Switch_sectionContext.class);
		}
		public Switch_sectionContext switch_section(int i) {
			return getRuleContext(Switch_sectionContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(SnowflakeParser.ELSE, 0); }
		public List<Switch_search_condition_sectionContext> switch_search_condition_section() {
			return getRuleContexts(Switch_search_condition_sectionContext.class);
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return getRuleContext(Switch_search_condition_sectionContext.class,i);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCase_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCase_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCase_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_expressionContext case_expression() throws RecognitionException {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_case_expression);
		int _la;
		try {
			setState(11845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1521,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11820);
				match(CASE);
				setState(11821);
				expr(0);
				setState(11823); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(11822);
					switch_section();
					}
					}
					setState(11825); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(11829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(11827);
					match(ELSE);
					setState(11828);
					expr(0);
					}
				}

				setState(11831);
				match(END);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11833);
				match(CASE);
				setState(11835); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(11834);
					switch_search_condition_section();
					}
					}
					setState(11837); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(11841);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(11839);
					match(ELSE);
					setState(11840);
					expr(0);
					}
				}

				setState(11843);
				match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Switch_search_condition_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(SnowflakeParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(SnowflakeParser.THEN, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_search_condition_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSwitch_search_condition_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSwitch_search_condition_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSwitch_search_condition_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_search_condition_sectionContext switch_search_condition_section() throws RecognitionException {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_switch_search_condition_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11847);
			match(WHEN);
			setState(11848);
			search_condition(0);
			setState(11849);
			match(THEN);
			setState(11850);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Switch_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(SnowflakeParser.WHEN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(SnowflakeParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSwitch_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSwitch_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSwitch_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_sectionContext switch_section() throws RecognitionException {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_switch_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11852);
			match(WHEN);
			setState(11853);
			expr(0);
			setState(11854);
			match(THEN);
			setState(11855);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Query_statementContext extends ParserRuleContext {
		public Select_statement_in_parenthesesContext select_statement_in_parentheses() {
			return getRuleContext(Select_statement_in_parenthesesContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public List<Set_operatorsContext> set_operators() {
			return getRuleContexts(Set_operatorsContext.class);
		}
		public Set_operatorsContext set_operators(int i) {
			return getRuleContext(Set_operatorsContext.class,i);
		}
		public Query_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterQuery_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitQuery_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitQuery_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_statementContext query_statement() throws RecognitionException {
		Query_statementContext _localctx = new Query_statementContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_query_statement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(11858);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1522,_ctx) ) {
			case 1:
				{
				setState(11857);
				with_expression();
				}
				break;
			}
			setState(11860);
			select_statement_in_parentheses(0);
			setState(11864);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1523,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(11861);
					set_operators();
					}
					} 
				}
				setState(11866);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1523,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class With_expressionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public List<Common_table_expressionContext> common_table_expression() {
			return getRuleContexts(Common_table_expressionContext.class);
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return getRuleContext(Common_table_expressionContext.class,i);
		}
		public TerminalNode RECURSIVE() { return getToken(SnowflakeParser.RECURSIVE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterWith_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitWith_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitWith_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_expressionContext with_expression() throws RecognitionException {
		With_expressionContext _localctx = new With_expressionContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_with_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(11867);
			match(WITH);
			setState(11869);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1524,_ctx) ) {
			case 1:
				{
				setState(11868);
				match(RECURSIVE);
				}
				break;
			}
			setState(11871);
			common_table_expression();
			setState(11876);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1525,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(11872);
					match(COMMA);
					setState(11873);
					common_table_expression();
					}
					} 
				}
				setState(11878);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1525,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Common_table_expressionContext extends ParserRuleContext {
		public Column_listContext columns;
		public Id_varContext id_var() {
			return getRuleContext(Id_varContext.class,0);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public Select_statement_in_parenthesesContext select_statement_in_parentheses() {
			return getRuleContext(Select_statement_in_parenthesesContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterCommon_table_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitCommon_table_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitCommon_table_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_table_expressionContext common_table_expression() throws RecognitionException {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_common_table_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11879);
			id_var();
			setState(11884);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(11880);
				match(LR_BRACKET);
				setState(11881);
				((Common_table_expressionContext)_localctx).columns = column_list();
				setState(11882);
				match(RR_BRACKET);
				}
			}

			setState(11886);
			match(AS);
			setState(11887);
			select_statement_in_parentheses(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_statementContext extends ParserRuleContext {
		public Select_clauseContext select_clause() {
			return getRuleContext(Select_clauseContext.class,0);
		}
		public Select_optional_clausesContext select_optional_clauses() {
			return getRuleContext(Select_optional_clausesContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Select_top_clauseContext select_top_clause() {
			return getRuleContext(Select_top_clauseContext.class,0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_select_statement);
		try {
			setState(11897);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1528,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11889);
				select_clause();
				setState(11890);
				select_optional_clauses();
				setState(11892);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1527,_ctx) ) {
				case 1:
					{
					setState(11891);
					limit_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11894);
				select_top_clause();
				setState(11895);
				select_optional_clauses();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Set_operatorsContext extends ParserRuleContext {
		public Select_statement_in_parenthesesContext select_statement_in_parentheses() {
			return getRuleContext(Select_statement_in_parenthesesContext.class,0);
		}
		public TerminalNode UNION() { return getToken(SnowflakeParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(SnowflakeParser.EXCEPT, 0); }
		public TerminalNode MINUS_() { return getToken(SnowflakeParser.MINUS_, 0); }
		public TerminalNode INTERSECT() { return getToken(SnowflakeParser.INTERSECT, 0); }
		public TerminalNode ALL() { return getToken(SnowflakeParser.ALL, 0); }
		public Set_operatorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_operators; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSet_operators(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSet_operators(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSet_operators(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_operatorsContext set_operators() throws RecognitionException {
		Set_operatorsContext _localctx = new Set_operatorsContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_set_operators);
		int _la;
		try {
			setState(11910);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXCEPT:
			case INTERSECT:
			case MINUS_:
			case UNION:
				enterOuterAlt(_localctx, 1);
				{
				setState(11906);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNION:
					{
					setState(11899);
					match(UNION);
					setState(11901);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL) {
						{
						setState(11900);
						match(ALL);
						}
					}

					}
					break;
				case EXCEPT:
					{
					setState(11903);
					match(EXCEPT);
					}
					break;
				case MINUS_:
					{
					setState(11904);
					match(MINUS_);
					}
					break;
				case INTERSECT:
					{
					setState(11905);
					match(INTERSECT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(11908);
				select_statement_in_parentheses(0);
				}
				break;
			case SELECT:
			case WITH:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(11909);
				select_statement_in_parentheses(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_statement_in_parenthesesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Select_statement_in_parenthesesContext select_statement_in_parentheses() {
			return getRuleContext(Select_statement_in_parenthesesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public Set_operatorsContext set_operators() {
			return getRuleContext(Set_operatorsContext.class,0);
		}
		public Select_statement_in_parenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement_in_parentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSelect_statement_in_parentheses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSelect_statement_in_parentheses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSelect_statement_in_parentheses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statement_in_parenthesesContext select_statement_in_parentheses() throws RecognitionException {
		return select_statement_in_parentheses(0);
	}

	private Select_statement_in_parenthesesContext select_statement_in_parentheses(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Select_statement_in_parenthesesContext _localctx = new Select_statement_in_parenthesesContext(_ctx, _parentState);
		Select_statement_in_parenthesesContext _prevctx = _localctx;
		int _startState = 1080;
		enterRecursionRule(_localctx, 1080, RULE_select_statement_in_parentheses, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(11919);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(11913);
				match(LR_BRACKET);
				setState(11914);
				select_statement_in_parentheses(0);
				setState(11915);
				match(RR_BRACKET);
				}
				break;
			case SELECT:
				{
				setState(11917);
				select_statement();
				}
				break;
			case WITH:
				{
				setState(11918);
				with_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(11925);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1533,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Select_statement_in_parenthesesContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_select_statement_in_parentheses);
					setState(11921);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(11922);
					set_operators();
					}
					} 
				}
				setState(11927);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1533,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_optional_clausesContext extends ParserRuleContext {
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Qualify_clauseContext qualify_clause() {
			return getRuleContext(Qualify_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Select_optional_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_optional_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSelect_optional_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSelect_optional_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSelect_optional_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_optional_clausesContext select_optional_clauses() throws RecognitionException {
		Select_optional_clausesContext _localctx = new Select_optional_clausesContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_select_optional_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11929);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1534,_ctx) ) {
			case 1:
				{
				setState(11928);
				into_clause();
				}
				break;
			}
			setState(11932);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1535,_ctx) ) {
			case 1:
				{
				setState(11931);
				from_clause();
				}
				break;
			}
			setState(11935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1536,_ctx) ) {
			case 1:
				{
				setState(11934);
				where_clause();
				}
				break;
			}
			setState(11939);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1537,_ctx) ) {
			case 1:
				{
				setState(11937);
				group_by_clause();
				}
				break;
			case 2:
				{
				setState(11938);
				having_clause();
				}
				break;
			}
			setState(11942);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1538,_ctx) ) {
			case 1:
				{
				setState(11941);
				qualify_clause();
				}
				break;
			}
			setState(11945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1539,_ctx) ) {
			case 1:
				{
				setState(11944);
				order_by_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_clauseContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(SnowflakeParser.SELECT, 0); }
		public Select_list_no_topContext select_list_no_top() {
			return getRuleContext(Select_list_no_topContext.class,0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSelect_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSelect_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSelect_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_clauseContext select_clause() throws RecognitionException {
		Select_clauseContext _localctx = new Select_clauseContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_select_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11947);
			match(SELECT);
			setState(11948);
			select_list_no_top();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_top_clauseContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(SnowflakeParser.SELECT, 0); }
		public Select_list_topContext select_list_top() {
			return getRuleContext(Select_list_topContext.class,0);
		}
		public Select_top_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_top_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSelect_top_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSelect_top_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSelect_top_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_top_clauseContext select_top_clause() throws RecognitionException {
		Select_top_clauseContext _localctx = new Select_top_clauseContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_select_top_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11950);
			match(SELECT);
			setState(11951);
			select_list_top();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_list_no_topContext extends ParserRuleContext {
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public All_distinctContext all_distinct() {
			return getRuleContext(All_distinctContext.class,0);
		}
		public Select_list_no_topContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_no_top; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSelect_list_no_top(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSelect_list_no_top(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSelect_list_no_top(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_list_no_topContext select_list_no_top() throws RecognitionException {
		Select_list_no_topContext _localctx = new Select_list_no_topContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_select_list_no_top);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(11953);
				all_distinct();
				}
			}

			setState(11956);
			select_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_list_topContext extends ParserRuleContext {
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public All_distinctContext all_distinct() {
			return getRuleContext(All_distinctContext.class,0);
		}
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public Select_list_topContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_top; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSelect_list_top(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSelect_list_top(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSelect_list_top(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_list_topContext select_list_top() throws RecognitionException {
		Select_list_topContext _localctx = new Select_list_topContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_select_list_top);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(11958);
				all_distinct();
				}
			}

			setState(11962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(11961);
				top_clause();
				}
			}

			setState(11964);
			select_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_listContext extends ParserRuleContext {
		public List<Select_list_elemContext> select_list_elem() {
			return getRuleContexts(Select_list_elemContext.class);
		}
		public Select_list_elemContext select_list_elem(int i) {
			return getRuleContext(Select_list_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSelect_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSelect_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSelect_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_select_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(11966);
			select_list_elem();
			setState(11971);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1543,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(11967);
					match(COMMA);
					setState(11968);
					select_list_elem();
					}
					} 
				}
				setState(11973);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1543,_ctx);
			}
			setState(11975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1544,_ctx) ) {
			case 1:
				{
				setState(11974);
				match(COMMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Select_list_elemContext extends ParserRuleContext {
		public Column_elemContext column_elem() {
			return getRuleContext(Column_elemContext.class,0);
		}
		public As_aliasContext as_alias() {
			return getRuleContext(As_aliasContext.class,0);
		}
		public Column_elem_starContext column_elem_star() {
			return getRuleContext(Column_elem_starContext.class,0);
		}
		public Exclude_clauseContext exclude_clause() {
			return getRuleContext(Exclude_clauseContext.class,0);
		}
		public Expression_elemContext expression_elem() {
			return getRuleContext(Expression_elemContext.class,0);
		}
		public Select_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSelect_list_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSelect_list_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSelect_list_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_list_elemContext select_list_elem() throws RecognitionException {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_select_list_elem);
		try {
			setState(11989);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1548,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11977);
				column_elem();
				setState(11979);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1545,_ctx) ) {
				case 1:
					{
					setState(11978);
					as_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11981);
				column_elem_star();
				setState(11983);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1546,_ctx) ) {
				case 1:
					{
					setState(11982);
					exclude_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11985);
				expression_elem();
				setState(11987);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1547,_ctx) ) {
				case 1:
					{
					setState(11986);
					as_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_elem_starContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(SnowflakeParser.STAR, 0); }
		public Object_name_or_aliasContext object_name_or_alias() {
			return getRuleContext(Object_name_or_aliasContext.class,0);
		}
		public Column_elem_starContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_elem_star; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterColumn_elem_star(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitColumn_elem_star(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitColumn_elem_star(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_elem_starContext column_elem_star() throws RecognitionException {
		Column_elem_starContext _localctx = new Column_elem_starContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_column_elem_star);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152996273679344320L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & -6214913557520186653L) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & 360293283610001457L) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & -2305525862386105719L) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & -2767171104816364291L) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & 36204788743930049L) != 0) || ((((_la - 445)) & ~0x3f) == 0 && ((1L << (_la - 445)) & -215861536499826575L) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & 373880715035410879L) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & 5764607599706199553L) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & 1774645302335116417L) != 0) || ((((_la - 707)) & ~0x3f) == 0 && ((1L << (_la - 707)) & 254247900044886465L) != 0) || ((((_la - 775)) & ~0x3f) == 0 && ((1L << (_la - 775)) & -6917525889091846101L) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & 1856499613695L) != 0) || _la==DOLLAR) {
				{
				setState(11991);
				object_name_or_alias();
				}
			}

			setState(11994);
			match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_elemContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Object_name_or_aliasContext object_name_or_alias() {
			return getRuleContext(Object_name_or_aliasContext.class,0);
		}
		public TerminalNode DOLLAR() { return getToken(SnowflakeParser.DOLLAR, 0); }
		public Column_positionContext column_position() {
			return getRuleContext(Column_positionContext.class,0);
		}
		public Column_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterColumn_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitColumn_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitColumn_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_elemContext column_elem() throws RecognitionException {
		Column_elemContext _localctx = new Column_elemContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_column_elem);
		try {
			setState(12005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1552,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11997);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1550,_ctx) ) {
				case 1:
					{
					setState(11996);
					object_name_or_alias();
					}
					break;
				}
				setState(11999);
				column_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(12001);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1551,_ctx) ) {
				case 1:
					{
					setState(12000);
					object_name_or_alias();
					}
					break;
				}
				setState(12003);
				match(DOLLAR);
				setState(12004);
				column_position();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_name_or_aliasContext extends ParserRuleContext {
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode DOT() { return getToken(SnowflakeParser.DOT, 0); }
		public Object_name_or_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_name_or_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterObject_name_or_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitObject_name_or_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitObject_name_or_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_name_or_aliasContext object_name_or_alias() throws RecognitionException {
		Object_name_or_aliasContext _localctx = new Object_name_or_aliasContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_object_name_or_alias);
		try {
			setState(12011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1553,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(12007);
				object_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(12008);
				alias();
				setState(12009);
				match(DOT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Exclude_clauseContext extends ParserRuleContext {
		public TerminalNode EXCLUDE() { return getToken(SnowflakeParser.EXCLUDE, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Column_list_in_parenthesesContext column_list_in_parentheses() {
			return getRuleContext(Column_list_in_parenthesesContext.class,0);
		}
		public Exclude_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclude_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterExclude_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitExclude_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitExclude_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exclude_clauseContext exclude_clause() throws RecognitionException {
		Exclude_clauseContext _localctx = new Exclude_clauseContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_exclude_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12013);
			match(EXCLUDE);
			setState(12016);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCOUNT:
			case ACCOUNTADMIN:
			case ACTION:
			case AES:
			case ALERT:
			case ALERTS:
			case ALLOW_OVERLAPPING_EXECUTION:
			case ANY_VALUE:
			case ARRAY_AGG:
			case AT_KEYWORD:
			case AVG:
			case CAST:
			case CEIL:
			case CHAR:
			case CHARACTER:
			case CHARINDEX:
			case CHECKSUM:
			case CLUSTER:
			case COLLATE:
			case COLLECTION:
			case COMMENT:
			case CONDITION:
			case CONFIGURATION:
			case CONTAINS:
			case COPY_OPTIONS_:
			case COUNT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case DATA:
			case DATABASES:
			case DATEADD:
			case DATEDIFF:
			case DATE_PART:
			case DAYS:
			case DEFINITION:
			case DELTA:
			case DIRECTION:
			case DISPLAY_NAME:
			case DOWNSTREAM:
			case DYNAMIC:
			case EDITION:
			case EMAIL:
			case EMPTY_:
			case ENABLED:
			case EQUAL_NULL:
			case ERROR_INTEGRATION:
			case EVENT:
			case EXCHANGE:
			case EXPIRY_DATE:
			case EXPR:
			case FILE:
			case FILES:
			case FIRST_NAME:
			case FIRST_VALUE:
			case FLATTEN:
			case FREQUENCY:
			case FUNCTION:
			case GET:
			case GETDATE:
			case GLOBAL:
			case HIGH:
			case HOURS:
			case IDENTIFIER:
			case IDENTITY:
			case IF:
			case IFF:
			case IFNULL:
			case ILIKE:
			case IMPORTED:
			case INCREMENTAL:
			case INDEX:
			case INITIALIZE:
			case INPUT:
			case INT:
			case INTEGRATIONS:
			case INTERVAL:
			case JAVASCRIPT:
			case JOIN:
			case KEY:
			case LAG:
			case LANGUAGE:
			case LAST_NAME:
			case LAST_QUERY_ID:
			case LEAD:
			case LEFT:
			case LENGTH:
			case LIKE:
			case LOCAL:
			case LOW:
			case LOWER:
			case MAX_CONCURRENCY_LEVEL:
			case MEDIUM:
			case MIN:
			case MODE:
			case NAME:
			case NETWORK:
			case NOORDER:
			case NULLIF:
			case NUMBER:
			case NVL:
			case NVL2:
			case OBJECT:
			case OFFSET:
			case OLD:
			case ON_CREATE:
			case ON_ERROR:
			case ON_SCHEDULE:
			case OPTION:
			case ORDER:
			case ORGADMIN:
			case OUTBOUND:
			case OUTER:
			case OWNER:
			case PARTITION:
			case PASSWORD:
			case PASSWORD_HISTORY:
			case PASSWORD_LOCKOUT_TIME_MINS:
			case PASSWORD_MAX_AGE_DAYS:
			case PASSWORD_MAX_LENGTH:
			case PASSWORD_MAX_RETRIES:
			case PASSWORD_MIN_AGE_DAYS:
			case PASSWORD_MIN_LENGTH:
			case PASSWORD_MIN_LOWER_CASE_CHARS:
			case PASSWORD_MIN_NUMERIC_CHARS:
			case PASSWORD_MIN_SPECIAL_CHARS:
			case PASSWORD_MIN_UPPER_CASE_CHARS:
			case PATH_:
			case PATTERN:
			case POLICIES:
			case POLICY:
			case PORT:
			case PRIORITY:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PUBLIC:
			case QUARTER:
			case QUERY:
			case QUERY_TAG:
			case RANK:
			case RECURSIVE:
			case REFERENCES:
			case REFRESH_MODE:
			case REGION:
			case REPLACE:
			case RESOURCE:
			case RESOURCES:
			case RESPECT:
			case RESTRICT:
			case RESULT:
			case RIGHT:
			case ROLE:
			case ROLES:
			case ROLLUP:
			case ROUND:
			case ROUNDING_MODE:
			case ROW_NUMBER:
			case SCALE:
			case SCHEDULE:
			case SCHEMAS:
			case SECURITYADMIN:
			case SEQUENCE:
			case SESSION:
			case SOURCE:
			case SPLIT:
			case SPLIT_PART:
			case SPLIT_TO_TABLE:
			case STAGE:
			case STAGES:
			case START_DATE:
			case STATE:
			case STATS:
			case STATUS:
			case STREAMS:
			case SUBSTR:
			case SUBSTRING:
			case SUM:
			case SYSADMIN:
			case TABLES:
			case TAG:
			case TAGS:
			case TARGET_LAG:
			case TASKS:
			case TEMP:
			case TIME:
			case TIMEADD:
			case TIMEDIFF:
			case TIMESTAMP:
			case TIMESTAMP_LTZ:
			case TIMESTAMP_NTZ:
			case TIMESTAMP_TZ:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIMEZONE:
			case TO_BOOLEAN:
			case TO_DATE:
			case TO_TIMESTAMP:
			case TRUNC:
			case TRUNCATE:
			case TRY_CAST:
			case TYPE:
			case UPPER:
			case URL:
			case USER:
			case USERADMIN:
			case USERS:
			case VALUE:
			case VALUES:
			case VERSION:
			case VIEWS:
			case VISIBILITY:
			case WAREHOUSE:
			case WAREHOUSES:
			case WAREHOUSE_TYPE:
			case YEAR:
			case ARRAY:
			case BIGINT:
			case BINARY:
			case BOOLEAN:
			case BYTEINT:
			case CHAR_VARYING:
			case DATE:
			case DATETIME:
			case DECIMAL_:
			case DOUBLE:
			case DOUBLE_PRECISION:
			case FLOAT4:
			case FLOAT8:
			case FLOAT_:
			case FLOOR:
			case GEOGRAPHY:
			case GEOMETRY:
			case INTEGER:
			case NCHAR:
			case NCHAR_VARYING:
			case NUMERIC:
			case NVARCHAR2:
			case NVARCHAR:
			case REAL_:
			case SMALLINT:
			case STRING_:
			case TEXT:
			case TINYINT:
			case VARBINARY:
			case VARCHAR:
			case VARIANT:
			case DOUBLE_QUOTE_ID:
			case DOUBLE_QUOTE_BLANK:
			case ID:
			case ID2:
				{
				setState(12014);
				column_name();
				}
				break;
			case LR_BRACKET:
				{
				setState(12015);
				column_list_in_parentheses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class As_aliasContext extends ParserRuleContext {
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(SnowflakeParser.AS, 0); }
		public As_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAs_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAs_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAs_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final As_aliasContext as_alias() throws RecognitionException {
		As_aliasContext _localctx = new As_aliasContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_as_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12019);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(12018);
				match(AS);
				}
			}

			setState(12021);
			alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expression_elemContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public Expression_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterExpression_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitExpression_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitExpression_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_elemContext expression_elem() throws RecognitionException {
		Expression_elemContext _localctx = new Expression_elemContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_expression_elem);
		try {
			setState(12025);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1556,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(12023);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(12024);
				predicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_positionContext extends ParserRuleContext {
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public Column_positionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_position; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterColumn_position(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitColumn_position(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitColumn_position(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_positionContext column_position() throws RecognitionException {
		Column_positionContext _localctx = new Column_positionContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_column_position);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12027);
			num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class All_distinctContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SnowflakeParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SnowflakeParser.DISTINCT, 0); }
		public All_distinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAll_distinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAll_distinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAll_distinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_distinctContext all_distinct() throws RecognitionException {
		All_distinctContext _localctx = new All_distinctContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_all_distinct);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12029);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Top_clauseContext extends ParserRuleContext {
		public TerminalNode TOP() { return getToken(SnowflakeParser.TOP, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public Top_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTop_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTop_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTop_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Top_clauseContext top_clause() throws RecognitionException {
		Top_clauseContext _localctx = new Top_clauseContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_top_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12031);
			match(TOP);
			setState(12032);
			num();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(SnowflakeParser.INTO, 0); }
		public Var_listContext var_list() {
			return getRuleContext(Var_listContext.class,0);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_into_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12034);
			match(INTO);
			setState(12035);
			var_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Var_listContext extends ParserRuleContext {
		public List<VarContext> var() {
			return getRuleContexts(VarContext.class);
		}
		public VarContext var(int i) {
			return getRuleContext(VarContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Var_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterVar_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitVar_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitVar_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Var_listContext var_list() throws RecognitionException {
		Var_listContext _localctx = new Var_listContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_var_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(12037);
			var();
			setState(12042);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1557,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(12038);
					match(COMMA);
					setState(12039);
					var();
					}
					} 
				}
				setState(12044);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1557,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VarContext extends ParserRuleContext {
		public TerminalNode COLON() { return getToken(SnowflakeParser.COLON, 0); }
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public VarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterVar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitVar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitVar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarContext var() throws RecognitionException {
		VarContext _localctx = new VarContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_var);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12045);
			match(COLON);
			setState(12046);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(SnowflakeParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12048);
			match(FROM);
			setState(12049);
			table_sources();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_sourcesContext extends ParserRuleContext {
		public List<Table_sourceContext> table_source() {
			return getRuleContexts(Table_sourceContext.class);
		}
		public Table_sourceContext table_source(int i) {
			return getRuleContext(Table_sourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_sources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTable_sources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTable_sources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTable_sources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_sourcesContext table_sources() throws RecognitionException {
		Table_sourcesContext _localctx = new Table_sourcesContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_table_sources);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(12051);
			table_source();
			setState(12056);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1558,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(12052);
					match(COMMA);
					setState(12053);
					table_source();
					}
					} 
				}
				setState(12058);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1558,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_sourceContext extends ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return getRuleContext(Table_source_item_joinedContext.class,0);
		}
		public Table_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTable_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTable_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTable_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_sourceContext table_source() throws RecognitionException {
		Table_sourceContext _localctx = new Table_sourceContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_table_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12059);
			table_source_item_joined();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Table_source_item_joinedContext extends ParserRuleContext {
		public Object_refContext object_ref() {
			return getRuleContext(Object_refContext.class,0);
		}
		public List<Join_clauseContext> join_clause() {
			return getRuleContexts(Join_clauseContext.class);
		}
		public Join_clauseContext join_clause(int i) {
			return getRuleContext(Join_clauseContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Table_source_item_joinedContext table_source_item_joined() {
			return getRuleContext(Table_source_item_joinedContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item_joined; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterTable_source_item_joined(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitTable_source_item_joined(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitTable_source_item_joined(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_source_item_joinedContext table_source_item_joined() throws RecognitionException {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_table_source_item_joined);
		try {
			int _alt;
			setState(12077);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1561,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(12061);
				object_ref();
				setState(12065);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1559,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(12062);
						join_clause();
						}
						} 
					}
					setState(12067);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1559,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(12068);
				match(LR_BRACKET);
				setState(12069);
				table_source_item_joined();
				setState(12070);
				match(RR_BRACKET);
				setState(12074);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1560,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(12071);
						join_clause();
						}
						} 
					}
					setState(12076);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1560,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Object_refContext extends ParserRuleContext {
		public Object_nameContext object_name() {
			return getRuleContext(Object_nameContext.class,0);
		}
		public At_beforeContext at_before() {
			return getRuleContext(At_beforeContext.class,0);
		}
		public ChangesContext changes() {
			return getRuleContext(ChangesContext.class,0);
		}
		public Match_recognizeContext match_recognize() {
			return getRuleContext(Match_recognizeContext.class,0);
		}
		public Pivot_unpivotContext pivot_unpivot() {
			return getRuleContext(Pivot_unpivotContext.class,0);
		}
		public As_aliasContext as_alias() {
			return getRuleContext(As_aliasContext.class,0);
		}
		public Column_list_in_parenthesesContext column_list_in_parentheses() {
			return getRuleContext(Column_list_in_parenthesesContext.class,0);
		}
		public SampleContext sample() {
			return getRuleContext(SampleContext.class,0);
		}
		public TerminalNode START() { return getToken(SnowflakeParser.START, 0); }
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode CONNECT() { return getToken(SnowflakeParser.CONNECT, 0); }
		public TerminalNode BY() { return getToken(SnowflakeParser.BY, 0); }
		public Prior_listContext prior_list() {
			return getRuleContext(Prior_listContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SnowflakeParser.TABLE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Values_tableContext values_table() {
			return getRuleContext(Values_tableContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(SnowflakeParser.LATERAL, 0); }
		public Flatten_tableContext flatten_table() {
			return getRuleContext(Flatten_tableContext.class,0);
		}
		public Splited_tableContext splited_table() {
			return getRuleContext(Splited_tableContext.class,0);
		}
		public Object_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterObject_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitObject_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitObject_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_refContext object_ref() throws RecognitionException {
		Object_refContext _localctx = new Object_refContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_object_ref);
		int _la;
		try {
			setState(12150);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1580,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(12079);
				object_name();
				setState(12081);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1562,_ctx) ) {
				case 1:
					{
					setState(12080);
					at_before();
					}
					break;
				}
				setState(12084);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1563,_ctx) ) {
				case 1:
					{
					setState(12083);
					changes();
					}
					break;
				}
				setState(12087);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1564,_ctx) ) {
				case 1:
					{
					setState(12086);
					match_recognize();
					}
					break;
				}
				setState(12090);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1565,_ctx) ) {
				case 1:
					{
					setState(12089);
					pivot_unpivot();
					}
					break;
				}
				setState(12093);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1566,_ctx) ) {
				case 1:
					{
					setState(12092);
					as_alias();
					}
					break;
				}
				setState(12096);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1567,_ctx) ) {
				case 1:
					{
					setState(12095);
					column_list_in_parentheses();
					}
					break;
				}
				setState(12099);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1568,_ctx) ) {
				case 1:
					{
					setState(12098);
					sample();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(12101);
				object_name();
				setState(12102);
				match(START);
				setState(12103);
				match(WITH);
				setState(12104);
				predicate();
				setState(12105);
				match(CONNECT);
				setState(12106);
				match(BY);
				setState(12108);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1569,_ctx) ) {
				case 1:
					{
					setState(12107);
					prior_list();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(12110);
				match(TABLE);
				setState(12111);
				match(LR_BRACKET);
				setState(12112);
				function_call();
				setState(12113);
				match(RR_BRACKET);
				setState(12115);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1570,_ctx) ) {
				case 1:
					{
					setState(12114);
					pivot_unpivot();
					}
					break;
				}
				setState(12118);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1571,_ctx) ) {
				case 1:
					{
					setState(12117);
					as_alias();
					}
					break;
				}
				setState(12121);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1572,_ctx) ) {
				case 1:
					{
					setState(12120);
					sample();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(12123);
				values_table();
				setState(12125);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1573,_ctx) ) {
				case 1:
					{
					setState(12124);
					sample();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(12128);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(12127);
					match(LATERAL);
					}
				}

				setState(12130);
				match(LR_BRACKET);
				setState(12131);
				subquery();
				setState(12132);
				match(RR_BRACKET);
				setState(12134);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1575,_ctx) ) {
				case 1:
					{
					setState(12133);
					pivot_unpivot();
					}
					break;
				}
				setState(12137);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1576,_ctx) ) {
				case 1:
					{
					setState(12136);
					as_alias();
					}
					break;
				}
				setState(12140);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1577,_ctx) ) {
				case 1:
					{
					setState(12139);
					column_list_in_parentheses();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(12142);
				match(LATERAL);
				setState(12145);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FLATTEN:
					{
					setState(12143);
					flatten_table();
					}
					break;
				case SPLIT_TO_TABLE:
					{
					setState(12144);
					splited_table();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(12148);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1579,_ctx) ) {
				case 1:
					{
					setState(12147);
					as_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Flatten_table_optionContext extends ParserRuleContext {
		public TerminalNode PATH_() { return getToken(SnowflakeParser.PATH_, 0); }
		public TerminalNode ASSOC() { return getToken(SnowflakeParser.ASSOC, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode OUTER() { return getToken(SnowflakeParser.OUTER, 0); }
		public True_falseContext true_false() {
			return getRuleContext(True_falseContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(SnowflakeParser.RECURSIVE, 0); }
		public TerminalNode MODE() { return getToken(SnowflakeParser.MODE, 0); }
		public TerminalNode ARRAY_Q() { return getToken(SnowflakeParser.ARRAY_Q, 0); }
		public TerminalNode OBJECT_Q() { return getToken(SnowflakeParser.OBJECT_Q, 0); }
		public TerminalNode BOTH_Q() { return getToken(SnowflakeParser.BOTH_Q, 0); }
		public Flatten_table_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flatten_table_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFlatten_table_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFlatten_table_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFlatten_table_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Flatten_table_optionContext flatten_table_option() throws RecognitionException {
		Flatten_table_optionContext _localctx = new Flatten_table_optionContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_flatten_table_option);
		int _la;
		try {
			setState(12164);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PATH_:
				enterOuterAlt(_localctx, 1);
				{
				setState(12152);
				match(PATH_);
				setState(12153);
				match(ASSOC);
				setState(12154);
				string();
				}
				break;
			case OUTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(12155);
				match(OUTER);
				setState(12156);
				match(ASSOC);
				setState(12157);
				true_false();
				}
				break;
			case RECURSIVE:
				enterOuterAlt(_localctx, 3);
				{
				setState(12158);
				match(RECURSIVE);
				setState(12159);
				match(ASSOC);
				setState(12160);
				true_false();
				}
				break;
			case MODE:
				enterOuterAlt(_localctx, 4);
				{
				setState(12161);
				match(MODE);
				setState(12162);
				match(ASSOC);
				setState(12163);
				_la = _input.LA(1);
				if ( !(_la==BOTH_Q || _la==OBJECT_Q || _la==ARRAY_Q) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Flatten_tableContext extends ParserRuleContext {
		public TerminalNode FLATTEN() { return getToken(SnowflakeParser.FLATTEN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode INPUT() { return getToken(SnowflakeParser.INPUT, 0); }
		public TerminalNode ASSOC() { return getToken(SnowflakeParser.ASSOC, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public List<Flatten_table_optionContext> flatten_table_option() {
			return getRuleContexts(Flatten_table_optionContext.class);
		}
		public Flatten_table_optionContext flatten_table_option(int i) {
			return getRuleContext(Flatten_table_optionContext.class,i);
		}
		public Flatten_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flatten_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFlatten_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFlatten_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFlatten_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Flatten_tableContext flatten_table() throws RecognitionException {
		Flatten_tableContext _localctx = new Flatten_tableContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_flatten_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12166);
			match(FLATTEN);
			setState(12167);
			match(LR_BRACKET);
			setState(12170);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1582,_ctx) ) {
			case 1:
				{
				setState(12168);
				match(INPUT);
				setState(12169);
				match(ASSOC);
				}
				break;
			}
			setState(12172);
			expr(0);
			setState(12177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(12173);
				match(COMMA);
				setState(12174);
				flatten_table_option();
				}
				}
				setState(12179);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(12180);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Splited_tableContext extends ParserRuleContext {
		public TerminalNode SPLIT_TO_TABLE() { return getToken(SnowflakeParser.SPLIT_TO_TABLE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(SnowflakeParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Splited_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_splited_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSplited_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSplited_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSplited_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Splited_tableContext splited_table() throws RecognitionException {
		Splited_tableContext _localctx = new Splited_tableContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_splited_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12182);
			match(SPLIT_TO_TABLE);
			setState(12183);
			match(LR_BRACKET);
			setState(12184);
			expr(0);
			setState(12185);
			match(COMMA);
			setState(12186);
			expr(0);
			setState(12187);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Prior_listContext extends ParserRuleContext {
		public List<Prior_itemContext> prior_item() {
			return getRuleContexts(Prior_itemContext.class);
		}
		public Prior_itemContext prior_item(int i) {
			return getRuleContext(Prior_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Prior_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prior_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterPrior_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitPrior_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitPrior_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prior_listContext prior_list() throws RecognitionException {
		Prior_listContext _localctx = new Prior_listContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_prior_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(12189);
			prior_item();
			setState(12194);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1584,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(12190);
					match(COMMA);
					setState(12191);
					prior_item();
					}
					} 
				}
				setState(12196);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1584,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Prior_itemContext extends ParserRuleContext {
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public List<TerminalNode> PRIOR() { return getTokens(SnowflakeParser.PRIOR); }
		public TerminalNode PRIOR(int i) {
			return getToken(SnowflakeParser.PRIOR, i);
		}
		public Prior_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prior_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterPrior_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitPrior_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitPrior_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prior_itemContext prior_item() throws RecognitionException {
		Prior_itemContext _localctx = new Prior_itemContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_prior_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12198);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIOR) {
				{
				setState(12197);
				match(PRIOR);
				}
			}

			setState(12200);
			id_();
			setState(12201);
			match(EQ);
			setState(12203);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIOR) {
				{
				setState(12202);
				match(PRIOR);
				}
			}

			setState(12205);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Outer_joinContext extends ParserRuleContext {
		public TerminalNode LEFT() { return getToken(SnowflakeParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SnowflakeParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(SnowflakeParser.FULL, 0); }
		public TerminalNode OUTER() { return getToken(SnowflakeParser.OUTER, 0); }
		public Outer_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterOuter_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitOuter_join(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitOuter_join(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_joinContext outer_join() throws RecognitionException {
		Outer_joinContext _localctx = new Outer_joinContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_outer_join);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12207);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(12209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(12208);
				match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_typeContext extends ParserRuleContext {
		public TerminalNode INNER() { return getToken(SnowflakeParser.INNER, 0); }
		public Outer_joinContext outer_join() {
			return getRuleContext(Outer_joinContext.class,0);
		}
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterJoin_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitJoin_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitJoin_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_join_type);
		try {
			setState(12213);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(12211);
				match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(12212);
				outer_join();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(SnowflakeParser.JOIN, 0); }
		public Object_refContext object_ref() {
			return getRuleContext(Object_refContext.class,0);
		}
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public TerminalNode ON() { return getToken(SnowflakeParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode USING() { return getToken(SnowflakeParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode NATURAL() { return getToken(SnowflakeParser.NATURAL, 0); }
		public Outer_joinContext outer_join() {
			return getRuleContext(Outer_joinContext.class,0);
		}
		public TerminalNode CROSS() { return getToken(SnowflakeParser.CROSS, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitJoin_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitJoin_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_join_clause);
		int _la;
		try {
			setState(12242);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FULL:
			case INNER:
			case JOIN:
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 1);
				{
				setState(12216);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL || _la==INNER || _la==LEFT || _la==RIGHT) {
					{
					setState(12215);
					join_type();
					}
				}

				setState(12218);
				match(JOIN);
				setState(12219);
				object_ref();
				setState(12231);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1592,_ctx) ) {
				case 1:
					{
					setState(12222);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1590,_ctx) ) {
					case 1:
						{
						setState(12220);
						match(ON);
						setState(12221);
						search_condition(0);
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(12229);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1591,_ctx) ) {
					case 1:
						{
						setState(12224);
						match(USING);
						setState(12225);
						match(LR_BRACKET);
						setState(12226);
						column_list();
						setState(12227);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(12233);
				match(NATURAL);
				setState(12235);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL || _la==LEFT || _la==RIGHT) {
					{
					setState(12234);
					outer_join();
					}
				}

				setState(12237);
				match(JOIN);
				setState(12238);
				object_ref();
				}
				break;
			case CROSS:
				enterOuterAlt(_localctx, 3);
				{
				setState(12239);
				match(CROSS);
				setState(12240);
				match(JOIN);
				setState(12241);
				object_ref();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class At_beforeContext extends ParserRuleContext {
		public TerminalNode AT_KEYWORD() { return getToken(SnowflakeParser.AT_KEYWORD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SnowflakeParser.TIMESTAMP, 0); }
		public TerminalNode ASSOC() { return getToken(SnowflakeParser.ASSOC, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode OFFSET() { return getToken(SnowflakeParser.OFFSET, 0); }
		public TerminalNode STATEMENT() { return getToken(SnowflakeParser.STATEMENT, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public TerminalNode STREAM() { return getToken(SnowflakeParser.STREAM, 0); }
		public TerminalNode BEFORE() { return getToken(SnowflakeParser.BEFORE, 0); }
		public At_beforeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_at_before; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAt_before(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAt_before(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAt_before(this);
			else return visitor.visitChildren(this);
		}
	}

	public final At_beforeContext at_before() throws RecognitionException {
		At_beforeContext _localctx = new At_beforeContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_at_before);
		try {
			setState(12269);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AT_KEYWORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(12244);
				match(AT_KEYWORD);
				setState(12245);
				match(LR_BRACKET);
				setState(12258);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TIMESTAMP:
					{
					setState(12246);
					match(TIMESTAMP);
					setState(12247);
					match(ASSOC);
					setState(12248);
					expr(0);
					}
					break;
				case OFFSET:
					{
					setState(12249);
					match(OFFSET);
					setState(12250);
					match(ASSOC);
					setState(12251);
					expr(0);
					}
					break;
				case STATEMENT:
					{
					setState(12252);
					match(STATEMENT);
					setState(12253);
					match(ASSOC);
					setState(12254);
					string();
					}
					break;
				case STREAM:
					{
					setState(12255);
					match(STREAM);
					setState(12256);
					match(ASSOC);
					setState(12257);
					string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(12260);
				match(RR_BRACKET);
				}
				break;
			case BEFORE:
				enterOuterAlt(_localctx, 2);
				{
				setState(12262);
				match(BEFORE);
				setState(12263);
				match(LR_BRACKET);
				setState(12264);
				match(STATEMENT);
				setState(12265);
				match(ASSOC);
				setState(12266);
				string();
				setState(12267);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndContext extends ParserRuleContext {
		public TerminalNode END() { return getToken(SnowflakeParser.END, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SnowflakeParser.TIMESTAMP, 0); }
		public TerminalNode ASSOC() { return getToken(SnowflakeParser.ASSOC, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode OFFSET() { return getToken(SnowflakeParser.OFFSET, 0); }
		public TerminalNode STATEMENT() { return getToken(SnowflakeParser.STATEMENT, 0); }
		public StringContext string() {
			return getRuleContext(StringContext.class,0);
		}
		public EndContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterEnd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitEnd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitEnd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EndContext end() throws RecognitionException {
		EndContext _localctx = new EndContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_end);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12271);
			match(END);
			setState(12272);
			match(LR_BRACKET);
			setState(12282);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				{
				setState(12273);
				match(TIMESTAMP);
				setState(12274);
				match(ASSOC);
				setState(12275);
				expr(0);
				}
				break;
			case OFFSET:
				{
				setState(12276);
				match(OFFSET);
				setState(12277);
				match(ASSOC);
				setState(12278);
				expr(0);
				}
				break;
			case STATEMENT:
				{
				setState(12279);
				match(STATEMENT);
				setState(12280);
				match(ASSOC);
				setState(12281);
				string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(12284);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ChangesContext extends ParserRuleContext {
		public TerminalNode CHANGES() { return getToken(SnowflakeParser.CHANGES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode INFORMATION() { return getToken(SnowflakeParser.INFORMATION, 0); }
		public TerminalNode ASSOC() { return getToken(SnowflakeParser.ASSOC, 0); }
		public Default_append_onlyContext default_append_only() {
			return getRuleContext(Default_append_onlyContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public At_beforeContext at_before() {
			return getRuleContext(At_beforeContext.class,0);
		}
		public EndContext end() {
			return getRuleContext(EndContext.class,0);
		}
		public ChangesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_changes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterChanges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitChanges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitChanges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChangesContext changes() throws RecognitionException {
		ChangesContext _localctx = new ChangesContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_changes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12286);
			match(CHANGES);
			setState(12287);
			match(LR_BRACKET);
			setState(12288);
			match(INFORMATION);
			setState(12289);
			match(ASSOC);
			setState(12290);
			default_append_only();
			setState(12291);
			match(RR_BRACKET);
			setState(12292);
			at_before();
			setState(12294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1598,_ctx) ) {
			case 1:
				{
				setState(12293);
				end();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Default_append_onlyContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SnowflakeParser.DEFAULT, 0); }
		public TerminalNode APPEND_ONLY() { return getToken(SnowflakeParser.APPEND_ONLY, 0); }
		public Default_append_onlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_append_only; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDefault_append_only(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDefault_append_only(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDefault_append_only(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_append_onlyContext default_append_only() throws RecognitionException {
		Default_append_onlyContext _localctx = new Default_append_onlyContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_default_append_only);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12296);
			_la = _input.LA(1);
			if ( !(_la==APPEND_ONLY || _la==DEFAULT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Partition_byContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(SnowflakeParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(SnowflakeParser.BY, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public Partition_byContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterPartition_by(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitPartition_by(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitPartition_by(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_byContext partition_by() throws RecognitionException {
		Partition_byContext _localctx = new Partition_byContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_partition_by);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12298);
			match(PARTITION);
			setState(12299);
			match(BY);
			setState(12300);
			expr_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AliasContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12302);
			id_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expr_alias_listContext extends ParserRuleContext {
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<AliasContext> alias() {
			return getRuleContexts(AliasContext.class);
		}
		public AliasContext alias(int i) {
			return getRuleContext(AliasContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(SnowflakeParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(SnowflakeParser.AS, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Expr_alias_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_alias_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterExpr_alias_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitExpr_alias_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitExpr_alias_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_alias_listContext expr_alias_list() throws RecognitionException {
		Expr_alias_listContext _localctx = new Expr_alias_listContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_expr_alias_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12304);
			expr(0);
			setState(12306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(12305);
				match(AS);
				}
			}

			setState(12308);
			alias();
			setState(12318);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(12309);
				match(COMMA);
				setState(12310);
				expr(0);
				setState(12312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(12311);
					match(AS);
					}
				}

				setState(12314);
				alias();
				}
				}
				setState(12320);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MeasuresContext extends ParserRuleContext {
		public TerminalNode MEASURES() { return getToken(SnowflakeParser.MEASURES, 0); }
		public Expr_alias_listContext expr_alias_list() {
			return getRuleContext(Expr_alias_listContext.class,0);
		}
		public MeasuresContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_measures; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterMeasures(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitMeasures(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitMeasures(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MeasuresContext measures() throws RecognitionException {
		MeasuresContext _localctx = new MeasuresContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_measures);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12321);
			match(MEASURES);
			setState(12322);
			expr_alias_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Match_optsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SnowflakeParser.SHOW, 0); }
		public TerminalNode EMPTY_() { return getToken(SnowflakeParser.EMPTY_, 0); }
		public TerminalNode MATCHES() { return getToken(SnowflakeParser.MATCHES, 0); }
		public TerminalNode OMIT() { return getToken(SnowflakeParser.OMIT, 0); }
		public TerminalNode WITH() { return getToken(SnowflakeParser.WITH, 0); }
		public TerminalNode UNMATCHED() { return getToken(SnowflakeParser.UNMATCHED, 0); }
		public TerminalNode ROWS() { return getToken(SnowflakeParser.ROWS, 0); }
		public Match_optsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_opts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterMatch_opts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitMatch_opts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitMatch_opts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Match_optsContext match_opts() throws RecognitionException {
		Match_optsContext _localctx = new Match_optsContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_match_opts);
		try {
			setState(12333);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SHOW:
				enterOuterAlt(_localctx, 1);
				{
				setState(12324);
				match(SHOW);
				setState(12325);
				match(EMPTY_);
				setState(12326);
				match(MATCHES);
				}
				break;
			case OMIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(12327);
				match(OMIT);
				setState(12328);
				match(EMPTY_);
				setState(12329);
				match(MATCHES);
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(12330);
				match(WITH);
				setState(12331);
				match(UNMATCHED);
				setState(12332);
				match(ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Row_matchContext extends ParserRuleContext {
		public TerminalNode ONE() { return getToken(SnowflakeParser.ONE, 0); }
		public TerminalNode ROW() { return getToken(SnowflakeParser.ROW, 0); }
		public TerminalNode PER() { return getToken(SnowflakeParser.PER, 0); }
		public TerminalNode MATCH() { return getToken(SnowflakeParser.MATCH, 0); }
		public TerminalNode ALL() { return getToken(SnowflakeParser.ALL, 0); }
		public TerminalNode ROWS() { return getToken(SnowflakeParser.ROWS, 0); }
		public Match_optsContext match_opts() {
			return getRuleContext(Match_optsContext.class,0);
		}
		public Row_matchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_match; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterRow_match(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitRow_match(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitRow_match(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_matchContext row_match() throws RecognitionException {
		Row_matchContext _localctx = new Row_matchContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_row_match);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12343);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ONE:
				{
				setState(12335);
				match(ONE);
				setState(12336);
				match(ROW);
				setState(12337);
				match(PER);
				setState(12338);
				match(MATCH);
				}
				break;
			case ALL:
				{
				setState(12339);
				match(ALL);
				setState(12340);
				match(ROWS);
				setState(12341);
				match(PER);
				setState(12342);
				match(MATCH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(12346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OMIT || _la==SHOW || _la==WITH) {
				{
				setState(12345);
				match_opts();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class First_lastContext extends ParserRuleContext {
		public TerminalNode FIRST() { return getToken(SnowflakeParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(SnowflakeParser.LAST, 0); }
		public First_lastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_last; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFirst_last(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFirst_last(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFirst_last(this);
			else return visitor.visitChildren(this);
		}
	}

	public final First_lastContext first_last() throws RecognitionException {
		First_lastContext _localctx = new First_lastContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_first_last);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12348);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SymbolContext extends ParserRuleContext {
		public TerminalNode DUMMY() { return getToken(SnowflakeParser.DUMMY, 0); }
		public SymbolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_symbol; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSymbol(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSymbol(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSymbol(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SymbolContext symbol() throws RecognitionException {
		SymbolContext _localctx = new SymbolContext(_ctx, getState());
		enterRule(_localctx, 1168, RULE_symbol);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12350);
			match(DUMMY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class After_matchContext extends ParserRuleContext {
		public TerminalNode AFTER() { return getToken(SnowflakeParser.AFTER, 0); }
		public TerminalNode MATCH() { return getToken(SnowflakeParser.MATCH, 0); }
		public TerminalNode SKIP_() { return getToken(SnowflakeParser.SKIP_, 0); }
		public TerminalNode PAST() { return getToken(SnowflakeParser.PAST, 0); }
		public TerminalNode LAST() { return getToken(SnowflakeParser.LAST, 0); }
		public TerminalNode ROW() { return getToken(SnowflakeParser.ROW, 0); }
		public TerminalNode TO() { return getToken(SnowflakeParser.TO, 0); }
		public TerminalNode NEXT() { return getToken(SnowflakeParser.NEXT, 0); }
		public SymbolContext symbol() {
			return getRuleContext(SymbolContext.class,0);
		}
		public First_lastContext first_last() {
			return getRuleContext(First_lastContext.class,0);
		}
		public After_matchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_after_match; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterAfter_match(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitAfter_match(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitAfter_match(this);
			else return visitor.visitChildren(this);
		}
	}

	public final After_matchContext after_match() throws RecognitionException {
		After_matchContext _localctx = new After_matchContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_after_match);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12352);
			match(AFTER);
			setState(12353);
			match(MATCH);
			setState(12354);
			match(SKIP_);
			setState(12366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1606,_ctx) ) {
			case 1:
				{
				setState(12355);
				match(PAST);
				setState(12356);
				match(LAST);
				setState(12357);
				match(ROW);
				}
				break;
			case 2:
				{
				setState(12358);
				match(TO);
				setState(12359);
				match(NEXT);
				setState(12360);
				match(ROW);
				}
				break;
			case 3:
				{
				setState(12361);
				match(TO);
				setState(12363);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FIRST || _la==LAST) {
					{
					setState(12362);
					first_last();
					}
				}

				setState(12365);
				symbol();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Symbol_listContext extends ParserRuleContext {
		public List<SymbolContext> symbol() {
			return getRuleContexts(SymbolContext.class);
		}
		public SymbolContext symbol(int i) {
			return getRuleContext(SymbolContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(SnowflakeParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(SnowflakeParser.AS, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Symbol_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_symbol_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSymbol_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSymbol_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSymbol_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Symbol_listContext symbol_list() throws RecognitionException {
		Symbol_listContext _localctx = new Symbol_listContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_symbol_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12368);
			symbol();
			setState(12369);
			match(AS);
			setState(12370);
			expr(0);
			setState(12378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(12371);
				match(COMMA);
				setState(12372);
				symbol();
				setState(12373);
				match(AS);
				setState(12374);
				expr(0);
				}
				}
				setState(12380);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DefineContext extends ParserRuleContext {
		public TerminalNode DEFINE() { return getToken(SnowflakeParser.DEFINE, 0); }
		public Symbol_listContext symbol_list() {
			return getRuleContext(Symbol_listContext.class,0);
		}
		public DefineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_define; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterDefine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitDefine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitDefine(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefineContext define() throws RecognitionException {
		DefineContext _localctx = new DefineContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_define);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12381);
			match(DEFINE);
			setState(12382);
			symbol_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Match_recognizeContext extends ParserRuleContext {
		public TerminalNode MATCH_RECOGNIZE() { return getToken(SnowflakeParser.MATCH_RECOGNIZE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Partition_byContext partition_by() {
			return getRuleContext(Partition_byContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public MeasuresContext measures() {
			return getRuleContext(MeasuresContext.class,0);
		}
		public Row_matchContext row_match() {
			return getRuleContext(Row_matchContext.class,0);
		}
		public After_matchContext after_match() {
			return getRuleContext(After_matchContext.class,0);
		}
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public DefineContext define() {
			return getRuleContext(DefineContext.class,0);
		}
		public Match_recognizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_match_recognize; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterMatch_recognize(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitMatch_recognize(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitMatch_recognize(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Match_recognizeContext match_recognize() throws RecognitionException {
		Match_recognizeContext _localctx = new Match_recognizeContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_match_recognize);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12384);
			match(MATCH_RECOGNIZE);
			setState(12385);
			match(LR_BRACKET);
			setState(12387);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(12386);
				partition_by();
				}
			}

			setState(12390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(12389);
				order_by_clause();
				}
			}

			setState(12393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MEASURES) {
				{
				setState(12392);
				measures();
				}
			}

			setState(12396);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==ONE) {
				{
				setState(12395);
				row_match();
				}
			}

			setState(12399);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AFTER) {
				{
				setState(12398);
				after_match();
				}
			}

			setState(12402);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PATTERN) {
				{
				setState(12401);
				pattern();
				}
			}

			setState(12405);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFINE) {
				{
				setState(12404);
				define();
				}
			}

			setState(12407);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Pivot_unpivotContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(SnowflakeParser.PIVOT, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(SnowflakeParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(SnowflakeParser.LR_BRACKET, i);
		}
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(SnowflakeParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(SnowflakeParser.RR_BRACKET, i);
		}
		public TerminalNode FOR() { return getToken(SnowflakeParser.FOR, 0); }
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public List<LiteralContext> literal() {
			return getRuleContexts(LiteralContext.class);
		}
		public LiteralContext literal(int i) {
			return getRuleContext(LiteralContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public As_aliasContext as_alias() {
			return getRuleContext(As_aliasContext.class,0);
		}
		public Column_alias_list_in_bracketsContext column_alias_list_in_brackets() {
			return getRuleContext(Column_alias_list_in_bracketsContext.class,0);
		}
		public TerminalNode UNPIVOT() { return getToken(SnowflakeParser.UNPIVOT, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Column_listContext column_list() {
			return getRuleContext(Column_listContext.class,0);
		}
		public Pivot_unpivotContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_unpivot; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterPivot_unpivot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitPivot_unpivot(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitPivot_unpivot(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_unpivotContext pivot_unpivot() throws RecognitionException {
		Pivot_unpivotContext _localctx = new Pivot_unpivotContext(_ctx, getState());
		enterRule(_localctx, 1178, RULE_pivot_unpivot);
		int _la;
		try {
			setState(12446);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PIVOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(12409);
				match(PIVOT);
				setState(12410);
				match(LR_BRACKET);
				setState(12411);
				id_();
				setState(12412);
				match(LR_BRACKET);
				setState(12413);
				id_();
				setState(12414);
				match(RR_BRACKET);
				setState(12415);
				match(FOR);
				setState(12416);
				id_();
				setState(12417);
				match(IN);
				setState(12418);
				match(LR_BRACKET);
				setState(12419);
				literal();
				setState(12424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(12420);
					match(COMMA);
					setState(12421);
					literal();
					}
					}
					setState(12426);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(12427);
				match(RR_BRACKET);
				setState(12428);
				match(RR_BRACKET);
				setState(12433);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1617,_ctx) ) {
				case 1:
					{
					setState(12429);
					as_alias();
					setState(12431);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1616,_ctx) ) {
					case 1:
						{
						setState(12430);
						column_alias_list_in_brackets();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case UNPIVOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(12435);
				match(UNPIVOT);
				setState(12436);
				match(LR_BRACKET);
				setState(12437);
				id_();
				setState(12438);
				match(FOR);
				setState(12439);
				column_name();
				setState(12440);
				match(IN);
				setState(12441);
				match(LR_BRACKET);
				setState(12442);
				column_list();
				setState(12443);
				match(RR_BRACKET);
				setState(12444);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Column_alias_list_in_bracketsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public List<Id_Context> id_() {
			return getRuleContexts(Id_Context.class);
		}
		public Id_Context id_(int i) {
			return getRuleContext(Id_Context.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Column_alias_list_in_bracketsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias_list_in_brackets; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterColumn_alias_list_in_brackets(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitColumn_alias_list_in_brackets(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitColumn_alias_list_in_brackets(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_alias_list_in_bracketsContext column_alias_list_in_brackets() throws RecognitionException {
		Column_alias_list_in_bracketsContext _localctx = new Column_alias_list_in_bracketsContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_column_alias_list_in_brackets);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12448);
			match(LR_BRACKET);
			setState(12449);
			id_();
			setState(12454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(12450);
				match(COMMA);
				setState(12451);
				id_();
				}
				}
				setState(12456);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(12457);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Expr_list_in_parenthesesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public Expr_list_in_parenthesesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr_list_in_parentheses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterExpr_list_in_parentheses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitExpr_list_in_parentheses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitExpr_list_in_parentheses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expr_list_in_parenthesesContext expr_list_in_parentheses() throws RecognitionException {
		Expr_list_in_parenthesesContext _localctx = new Expr_list_in_parenthesesContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_expr_list_in_parentheses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12459);
			match(LR_BRACKET);
			setState(12460);
			expr_list();
			setState(12461);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Values_tableContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public Values_table_bodyContext values_table_body() {
			return getRuleContext(Values_table_bodyContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public As_aliasContext as_alias() {
			return getRuleContext(As_aliasContext.class,0);
		}
		public Column_alias_list_in_bracketsContext column_alias_list_in_brackets() {
			return getRuleContext(Column_alias_list_in_bracketsContext.class,0);
		}
		public Values_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterValues_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitValues_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitValues_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_tableContext values_table() throws RecognitionException {
		Values_tableContext _localctx = new Values_tableContext(_ctx, getState());
		enterRule(_localctx, 1184, RULE_values_table);
		try {
			setState(12479);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(12463);
				match(LR_BRACKET);
				setState(12464);
				values_table_body();
				setState(12465);
				match(RR_BRACKET);
				setState(12470);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1621,_ctx) ) {
				case 1:
					{
					setState(12466);
					as_alias();
					setState(12468);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1620,_ctx) ) {
					case 1:
						{
						setState(12467);
						column_alias_list_in_brackets();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case VALUES:
				enterOuterAlt(_localctx, 2);
				{
				setState(12472);
				values_table_body();
				setState(12477);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1623,_ctx) ) {
				case 1:
					{
					setState(12473);
					as_alias();
					setState(12475);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1622,_ctx) ) {
					case 1:
						{
						setState(12474);
						column_alias_list_in_brackets();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Values_table_bodyContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(SnowflakeParser.VALUES, 0); }
		public List<Expr_list_in_parenthesesContext> expr_list_in_parentheses() {
			return getRuleContexts(Expr_list_in_parenthesesContext.class);
		}
		public Expr_list_in_parenthesesContext expr_list_in_parentheses(int i) {
			return getRuleContext(Expr_list_in_parenthesesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Values_table_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_table_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterValues_table_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitValues_table_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitValues_table_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_table_bodyContext values_table_body() throws RecognitionException {
		Values_table_bodyContext _localctx = new Values_table_bodyContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_values_table_body);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(12481);
			match(VALUES);
			setState(12482);
			expr_list_in_parentheses();
			setState(12487);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1625,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(12483);
					match(COMMA);
					setState(12484);
					expr_list_in_parentheses();
					}
					} 
				}
				setState(12489);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1625,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sample_methodContext extends ParserRuleContext {
		public Token row_sampling;
		public Token block_sampling;
		public TerminalNode BERNOULLI() { return getToken(SnowflakeParser.BERNOULLI, 0); }
		public TerminalNode ROW() { return getToken(SnowflakeParser.ROW, 0); }
		public TerminalNode SYSTEM() { return getToken(SnowflakeParser.SYSTEM, 0); }
		public TerminalNode BLOCK() { return getToken(SnowflakeParser.BLOCK, 0); }
		public Sample_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_method; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSample_method(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSample_method(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSample_method(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sample_methodContext sample_method() throws RecognitionException {
		Sample_methodContext _localctx = new Sample_methodContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_sample_method);
		int _la;
		try {
			setState(12492);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BERNOULLI:
			case ROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(12490);
				((Sample_methodContext)_localctx).row_sampling = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BERNOULLI || _la==ROW) ) {
					((Sample_methodContext)_localctx).row_sampling = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case BLOCK:
			case SYSTEM:
				enterOuterAlt(_localctx, 2);
				{
				setState(12491);
				((Sample_methodContext)_localctx).block_sampling = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BLOCK || _la==SYSTEM) ) {
					((Sample_methodContext)_localctx).block_sampling = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Repeatable_seedContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode REPEATABLE() { return getToken(SnowflakeParser.REPEATABLE, 0); }
		public TerminalNode SEED() { return getToken(SnowflakeParser.SEED, 0); }
		public Repeatable_seedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatable_seed; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterRepeatable_seed(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitRepeatable_seed(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitRepeatable_seed(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Repeatable_seedContext repeatable_seed() throws RecognitionException {
		Repeatable_seedContext _localctx = new Repeatable_seedContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_repeatable_seed);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12494);
			_la = _input.LA(1);
			if ( !(_la==REPEATABLE || _la==SEED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(12495);
			match(LR_BRACKET);
			setState(12496);
			num();
			setState(12497);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Sample_optsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode ROWS() { return getToken(SnowflakeParser.ROWS, 0); }
		public Repeatable_seedContext repeatable_seed() {
			return getRuleContext(Repeatable_seedContext.class,0);
		}
		public Sample_optsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_opts; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSample_opts(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSample_opts(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSample_opts(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sample_optsContext sample_opts() throws RecognitionException {
		Sample_optsContext _localctx = new Sample_optsContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_sample_opts);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12499);
			match(LR_BRACKET);
			setState(12500);
			num();
			setState(12502);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS) {
				{
				setState(12501);
				match(ROWS);
				}
			}

			setState(12504);
			match(RR_BRACKET);
			setState(12506);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1628,_ctx) ) {
			case 1:
				{
				setState(12505);
				repeatable_seed();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SampleContext extends ParserRuleContext {
		public Sample_optsContext sample_opts() {
			return getRuleContext(Sample_optsContext.class,0);
		}
		public TerminalNode SAMPLE() { return getToken(SnowflakeParser.SAMPLE, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(SnowflakeParser.TABLESAMPLE, 0); }
		public Sample_methodContext sample_method() {
			return getRuleContext(Sample_methodContext.class,0);
		}
		public SampleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSample(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSample(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSample(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SampleContext sample() throws RecognitionException {
		SampleContext _localctx = new SampleContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_sample);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12508);
			_la = _input.LA(1);
			if ( !(_la==SAMPLE || _la==TABLESAMPLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(12510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BERNOULLI || _la==BLOCK || _la==ROW || _la==SYSTEM) {
				{
				setState(12509);
				sample_method();
				}
			}

			setState(12512);
			sample_opts();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Search_conditionContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public List<TerminalNode> NOT() { return getTokens(SnowflakeParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(SnowflakeParser.NOT, i);
		}
		public TerminalNode AND() { return getToken(SnowflakeParser.AND, 0); }
		public TerminalNode OR() { return getToken(SnowflakeParser.OR, 0); }
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSearch_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSearch_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSearch_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		return search_condition(0);
	}

	private Search_conditionContext search_condition(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, _parentState);
		Search_conditionContext _prevctx = _localctx;
		int _startState = 1196;
		enterRecursionRule(_localctx, 1196, RULE_search_condition, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(12518);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1630,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(12515);
					match(NOT);
					}
					} 
				}
				setState(12520);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1630,_ctx);
			}
			setState(12526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1631,_ctx) ) {
			case 1:
				{
				setState(12521);
				predicate();
				}
				break;
			case 2:
				{
				setState(12522);
				match(LR_BRACKET);
				setState(12523);
				search_condition(0);
				setState(12524);
				match(RR_BRACKET);
				}
				break;
			}
			}
			_ctx.stop = _input.LT(-1);
			setState(12536);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1633,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(12534);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1632,_ctx) ) {
					case 1:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						setState(12528);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(12529);
						match(AND);
						setState(12530);
						search_condition(3);
						}
						break;
					case 2:
						{
						_localctx = new Search_conditionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_search_condition);
						setState(12531);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(12532);
						match(OR);
						setState(12533);
						search_condition(2);
						}
						break;
					}
					} 
				}
				setState(12538);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1633,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Comparison_operatorContext extends ParserRuleContext {
		public TerminalNode EQ() { return getToken(SnowflakeParser.EQ, 0); }
		public TerminalNode GT() { return getToken(SnowflakeParser.GT, 0); }
		public TerminalNode LT() { return getToken(SnowflakeParser.LT, 0); }
		public TerminalNode LE() { return getToken(SnowflakeParser.LE, 0); }
		public TerminalNode GE() { return getToken(SnowflakeParser.GE, 0); }
		public TerminalNode LTGT() { return getToken(SnowflakeParser.LTGT, 0); }
		public TerminalNode NE() { return getToken(SnowflakeParser.NE, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterComparison_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitComparison_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitComparison_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comparison_operatorContext comparison_operator() throws RecognitionException {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, getState());
		enterRule(_localctx, 1198, RULE_comparison_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12539);
			_la = _input.LA(1);
			if ( !(((((_la - 894)) & ~0x3f) == 0 && ((1L << (_la - 894)) & 127L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Null_not_nullContext extends ParserRuleContext {
		public TerminalNode NULL_() { return getToken(SnowflakeParser.NULL_, 0); }
		public TerminalNode NOT() { return getToken(SnowflakeParser.NOT, 0); }
		public Null_not_nullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_not_null; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterNull_not_null(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitNull_not_null(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitNull_not_null(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_not_nullContext null_not_null() throws RecognitionException {
		Null_not_nullContext _localctx = new Null_not_nullContext(_ctx, getState());
		enterRule(_localctx, 1200, RULE_null_not_null);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(12541);
				match(NOT);
				}
			}

			setState(12544);
			match(NULL_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubqueryContext extends ParserRuleContext {
		public Query_statementContext query_statement() {
			return getRuleContext(Query_statementContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12546);
			query_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(SnowflakeParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SnowflakeParser.ALL, 0); }
		public TerminalNode SOME() { return getToken(SnowflakeParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(SnowflakeParser.ANY, 0); }
		public TerminalNode BETWEEN() { return getToken(SnowflakeParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(SnowflakeParser.AND, 0); }
		public TerminalNode NOT() { return getToken(SnowflakeParser.NOT, 0); }
		public TerminalNode IN() { return getToken(SnowflakeParser.IN, 0); }
		public Expr_listContext expr_list() {
			return getRuleContext(Expr_listContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SnowflakeParser.LIKE, 0); }
		public TerminalNode ILIKE() { return getToken(SnowflakeParser.ILIKE, 0); }
		public TerminalNode ESCAPE() { return getToken(SnowflakeParser.ESCAPE, 0); }
		public TerminalNode RLIKE() { return getToken(SnowflakeParser.RLIKE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode IS() { return getToken(SnowflakeParser.IS, 0); }
		public Null_not_nullContext null_not_null() {
			return getRuleContext(Null_not_nullContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 1204, RULE_predicate);
		int _la;
		try {
			setState(12623);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1644,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(12548);
				match(EXISTS);
				setState(12549);
				match(LR_BRACKET);
				setState(12550);
				subquery();
				setState(12551);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(12553);
				expr(0);
				setState(12554);
				comparison_operator();
				setState(12555);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(12556);
				match(LR_BRACKET);
				setState(12557);
				subquery();
				setState(12558);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(12560);
				expr(0);
				setState(12562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(12561);
					match(NOT);
					}
				}

				setState(12564);
				match(BETWEEN);
				setState(12565);
				expr(0);
				setState(12566);
				match(AND);
				setState(12567);
				expr(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(12569);
				expr(0);
				setState(12571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(12570);
					match(NOT);
					}
				}

				setState(12573);
				match(IN);
				setState(12574);
				match(LR_BRACKET);
				setState(12577);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1637,_ctx) ) {
				case 1:
					{
					setState(12575);
					subquery();
					}
					break;
				case 2:
					{
					setState(12576);
					expr_list();
					}
					break;
				}
				setState(12579);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(12581);
				expr(0);
				setState(12583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(12582);
					match(NOT);
					}
				}

				setState(12585);
				_la = _input.LA(1);
				if ( !(_la==ILIKE || _la==LIKE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(12586);
				expr(0);
				setState(12589);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1639,_ctx) ) {
				case 1:
					{
					setState(12587);
					match(ESCAPE);
					setState(12588);
					expr(0);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(12591);
				expr(0);
				setState(12593);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(12592);
					match(NOT);
					}
				}

				setState(12595);
				match(RLIKE);
				setState(12596);
				expr(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(12598);
				expr(0);
				setState(12600);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(12599);
					match(NOT);
					}
				}

				setState(12602);
				_la = _input.LA(1);
				if ( !(_la==ILIKE || _la==LIKE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(12603);
				match(ANY);
				setState(12604);
				match(LR_BRACKET);
				setState(12605);
				expr(0);
				setState(12610);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(12606);
					match(COMMA);
					setState(12607);
					expr(0);
					}
					}
					setState(12612);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(12613);
				match(RR_BRACKET);
				setState(12616);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1643,_ctx) ) {
				case 1:
					{
					setState(12614);
					match(ESCAPE);
					setState(12615);
					expr(0);
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(12618);
				expr(0);
				setState(12619);
				match(IS);
				setState(12620);
				null_not_null();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(12622);
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SnowflakeParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12625);
			match(WHERE);
			setState(12626);
			search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Group_by_elemContext extends ParserRuleContext {
		public Column_elemContext column_elem() {
			return getRuleContext(Column_elemContext.class,0);
		}
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public Expression_elemContext expression_elem() {
			return getRuleContext(Expression_elemContext.class,0);
		}
		public Group_by_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterGroup_by_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitGroup_by_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitGroup_by_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_elemContext group_by_elem() throws RecognitionException {
		Group_by_elemContext _localctx = new Group_by_elemContext(_ctx, getState());
		enterRule(_localctx, 1208, RULE_group_by_elem);
		try {
			setState(12631);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1645,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(12628);
				column_elem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(12629);
				num();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(12630);
				expression_elem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Group_by_listContext extends ParserRuleContext {
		public List<Group_by_elemContext> group_by_elem() {
			return getRuleContexts(Group_by_elemContext.class);
		}
		public Group_by_elemContext group_by_elem(int i) {
			return getRuleContext(Group_by_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Group_by_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterGroup_by_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitGroup_by_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitGroup_by_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_listContext group_by_list() throws RecognitionException {
		Group_by_listContext _localctx = new Group_by_listContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_group_by_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(12633);
			group_by_elem();
			setState(12638);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1646,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(12634);
					match(COMMA);
					setState(12635);
					group_by_elem();
					}
					} 
				}
				setState(12640);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1646,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(SnowflakeParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(SnowflakeParser.BY, 0); }
		public Group_by_listContext group_by_list() {
			return getRuleContext(Group_by_listContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public TerminalNode CUBE() { return getToken(SnowflakeParser.CUBE, 0); }
		public TerminalNode GROUPING() { return getToken(SnowflakeParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(SnowflakeParser.SETS, 0); }
		public TerminalNode ROLLUP() { return getToken(SnowflakeParser.ROLLUP, 0); }
		public TerminalNode ALL() { return getToken(SnowflakeParser.ALL, 0); }
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitGroup_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitGroup_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 1212, RULE_group_by_clause);
		try {
			setState(12662);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1649,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(12641);
				match(GROUP);
				setState(12642);
				match(BY);
				setState(12643);
				group_by_list();
				setState(12645);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1647,_ctx) ) {
				case 1:
					{
					setState(12644);
					having_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(12647);
				match(GROUP);
				setState(12648);
				match(BY);
				setState(12653);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CUBE:
					{
					setState(12649);
					match(CUBE);
					}
					break;
				case GROUPING:
					{
					setState(12650);
					match(GROUPING);
					setState(12651);
					match(SETS);
					}
					break;
				case ROLLUP:
					{
					setState(12652);
					match(ROLLUP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(12655);
				match(LR_BRACKET);
				setState(12656);
				group_by_list();
				setState(12657);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(12659);
				match(GROUP);
				setState(12660);
				match(BY);
				setState(12661);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(SnowflakeParser.HAVING, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 1214, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12664);
			match(HAVING);
			setState(12665);
			search_condition(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Qualify_clauseContext extends ParserRuleContext {
		public TerminalNode QUALIFY() { return getToken(SnowflakeParser.QUALIFY, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public Qualify_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualify_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterQualify_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitQualify_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitQualify_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualify_clauseContext qualify_clause() throws RecognitionException {
		Qualify_clauseContext _localctx = new Qualify_clauseContext(_ctx, getState());
		enterRule(_localctx, 1216, RULE_qualify_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12667);
			match(QUALIFY);
			setState(12668);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Order_itemContext extends ParserRuleContext {
		public Id_Context id_() {
			return getRuleContext(Id_Context.class,0);
		}
		public NumContext num() {
			return getRuleContext(NumContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(SnowflakeParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(SnowflakeParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SnowflakeParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(SnowflakeParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(SnowflakeParser.LAST, 0); }
		public Order_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterOrder_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitOrder_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitOrder_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_itemContext order_item() throws RecognitionException {
		Order_itemContext _localctx = new Order_itemContext(_ctx, getState());
		enterRule(_localctx, 1218, RULE_order_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12673);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1650,_ctx) ) {
			case 1:
				{
				setState(12670);
				id_();
				}
				break;
			case 2:
				{
				setState(12671);
				num();
				}
				break;
			case 3:
				{
				setState(12672);
				expr(0);
				}
				break;
			}
			setState(12676);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1651,_ctx) ) {
			case 1:
				{
				setState(12675);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(12680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1652,_ctx) ) {
			case 1:
				{
				setState(12678);
				match(NULLS);
				setState(12679);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(SnowflakeParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SnowflakeParser.BY, 0); }
		public List<Order_itemContext> order_item() {
			return getRuleContexts(Order_itemContext.class);
		}
		public Order_itemContext order_item(int i) {
			return getRuleContext(Order_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 1220, RULE_order_by_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(12682);
			match(ORDER);
			setState(12683);
			match(BY);
			setState(12684);
			order_item();
			setState(12689);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1653,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(12685);
					match(COMMA);
					setState(12686);
					order_item();
					}
					} 
				}
				setState(12691);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1653,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Row_rowsContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(SnowflakeParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(SnowflakeParser.ROWS, 0); }
		public Row_rowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_rows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterRow_rows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitRow_rows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitRow_rows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_rowsContext row_rows() throws RecognitionException {
		Row_rowsContext _localctx = new Row_rowsContext(_ctx, getState());
		enterRule(_localctx, 1222, RULE_row_rows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12692);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class First_nextContext extends ParserRuleContext {
		public TerminalNode FIRST() { return getToken(SnowflakeParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(SnowflakeParser.NEXT, 0); }
		public First_nextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_first_next; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterFirst_next(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitFirst_next(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitFirst_next(this);
			else return visitor.visitChildren(this);
		}
	}

	public final First_nextContext first_next() throws RecognitionException {
		First_nextContext _localctx = new First_nextContext(_ctx, getState());
		enterRule(_localctx, 1224, RULE_first_next);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12694);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Limit_clauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(SnowflakeParser.LIMIT, 0); }
		public List<NumContext> num() {
			return getRuleContexts(NumContext.class);
		}
		public NumContext num(int i) {
			return getRuleContext(NumContext.class,i);
		}
		public TerminalNode OFFSET() { return getToken(SnowflakeParser.OFFSET, 0); }
		public TerminalNode FETCH() { return getToken(SnowflakeParser.FETCH, 0); }
		public List<Row_rowsContext> row_rows() {
			return getRuleContexts(Row_rowsContext.class);
		}
		public Row_rowsContext row_rows(int i) {
			return getRuleContext(Row_rowsContext.class,i);
		}
		public First_nextContext first_next() {
			return getRuleContext(First_nextContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(SnowflakeParser.ONLY, 0); }
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitLimit_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitLimit_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 1226, RULE_limit_clause);
		int _la;
		try {
			setState(12720);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(12696);
				match(LIMIT);
				setState(12697);
				num();
				setState(12700);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1654,_ctx) ) {
				case 1:
					{
					setState(12698);
					match(OFFSET);
					setState(12699);
					num();
					}
					break;
				}
				}
				break;
			case FETCH:
			case OFFSET:
			case ROW:
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				setState(12704);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OFFSET) {
					{
					setState(12702);
					match(OFFSET);
					setState(12703);
					num();
					}
				}

				setState(12707);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROW || _la==ROWS) {
					{
					setState(12706);
					row_rows();
					}
				}

				setState(12709);
				match(FETCH);
				setState(12711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FIRST || _la==NEXT) {
					{
					setState(12710);
					first_next();
					}
				}

				setState(12713);
				num();
				setState(12715);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1658,_ctx) ) {
				case 1:
					{
					setState(12714);
					row_rows();
					}
					break;
				}
				setState(12718);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1659,_ctx) ) {
				case 1:
					{
					setState(12717);
					match(ONLY);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Round_modeContext extends ParserRuleContext {
		public TerminalNode HALF_AWAY_FROM_ZERO_Q() { return getToken(SnowflakeParser.HALF_AWAY_FROM_ZERO_Q, 0); }
		public TerminalNode HALF_TO_EVEN_Q() { return getToken(SnowflakeParser.HALF_TO_EVEN_Q, 0); }
		public Round_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_round_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterRound_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitRound_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitRound_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Round_modeContext round_mode() throws RecognitionException {
		Round_modeContext _localctx = new Round_modeContext(_ctx, getState());
		enterRule(_localctx, 1228, RULE_round_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(12722);
			_la = _input.LA(1);
			if ( !(_la==HALF_AWAY_FROM_ZERO_Q || _la==HALF_TO_EVEN_Q) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class Round_exprContext extends ParserRuleContext {
		public TerminalNode ROUND() { return getToken(SnowflakeParser.ROUND, 0); }
		public TerminalNode LR_BRACKET() { return getToken(SnowflakeParser.LR_BRACKET, 0); }
		public TerminalNode EXPR() { return getToken(SnowflakeParser.EXPR, 0); }
		public List<TerminalNode> ASSOC() { return getTokens(SnowflakeParser.ASSOC); }
		public TerminalNode ASSOC(int i) {
			return getToken(SnowflakeParser.ASSOC, i);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SnowflakeParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SnowflakeParser.COMMA, i);
		}
		public TerminalNode SCALE() { return getToken(SnowflakeParser.SCALE, 0); }
		public TerminalNode RR_BRACKET() { return getToken(SnowflakeParser.RR_BRACKET, 0); }
		public List<TerminalNode> ROUNDING_MODE() { return getTokens(SnowflakeParser.ROUNDING_MODE); }
		public TerminalNode ROUNDING_MODE(int i) {
			return getToken(SnowflakeParser.ROUNDING_MODE, i);
		}
		public List<Round_modeContext> round_mode() {
			return getRuleContexts(Round_modeContext.class);
		}
		public Round_modeContext round_mode(int i) {
			return getRuleContext(Round_modeContext.class,i);
		}
		public Round_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_round_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).enterRound_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SnowflakeParserListener ) ((SnowflakeParserListener)listener).exitRound_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SnowflakeParserVisitor ) return ((SnowflakeParserVisitor<? extends T>)visitor).visitRound_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Round_exprContext round_expr() throws RecognitionException {
		Round_exprContext _localctx = new Round_exprContext(_ctx, getState());
		enterRule(_localctx, 1230, RULE_round_expr);
		int _la;
		try {
			setState(12758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1663,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(12724);
				match(ROUND);
				setState(12725);
				match(LR_BRACKET);
				setState(12726);
				match(EXPR);
				setState(12727);
				match(ASSOC);
				setState(12728);
				expr(0);
				setState(12729);
				match(COMMA);
				setState(12730);
				match(SCALE);
				setState(12731);
				match(ASSOC);
				setState(12732);
				expr(0);
				setState(12739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(12733);
					match(COMMA);
					setState(12734);
					match(ROUNDING_MODE);
					setState(12735);
					match(ASSOC);
					setState(12736);
					round_mode();
					}
					}
					setState(12741);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(12742);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(12744);
				match(ROUND);
				setState(12745);
				match(LR_BRACKET);
				setState(12746);
				expr(0);
				setState(12747);
				match(COMMA);
				setState(12748);
				expr(0);
				setState(12753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(12749);
					match(COMMA);
					setState(12750);
					round_mode();
					}
					}
					setState(12755);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(12756);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 507:
			return expr_sempred((ExprContext)_localctx, predIndex);
		case 540:
			return select_statement_in_parentheses_sempred((Select_statement_in_parenthesesContext)_localctx, predIndex);
		case 598:
			return search_condition_sempred((Search_conditionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 28);
		case 1:
			return precpred(_ctx, 21);
		case 2:
			return precpred(_ctx, 20);
		case 3:
			return precpred(_ctx, 19);
		case 4:
			return precpred(_ctx, 17);
		case 5:
			return precpred(_ctx, 16);
		case 6:
			return precpred(_ctx, 3);
		case 7:
			return precpred(_ctx, 29);
		case 8:
			return precpred(_ctx, 27);
		case 9:
			return precpred(_ctx, 26);
		case 10:
			return precpred(_ctx, 14);
		case 11:
			return precpred(_ctx, 12);
		case 12:
			return precpred(_ctx, 6);
		case 13:
			return precpred(_ctx, 5);
		case 14:
			return precpred(_ctx, 4);
		case 15:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean select_statement_in_parentheses_sempred(Select_statement_in_parenthesesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean search_condition_sempred(Search_conditionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17:
			return precpred(_ctx, 2);
		case 18:
			return precpred(_ctx, 1);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u0399\u31d9\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"+
		"\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"+
		"\u015e\u0002\u015f\u0007\u015f\u0002\u0160\u0007\u0160\u0002\u0161\u0007"+
		"\u0161\u0002\u0162\u0007\u0162\u0002\u0163\u0007\u0163\u0002\u0164\u0007"+
		"\u0164\u0002\u0165\u0007\u0165\u0002\u0166\u0007\u0166\u0002\u0167\u0007"+
		"\u0167\u0002\u0168\u0007\u0168\u0002\u0169\u0007\u0169\u0002\u016a\u0007"+
		"\u016a\u0002\u016b\u0007\u016b\u0002\u016c\u0007\u016c\u0002\u016d\u0007"+
		"\u016d\u0002\u016e\u0007\u016e\u0002\u016f\u0007\u016f\u0002\u0170\u0007"+
		"\u0170\u0002\u0171\u0007\u0171\u0002\u0172\u0007\u0172\u0002\u0173\u0007"+
		"\u0173\u0002\u0174\u0007\u0174\u0002\u0175\u0007\u0175\u0002\u0176\u0007"+
		"\u0176\u0002\u0177\u0007\u0177\u0002\u0178\u0007\u0178\u0002\u0179\u0007"+
		"\u0179\u0002\u017a\u0007\u017a\u0002\u017b\u0007\u017b\u0002\u017c\u0007"+
		"\u017c\u0002\u017d\u0007\u017d\u0002\u017e\u0007\u017e\u0002\u017f\u0007"+
		"\u017f\u0002\u0180\u0007\u0180\u0002\u0181\u0007\u0181\u0002\u0182\u0007"+
		"\u0182\u0002\u0183\u0007\u0183\u0002\u0184\u0007\u0184\u0002\u0185\u0007"+
		"\u0185\u0002\u0186\u0007\u0186\u0002\u0187\u0007\u0187\u0002\u0188\u0007"+
		"\u0188\u0002\u0189\u0007\u0189\u0002\u018a\u0007\u018a\u0002\u018b\u0007"+
		"\u018b\u0002\u018c\u0007\u018c\u0002\u018d\u0007\u018d\u0002\u018e\u0007"+
		"\u018e\u0002\u018f\u0007\u018f\u0002\u0190\u0007\u0190\u0002\u0191\u0007"+
		"\u0191\u0002\u0192\u0007\u0192\u0002\u0193\u0007\u0193\u0002\u0194\u0007"+
		"\u0194\u0002\u0195\u0007\u0195\u0002\u0196\u0007\u0196\u0002\u0197\u0007"+
		"\u0197\u0002\u0198\u0007\u0198\u0002\u0199\u0007\u0199\u0002\u019a\u0007"+
		"\u019a\u0002\u019b\u0007\u019b\u0002\u019c\u0007\u019c\u0002\u019d\u0007"+
		"\u019d\u0002\u019e\u0007\u019e\u0002\u019f\u0007\u019f\u0002\u01a0\u0007"+
		"\u01a0\u0002\u01a1\u0007\u01a1\u0002\u01a2\u0007\u01a2\u0002\u01a3\u0007"+
		"\u01a3\u0002\u01a4\u0007\u01a4\u0002\u01a5\u0007\u01a5\u0002\u01a6\u0007"+
		"\u01a6\u0002\u01a7\u0007\u01a7\u0002\u01a8\u0007\u01a8\u0002\u01a9\u0007"+
		"\u01a9\u0002\u01aa\u0007\u01aa\u0002\u01ab\u0007\u01ab\u0002\u01ac\u0007"+
		"\u01ac\u0002\u01ad\u0007\u01ad\u0002\u01ae\u0007\u01ae\u0002\u01af\u0007"+
		"\u01af\u0002\u01b0\u0007\u01b0\u0002\u01b1\u0007\u01b1\u0002\u01b2\u0007"+
		"\u01b2\u0002\u01b3\u0007\u01b3\u0002\u01b4\u0007\u01b4\u0002\u01b5\u0007"+
		"\u01b5\u0002\u01b6\u0007\u01b6\u0002\u01b7\u0007\u01b7\u0002\u01b8\u0007"+
		"\u01b8\u0002\u01b9\u0007\u01b9\u0002\u01ba\u0007\u01ba\u0002\u01bb\u0007"+
		"\u01bb\u0002\u01bc\u0007\u01bc\u0002\u01bd\u0007\u01bd\u0002\u01be\u0007"+
		"\u01be\u0002\u01bf\u0007\u01bf\u0002\u01c0\u0007\u01c0\u0002\u01c1\u0007"+
		"\u01c1\u0002\u01c2\u0007\u01c2\u0002\u01c3\u0007\u01c3\u0002\u01c4\u0007"+
		"\u01c4\u0002\u01c5\u0007\u01c5\u0002\u01c6\u0007\u01c6\u0002\u01c7\u0007"+
		"\u01c7\u0002\u01c8\u0007\u01c8\u0002\u01c9\u0007\u01c9\u0002\u01ca\u0007"+
		"\u01ca\u0002\u01cb\u0007\u01cb\u0002\u01cc\u0007\u01cc\u0002\u01cd\u0007"+
		"\u01cd\u0002\u01ce\u0007\u01ce\u0002\u01cf\u0007\u01cf\u0002\u01d0\u0007"+
		"\u01d0\u0002\u01d1\u0007\u01d1\u0002\u01d2\u0007\u01d2\u0002\u01d3\u0007"+
		"\u01d3\u0002\u01d4\u0007\u01d4\u0002\u01d5\u0007\u01d5\u0002\u01d6\u0007"+
		"\u01d6\u0002\u01d7\u0007\u01d7\u0002\u01d8\u0007\u01d8\u0002\u01d9\u0007"+
		"\u01d9\u0002\u01da\u0007\u01da\u0002\u01db\u0007\u01db\u0002\u01dc\u0007"+
		"\u01dc\u0002\u01dd\u0007\u01dd\u0002\u01de\u0007\u01de\u0002\u01df\u0007"+
		"\u01df\u0002\u01e0\u0007\u01e0\u0002\u01e1\u0007\u01e1\u0002\u01e2\u0007"+
		"\u01e2\u0002\u01e3\u0007\u01e3\u0002\u01e4\u0007\u01e4\u0002\u01e5\u0007"+
		"\u01e5\u0002\u01e6\u0007\u01e6\u0002\u01e7\u0007\u01e7\u0002\u01e8\u0007"+
		"\u01e8\u0002\u01e9\u0007\u01e9\u0002\u01ea\u0007\u01ea\u0002\u01eb\u0007"+
		"\u01eb\u0002\u01ec\u0007\u01ec\u0002\u01ed\u0007\u01ed\u0002\u01ee\u0007"+
		"\u01ee\u0002\u01ef\u0007\u01ef\u0002\u01f0\u0007\u01f0\u0002\u01f1\u0007"+
		"\u01f1\u0002\u01f2\u0007\u01f2\u0002\u01f3\u0007\u01f3\u0002\u01f4\u0007"+
		"\u01f4\u0002\u01f5\u0007\u01f5\u0002\u01f6\u0007\u01f6\u0002\u01f7\u0007"+
		"\u01f7\u0002\u01f8\u0007\u01f8\u0002\u01f9\u0007\u01f9\u0002\u01fa\u0007"+
		"\u01fa\u0002\u01fb\u0007\u01fb\u0002\u01fc\u0007\u01fc\u0002\u01fd\u0007"+
		"\u01fd\u0002\u01fe\u0007\u01fe\u0002\u01ff\u0007\u01ff\u0002\u0200\u0007"+
		"\u0200\u0002\u0201\u0007\u0201\u0002\u0202\u0007\u0202\u0002\u0203\u0007"+
		"\u0203\u0002\u0204\u0007\u0204\u0002\u0205\u0007\u0205\u0002\u0206\u0007"+
		"\u0206\u0002\u0207\u0007\u0207\u0002\u0208\u0007\u0208\u0002\u0209\u0007"+
		"\u0209\u0002\u020a\u0007\u020a\u0002\u020b\u0007\u020b\u0002\u020c\u0007"+
		"\u020c\u0002\u020d\u0007\u020d\u0002\u020e\u0007\u020e\u0002\u020f\u0007"+
		"\u020f\u0002\u0210\u0007\u0210\u0002\u0211\u0007\u0211\u0002\u0212\u0007"+
		"\u0212\u0002\u0213\u0007\u0213\u0002\u0214\u0007\u0214\u0002\u0215\u0007"+
		"\u0215\u0002\u0216\u0007\u0216\u0002\u0217\u0007\u0217\u0002\u0218\u0007"+
		"\u0218\u0002\u0219\u0007\u0219\u0002\u021a\u0007\u021a\u0002\u021b\u0007"+
		"\u021b\u0002\u021c\u0007\u021c\u0002\u021d\u0007\u021d\u0002\u021e\u0007"+
		"\u021e\u0002\u021f\u0007\u021f\u0002\u0220\u0007\u0220\u0002\u0221\u0007"+
		"\u0221\u0002\u0222\u0007\u0222\u0002\u0223\u0007\u0223\u0002\u0224\u0007"+
		"\u0224\u0002\u0225\u0007\u0225\u0002\u0226\u0007\u0226\u0002\u0227\u0007"+
		"\u0227\u0002\u0228\u0007\u0228\u0002\u0229\u0007\u0229\u0002\u022a\u0007"+
		"\u022a\u0002\u022b\u0007\u022b\u0002\u022c\u0007\u022c\u0002\u022d\u0007"+
		"\u022d\u0002\u022e\u0007\u022e\u0002\u022f\u0007\u022f\u0002\u0230\u0007"+
		"\u0230\u0002\u0231\u0007\u0231\u0002\u0232\u0007\u0232\u0002\u0233\u0007"+
		"\u0233\u0002\u0234\u0007\u0234\u0002\u0235\u0007\u0235\u0002\u0236\u0007"+
		"\u0236\u0002\u0237\u0007\u0237\u0002\u0238\u0007\u0238\u0002\u0239\u0007"+
		"\u0239\u0002\u023a\u0007\u023a\u0002\u023b\u0007\u023b\u0002\u023c\u0007"+
		"\u023c\u0002\u023d\u0007\u023d\u0002\u023e\u0007\u023e\u0002\u023f\u0007"+
		"\u023f\u0002\u0240\u0007\u0240\u0002\u0241\u0007\u0241\u0002\u0242\u0007"+
		"\u0242\u0002\u0243\u0007\u0243\u0002\u0244\u0007\u0244\u0002\u0245\u0007"+
		"\u0245\u0002\u0246\u0007\u0246\u0002\u0247\u0007\u0247\u0002\u0248\u0007"+
		"\u0248\u0002\u0249\u0007\u0249\u0002\u024a\u0007\u024a\u0002\u024b\u0007"+
		"\u024b\u0002\u024c\u0007\u024c\u0002\u024d\u0007\u024d\u0002\u024e\u0007"+
		"\u024e\u0002\u024f\u0007\u024f\u0002\u0250\u0007\u0250\u0002\u0251\u0007"+
		"\u0251\u0002\u0252\u0007\u0252\u0002\u0253\u0007\u0253\u0002\u0254\u0007"+
		"\u0254\u0002\u0255\u0007\u0255\u0002\u0256\u0007\u0256\u0002\u0257\u0007"+
		"\u0257\u0002\u0258\u0007\u0258\u0002\u0259\u0007\u0259\u0002\u025a\u0007"+
		"\u025a\u0002\u025b\u0007\u025b\u0002\u025c\u0007\u025c\u0002\u025d\u0007"+
		"\u025d\u0002\u025e\u0007\u025e\u0002\u025f\u0007\u025f\u0002\u0260\u0007"+
		"\u0260\u0002\u0261\u0007\u0261\u0002\u0262\u0007\u0262\u0002\u0263\u0007"+
		"\u0263\u0002\u0264\u0007\u0264\u0002\u0265\u0007\u0265\u0002\u0266\u0007"+
		"\u0266\u0002\u0267\u0007\u0267\u0001\u0000\u0003\u0000\u04d2\b\u0000\u0001"+
		"\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0005\u0001\u04d9"+
		"\b\u0001\n\u0001\f\u0001\u04dc\t\u0001\u0001\u0001\u0003\u0001\u04df\b"+
		"\u0001\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
		"\u0002\u0003\u0002\u04e7\b\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001"+
		"\u0003\u0003\u0003\u04ed\b\u0003\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0003\u0004\u04f5\b\u0004\u0001\u0005\u0001"+
		"\u0005\u0003\u0005\u04f9\b\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0003"+
		"\u0005\u04fe\b\u0005\u0001\u0005\u0001\u0005\u0003\u0005\u0502\b\u0005"+
		"\u0001\u0006\u0001\u0006\u0003\u0006\u0506\b\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0003\u0006\u050c\b\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0004\u0006\u0513\b\u0006\u000b\u0006"+
		"\f\u0006\u0514\u0004\u0006\u0517\b\u0006\u000b\u0006\f\u0006\u0518\u0001"+
		"\u0006\u0001\u0006\u0003\u0006\u051d\b\u0006\u0001\u0006\u0001\u0006\u0003"+
		"\u0006\u0521\b\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0003\u0007\u0529\b\u0007\u0001\u0007\u0003\u0007\u052c"+
		"\b\u0007\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0005\b\u0533\b\b\n\b"+
		"\f\b\u0536\t\b\u0001\b\u0001\b\u0001\t\u0001\t\u0001\t\u0003\t\u053d\b"+
		"\t\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u0543\b\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\n\u0001\u000b\u0004\u000b\u054c\b\u000b\u000b"+
		"\u000b\f\u000b\u054d\u0001\f\u0001\f\u0001\f\u0001\f\u0003\f\u0554\b\f"+
		"\u0001\f\u0001\f\u0004\f\u0558\b\f\u000b\f\f\f\u0559\u0001\f\u0001\f\u0001"+
		"\f\u0001\f\u0001\f\u0003\f\u0561\b\f\u0001\f\u0001\f\u0003\f\u0565\b\f"+
		"\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0005\r\u0571\b\r\n\r\f\r\u0574\t\r\u0001\r\u0003\r\u0577\b"+
		"\r\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0003\u000e"+
		"\u057e\b\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e"+
		"\u0001\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u0588\b\u000f\u0001\u000f"+
		"\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f"+
		"\u0001\u000f\u0001\u000f\u0005\u000f\u0593\b\u000f\n\u000f\f\u000f\u0596"+
		"\t\u000f\u0001\u000f\u0001\u000f\u0003\u000f\u059a\b\u000f\u0001\u000f"+
		"\u0001\u000f\u0003\u000f\u059e\b\u000f\u0001\u0010\u0001\u0010\u0003\u0010"+
		"\u05a2\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010"+
		"\u05a8\b\u0010\u0003\u0010\u05aa\b\u0010\u0001\u0011\u0001\u0011\u0001"+
		"\u0011\u0001\u0011\u0003\u0011\u05b0\b\u0011\u0001\u0011\u0001\u0011\u0001"+
		"\u0011\u0001\u0011\u0003\u0011\u05b6\b\u0011\u0003\u0011\u05b8\b\u0011"+
		"\u0001\u0011\u0001\u0011\u0003\u0011\u05bc\b\u0011\u0001\u0012\u0001\u0012"+
		"\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012"+
		"\u0001\u0012\u0003\u0012\u05c7\b\u0012\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u05e2\b\u0013"+
		"\u0001\u0014\u0001\u0014\u0003\u0014\u05e6\b\u0014\u0001\u0014\u0001\u0014"+
		"\u0003\u0014\u05ea\b\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014"+
		"\u0003\u0014\u05f0\b\u0014\u0003\u0014\u05f2\b\u0014\u0001\u0015\u0001"+
		"\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001"+
		"\u0015\u0003\u0015\u05fc\b\u0015\u0001\u0015\u0003\u0015\u05ff\b\u0015"+
		"\u0001\u0015\u0003\u0015\u0602\b\u0015\u0001\u0015\u0003\u0015\u0605\b"+
		"\u0015\u0001\u0015\u0005\u0015\u0608\b\u0015\n\u0015\f\u0015\u060b\t\u0015"+
		"\u0001\u0015\u0001\u0015\u0001\u0015\u0003\u0015\u0610\b\u0015\u0001\u0015"+
		"\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015"+
		"\u0003\u0015\u0619\b\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015"+
		"\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0003\u0015\u0623\b\u0015"+
		"\u0001\u0015\u0001\u0015\u0003\u0015\u0627\b\u0015\u0001\u0015\u0003\u0015"+
		"\u062a\b\u0015\u0001\u0015\u0003\u0015\u062d\b\u0015\u0001\u0015\u0005"+
		"\u0015\u0630\b\u0015\n\u0015\f\u0015\u0633\t\u0015\u0003\u0015\u0635\b"+
		"\u0015\u0001\u0016\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0017\u0001"+
		"\u0017\u0001\u0017\u0001\u0017\u0005\u0017\u063f\b\u0017\n\u0017\f\u0017"+
		"\u0642\t\u0017\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0018"+
		"\u0001\u0018\u0001\u0018\u0003\u0018\u064b\b\u0018\u0001\u0018\u0001\u0018"+
		"\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u001a\u0001\u001a"+
		"\u0001\u001a\u0001\u001a\u0005\u001a\u0657\b\u001a\n\u001a\f\u001a\u065a"+
		"\t\u001a\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001"+
		"\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0004\u001b\u0666"+
		"\b\u001b\u000b\u001b\f\u001b\u0667\u0001\u001b\u0001\u001b\u0003\u001b"+
		"\u066c\b\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0003\u001c\u0674\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0001\u001c\u0003\u001c\u067c\b\u001c\u0001\u001c"+
		"\u0003\u001c\u067f\b\u001c\u0001\u001c\u0003\u001c\u0682\b\u001c\u0001"+
		"\u001c\u0003\u001c\u0685\b\u001c\u0001\u001c\u0001\u001c\u0001\u001c\u0003"+
		"\u001c\u068a\b\u001c\u0001\u001c\u0003\u001c\u068d\b\u001c\u0001\u001d"+
		"\u0001\u001d\u0003\u001d\u0691\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d"+
		"\u0001\u001d\u0003\u001d\u0697\b\u001d\u0001\u001d\u0001\u001d\u0001\u001d"+
		"\u0001\u001d\u0001\u001d\u0003\u001d\u069e\b\u001d\u0001\u001d\u0001\u001d"+
		"\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u06a6\b\u001d"+
		"\u0001\u001e\u0001\u001e\u0003\u001e\u06aa\b\u001e\u0001\u001e\u0001\u001e"+
		"\u0001\u001f\u0001\u001f\u0003\u001f\u06b0\b\u001f\u0001 \u0001 \u0001"+
		" \u0001 \u0001 \u0003 \u06b7\b \u0001 \u0001 \u0001 \u0001 \u0001 \u0005"+
		" \u06be\b \n \f \u06c1\t \u0001 \u0001 \u0003 \u06c5\b \u0001 \u0001 "+
		"\u0001 \u0003 \u06ca\b \u0001!\u0001!\u0001!\u0001!\u0001\"\u0001\"\u0001"+
		"\"\u0003\"\u06d3\b\"\u0001\"\u0001\"\u0001#\u0001#\u0001#\u0001#\u0001"+
		"$\u0001$\u0001$\u0001$\u0003$\u06df\b$\u0001$\u0001$\u0003$\u06e3\b$\u0001"+
		"$\u0003$\u06e6\b$\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001"+
		"%\u0001%\u0001%\u0001%\u0001%\u0001%\u0003%\u06f5\b%\u0003%\u06f7\b%\u0001"+
		"%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0003%\u0701\b%\u0003"+
		"%\u0703\b%\u0001%\u0001%\u0001%\u0001%\u0001%\u0001%\u0003%\u070b\b%\u0001"+
		"&\u0001&\u0001&\u0001&\u0003&\u0711\b&\u0003&\u0713\b&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0003&\u071a\b&\u0003&\u071c\b&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0003&\u0725\b&\u0001&\u0001&\u0001&\u0001&\u0003"+
		"&\u072b\b&\u0003&\u072d\b&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0003&\u0737\b&\u0001&\u0001&\u0001&\u0003&\u073c\b&\u0003&\u073e"+
		"\b&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0003"+
		"&\u0749\b&\u0003&\u074b\b&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0001&\u0003&\u0758\b&\u0003&\u075a\b&\u0001&\u0001"+
		"&\u0001&\u0003&\u075f\b&\u0003&\u0761\b&\u0001&\u0001&\u0001&\u0001&\u0001"+
		"&\u0001&\u0001&\u0001&\u0003&\u076b\b&\u0003&\u076d\b&\u0001&\u0001&\u0003"+
		"&\u0771\b&\u0001&\u0001&\u0001&\u0001&\u0003&\u0777\b&\u0001\'\u0001\'"+
		"\u0001\'\u0005\'\u077c\b\'\n\'\f\'\u077f\t\'\u0001(\u0001(\u0001(\u0001"+
		"(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0003"+
		"(\u078e\b(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001"+
		"(\u0001(\u0001(\u0001(\u0001(\u0001(\u0003(\u079e\b(\u0001(\u0001(\u0001"+
		"(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0003(\u07ab"+
		"\b(\u0003(\u07ad\b(\u0001)\u0001)\u0001)\u0005)\u07b2\b)\n)\f)\u07b5\t"+
		")\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0003"+
		"*\u07c0\b*\u0001+\u0001+\u0001+\u0005+\u07c5\b+\n+\f+\u07c8\t+\u0001,"+
		"\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001"+
		",\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001"+
		",\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0003,\u07e5\b,\u0001,\u0001"+
		",\u0001,\u0003,\u07ea\b,\u0001-\u0001-\u0001-\u0005-\u07ef\b-\n-\f-\u07f2"+
		"\t-\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0003.\u07fe\b.\u0001.\u0001.\u0001.\u0003.\u0803\b.\u0001/\u0001/\u0001"+
		"/\u0001/\u0001/\u0001/\u0001/\u0001/\u0001/\u0001/\u0001/\u0001/\u0001"+
		"/\u0001/\u0001/\u0001/\u0003/\u0815\b/\u0001/\u0001/\u0003/\u0819\b/\u0001"+
		"/\u0001/\u0001/\u0001/\u00010\u00010\u00011\u00011\u00011\u00011\u0001"+
		"1\u00011\u00011\u00011\u00031\u0829\b1\u00012\u00012\u00032\u082d\b2\u0001"+
		"3\u00013\u00014\u00014\u00014\u00014\u00034\u0835\b4\u00014\u00034\u0838"+
		"\b4\u00015\u00015\u00015\u00035\u083d\b5\u00016\u00016\u00036\u0841\b"+
		"6\u00016\u00016\u00016\u00036\u0846\b6\u00017\u00017\u00017\u00037\u084b"+
		"\b7\u00018\u00018\u00018\u00018\u00058\u0851\b8\n8\f8\u0854\t8\u00018"+
		"\u00038\u0857\b8\u00038\u0859\b8\u00019\u00019\u00019\u00019\u00019\u0003"+
		"9\u0860\b9\u00019\u00019\u00019\u00039\u0865\b9\u00019\u00019\u00019\u0003"+
		"9\u086a\b9\u00019\u00019\u00019\u00039\u086f\b9\u00019\u00019\u00019\u0003"+
		"9\u0874\b9\u0001:\u0001:\u0001:\u0001:\u0003:\u087a\b:\u0001:\u0003:\u087d"+
		"\b:\u0001;\u0001;\u0001;\u0001;\u0003;\u0883\b;\u0001;\u0001;\u0001;\u0003"+
		";\u0888\b;\u0003;\u088a\b;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;\u0891"+
		"\b;\u0003;\u0893\b;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;\u089b"+
		"\b;\u0001;\u0001;\u0001;\u0001;\u0003;\u08a1\b;\u0003;\u08a3\b;\u0001"+
		";\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;\u08ad\b;\u0001"+
		";\u0001;\u0001;\u0003;\u08b2\b;\u0003;\u08b4\b;\u0001;\u0001;\u0001;\u0001"+
		";\u0001;\u0001;\u0001;\u0001;\u0003;\u08be\b;\u0003;\u08c0\b;\u0001;\u0001"+
		";\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;\u08cc"+
		"\b;\u0001;\u0001;\u0001;\u0003;\u08d1\b;\u0003;\u08d3\b;\u0001;\u0001"+
		";\u0001;\u0001;\u0001;\u0001;\u0001;\u0001;\u0003;\u08dd\b;\u0003;\u08df"+
		"\b;\u0001;\u0001;\u0003;\u08e3\b;\u0001;\u0001;\u0003;\u08e7\b;\u0001"+
		"<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001<\u0001"+
		"<\u0001<\u0001<\u0001<\u0003<\u08f7\b<\u0001<\u0001<\u0001<\u0001<\u0001"+
		"<\u0001<\u0001<\u0003<\u0900\b<\u0003<\u0902\b<\u0001<\u0001<\u0001<\u0001"+
		"<\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0001=\u0003=\u0910"+
		"\b=\u0001>\u0001>\u0003>\u0914\b>\u0001?\u0001?\u0001?\u0001?\u0001?\u0001"+
		"?\u0001?\u0001?\u0001?\u0001?\u0005?\u0920\b?\n?\f?\u0923\t?\u0001?\u0001"+
		"?\u0001?\u0001?\u0001?\u0001?\u0005?\u092b\b?\n?\f?\u092e\t?\u0001?\u0001"+
		"?\u0003?\u0932\b?\u0001@\u0001@\u0001@\u0001@\u0001@\u0001A\u0001A\u0003"+
		"A\u093b\bA\u0001A\u0003A\u093e\bA\u0001A\u0001A\u0001B\u0001B\u0001B\u0001"+
		"B\u0001B\u0001B\u0001B\u0005B\u0949\bB\nB\fB\u094c\tB\u0001B\u0001B\u0003"+
		"B\u0950\bB\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001"+
		"C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001"+
		"C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001"+
		"C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001"+
		"C\u0001C\u0003C\u097a\bC\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001"+
		"D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001"+
		"D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001"+
		"D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001D\u0001"+
		"D\u0001D\u0001D\u0001D\u0001D\u0001D\u0003D\u09a6\bD\u0001E\u0001E\u0001"+
		"E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001"+
		"E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001"+
		"E\u0001E\u0001E\u0003E\u09c1\bE\u0001F\u0001F\u0001F\u0001F\u0001G\u0001"+
		"G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001"+
		"G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001"+
		"G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001"+
		"G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001"+
		"G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001"+
		"G\u0003G\u09fb\bG\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001H\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0003H\u0a5a\bH\u0001I\u0001I\u0001"+
		"I\u0001I\u0001J\u0001J\u0001J\u0001J\u0001K\u0001K\u0001K\u0003K\u0a67"+
		"\bK\u0001K\u0001K\u0001K\u0001K\u0004K\u0a6d\bK\u000bK\fK\u0a6e\u0001"+
		"K\u0001K\u0004K\u0a73\bK\u000bK\fK\u0a74\u0001K\u0001K\u0001K\u0001K\u0001"+
		"K\u0001K\u0001K\u0001K\u0001K\u0001K\u0003K\u0a81\bK\u0001L\u0001L\u0001"+
		"M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0003M\u0a8c\bM\u0001N\u0001"+
		"N\u0001O\u0001O\u0003O\u0a92\bO\u0001O\u0001O\u0003O\u0a96\bO\u0001O\u0001"+
		"O\u0001O\u0001O\u0001O\u0003O\u0a9d\bO\u0001O\u0001O\u0001O\u0003O\u0aa2"+
		"\bO\u0001O\u0001O\u0001O\u0003O\u0aa7\bO\u0001O\u0003O\u0aaa\bO\u0001"+
		"O\u0001O\u0001O\u0001O\u0001O\u0001O\u0003O\u0ab2\bO\u0001O\u0001O\u0001"+
		"O\u0001O\u0001O\u0001O\u0003O\u0aba\bO\u0001O\u0003O\u0abd\bO\u0001O\u0001"+
		"O\u0003O\u0ac1\bO\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0003O\u0ac9"+
		"\bO\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0003O\u0ad1\bO\u0001O\u0001"+
		"O\u0003O\u0ad5\bO\u0001O\u0001O\u0001O\u0001O\u0001O\u0005O\u0adc\bO\n"+
		"O\fO\u0adf\tO\u0003O\u0ae1\bO\u0001P\u0001P\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0001R\u0001R\u0001R\u0003R\u0aec\bR\u0001R\u0001R\u0001R\u0001R\u0001"+
		"R\u0001R\u0001R\u0001R\u0003R\u0af6\bR\u0001R\u0001R\u0001R\u0001R\u0001"+
		"R\u0001R\u0001R\u0001R\u0003R\u0b00\bR\u0001R\u0001R\u0001R\u0001R\u0001"+
		"R\u0003R\u0b07\bR\u0001R\u0001R\u0001R\u0003R\u0b0c\bR\u0001R\u0003R\u0b0f"+
		"\bR\u0001R\u0003R\u0b12\bR\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001"+
		"R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0003R\u0b21\bR\u0001R\u0001"+
		"R\u0001R\u0001R\u0001R\u0005R\u0b28\bR\nR\fR\u0b2b\tR\u0001R\u0001R\u0001"+
		"R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0003R\u0b38"+
		"\bR\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0003R\u0b42"+
		"\bR\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001"+
		"R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001R\u0001"+
		"R\u0001R\u0001R\u0003R\u0b5a\bR\u0001R\u0001R\u0001R\u0001R\u0001R\u0003"+
		"R\u0b61\bR\u0001S\u0001S\u0001T\u0001T\u0001T\u0005T\u0b68\bT\nT\fT\u0b6b"+
		"\tT\u0001U\u0001U\u0001U\u0001U\u0003U\u0b71\bU\u0001U\u0001U\u0001U\u0001"+
		"U\u0001U\u0004U\u0b78\bU\u000bU\fU\u0b79\u0003U\u0b7c\bU\u0001U\u0001"+
		"U\u0001U\u0001U\u0003U\u0b82\bU\u0001U\u0001U\u0001U\u0001U\u0001U\u0003"+
		"U\u0b89\bU\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0003U\u0b91\bU\u0001"+
		"U\u0001U\u0001U\u0003U\u0b96\bU\u0001U\u0001U\u0001U\u0001U\u0003U\u0b9c"+
		"\bU\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0003U\u0ba5\bU\u0001"+
		"U\u0001U\u0001U\u0001U\u0001U\u0005U\u0bac\bU\nU\fU\u0baf\tU\u0001U\u0001"+
		"U\u0001U\u0001U\u0003U\u0bb5\bU\u0001U\u0001U\u0001U\u0003U\u0bba\bU\u0001"+
		"V\u0001V\u0001V\u0001V\u0003V\u0bc0\bV\u0001V\u0001V\u0001V\u0003V\u0bc5"+
		"\bV\u0001V\u0001V\u0001V\u0001V\u0003V\u0bcb\bV\u0001V\u0001V\u0001V\u0001"+
		"V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0003V\u0bd8\bV\u0001"+
		"V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001"+
		"V\u0003V\u0be5\bV\u0001V\u0001V\u0001V\u0001V\u0001V\u0003V\u0bec\bV\u0001"+
		"V\u0003V\u0bef\bV\u0001V\u0001V\u0001V\u0001V\u0003V\u0bf5\bV\u0001V\u0001"+
		"V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0003V\u0bff\bV\u0001V\u0001"+
		"V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0005"+
		"V\u0c0c\bV\nV\fV\u0c0f\tV\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0001"+
		"V\u0001V\u0001V\u0003V\u0c1a\bV\u0001V\u0001V\u0001V\u0001V\u0001V\u0003"+
		"V\u0c21\bV\u0001W\u0001W\u0001W\u0001W\u0001X\u0001X\u0001X\u0001X\u0001"+
		"Y\u0001Y\u0001Y\u0005Y\u0c2e\bY\nY\fY\u0c31\tY\u0001Z\u0001Z\u0001Z\u0005"+
		"Z\u0c36\bZ\nZ\fZ\u0c39\tZ\u0001[\u0001[\u0001[\u0005[\u0c3e\b[\n[\f[\u0c41"+
		"\t[\u0001\\\u0001\\\u0001\\\u0001\\\u0003\\\u0c47\b\\\u0001\\\u0001\\"+
		"\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003\\\u0c52"+
		"\b\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003\\\u0c59\b\\\u0001\\"+
		"\u0003\\\u0c5c\b\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003\\\u0c62\b\\\u0001"+
		"\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003\\\u0c6a\b\\\u0001\\\u0001"+
		"\\\u0001\\\u0001\\\u0003\\\u0c70\b\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001"+
		"\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003\\\u0c7c\b\\\u0001\\\u0001"+
		"\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001"+
		"\\\u0001\\\u0001\\\u0003\\\u0c8b\b\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001"+
		"\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003\\\u0c97\b\\\u0001\\\u0001"+
		"\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003"+
		"\\\u0ca3\b\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001"+
		"\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003\\\u0cb2\b\\\u0001\\\u0001"+
		"\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003"+
		"\\\u0cbe\b\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003\\\u0cc6"+
		"\b\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003\\\u0ccc\b\\\u0001\\\u0001\\"+
		"\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003"+
		"\\\u0cd8\b\\\u0001\\\u0001\\\u0001\\\u0003\\\u0cdd\b\\\u0001]\u0001]\u0001"+
		"]\u0001]\u0003]\u0ce3\b]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0001"+
		"]\u0001]\u0001]\u0003]\u0cee\b]\u0001]\u0001]\u0001]\u0005]\u0cf3\b]\n"+
		"]\f]\u0cf6\t]\u0001]\u0003]\u0cf9\b]\u0003]\u0cfb\b]\u0001^\u0001^\u0001"+
		"^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001"+
		"^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001"+
		"^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0005^\u0d1a\b^\n^\f^\u0d1d"+
		"\t^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0005^\u0d27"+
		"\b^\n^\f^\u0d2a\t^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001"+
		"^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001"+
		"^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0003^\u0d44\b^\u0001_\u0001"+
		"_\u0001_\u0003_\u0d49\b_\u0001_\u0001_\u0001_\u0003_\u0d4e\b_\u0001_\u0001"+
		"_\u0001`\u0001`\u0001`\u0005`\u0d55\b`\n`\f`\u0d58\t`\u0001a\u0001a\u0001"+
		"a\u0001a\u0003a\u0d5e\ba\u0001a\u0001a\u0001a\u0001a\u0001a\u0001a\u0001"+
		"a\u0001a\u0001a\u0001a\u0003a\u0d6a\ba\u0001a\u0001a\u0001a\u0001a\u0001"+
		"a\u0001a\u0001a\u0001a\u0001a\u0003a\u0d75\ba\u0001a\u0001a\u0001a\u0001"+
		"a\u0003a\u0d7b\ba\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001"+
		"b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0001"+
		"b\u0003b\u0d8f\bb\u0001b\u0001b\u0003b\u0d93\bb\u0001b\u0003b\u0d96\b"+
		"b\u0001b\u0001b\u0003b\u0d9a\bb\u0001c\u0001c\u0001c\u0001c\u0001c\u0001"+
		"d\u0001d\u0003d\u0da3\bd\u0001d\u0001d\u0003d\u0da7\bd\u0001d\u0001d\u0001"+
		"d\u0003d\u0dac\bd\u0001d\u0001d\u0003d\u0db0\bd\u0001d\u0001d\u0003d\u0db4"+
		"\bd\u0001d\u0001d\u0003d\u0db8\bd\u0001d\u0001d\u0001d\u0003d\u0dbd\b"+
		"d\u0001d\u0001d\u0003d\u0dc1\bd\u0001d\u0001d\u0003d\u0dc5\bd\u0001d\u0001"+
		"d\u0001d\u0001d\u0001d\u0001d\u0003d\u0dcd\bd\u0001d\u0001d\u0001d\u0001"+
		"d\u0001d\u0001d\u0003d\u0dd5\bd\u0001d\u0001d\u0001d\u0001d\u0001d\u0001"+
		"d\u0003d\u0ddd\bd\u0001e\u0001e\u0001e\u0003e\u0de2\be\u0001e\u0001e\u0001"+
		"e\u0003e\u0de7\be\u0001e\u0003e\u0dea\be\u0001e\u0001e\u0001e\u0001e\u0001"+
		"e\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0003e\u0df9"+
		"\be\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0003"+
		"e\u0e04\be\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0003e\u0e0d"+
		"\be\u0001e\u0001e\u0001e\u0001e\u0001e\u0003e\u0e14\be\u0001e\u0001e\u0001"+
		"e\u0003e\u0e19\be\u0003e\u0e1b\be\u0001f\u0001f\u0001f\u0003f\u0e20\b"+
		"f\u0001f\u0001f\u0001f\u0003f\u0e25\bf\u0001f\u0001f\u0001f\u0001f\u0001"+
		"f\u0001f\u0001f\u0001f\u0003f\u0e2f\bf\u0001f\u0001f\u0001f\u0003f\u0e34"+
		"\bf\u0001f\u0001f\u0001f\u0001f\u0001f\u0001f\u0001f\u0003f\u0e3d\bf\u0001"+
		"f\u0001f\u0001f\u0003f\u0e42\bf\u0001f\u0001f\u0001f\u0001f\u0001f\u0001"+
		"f\u0001f\u0003f\u0e4b\bf\u0001f\u0001f\u0001f\u0003f\u0e50\bf\u0001f\u0001"+
		"f\u0001f\u0001f\u0001f\u0003f\u0e57\bf\u0001g\u0001g\u0001g\u0001g\u0003"+
		"g\u0e5d\bg\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001"+
		"g\u0003g\u0e68\bg\u0001g\u0001g\u0001g\u0001g\u0001g\u0003g\u0e6f\bg\u0001"+
		"g\u0001g\u0001g\u0003g\u0e74\bg\u0001g\u0001g\u0001g\u0001g\u0003g\u0e7a"+
		"\bg\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001"+
		"g\u0005g\u0e86\bg\ng\fg\u0e89\tg\u0001g\u0001g\u0001g\u0003g\u0e8e\bg"+
		"\u0001g\u0001g\u0001g\u0001g\u0003g\u0e94\bg\u0001g\u0001g\u0001g\u0001"+
		"g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0003g\u0ea0\bg\u0001g\u0001"+
		"g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001"+
		"g\u0001g\u0003g\u0eaf\bg\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001"+
		"g\u0001g\u0001g\u0001g\u0003g\u0ebb\bg\u0001g\u0001g\u0001g\u0001g\u0001"+
		"g\u0001g\u0001g\u0001g\u0001g\u0001g\u0003g\u0ec7\bg\u0001g\u0001g\u0001"+
		"g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001"+
		"g\u0003g\u0ed6\bg\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001"+
		"g\u0001g\u0001g\u0003g\u0ee2\bg\u0001g\u0001g\u0001g\u0001g\u0001g\u0001"+
		"g\u0003g\u0eea\bg\u0001g\u0001g\u0001g\u0001g\u0003g\u0ef0\bg\u0001g\u0001"+
		"g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0003g\u0efc"+
		"\bg\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0003g\u0f05\bg\u0001"+
		"g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0003g\u0f0e\bg\u0001g\u0001"+
		"g\u0001g\u0003g\u0f13\bg\u0001h\u0001h\u0001h\u0001h\u0001i\u0001i\u0001"+
		"i\u0001i\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0005j\u0f23\bj\nj"+
		"\fj\u0f26\tj\u0001j\u0001j\u0001k\u0001k\u0001k\u0001k\u0001k\u0001k\u0001"+
		"l\u0001l\u0001l\u0001l\u0003l\u0f34\bl\u0001l\u0001l\u0001l\u0003l\u0f39"+
		"\bl\u0001l\u0003l\u0f3c\bl\u0001l\u0001l\u0001l\u0001l\u0001l\u0001l\u0003"+
		"l\u0f44\bl\u0001l\u0001l\u0001l\u0003l\u0f49\bl\u0003l\u0f4b\bl\u0001"+
		"l\u0001l\u0001l\u0001l\u0001l\u0005l\u0f52\bl\nl\fl\u0f55\tl\u0003l\u0f57"+
		"\bl\u0003l\u0f59\bl\u0001m\u0001m\u0001m\u0003m\u0f5e\bm\u0001m\u0001"+
		"m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0003m\u0f68\bm\u0001m\u0001"+
		"m\u0001m\u0001m\u0001m\u0001m\u0001m\u0003m\u0f71\bm\u0001m\u0001m\u0001"+
		"m\u0001m\u0001m\u0001m\u0001m\u0003m\u0f7a\bm\u0001m\u0001m\u0001m\u0001"+
		"m\u0001m\u0001m\u0003m\u0f82\bm\u0001m\u0001m\u0001m\u0003m\u0f87\bm\u0001"+
		"n\u0001n\u0001n\u0001n\u0001n\u0003n\u0f8e\bn\u0001n\u0001n\u0001n\u0001"+
		"n\u0001n\u0001n\u0001n\u0001n\u0001n\u0001n\u0001n\u0003n\u0f9b\bn\u0001"+
		"n\u0001n\u0001n\u0001n\u0001n\u0001n\u0001n\u0001n\u0001n\u0001n\u0003"+
		"n\u0fa7\bn\u0001n\u0001n\u0001n\u0001n\u0003n\u0fad\bn\u0001o\u0001o\u0001"+
		"o\u0003o\u0fb2\bo\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001"+
		"o\u0003o\u0fbc\bo\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0001"+
		"o\u0003o\u0fc6\bo\u0001o\u0001o\u0001o\u0001o\u0001o\u0003o\u0fcd\bo\u0001"+
		"o\u0001o\u0001o\u0003o\u0fd2\bo\u0001o\u0003o\u0fd5\bo\u0001o\u0003o\u0fd8"+
		"\bo\u0001o\u0001o\u0001o\u0003o\u0fdd\bo\u0001o\u0001o\u0001o\u0001o\u0001"+
		"o\u0001o\u0003o\u0fe5\bo\u0001o\u0001o\u0001o\u0001o\u0001o\u0001o\u0003"+
		"o\u0fed\bo\u0001o\u0001o\u0001o\u0001o\u0001o\u0005o\u0ff4\bo\no\fo\u0ff7"+
		"\to\u0001o\u0001o\u0001o\u0003o\u0ffc\bo\u0001o\u0001o\u0001o\u0001o\u0001"+
		"o\u0003o\u1003\bo\u0001p\u0001p\u0001q\u0001q\u0001q\u0003q\u100a\bq\u0001"+
		"q\u0001q\u0001q\u0001q\u0001q\u0001q\u0001q\u0001q\u0003q\u1014\bq\u0001"+
		"q\u0001q\u0003q\u1018\bq\u0001q\u0001q\u0003q\u101c\bq\u0001q\u0003q\u101f"+
		"\bq\u0001q\u0003q\u1022\bq\u0001q\u0001q\u0001q\u0003q\u1027\bq\u0001"+
		"q\u0001q\u0001q\u0003q\u102c\bq\u0001q\u0001q\u0003q\u1030\bq\u0001q\u0001"+
		"q\u0001q\u0003q\u1035\bq\u0001q\u0001q\u0001q\u0001q\u0003q\u103b\bq\u0001"+
		"r\u0001r\u0003r\u103f\br\u0001r\u0001r\u0001r\u0001r\u0001r\u0001r\u0001"+
		"r\u0003r\u1048\br\u0001r\u0001r\u0001r\u0003r\u104d\br\u0001r\u0001r\u0001"+
		"r\u0003r\u1052\br\u0001r\u0001r\u0001r\u0003r\u1057\br\u0001r\u0001r\u0001"+
		"r\u0001r\u0001r\u0001r\u0001r\u0003r\u1060\br\u0003r\u1062\br\u0001r\u0001"+
		"r\u0001r\u0003r\u1067\br\u0001r\u0001r\u0001r\u0003r\u106c\br\u0001r\u0001"+
		"r\u0001r\u0001r\u0001r\u0001r\u0001r\u0003r\u1075\br\u0003r\u1077\br\u0001"+
		"r\u0001r\u0001r\u0003r\u107c\br\u0001r\u0001r\u0001r\u0003r\u1081\br\u0001"+
		"r\u0001r\u0001r\u0001r\u0001r\u0001r\u0003r\u1089\br\u0001r\u0001r\u0001"+
		"r\u0001r\u0001r\u0001r\u0003r\u1091\br\u0001r\u0001r\u0001r\u0001r\u0001"+
		"r\u0001r\u0003r\u1099\br\u0001r\u0001r\u0001r\u0003r\u109e\br\u0001r\u0001"+
		"r\u0001r\u0003r\u10a3\br\u0001r\u0001r\u0003r\u10a7\br\u0001r\u0001r\u0003"+
		"r\u10ab\br\u0001r\u0001r\u0001r\u0001r\u0001r\u0005r\u10b2\br\nr\fr\u10b5"+
		"\tr\u0001r\u0001r\u0003r\u10b9\br\u0001r\u0001r\u0001r\u0001r\u0001r\u0001"+
		"r\u0003r\u10c1\br\u0001r\u0001r\u0001r\u0001r\u0003r\u10c7\br\u0001s\u0001"+
		"s\u0001s\u0001s\u0001s\u0001s\u0001s\u0001s\u0003s\u10d1\bs\u0001t\u0001"+
		"t\u0003t\u10d5\bt\u0001t\u0001t\u0003t\u10d9\bt\u0001t\u0001t\u0001t\u0001"+
		"t\u0001t\u0003t\u10e0\bt\u0001t\u0003t\u10e3\bt\u0001t\u0001t\u0001t\u0003"+
		"t\u10e8\bt\u0001t\u0001t\u0001t\u0003t\u10ed\bt\u0001t\u0001t\u0001t\u0001"+
		"t\u0001t\u0001t\u0001t\u0003t\u10f6\bt\u0003t\u10f8\bt\u0001t\u0001t\u0001"+
		"t\u0003t\u10fd\bt\u0001t\u0001t\u0001t\u0003t\u1102\bt\u0001t\u0001t\u0001"+
		"t\u0001t\u0001t\u0001t\u0001t\u0003t\u110b\bt\u0003t\u110d\bt\u0001t\u0001"+
		"t\u0001t\u0003t\u1112\bt\u0001t\u0001t\u0001t\u0003t\u1117\bt\u0001t\u0001"+
		"t\u0001t\u0001t\u0001t\u0001t\u0003t\u111f\bt\u0001t\u0001t\u0001t\u0001"+
		"t\u0001t\u0001t\u0003t\u1127\bt\u0001t\u0001t\u0001t\u0001t\u0001t\u0001"+
		"t\u0003t\u112f\bt\u0001t\u0001t\u0001t\u0001t\u0001t\u0003t\u1136\bt\u0001"+
		"t\u0001t\u0001t\u0001t\u0001t\u0001t\u0003t\u113e\bt\u0001t\u0001t\u0003"+
		"t\u1142\bt\u0001t\u0001t\u0001t\u0001t\u0001t\u0005t\u1149\bt\nt\ft\u114c"+
		"\tt\u0001t\u0001t\u0003t\u1150\bt\u0001t\u0001t\u0001t\u0001t\u0001t\u0001"+
		"t\u0003t\u1158\bt\u0001t\u0001t\u0001t\u0001t\u0003t\u115e\bt\u0001u\u0001"+
		"u\u0001v\u0001v\u0003v\u1164\bv\u0001v\u0001v\u0003v\u1168\bv\u0001v\u0001"+
		"v\u0001v\u0001v\u0001v\u0003v\u116f\bv\u0001v\u0003v\u1172\bv\u0001v\u0001"+
		"v\u0001v\u0003v\u1177\bv\u0001v\u0001v\u0001v\u0003v\u117c\bv\u0001v\u0001"+
		"v\u0001v\u0003v\u1181\bv\u0001v\u0001v\u0001v\u0003v\u1186\bv\u0001v\u0001"+
		"v\u0001v\u0003v\u118b\bv\u0001v\u0001v\u0001v\u0003v\u1190\bv\u0001v\u0001"+
		"v\u0001v\u0003v\u1195\bv\u0001v\u0001v\u0001v\u0003v\u119a\bv\u0001v\u0001"+
		"v\u0001v\u0003v\u119f\bv\u0001v\u0001v\u0001v\u0003v\u11a4\bv\u0001v\u0001"+
		"v\u0001v\u0003v\u11a9\bv\u0001v\u0001v\u0001v\u0003v\u11ae\bv\u0001v\u0001"+
		"v\u0001v\u0003v\u11b3\bv\u0001v\u0001v\u0003v\u11b7\bv\u0001v\u0001v\u0003"+
		"v\u11bb\bv\u0001v\u0001v\u0001v\u0001v\u0001v\u0001v\u0003v\u11c3\bv\u0001"+
		"v\u0001v\u0001v\u0001v\u0001v\u0001v\u0003v\u11cb\bv\u0001v\u0001v\u0001"+
		"v\u0001v\u0003v\u11d1\bv\u0001w\u0001w\u0003w\u11d5\bw\u0001w\u0001w\u0003"+
		"w\u11d9\bw\u0001w\u0001w\u0001w\u0001w\u0001w\u0003w\u11e0\bw\u0001w\u0001"+
		"w\u0001w\u0003w\u11e5\bw\u0001w\u0003w\u11e8\bw\u0001w\u0001w\u0003w\u11ec"+
		"\bw\u0001w\u0001w\u0003w\u11f0\bw\u0001w\u0001w\u0001w\u0001w\u0001w\u0005"+
		"w\u11f7\bw\nw\fw\u11fa\tw\u0001w\u0001w\u0003w\u11fe\bw\u0001w\u0001w"+
		"\u0001w\u0001w\u0001w\u0001w\u0003w\u1206\bw\u0001w\u0001w\u0001w\u0001"+
		"w\u0003w\u120c\bw\u0001x\u0001x\u0001y\u0001y\u0001y\u0001y\u0001y\u0001"+
		"y\u0001y\u0001y\u0001y\u0001y\u0005y\u121a\by\ny\fy\u121d\ty\u0003y\u121f"+
		"\by\u0001z\u0001z\u0001z\u0001z\u0003z\u1225\bz\u0001z\u0001z\u0001z\u0005"+
		"z\u122a\bz\nz\fz\u122d\tz\u0001z\u0001z\u0001z\u0001z\u0003z\u1233\bz"+
		"\u0001z\u0001z\u0001z\u0001z\u0003z\u1239\bz\u0001z\u0001z\u0001z\u0001"+
		"z\u0003z\u123f\bz\u0001z\u0001z\u0001z\u0001z\u0001z\u0001z\u0001z\u0001"+
		"z\u0001z\u0003z\u124a\bz\u0001z\u0001z\u0001z\u0003z\u124f\bz\u0003z\u1251"+
		"\bz\u0001{\u0001{\u0001{\u0001{\u0003{\u1257\b{\u0001{\u0001{\u0001{\u0005"+
		"{\u125c\b{\n{\f{\u125f\t{\u0001{\u0001{\u0001{\u0001{\u0003{\u1265\b{"+
		"\u0001{\u0001{\u0001{\u0001{\u0003{\u126b\b{\u0001{\u0001{\u0001{\u0001"+
		"{\u0003{\u1271\b{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001{\u0001"+
		"{\u0001{\u0003{\u127c\b{\u0001{\u0001{\u0001{\u0003{\u1281\b{\u0003{\u1283"+
		"\b{\u0001|\u0001|\u0001|\u0003|\u1288\b|\u0001|\u0001|\u0001|\u0001|\u0001"+
		"|\u0001|\u0001|\u0005|\u1291\b|\n|\f|\u1294\t|\u0001|\u0001|\u0001|\u0003"+
		"|\u1299\b|\u0001|\u0001|\u0001|\u0003|\u129e\b|\u0001|\u0001|\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0005|\u12a7\b|\n|\f|\u12aa\t|\u0001|\u0001|\u0001"+
		"|\u0003|\u12af\b|\u0001|\u0001|\u0001|\u0003|\u12b4\b|\u0001|\u0001|\u0001"+
		"|\u0001|\u0001|\u0001|\u0001|\u0005|\u12bd\b|\n|\f|\u12c0\t|\u0003|\u12c2"+
		"\b|\u0001|\u0003|\u12c5\b|\u0001|\u0001|\u0001|\u0003|\u12ca\b|\u0001"+
		"|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001|\u0001"+
		"|\u0003|\u12d7\b|\u0001|\u0001|\u0001|\u0001|\u0003|\u12dd\b|\u0001}\u0001"+
		"}\u0003}\u12e1\b}\u0001}\u0001}\u0003}\u12e5\b}\u0001}\u0001}\u0001}\u0003"+
		"}\u12ea\b}\u0001}\u0003}\u12ed\b}\u0001}\u0001}\u0001}\u0001}\u0001}\u0001"+
		"}\u0003}\u12f5\b}\u0001}\u0001}\u0001}\u0001}\u0001}\u0001}\u0003}\u12fd"+
		"\b}\u0001}\u0003}\u1300\b}\u0001}\u0001}\u0003}\u1304\b}\u0001}\u0001"+
		"}\u0003}\u1308\b}\u0001}\u0001}\u0001}\u0001}\u0001}\u0003}\u130f\b}\u0001"+
		"}\u0001}\u0001}\u0001}\u0001}\u0001}\u0003}\u1317\b}\u0001}\u0001}\u0003"+
		"}\u131b\b}\u0001}\u0001}\u0001}\u0001}\u0003}\u1321\b}\u0001~\u0001~\u0001"+
		"~\u0003~\u1326\b~\u0001~\u0001~\u0001~\u0003~\u132b\b~\u0001~\u0003~\u132e"+
		"\b~\u0001~\u0001~\u0001~\u0003~\u1333\b~\u0001~\u0001~\u0001~\u0001~\u0001"+
		"~\u0001~\u0001~\u0001~\u0001~\u0001~\u0001~\u0003~\u1340\b~\u0001~\u0001"+
		"~\u0001~\u0001~\u0003~\u1346\b~\u0001\u007f\u0001\u007f\u0001\u007f\u0003"+
		"\u007f\u134b\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001"+
		"\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u1355\b\u007f\u0001"+
		"\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001"+
		"\u007f\u0001\u007f\u0003\u007f\u135f\b\u007f\u0001\u007f\u0001\u007f\u0001"+
		"\u007f\u0001\u007f\u0003\u007f\u1365\b\u007f\u0001\u007f\u0001\u007f\u0001"+
		"\u007f\u0003\u007f\u136a\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001"+
		"\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u1372\b\u007f\u0001\u007f\u0001"+
		"\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u137a"+
		"\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u137f\b\u007f"+
		"\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f"+
		"\u0003\u007f\u1387\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f"+
		"\u138c\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u1391\b"+
		"\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u1396\b\u007f\u0001"+
		"\u007f\u0003\u007f\u1399\b\u007f\u0001\u007f\u0003\u007f\u139c\b\u007f"+
		"\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u13a1\b\u007f\u0001\u007f"+
		"\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f"+
		"\u13a9\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f"+
		"\u0001\u007f\u0003\u007f\u13b1\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f"+
		"\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f"+
		"\u13bb\b\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u13c0\b"+
		"\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0003\u007f\u13c5\b\u007f\u0001"+
		"\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001"+
		"\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001"+
		"\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001"+
		"\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u13dd\b\u0080\u0001"+
		"\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u13e4"+
		"\b\u0080\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001"+
		"\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0003\u0081\u13f0"+
		"\b\u0081\u0001\u0081\u0001\u0081\u0003\u0081\u13f4\b\u0081\u0001\u0081"+
		"\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0003\u0081"+
		"\u13fc\b\u0081\u0001\u0082\u0001\u0082\u0003\u0082\u1400\b\u0082\u0001"+
		"\u0082\u0003\u0082\u1403\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0005"+
		"\u0082\u1408\b\u0082\n\u0082\f\u0082\u140b\t\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0005\u0082\u1418\b\u0082\n\u0082"+
		"\f\u0082\u141b\t\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0001\u0082\u0005\u0082\u1422\b\u0082\n\u0082\f\u0082\u1425\t\u0082\u0003"+
		"\u0082\u1427\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001"+
		"\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001"+
		"\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u1437\b\u0082\u0001"+
		"\u0082\u0003\u0082\u143a\b\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001"+
		"\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001"+
		"\u0082\u0001\u0082\u0005\u0082\u1447\b\u0082\n\u0082\f\u0082\u144a\t\u0082"+
		"\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0005\u0082\u1450\b\u0082"+
		"\n\u0082\f\u0082\u1453\t\u0082\u0001\u0082\u0001\u0082\u0003\u0082\u1457"+
		"\b\u0082\u0001\u0082\u0003\u0082\u145a\b\u0082\u0001\u0082\u0003\u0082"+
		"\u145d\b\u0082\u0001\u0083\u0003\u0083\u1460\b\u0083\u0001\u0083\u0001"+
		"\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001"+
		"\u0083\u0001\u0083\u0001\u0083\u0003\u0083\u146c\b\u0083\u0001\u0083\u0001"+
		"\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0003\u0083\u1473\b\u0083\u0001"+
		"\u0083\u0001\u0083\u0003\u0083\u1477\b\u0083\u0001\u0083\u0003\u0083\u147a"+
		"\b\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0003"+
		"\u0083\u1481\b\u0083\u0001\u0084\u0001\u0084\u0003\u0084\u1485\b\u0084"+
		"\u0001\u0084\u0001\u0084\u0003\u0084\u1489\b\u0084\u0001\u0084\u0005\u0084"+
		"\u148c\b\u0084\n\u0084\f\u0084\u148f\t\u0084\u0001\u0084\u0001\u0084\u0001"+
		"\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0003\u0084\u1498"+
		"\b\u0084\u0001\u0084\u0001\u0084\u0003\u0084\u149c\b\u0084\u0001\u0085"+
		"\u0003\u0085\u149f\b\u0085\u0001\u0085\u0001\u0085\u0001\u0086\u0003\u0086"+
		"\u14a4\b\u0086\u0001\u0086\u0001\u0086\u0001\u0087\u0001\u0087\u0001\u0087"+
		"\u0001\u0088\u0001\u0088\u0003\u0088\u14ad\b\u0088\u0001\u0088\u0001\u0088"+
		"\u0001\u0088\u0001\u0088\u0003\u0088\u14b3\b\u0088\u0001\u0088\u0001\u0088"+
		"\u0003\u0088\u14b7\b\u0088\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089"+
		"\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008a\u0001\u008b\u0001\u008b"+
		"\u0001\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c"+
		"\u0001\u008c\u0003\u008c\u14ca\b\u008c\u0001\u008d\u0005\u008d\u14cd\b"+
		"\u008d\n\u008d\f\u008d\u14d0\t\u008d\u0001\u008d\u0001\u008d\u0003\u008d"+
		"\u14d4\b\u008d\u0001\u008d\u0001\u008d\u0003\u008d\u14d8\b\u008d\u0001"+
		"\u008d\u0001\u008d\u0003\u008d\u14dc\b\u008d\u0003\u008d\u14de\b\u008d"+
		"\u0003\u008d\u14e0\b\u008d\u0001\u008e\u0001\u008e\u0003\u008e\u14e4\b"+
		"\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001"+
		"\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001"+
		"\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0003\u008e\u14f5\b\u008e\u0001"+
		"\u008e\u0003\u008e\u14f8\b\u008e\u0001\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001"+
		"\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0003\u008f\u1508"+
		"\b\u008f\u0001\u008f\u0001\u008f\u0003\u008f\u150c\b\u008f\u0001\u008f"+
		"\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f"+
		"\u0001\u008f\u0001\u008f\u0003\u008f\u1517\b\u008f\u0001\u008f\u0003\u008f"+
		"\u151a\b\u008f\u0001\u008f\u0003\u008f\u151d\b\u008f\u0001\u008f\u0001"+
		"\u008f\u0001\u008f\u0003\u008f\u1522\b\u008f\u0001\u0090\u0001\u0090\u0001"+
		"\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0005\u0090\u152b"+
		"\b\u0090\n\u0090\f\u0090\u152e\t\u0090\u0003\u0090\u1530\b\u0090\u0001"+
		"\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0001"+
		"\u0090\u0005\u0090\u1539\b\u0090\n\u0090\f\u0090\u153c\t\u0090\u0003\u0090"+
		"\u153e\b\u0090\u0003\u0090\u1540\b\u0090\u0001\u0091\u0001\u0091\u0001"+
		"\u0091\u0001\u0091\u0003\u0091\u1546\b\u0091\u0001\u0091\u0001\u0091\u0001"+
		"\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001"+
		"\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u1553\b\u0092\u0001\u0092\u0001"+
		"\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001"+
		"\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001"+
		"\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u1566\b\u0092\u0001"+
		"\u0092\u0003\u0092\u1569\b\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001"+
		"\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001"+
		"\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001"+
		"\u0092\u0001\u0092\u0005\u0092\u157c\b\u0092\n\u0092\f\u0092\u157f\t\u0092"+
		"\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092"+
		"\u0001\u0092\u0005\u0092\u1588\b\u0092\n\u0092\f\u0092\u158b\t\u0092\u0003"+
		"\u0092\u158d\b\u0092\u0001\u0093\u0001\u0093\u0001\u0093\u0005\u0093\u1592"+
		"\b\u0093\n\u0093\f\u0093\u1595\t\u0093\u0001\u0094\u0003\u0094\u1598\b"+
		"\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0095\u0001\u0095\u0001"+
		"\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001"+
		"\u0095\u0003\u0095\u15a6\b\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001"+
		"\u0095\u0001\u0095\u0003\u0095\u15ad\b\u0095\u0001\u0095\u0001\u0095\u0003"+
		"\u0095\u15b1\b\u0095\u0001\u0095\u0003\u0095\u15b4\b\u0095\u0001\u0095"+
		"\u0001\u0095\u0001\u0095\u0001\u0095\u0003\u0095\u15ba\b\u0095\u0001\u0096"+
		"\u0003\u0096\u15bd\b\u0096\u0001\u0096\u0001\u0096\u0001\u0096\u0001\u0097"+
		"\u0001\u0097\u0001\u0097\u0001\u0097\u0001\u0098\u0001\u0098\u0001\u0098"+
		"\u0003\u0098\u15c9\b\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0099"+
		"\u0001\u0099\u0001\u0099\u0003\u0099\u15d1\b\u0099\u0001\u0099\u0001\u0099"+
		"\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099\u15d9\b\u0099"+
		"\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099"+
		"\u0001\u0099\u0001\u0099\u0003\u0099\u15e3\b\u0099\u0001\u0099\u0001\u0099"+
		"\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099\u15ea\b\u0099\u0001\u0099"+
		"\u0003\u0099\u15ed\b\u0099\u0001\u0099\u0003\u0099\u15f0\b\u0099\u0001"+
		"\u0099\u0003\u0099\u15f3\b\u0099\u0001\u0099\u0003\u0099\u15f6\b\u0099"+
		"\u0001\u0099\u0003\u0099\u15f9\b\u0099\u0001\u0099\u0003\u0099\u15fc\b"+
		"\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099\u1601\b\u0099\u0001"+
		"\u0099\u0001\u0099\u0001\u0099\u0003\u0099\u1606\b\u0099\u0001\u0099\u0003"+
		"\u0099\u1609\b\u0099\u0001\u0099\u0003\u0099\u160c\b\u0099\u0001\u0099"+
		"\u0003\u0099\u160f\b\u0099\u0001\u0099\u0003\u0099\u1612\b\u0099\u0001"+
		"\u0099\u0003\u0099\u1615\b\u0099\u0001\u0099\u0003\u0099\u1618\b\u0099"+
		"\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099\u161d\b\u0099\u0001\u0099"+
		"\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099"+
		"\u1625\b\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099"+
		"\u0001\u0099\u0003\u0099\u162d\b\u0099\u0001\u0099\u0001\u0099\u0001\u0099"+
		"\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099"+
		"\u1637\b\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099\u0001\u0099"+
		"\u0003\u0099\u163e\b\u0099\u0001\u009a\u0001\u009a\u0001\u009a\u0003\u009a"+
		"\u1643\b\u009a\u0001\u009a\u0001\u009a\u0001\u009a\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0003\u009b\u164b\b\u009b\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0003\u009b"+
		"\u1655\b\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0003\u009b\u165e\b\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0003\u009b"+
		"\u1673\b\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0003\u009b\u167b\b\u009b\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0001\u009b\u0003\u009b\u1683\b\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0003\u009b"+
		"\u1691\b\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0003\u009b"+
		"\u169d\b\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0003\u009b\u16b1\b\u009b\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0001\u009b\u0003\u009b\u16bf\b\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0003\u009b"+
		"\u16cd\b\u009b\u0001\u009b\u0003\u009b\u16d0\b\u009b\u0001\u009b\u0001"+
		"\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0003\u009b\u16d7\b\u009b\u0001"+
		"\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001"+
		"\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0003\u009b\u16e3\b\u009b\u0001"+
		"\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001"+
		"\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0001\u009b\u0003\u009b\u16f0"+
		"\b\u009b\u0001\u009c\u0001\u009c\u0001\u009d\u0001\u009d\u0001\u009d\u0003"+
		"\u009d\u16f7\b\u009d\u0001\u009d\u0001\u009d\u0001\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0005\u009e\u1708"+
		"\b\u009e\n\u009e\f\u009e\u170b\t\u009e\u0001\u009e\u0003\u009e\u170e\b"+
		"\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0003\u009e\u171d\b\u009e\u0001\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0003\u009e\u1723\b\u009e\u0001\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0003\u009e\u172a\b\u009e\u0001\u009e\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0003\u009e\u1730\b\u009e\u0001\u009f\u0001"+
		"\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001"+
		"\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001"+
		"\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001"+
		"\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001"+
		"\u009f\u0003\u009f\u174c\b\u009f\u0001\u009f\u0001\u009f\u0001\u009f\u0001"+
		"\u009f\u0001\u009f\u0001\u009f\u0003\u009f\u1754\b\u009f\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001"+
		"\u00a0\u0001\u00a0\u0005\u00a0\u1765\b\u00a0\n\u00a0\f\u00a0\u1768\t\u00a0"+
		"\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0"+
		"\u0001\u00a0\u0001\u00a0\u0005\u00a0\u1772\b\u00a0\n\u00a0\f\u00a0\u1775"+
		"\t\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0003\u00a0\u177b"+
		"\b\u00a0\u0001\u00a1\u0003\u00a1\u177e\b\u00a1\u0001\u00a1\u0001\u00a1"+
		"\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1"+
		"\u0003\u00a1\u1788\b\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1"+
		"\u0001\u00a1\u0001\u00a1\u0003\u00a1\u1790\b\u00a1\u0001\u00a1\u0003\u00a1"+
		"\u1793\b\u00a1\u0001\u00a1\u0003\u00a1\u1796\b\u00a1\u0001\u00a1\u0001"+
		"\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001"+
		"\u00a1\u0001\u00a1\u0003\u00a1\u17a1\b\u00a1\u0001\u00a2\u0003\u00a2\u17a4"+
		"\b\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0003\u00a2\u17a9\b\u00a2"+
		"\u0003\u00a2\u17ab\b\u00a2\u0001\u00a2\u0003\u00a2\u17ae\b\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0005\u00a2\u17c3\b\u00a2\n\u00a2\f\u00a2\u17c6\t\u00a2\u0001\u00a2"+
		"\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0005\u00a2\u17cd\b\u00a2"+
		"\n\u00a2\f\u00a2\u17d0\t\u00a2\u0003\u00a2\u17d2\b\u00a2\u0001\u00a3\u0001"+
		"\u00a3\u0003\u00a3\u17d6\b\u00a3\u0001\u00a3\u0003\u00a3\u17d9\b\u00a3"+
		"\u0001\u00a3\u0003\u00a3\u17dc\b\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3"+
		"\u0001\u00a3\u0003\u00a3\u17e2\b\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3"+
		"\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3"+
		"\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0003\u00a3\u17f1\b\u00a3"+
		"\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0003\u00a3"+
		"\u17f8\b\u00a3\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a5\u0001\u00a5"+
		"\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a5"+
		"\u0001\u00a5\u0005\u00a5\u1806\b\u00a5\n\u00a5\f\u00a5\u1809\t\u00a5\u0001"+
		"\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0005\u00a6\u1810"+
		"\b\u00a6\n\u00a6\f\u00a6\u1813\t\u00a6\u0001\u00a7\u0001\u00a7\u0001\u00a7"+
		"\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7"+
		"\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7"+
		"\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7"+
		"\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7"+
		"\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7"+
		"\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7"+
		"\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0003\u00a7"+
		"\u1841\b\u00a7\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8"+
		"\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8"+
		"\u0001\u00a8\u0003\u00a8\u184f\b\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8"+
		"\u0003\u00a8\u1854\b\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8"+
		"\u0001\u00a8\u0001\u00a8\u0003\u00a8\u185c\b\u00a8\u0001\u00a8\u0001\u00a8"+
		"\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0003\u00a8\u1864\b\u00a8"+
		"\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0003\u00a8\u1869\b\u00a8\u0001\u00a8"+
		"\u0003\u00a8\u186c\b\u00a8\u0001\u00a9\u0001\u00a9\u0003\u00a9\u1870\b"+
		"\u00a9\u0001\u00a9\u0001\u00a9\u0003\u00a9\u1874\b\u00a9\u0001\u00a9\u0001"+
		"\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001"+
		"\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001"+
		"\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0003\u00aa\u188a\b\u00aa\u0001\u00ab\u0001\u00ab\u0001\u00ac\u0001"+
		"\u00ac\u0003\u00ac\u1890\b\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0003"+
		"\u00ac\u1895\b\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001"+
		"\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0003"+
		"\u00ac\u18a1\b\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001"+
		"\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001"+
		"\u00ac\u0003\u00ac\u18ae\b\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001"+
		"\u00ac\u0003\u00ac\u18b4\b\u00ac\u0001\u00ac\u0001\u00ac\u0003\u00ac\u18b8"+
		"\b\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0003\u00ac\u18bd\b\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0003\u00ac\u18cc\b\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0003\u00ac\u18d9\b\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0003\u00ac\u18df\b\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0003\u00ac\u18f8\b\u00ac\u0001\u00ac"+
		"\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0003\u00ac\u18fe\b\u00ac\u0003\u00ac"+
		"\u1900\b\u00ac\u0001\u00ad\u0001\u00ad\u0003\u00ad\u1904\b\u00ad\u0001"+
		"\u00ad\u0001\u00ad\u0003\u00ad\u1908\b\u00ad\u0001\u00ad\u0001\u00ad\u0001"+
		"\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001"+
		"\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0003"+
		"\u00ad\u1918\b\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad\u191c\b\u00ad"+
		"\u0001\u00ad\u0001\u00ad\u0003\u00ad\u1920\b\u00ad\u0001\u00ad\u0001\u00ad"+
		"\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad\u1928\b\u00ad"+
		"\u0001\u00ad\u0003\u00ad\u192b\b\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad"+
		"\u0001\u00ad\u0003\u00ad\u1931\b\u00ad\u0001\u00ae\u0001\u00ae\u0001\u00ae"+
		"\u0003\u00ae\u1936\b\u00ae\u0001\u00ae\u0001\u00ae\u0003\u00ae\u193a\b"+
		"\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001"+
		"\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0003\u00ae\u1945\b\u00ae\u0003"+
		"\u00ae\u1947\b\u00ae\u0001\u00af\u0001\u00af\u0003\u00af\u194b\b\u00af"+
		"\u0001\u00af\u0003\u00af\u194e\b\u00af\u0001\u00af\u0001\u00af\u0003\u00af"+
		"\u1952\b\u00af\u0001\u00af\u0001\u00af\u0003\u00af\u1956\b\u00af\u0001"+
		"\u00af\u0001\u00af\u0001\u00af\u0003\u00af\u195b\b\u00af\u0001\u00af\u0001"+
		"\u00af\u0001\u00af\u0003\u00af\u1960\b\u00af\u0001\u00af\u0003\u00af\u1963"+
		"\b\u00af\u0001\u00af\u0003\u00af\u1966\b\u00af\u0001\u00af\u0003\u00af"+
		"\u1969\b\u00af\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0"+
		"\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0"+
		"\u0001\u00b0\u0001\u00b0\u0003\u00b0\u1978\b\u00b0\u0001\u00b0\u0001\u00b0"+
		"\u0003\u00b0\u197c\b\u00b0\u0001\u00b1\u0001\u00b1\u0001\u00b2\u0001\u00b2"+
		"\u0001\u00b2\u0001\u00b2\u0001\u00b3\u0001\u00b3\u0001\u00b4\u0001\u00b4"+
		"\u0001\u00b4\u0001\u00b4\u0001\u00b5\u0001\u00b5\u0003\u00b5\u198c\b\u00b5"+
		"\u0001\u00b5\u0003\u00b5\u198f\b\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5"+
		"\u0003\u00b5\u1994\b\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5"+
		"\u0001\u00b5\u0003\u00b5\u199b\b\u00b5\u0001\u00b5\u0004\u00b5\u199e\b"+
		"\u00b5\u000b\u00b5\f\u00b5\u199f\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001"+
		"\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001"+
		"\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0003\u00b6\u19af\b\u00b6\u0001"+
		"\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0003\u00b7\u19b5\b\u00b7\u0001"+
		"\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0003\u00b7\u19bb\b\u00b7\u0001"+
		"\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001"+
		"\u00b7\u0001\u00b7\u0003\u00b7\u19c5\b\u00b7\u0001\u00b8\u0001\u00b8\u0001"+
		"\u00b8\u0003\u00b8\u19ca\b\u00b8\u0001\u00b9\u0001\u00b9\u0001\u00ba\u0001"+
		"\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00bb\u0001\u00bb\u0003\u00bb\u19d4"+
		"\b\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0003\u00bb\u19d9\b\u00bb"+
		"\u0001\u00bb\u0001\u00bb\u0003\u00bb\u19dd\b\u00bb\u0001\u00bb\u0005\u00bb"+
		"\u19e0\b\u00bb\n\u00bb\f\u00bb\u19e3\t\u00bb\u0001\u00bb\u0003\u00bb\u19e6"+
		"\b\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0003\u00bb\u19eb\b\u00bb"+
		"\u0001\u00bb\u0003\u00bb\u19ee\b\u00bb\u0001\u00bb\u0003\u00bb\u19f1\b"+
		"\u00bb\u0001\u00bb\u0003\u00bb\u19f4\b\u00bb\u0001\u00bb\u0003\u00bb\u19f7"+
		"\b\u00bb\u0001\u00bb\u0003\u00bb\u19fa\b\u00bb\u0001\u00bc\u0001\u00bc"+
		"\u0003\u00bc\u19fe\b\u00bc\u0001\u00bc\u0003\u00bc\u1a01\b\u00bc\u0001"+
		"\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001"+
		"\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0005\u00bc\u1a0d\b\u00bc\n"+
		"\u00bc\f\u00bc\u1a10\t\u00bc\u0003\u00bc\u1a12\b\u00bc\u0001\u00bc\u0001"+
		"\u00bc\u0001\u00bc\u0001\u00bc\u0003\u00bc\u1a18\b\u00bc\u0001\u00bc\u0001"+
		"\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001"+
		"\u00bc\u0001\u00bc\u0001\u00bc\u0003\u00bc\u1a24\b\u00bc\u0003\u00bc\u1a26"+
		"\b\u00bc\u0001\u00bc\u0003\u00bc\u1a29\b\u00bc\u0001\u00bc\u0003\u00bc"+
		"\u1a2c\b\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc"+
		"\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0005\u00bc\u1a37\b\u00bc"+
		"\n\u00bc\f\u00bc\u1a3a\t\u00bc\u0001\u00bc\u0001\u00bc\u0003\u00bc\u1a3e"+
		"\b\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001"+
		"\u00bc\u0005\u00bc\u1a46\b\u00bc\n\u00bc\f\u00bc\u1a49\t\u00bc\u0001\u00bc"+
		"\u0001\u00bc\u0003\u00bc\u1a4d\b\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bc"+
		"\u0003\u00bc\u1a52\b\u00bc\u0001\u00bc\u0003\u00bc\u1a55\b\u00bc\u0001"+
		"\u00bc\u0001\u00bc\u0001\u00bc\u0003\u00bc\u1a5a\b\u00bc\u0001\u00bc\u0001"+
		"\u00bc\u0001\u00bc\u0003\u00bc\u1a5f\b\u00bc\u0001\u00bc\u0001\u00bc\u0001"+
		"\u00bc\u0001\u00bd\u0001\u00bd\u0003\u00bd\u1a66\b\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0003\u00bd\u1a6b\b\u00bd\u0001\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd\u1a72\b\u00bd\u0001\u00bd\u0003"+
		"\u00bd\u1a75\b\u00bd\u0001\u00bd\u0003\u00bd\u1a78\b\u00bd\u0001\u00bd"+
		"\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd"+
		"\u1a80\b\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd\u1a85\b"+
		"\u00bd\u0001\u00bd\u0003\u00bd\u1a88\b\u00bd\u0001\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0003\u00bd\u1a8e\b\u00bd\u0001\u00bd\u0003\u00bd\u1a91"+
		"\b\u00bd\u0001\u00bd\u0003\u00bd\u1a94\b\u00bd\u0001\u00bd\u0003\u00bd"+
		"\u1a97\b\u00bd\u0001\u00bd\u0003\u00bd\u1a9a\b\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0003\u00bd\u1a9e\b\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0003"+
		"\u00bd\u1aa3\b\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0003\u00bd\u1aaa\b\u00bd\u0001\u00bd\u0003\u00bd\u1aad\b\u00bd"+
		"\u0001\u00bd\u0003\u00bd\u1ab0\b\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd"+
		"\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd"+
		"\u1aba\b\u00bd\u0001\u00bd\u0003\u00bd\u1abd\b\u00bd\u0001\u00bd\u0003"+
		"\u00bd\u1ac0\b\u00bd\u0001\u00bd\u0003\u00bd\u1ac3\b\u00bd\u0001\u00bd"+
		"\u0001\u00bd\u0003\u00bd\u1ac7\b\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd"+
		"\u0003\u00bd\u1acc\b\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd"+
		"\u0001\u00bd\u0003\u00bd\u1ad3\b\u00bd\u0001\u00bd\u0003\u00bd\u1ad6\b"+
		"\u00bd\u0001\u00bd\u0003\u00bd\u1ad9\b\u00bd\u0001\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0003\u00bd\u1ae5\b\u00bd\u0001\u00bd\u0003\u00bd\u1ae8"+
		"\b\u00bd\u0001\u00bd\u0003\u00bd\u1aeb\b\u00bd\u0001\u00bd\u0003\u00bd"+
		"\u1aee\b\u00bd\u0001\u00bd\u0003\u00bd\u1af1\b\u00bd\u0003\u00bd\u1af3"+
		"\b\u00bd\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0001\u00be\u0003"+
		"\u00be\u1afa\b\u00be\u0001\u00be\u0003\u00be\u1afd\b\u00be\u0001\u00bf"+
		"\u0001\u00bf\u0001\u00bf\u0005\u00bf\u1b02\b\u00bf\n\u00bf\f\u00bf\u1b05"+
		"\t\u00bf\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c1\u0001"+
		"\u00c1\u0001\u00c1\u0001\u00c1\u0003\u00c1\u1b0f\b\u00c1\u0001\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0001\u00c2\u0003\u00c2\u1b15\b\u00c2\u0001\u00c2\u0001"+
		"\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0005\u00c2\u1b1d"+
		"\b\u00c2\n\u00c2\f\u00c2\u1b20\t\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2"+
		"\u0001\u00c2\u0001\u00c2\u0005\u00c2\u1b27\b\u00c2\n\u00c2\f\u00c2\u1b2a"+
		"\t\u00c2\u0003\u00c2\u1b2c\b\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2"+
		"\u0001\u00c2\u0001\u00c2\u0005\u00c2\u1b33\b\u00c2\n\u00c2\f\u00c2\u1b36"+
		"\t\u00c2\u0003\u00c2\u1b38\b\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2"+
		"\u0001\u00c2\u0001\u00c2\u0005\u00c2\u1b3f\b\u00c2\n\u00c2\f\u00c2\u1b42"+
		"\t\u00c2\u0003\u00c2\u1b44\b\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2"+
		"\u0001\u00c2\u0001\u00c2\u0005\u00c2\u1b4b\b\u00c2\n\u00c2\f\u00c2\u1b4e"+
		"\t\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0003\u00c2\u1b53\b\u00c2"+
		"\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0003\u00c2\u1b58\b\u00c2\u0001\u00c2"+
		"\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0003\u00c2\u1b5e\b\u00c2\u0001\u00c2"+
		"\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0001\u00c2"+
		"\u0001\u00c2\u0001\u00c2\u0001\u00c2\u0003\u00c2\u1b6a\b\u00c2\u0001\u00c3"+
		"\u0001\u00c3\u0001\u00c4\u0001\u00c4\u0003\u00c4\u1b70\b\u00c4\u0001\u00c4"+
		"\u0001\u00c4\u0001\u00c4\u0003\u00c4\u1b75\b\u00c4\u0001\u00c4\u0001\u00c4"+
		"\u0001\u00c4\u0001\u00c4\u0003\u00c4\u1b7b\b\u00c4\u0001\u00c4\u0005\u00c4"+
		"\u1b7e\b\u00c4\n\u00c4\f\u00c4\u1b81\t\u00c4\u0001\u00c4\u0003\u00c4\u1b84"+
		"\b\u00c4\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0003\u00c5\u1b89\b\u00c5"+
		"\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c7\u0001\u00c7\u0001\u00c7"+
		"\u0003\u00c7\u1b91\b\u00c7\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8"+
		"\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003\u00c8\u1b9a\b\u00c8\u0001\u00c9"+
		"\u0001\u00c9\u0003\u00c9\u1b9e\b\u00c9\u0001\u00ca\u0001\u00ca\u0003\u00ca"+
		"\u1ba2\b\u00ca\u0001\u00ca\u0003\u00ca\u1ba5\b\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0003\u00ca\u1ba9\b\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0001\u00ca\u0005\u00ca\u1bb0\b\u00ca\n\u00ca\f\u00ca\u1bb3\t\u00ca"+
		"\u0003\u00ca\u1bb5\b\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca"+
		"\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0005\u00ca\u1bbf\b\u00ca"+
		"\n\u00ca\f\u00ca\u1bc2\t\u00ca\u0003\u00ca\u1bc4\b\u00ca\u0001\u00ca\u0003"+
		"\u00ca\u1bc7\b\u00ca\u0001\u00ca\u0003\u00ca\u1bca\b\u00ca\u0001\u00ca"+
		"\u0001\u00ca\u0003\u00ca\u1bce\b\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca"+
		"\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca"+
		"\u0001\u00ca\u0003\u00ca\u1bda\b\u00ca\u0001\u00ca\u0003\u00ca\u1bdd\b"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0003\u00ca\u1be5\b\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0003\u00ca\u1beb\b\u00ca\u0003\u00ca\u1bed\b\u00ca\u0001\u00ca"+
		"\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0003\u00ca"+
		"\u1bf5\b\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca"+
		"\u0001\u00ca\u0003\u00ca\u1bfd\b\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca"+
		"\u0003\u00ca\u1c02\b\u00ca\u0001\u00ca\u0003\u00ca\u1c05\b\u00ca\u0001"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0003\u00ca\u1c0c"+
		"\b\u00ca\u0001\u00ca\u0003\u00ca\u1c0f\b\u00ca\u0001\u00ca\u0001\u00ca"+
		"\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0005\u00ca\u1c17\b\u00ca"+
		"\n\u00ca\f\u00ca\u1c1a\t\u00ca\u0003\u00ca\u1c1c\b\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0005\u00ca\u1c26\b\u00ca\n\u00ca\f\u00ca\u1c29\t\u00ca\u0003\u00ca"+
		"\u1c2b\b\u00ca\u0001\u00ca\u0003\u00ca\u1c2e\b\u00ca\u0001\u00ca\u0003"+
		"\u00ca\u1c31\b\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0003"+
		"\u00ca\u1c3d\b\u00ca\u0001\u00ca\u0003\u00ca\u1c40\b\u00ca\u0001\u00ca"+
		"\u0003\u00ca\u1c43\b\u00ca\u0001\u00ca\u0003\u00ca\u1c46\b\u00ca\u0001"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0003\u00ca\u1c4b\b\u00ca\u0001\u00cb\u0001"+
		"\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001"+
		"\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0001"+
		"\u00cb\u0001\u00cb\u0001\u00cb\u0001\u00cb\u0003\u00cb\u1c5e\b\u00cb\u0001"+
		"\u00cc\u0001\u00cc\u0003\u00cc\u1c62\b\u00cc\u0001\u00cc\u0001\u00cc\u0001"+
		"\u00cc\u0003\u00cc\u1c67\b\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001"+
		"\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0003"+
		"\u00cc\u1c72\b\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001\u00cc\u0001"+
		"\u00cc\u0001\u00cc\u0003\u00cc\u1c7a\b\u00cc\u0001\u00cd\u0001\u00cd\u0001"+
		"\u00cd\u0001\u00cd\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0001"+
		"\u00cf\u0001\u00cf\u0003\u00cf\u1c86\b\u00cf\u0001\u00cf\u0003\u00cf\u1c89"+
		"\b\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0003\u00cf\u1c8e\b\u00cf"+
		"\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0003\u00cf"+
		"\u1c95\b\u00cf\u0001\u00cf\u0005\u00cf\u1c98\b\u00cf\n\u00cf\f\u00cf\u1c9b"+
		"\t\u00cf\u0001\u00cf\u0003\u00cf\u1c9e\b\u00cf\u0001\u00cf\u0003\u00cf"+
		"\u1ca1\b\u00cf\u0001\u00cf\u0003\u00cf\u1ca4\b\u00cf\u0001\u00cf\u0003"+
		"\u00cf\u1ca7\b\u00cf\u0001\u00cf\u0003\u00cf\u1caa\b\u00cf\u0001\u00cf"+
		"\u0001\u00cf\u0001\u00cf\u0001\u00d0\u0001\u00d0\u0003\u00d0\u1cb1\b\u00d0"+
		"\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0"+
		"\u0001\u00d0\u0003\u00d0\u1cba\b\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0"+
		"\u0001\u00d0\u0001\u00d0\u0003\u00d0\u1cc1\b\u00d0\u0001\u00d0\u0003\u00d0"+
		"\u1cc4\b\u00d0\u0001\u00d0\u0003\u00d0\u1cc7\b\u00d0\u0001\u00d1\u0001"+
		"\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001"+
		"\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001"+
		"\u00d1\u0001\u00d1\u0001\u00d1\u0003\u00d1\u1cd9\b\u00d1\u0001\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001"+
		"\u00d2\u0003\u00d2\u1cf5\b\u00d2\u0001\u00d3\u0001\u00d3\u0003\u00d3\u1cf9"+
		"\b\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0003\u00d3\u1cfe\b\u00d3"+
		"\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3"+
		"\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0003\u00d3\u1d09\b\u00d3\u0001\u00d3"+
		"\u0001\u00d3\u0003\u00d3\u1d0d\b\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3"+
		"\u0003\u00d3\u1d12\b\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3"+
		"\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0001\u00d3"+
		"\u0001\u00d3\u0001\u00d3\u0003\u00d3\u1d20\b\u00d3\u0003\u00d3\u1d22\b"+
		"\u00d3\u0001\u00d4\u0001\u00d4\u0003\u00d4\u1d26\b\u00d4\u0001\u00d4\u0001"+
		"\u00d4\u0003\u00d4\u1d2a\b\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001"+
		"\u00d4\u0003\u00d4\u1d30\b\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0003"+
		"\u00d4\u1d35\b\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0003\u00d4\u1d3a"+
		"\b\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0003\u00d4\u1d3f\b\u00d4"+
		"\u0001\u00d4\u0003\u00d4\u1d42\b\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4"+
		"\u0001\u00d5\u0001\u00d5\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d6"+
		"\u0001\u00d7\u0001\u00d7\u0003\u00d7\u1d4f\b\u00d7\u0001\u00d8\u0001\u00d8"+
		"\u0001\u00d8\u0001\u00d9\u0001\u00d9\u0003\u00d9\u1d56\b\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0005\u00d9"+
		"\u1d5e\b\u00d9\n\u00d9\f\u00d9\u1d61\t\u00d9\u0003\u00d9\u1d63\b\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0005\u00d9\u1d6d\b\u00d9\n\u00d9\f\u00d9\u1d70"+
		"\t\u00d9\u0003\u00d9\u1d72\b\u00d9\u0001\u00d9\u0003\u00d9\u1d75\b\u00d9"+
		"\u0001\u00d9\u0003\u00d9\u1d78\b\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0003\u00d9\u1d86\b\u00d9\u0001\u00d9"+
		"\u0003\u00d9\u1d89\b\u00d9\u0001\u00d9\u0003\u00d9\u1d8c\b\u00d9\u0001"+
		"\u00d9\u0003\u00d9\u1d8f\b\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001"+
		"\u00d9\u0001\u00d9\u0003\u00d9\u1d96\b\u00d9\u0001\u00d9\u0003\u00d9\u1d99"+
		"\b\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001"+
		"\u00d9\u0005\u00d9\u1da1\b\u00d9\n\u00d9\f\u00d9\u1da4\t\u00d9\u0003\u00d9"+
		"\u1da6\b\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0003\u00d9"+
		"\u1dac\b\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0003\u00d9\u1dba\b\u00d9\u0001\u00d9\u0003\u00d9\u1dbd\b"+
		"\u00d9\u0001\u00d9\u0003\u00d9\u1dc0\b\u00d9\u0001\u00d9\u0003\u00d9\u1dc3"+
		"\b\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0003"+
		"\u00d9\u1dca\b\u00d9\u0001\u00d9\u0003\u00d9\u1dcd\b\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0005\u00d9"+
		"\u1dd5\b\u00d9\n\u00d9\f\u00d9\u1dd8\t\u00d9\u0003\u00d9\u1dda\b\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0003\u00d9\u1de0\b\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0005\u00d9"+
		"\u1de7\b\u00d9\n\u00d9\f\u00d9\u1dea\t\u00d9\u0003\u00d9\u1dec\b\u00d9"+
		"\u0001\u00d9\u0003\u00d9\u1def\b\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0003\u00d9\u1dfc\b\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9"+
		"\u0001\u00d9\u0003\u00d9\u1e07\b\u00d9\u0001\u00d9\u0003\u00d9\u1e0a\b"+
		"\u00d9\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0003\u00d9\u1e0f\b\u00d9\u0001"+
		"\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0003\u00da\u1e15\b\u00da\u0001"+
		"\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0005"+
		"\u00da\u1e1d\b\u00da\n\u00da\f\u00da\u1e20\t\u00da\u0001\u00da\u0001\u00da"+
		"\u0001\u00da\u0001\u00da\u0001\u00da\u0005\u00da\u1e27\b\u00da\n\u00da"+
		"\f\u00da\u1e2a\t\u00da\u0003\u00da\u1e2c\b\u00da\u0001\u00da\u0001\u00da"+
		"\u0001\u00da\u0001\u00da\u0001\u00da\u0005\u00da\u1e33\b\u00da\n\u00da"+
		"\f\u00da\u1e36\t\u00da\u0003\u00da\u1e38\b\u00da\u0001\u00da\u0001\u00da"+
		"\u0001\u00da\u0001\u00da\u0001\u00da\u0005\u00da\u1e3f\b\u00da\n\u00da"+
		"\f\u00da\u1e42\t\u00da\u0003\u00da\u1e44\b\u00da\u0001\u00da\u0001\u00da"+
		"\u0001\u00da\u0001\u00da\u0001\u00da\u0005\u00da\u1e4b\b\u00da\n\u00da"+
		"\f\u00da\u1e4e\t\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0003\u00da"+
		"\u1e53\b\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0003\u00da\u1e58\b"+
		"\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0003\u00da\u1e5e"+
		"\b\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001"+
		"\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0003\u00da\u1e6a"+
		"\b\u00da\u0001\u00db\u0001\u00db\u0003\u00db\u1e6e\b\u00db\u0001\u00db"+
		"\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db\u0003\u00db\u1e75\b\u00db"+
		"\u0001\u00db\u0003\u00db\u1e78\b\u00db\u0001\u00db\u0001\u00db\u0001\u00db"+
		"\u0001\u00db\u0003\u00db\u1e7e\b\u00db\u0003\u00db\u1e80\b\u00db\u0001"+
		"\u00db\u0001\u00db\u0001\u00db\u0003\u00db\u1e85\b\u00db\u0001\u00db\u0003"+
		"\u00db\u1e88\b\u00db\u0001\u00db\u0001\u00db\u0004\u00db\u1e8c\b\u00db"+
		"\u000b\u00db\f\u00db\u1e8d\u0003\u00db\u1e90\b\u00db\u0001\u00dc\u0001"+
		"\u00dc\u0003\u00dc\u1e94\b\u00dc\u0001\u00dc\u0001\u00dc\u0003\u00dc\u1e98"+
		"\b\u00dc\u0001\u00dc\u0001\u00dc\u0003\u00dc\u1e9c\b\u00dc\u0001\u00dc"+
		"\u0003\u00dc\u1e9f\b\u00dc\u0001\u00dd\u0001\u00dd\u0003\u00dd\u1ea3\b"+
		"\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0003\u00dd\u1ea9"+
		"\b\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001"+
		"\u00dd\u0005\u00dd\u1eb1\b\u00dd\n\u00dd\f\u00dd\u1eb4\t\u00dd\u0001\u00dd"+
		"\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0003\u00dd"+
		"\u1ebc\b\u00dd\u0001\u00de\u0001\u00de\u0003\u00de\u1ec0\b\u00de\u0001"+
		"\u00de\u0003\u00de\u1ec3\b\u00de\u0001\u00de\u0001\u00de\u0003\u00de\u1ec7"+
		"\b\u00de\u0001\u00de\u0001\u00de\u0003\u00de\u1ecb\b\u00de\u0001\u00de"+
		"\u0001\u00de\u0001\u00de\u0003\u00de\u1ed0\b\u00de\u0001\u00de\u0001\u00de"+
		"\u0001\u00de\u0003\u00de\u1ed5\b\u00de\u0001\u00de\u0001\u00de\u0001\u00de"+
		"\u0003\u00de\u1eda\b\u00de\u0001\u00de\u0003\u00de\u1edd\b\u00de\u0001"+
		"\u00de\u0003\u00de\u1ee0\b\u00de\u0001\u00de\u0003\u00de\u1ee3\b\u00de"+
		"\u0001\u00df\u0001\u00df\u0003\u00df\u1ee7\b\u00df\u0001\u00df\u0001\u00df"+
		"\u0001\u00df\u0003\u00df\u1eec\b\u00df\u0001\u00df\u0001\u00df\u0001\u00df"+
		"\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df"+
		"\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df"+
		"\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0003\u00df"+
		"\u1f02\b\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df"+
		"\u0001\u00df\u0003\u00df\u1f0a\b\u00df\u0001\u00df\u0001\u00df\u0001\u00df"+
		"\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0003\u00df\u1f13\b\u00df"+
		"\u0003\u00df\u1f15\b\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df"+
		"\u0001\u00df\u0001\u00df\u0003\u00df\u1f1d\b\u00df\u0001\u00df\u0001\u00df"+
		"\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0003\u00df\u1f25\b\u00df"+
		"\u0001\u00df\u0001\u00df\u0001\u00df\u0003\u00df\u1f2a\b\u00df\u0001\u00df"+
		"\u0001\u00df\u0001\u00df\u0003\u00df\u1f2f\b\u00df\u0001\u00df\u0001\u00df"+
		"\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0003\u00df\u1f37\b\u00df"+
		"\u0001\u00df\u0001\u00df\u0001\u00df\u0003\u00df\u1f3c\b\u00df\u0001\u00df"+
		"\u0001\u00df\u0001\u00df\u0003\u00df\u1f41\b\u00df\u0001\u00e0\u0001\u00e0"+
		"\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1f47\b\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0003\u00e1\u1f4c\b\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1f59\b\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0003\u00e1\u1f5e\b\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0003\u00e1\u1f63\b\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1"+
		"\u1f68\b\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1"+
		"\u0001\u00e1\u0003\u00e1\u1f70\b\u00e1\u0001\u00e1\u0003\u00e1\u1f73\b"+
		"\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1f77\b\u00e1\u0001\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0003\u00e1\u1f7c\b\u00e1\u0001\u00e1\u0001\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1f89\b\u00e1\u0001\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0003\u00e1\u1f8e\b\u00e1\u0001\u00e1\u0001\u00e1\u0001"+
		"\u00e1\u0003\u00e1\u1f93\b\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003"+
		"\u00e1\u1f98\b\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0003\u00e1\u1fa0\b\u00e1\u0001\u00e1\u0001\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1fa8\b\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1fad\b\u00e1\u0001\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0003\u00e1\u1fb2\b\u00e1\u0001\u00e1\u0003\u00e1\u1fb5"+
		"\b\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1fba\b\u00e1"+
		"\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0003\u00e1\u1fbf\b\u00e1\u0001\u00e1"+
		"\u0003\u00e1\u1fc2\b\u00e1\u0003\u00e1\u1fc4\b\u00e1\u0001\u00e2\u0001"+
		"\u00e2\u0003\u00e2\u1fc8\b\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0003"+
		"\u00e2\u1fcd\b\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001"+
		"\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001"+
		"\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0001"+
		"\u00e2\u0001\u00e2\u0001\u00e2\u0003\u00e2\u1fe2\b\u00e2\u0001\u00e2\u0001"+
		"\u00e2\u0001\u00e2\u0003\u00e2\u1fe7\b\u00e2\u0001\u00e2\u0001\u00e2\u0001"+
		"\u00e2\u0003\u00e2\u1fec\b\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0003"+
		"\u00e2\u1ff1\b\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0003\u00e2\u1ff6"+
		"\b\u00e2\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0003\u00e2\u1ffb\b\u00e2"+
		"\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0003\u00e2\u2000\b\u00e2\u0001\u00e2"+
		"\u0001\u00e2\u0001\u00e2\u0003\u00e2\u2005\b\u00e2\u0001\u00e2\u0001\u00e2"+
		"\u0001\u00e2\u0003\u00e2\u200a\b\u00e2\u0001\u00e3\u0001\u00e3\u0003\u00e3"+
		"\u200e\b\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3\u2013\b"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001"+
		"\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0003"+
		"\u00e3\u2020\b\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0003\u00e3\u2025"+
		"\b\u00e3\u0001\u00e3\u0003\u00e3\u2028\b\u00e3\u0001\u00e4\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e4\u0001\u00e5\u0001\u00e5\u0001\u00e6\u0001\u00e6"+
		"\u0003\u00e6\u2032\b\u00e6\u0001\u00e6\u0003\u00e6\u2035\b\u00e6\u0001"+
		"\u00e6\u0001\u00e6\u0001\u00e7\u0001\u00e7\u0003\u00e7\u203b\b\u00e7\u0001"+
		"\u00e7\u0003\u00e7\u203e\b\u00e7\u0001\u00e7\u0001\u00e7\u0001\u00e8\u0001"+
		"\u00e8\u0003\u00e8\u2044\b\u00e8\u0001\u00e8\u0001\u00e8\u0003\u00e8\u2048"+
		"\b\u00e8\u0001\u00e8\u0001\u00e8\u0003\u00e8\u204c\b\u00e8\u0001\u00e8"+
		"\u0003\u00e8\u204f\b\u00e8\u0001\u00e8\u0003\u00e8\u2052\b\u00e8\u0001"+
		"\u00e8\u0003\u00e8\u2055\b\u00e8\u0001\u00e8\u0003\u00e8\u2058\b\u00e8"+
		"\u0001\u00e9\u0001\u00e9\u0003\u00e9\u205c\b\u00e9\u0001\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0003\u00e9\u2061\b\u00e9\u0001\u00e9\u0001\u00e9\u0005\u00e9"+
		"\u2065\b\u00e9\n\u00e9\f\u00e9\u2068\t\u00e9\u0001\u00ea\u0001\u00ea\u0001"+
		"\u00ea\u0001\u00ea\u0001\u00ea\u0003\u00ea\u206f\b\u00ea\u0001\u00eb\u0001"+
		"\u00eb\u0001\u00ec\u0001\u00ec\u0003\u00ec\u2075\b\u00ec\u0001\u00ec\u0001"+
		"\u00ec\u0001\u00ec\u0003\u00ec\u207a\b\u00ec\u0001\u00ec\u0001\u00ec\u0005"+
		"\u00ec\u207e\b\u00ec\n\u00ec\f\u00ec\u2081\t\u00ec\u0001\u00ed\u0001\u00ed"+
		"\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0003\u00ed\u2088\b\u00ed\u0001\u00ee"+
		"\u0001\u00ee\u0001\u00ef\u0001\u00ef\u0003\u00ef\u208e\b\u00ef\u0001\u00ef"+
		"\u0001\u00ef\u0001\u00ef\u0003\u00ef\u2093\b\u00ef\u0001\u00f0\u0001\u00f0"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0003\u00f1\u209e\b\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0003\u00f1\u20a4\b\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u20b3\b\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u20b9\b\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u20bf\b\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0003\u00f1\u20c9\b\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u20d0\b\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0003\u00f1\u20db\b\u00f1\u0001\u00f1\u0001\u00f1"+
		"\u0001\u00f1\u0001\u00f1\u0005\u00f1\u20e1\b\u00f1\n\u00f1\f\u00f1\u20e4"+
		"\t\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003"+
		"\u00f1\u20f7\b\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001"+
		"\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u212a\b\u00f1\u0001\u00f2\u0001"+
		"\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0003"+
		"\u00f2\u2133\b\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001"+
		"\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001"+
		"\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001"+
		"\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001"+
		"\u00f2\u0003\u00f2\u214c\b\u00f2\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001"+
		"\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0001\u00f4\u0001"+
		"\u00f4\u0001\u00f4\u0001\u00f4\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001"+
		"\u00f5\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f6\u0001\u00f7\u0001"+
		"\u00f7\u0001\u00f7\u0001\u00f7\u0003\u00f7\u2166\b\u00f7\u0001\u00f7\u0001"+
		"\u00f7\u0001\u00f7\u0003\u00f7\u216b\b\u00f7\u0003\u00f7\u216d\b\u00f7"+
		"\u0001\u00f7\u0001\u00f7\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8"+
		"\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00f9\u0001\u00fa\u0001\u00fa"+
		"\u0001\u00fa\u0001\u00fa\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fb"+
		"\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0003\u00fc\u2184\b\u00fc\u0001\u00fc"+
		"\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc"+
		"\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc"+
		"\u0003\u00fc\u2193\b\u00fc\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd"+
		"\u0001\u00fd\u0001\u00fd\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe"+
		"\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0001\u00ff"+
		"\u0001\u00ff\u0001\u00ff\u0001\u00ff\u0003\u00ff\u21a8\b\u00ff\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0003\u0100\u21ad\b\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0003\u0100"+
		"\u21bc\b\u0100\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101"+
		"\u0001\u0101\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102"+
		"\u0001\u0102\u0001\u0102\u0003\u0102\u21cb\b\u0102\u0001\u0102\u0003\u0102"+
		"\u21ce\b\u0102\u0001\u0102\u0001\u0102\u0003\u0102\u21d2\b\u0102\u0001"+
		"\u0103\u0001\u0103\u0001\u0103\u0001\u0103\u0003\u0103\u21d8\b\u0103\u0001"+
		"\u0103\u0001\u0103\u0003\u0103\u21dc\b\u0103\u0001\u0103\u0003\u0103\u21df"+
		"\b\u0103\u0001\u0103\u0001\u0103\u0001\u0103\u0001\u0103\u0003\u0103\u21e5"+
		"\b\u0103\u0001\u0103\u0001\u0103\u0003\u0103\u21e9\b\u0103\u0001\u0103"+
		"\u0003\u0103\u21ec\b\u0103\u0001\u0103\u0001\u0103\u0001\u0103\u0001\u0103"+
		"\u0003\u0103\u21f2\b\u0103\u0001\u0103\u0001\u0103\u0003\u0103\u21f6\b"+
		"\u0103\u0001\u0103\u0003\u0103\u21f9\b\u0103\u0003\u0103\u21fb\b\u0103"+
		"\u0001\u0104\u0001\u0104\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105"+
		"\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0107\u0001\u0107"+
		"\u0001\u0107\u0001\u0107\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108"+
		"\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0003\u0109"+
		"\u2214\b\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109\u0001\u0109"+
		"\u0001\u0109\u0003\u0109\u221c\b\u0109\u0001\u0109\u0001\u0109\u0001\u010a"+
		"\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0003\u010a\u2225\b\u010a"+
		"\u0001\u010a\u0003\u010a\u2228\b\u010a\u0001\u010a\u0001\u010a\u0001\u010a"+
		"\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0003\u010a\u2231\b\u010a"+
		"\u0001\u010a\u0003\u010a\u2234\b\u010a\u0001\u010a\u0003\u010a\u2237\b"+
		"\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a\u0001"+
		"\u010a\u0001\u010a\u0003\u010a\u2240\b\u010a\u0001\u010a\u0003\u010a\u2243"+
		"\b\u010a\u0001\u010a\u0003\u010a\u2246\b\u010a\u0001\u010a\u0001\u010a"+
		"\u0003\u010a\u224a\b\u010a\u0001\u010b\u0001\u010b\u0003\u010b\u224e\b"+
		"\u010b\u0001\u010b\u0003\u010b\u2251\b\u010b\u0001\u010b\u0001\u010b\u0003"+
		"\u010b\u2255\b\u010b\u0001\u010b\u0001\u010b\u0003\u010b\u2259\b\u010b"+
		"\u0001\u010b\u0003\u010b\u225c\b\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0005\u010b\u2268\b\u010b\n\u010b\f\u010b\u226b\t\u010b\u0003"+
		"\u010b\u226d\b\u010b\u0001\u010b\u0001\u010b\u0003\u010b\u2271\b\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0003\u010b\u2279\b\u010b\u0001\u010b\u0003\u010b\u227c\b\u010b\u0001"+
		"\u010b\u0003\u010b\u227f\b\u010b\u0001\u010b\u0001\u010b\u0003\u010b\u2283"+
		"\b\u010b\u0001\u010b\u0003\u010b\u2286\b\u010b\u0001\u010b\u0001\u010b"+
		"\u0003\u010b\u228a\b\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0003\u010b"+
		"\u228f\b\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0005\u010b"+
		"\u229b\b\u010b\n\u010b\f\u010b\u229e\t\u010b\u0003\u010b\u22a0\b\u010b"+
		"\u0001\u010b\u0001\u010b\u0003\u010b\u22a4\b\u010b\u0001\u010b\u0001\u010b"+
		"\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0003\u010b\u22ac\b\u010b"+
		"\u0001\u010b\u0003\u010b\u22af\b\u010b\u0001\u010b\u0003\u010b\u22b2\b"+
		"\u010b\u0003\u010b\u22b4\b\u010b\u0001\u010c\u0001\u010c\u0001\u010c\u0003"+
		"\u010c\u22b9\b\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0001"+
		"\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0003\u010c\u22c3\b\u010c\u0001"+
		"\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0003"+
		"\u010c\u22cb\b\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0001"+
		"\u010c\u0001\u010c\u0003\u010c\u22d3\b\u010c\u0001\u010c\u0001\u010c\u0001"+
		"\u010c\u0003\u010c\u22d8\b\u010c\u0001\u010c\u0003\u010c\u22db\b\u010c"+
		"\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c"+
		"\u0003\u010c\u22e3\b\u010c\u0001\u010c\u0003\u010c\u22e6\b\u010c\u0003"+
		"\u010c\u22e8\b\u010c\u0001\u010d\u0001\u010d\u0001\u010d\u0003\u010d\u22ed"+
		"\b\u010d\u0001\u010d\u0001\u010d\u0001\u010e\u0001\u010e\u0001\u010e\u0001"+
		"\u010e\u0001\u010f\u0001\u010f\u0001\u010f\u0003\u010f\u22f8\b\u010f\u0001"+
		"\u010f\u0003\u010f\u22fb\b\u010f\u0001\u0110\u0001\u0110\u0001\u0110\u0001"+
		"\u0110\u0001\u0110\u0001\u0110\u0001\u0110\u0001\u0110\u0001\u0110\u0003"+
		"\u0110\u2306\b\u0110\u0001\u0110\u0001\u0110\u0001\u0110\u0001\u0110\u0001"+
		"\u0110\u0001\u0110\u0001\u0110\u0001\u0110\u0001\u0110\u0003\u0110\u2311"+
		"\b\u0110\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001"+
		"\u0111\u0003\u0111\u2319\b\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0003"+
		"\u0111\u231e\b\u0111\u0001\u0112\u0001\u0112\u0001\u0112\u0001\u0112\u0001"+
		"\u0113\u0001\u0113\u0003\u0113\u2326\b\u0113\u0001\u0113\u0001\u0113\u0001"+
		"\u0113\u0003\u0113\u232b\b\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001"+
		"\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001"+
		"\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0001"+
		"\u0113\u0001\u0113\u0001\u0113\u0001\u0113\u0003\u0113\u2340\b\u0113\u0001"+
		"\u0113\u0003\u0113\u2343\b\u0113\u0001\u0114\u0001\u0114\u0001\u0114\u0001"+
		"\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0116\u0001\u0116\u0001"+
		"\u0116\u0001\u0116\u0001\u0117\u0001\u0117\u0001\u0117\u0001\u0117\u0001"+
		"\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001"+
		"\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001"+
		"\u0118\u0001\u0118\u0003\u0118\u2362\b\u0118\u0001\u0118\u0001\u0118\u0001"+
		"\u0119\u0001\u0119\u0003\u0119\u2368\b\u0119\u0001\u0119\u0001\u0119\u0003"+
		"\u0119\u236c\b\u0119\u0001\u0119\u0001\u0119\u0003\u0119\u2370\b\u0119"+
		"\u0001\u0119\u0003\u0119\u2373\b\u0119\u0001\u0119\u0001\u0119\u0001\u0119"+
		"\u0001\u0119\u0003\u0119\u2379\b\u0119\u0001\u0119\u0003\u0119\u237c\b"+
		"\u0119\u0001\u0119\u0003\u0119\u237f\b\u0119\u0001\u0119\u0003\u0119\u2382"+
		"\b\u0119\u0001\u0119\u0001\u0119\u0003\u0119\u2386\b\u0119\u0001\u0119"+
		"\u0001\u0119\u0003\u0119\u238a\b\u0119\u0001\u0119\u0001\u0119\u0003\u0119"+
		"\u238e\b\u0119\u0001\u0119\u0003\u0119\u2391\b\u0119\u0001\u0119\u0001"+
		"\u0119\u0001\u0119\u0001\u0119\u0001\u0119\u0003\u0119\u2398\b\u0119\u0001"+
		"\u0119\u0003\u0119\u239b\b\u0119\u0001\u0119\u0003\u0119\u239e\b\u0119"+
		"\u0001\u0119\u0001\u0119\u0003\u0119\u23a2\b\u0119\u0001\u0119\u0001\u0119"+
		"\u0003\u0119\u23a6\b\u0119\u0001\u0119\u0001\u0119\u0003\u0119\u23aa\b"+
		"\u0119\u0001\u0119\u0003\u0119\u23ad\b\u0119\u0001\u0119\u0001\u0119\u0001"+
		"\u0119\u0001\u0119\u0003\u0119\u23b3\b\u0119\u0003\u0119\u23b5\b\u0119"+
		"\u0001\u011a\u0001\u011a\u0001\u011b\u0003\u011b\u23ba\b\u011b\u0001\u011b"+
		"\u0001\u011b\u0001\u011b\u0003\u011b\u23bf\b\u011b\u0001\u011c\u0003\u011c"+
		"\u23c2\b\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c\u0001\u011c"+
		"\u0005\u011c\u23c9\b\u011c\n\u011c\f\u011c\u23cc\t\u011c\u0001\u011c\u0001"+
		"\u011c\u0001\u011d\u0003\u011d\u23d1\b\u011d\u0001\u011d\u0001\u011d\u0001"+
		"\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001\u011d\u0001"+
		"\u011d\u0005\u011d\u23dc\b\u011d\n\u011d\f\u011d\u23df\t\u011d\u0001\u011d"+
		"\u0001\u011d\u0001\u011e\u0001\u011e\u0001\u011e\u0003\u011e\u23e6\b\u011e"+
		"\u0001\u011e\u0001\u011e\u0001\u011f\u0001\u011f\u0001\u011f\u0001\u011f"+
		"\u0001\u0120\u0003\u0120\u23ef\b\u0120\u0001\u0120\u0001\u0120\u0001\u0120"+
		"\u0001\u0120\u0001\u0120\u0003\u0120\u23f6\b\u0120\u0001\u0121\u0001\u0121"+
		"\u0001\u0121\u0001\u0122\u0001\u0122\u0001\u0123\u0001\u0123\u0001\u0123"+
		"\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123"+
		"\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0003\u0123"+
		"\u240b\b\u0123\u0001\u0123\u0003\u0123\u240e\b\u0123\u0003\u0123\u2410"+
		"\b\u0123\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0125\u0001\u0125\u0001"+
		"\u0125\u0001\u0126\u0001\u0126\u0003\u0126\u241a\b\u0126\u0001\u0126\u0001"+
		"\u0126\u0003\u0126\u241e\b\u0126\u0001\u0126\u0001\u0126\u0005\u0126\u2422"+
		"\b\u0126\n\u0126\f\u0126\u2425\t\u0126\u0001\u0126\u0001\u0126\u0001\u0126"+
		"\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0003\u0126\u242e\b\u0126"+
		"\u0001\u0126\u0003\u0126\u2431\b\u0126\u0001\u0127\u0001\u0127\u0001\u0127"+
		"\u0001\u0127\u0001\u0127\u0005\u0127\u2438\b\u0127\n\u0127\f\u0127\u243b"+
		"\t\u0127\u0001\u0127\u0003\u0127\u243e\b\u0127\u0001\u0127\u0003\u0127"+
		"\u2441\b\u0127\u0001\u0127\u0003\u0127\u2444\b\u0127\u0001\u0128\u0001"+
		"\u0128\u0003\u0128\u2448\b\u0128\u0001\u0128\u0003\u0128\u244b\b\u0128"+
		"\u0001\u0128\u0003\u0128\u244e\b\u0128\u0001\u0128\u0001\u0128\u0003\u0128"+
		"\u2452\b\u0128\u0001\u0129\u0001\u0129\u0001\u0129\u0005\u0129\u2457\b"+
		"\u0129\n\u0129\f\u0129\u245a\t\u0129\u0001\u012a\u0001\u012a\u0003\u012a"+
		"\u245e\b\u012a\u0001\u012b\u0001\u012b\u0001\u012b\u0005\u012b\u2463\b"+
		"\u012b\n\u012b\f\u012b\u2466\t\u012b\u0001\u012c\u0001\u012c\u0001\u012c"+
		"\u0003\u012c\u246b\b\u012c\u0001\u012c\u0003\u012c\u246e\b\u012c\u0001"+
		"\u012c\u0001\u012c\u0003\u012c\u2472\b\u012c\u0001\u012c\u0001\u012c\u0001"+
		"\u012c\u0003\u012c\u2477\b\u012c\u0003\u012c\u2479\b\u012c\u0001\u012c"+
		"\u0003\u012c\u247c\b\u012c\u0001\u012c\u0001\u012c\u0001\u012c\u0003\u012c"+
		"\u2481\b\u012c\u0003\u012c\u2483\b\u012c\u0001\u012d\u0001\u012d\u0001"+
		"\u012d\u0001\u012d\u0001\u012e\u0001\u012e\u0003\u012e\u248b\b\u012e\u0001"+
		"\u012e\u0003\u012e\u248e\b\u012e\u0001\u012e\u0003\u012e\u2491\b\u012e"+
		"\u0001\u012e\u0003\u012e\u2494\b\u012e\u0001\u012e\u0003\u012e\u2497\b"+
		"\u012e\u0001\u012e\u0001\u012e\u0001\u012e\u0001\u012e\u0001\u012e\u0001"+
		"\u012e\u0003\u012e\u249f\b\u012e\u0001\u012e\u0003\u012e\u24a2\b\u012e"+
		"\u0001\u012e\u0003\u012e\u24a5\b\u012e\u0001\u012e\u0003\u012e\u24a8\b"+
		"\u012e\u0001\u012e\u0003\u012e\u24ab\b\u012e\u0001\u012e\u0003\u012e\u24ae"+
		"\b\u012e\u0001\u012e\u0003\u012e\u24b1\b\u012e\u0001\u012e\u0003\u012e"+
		"\u24b4\b\u012e\u0001\u012f\u0001\u012f\u0003\u012f\u24b8\b\u012f\u0001"+
		"\u012f\u0003\u012f\u24bb\b\u012f\u0001\u012f\u0001\u012f\u0003\u012f\u24bf"+
		"\b\u012f\u0001\u012f\u0001\u012f\u0001\u012f\u0003\u012f\u24c4\b\u012f"+
		"\u0003\u012f\u24c6\b\u012f\u0001\u012f\u0001\u012f\u0001\u012f\u0001\u012f"+
		"\u0003\u012f\u24cc\b\u012f\u0001\u012f\u0003\u012f\u24cf\b\u012f\u0001"+
		"\u012f\u0003\u012f\u24d2\b\u012f\u0001\u012f\u0003\u012f\u24d5\b\u012f"+
		"\u0001\u012f\u0003\u012f\u24d8\b\u012f\u0001\u012f\u0003\u012f\u24db\b"+
		"\u012f\u0001\u012f\u0001\u012f\u0001\u012f\u0001\u0130\u0001\u0130\u0003"+
		"\u0130\u24e2\b\u0130\u0001\u0130\u0003\u0130\u24e5\b\u0130\u0001\u0130"+
		"\u0001\u0130\u0003\u0130\u24e9\b\u0130\u0001\u0130\u0001\u0130\u0001\u0130"+
		"\u0001\u0130\u0003\u0130\u24ef\b\u0130\u0001\u0130\u0003\u0130\u24f2\b"+
		"\u0130\u0001\u0131\u0001\u0131\u0003\u0131\u24f6\b\u0131\u0001\u0131\u0001"+
		"\u0131\u0003\u0131\u24fa\b\u0131\u0001\u0131\u0001\u0131\u0003\u0131\u24fe"+
		"\b\u0131\u0001\u0131\u0003\u0131\u2501\b\u0131\u0001\u0132\u0001\u0132"+
		"\u0001\u0132\u0001\u0133\u0001\u0133\u0001\u0134\u0001\u0134\u0001\u0134"+
		"\u0005\u0134\u250b\b\u0134\n\u0134\f\u0134\u250e\t\u0134\u0001\u0135\u0001"+
		"\u0135\u0001\u0135\u0005\u0135\u2513\b\u0135\n\u0135\f\u0135\u2516\t\u0135"+
		"\u0001\u0136\u0001\u0136\u0003\u0136\u251a\b\u0136\u0001\u0136\u0001\u0136"+
		"\u0003\u0136\u251e\b\u0136\u0001\u0136\u0001\u0136\u0005\u0136\u2522\b"+
		"\u0136\n\u0136\f\u0136\u2525\t\u0136\u0001\u0136\u0003\u0136\u2528\b\u0136"+
		"\u0001\u0136\u0003\u0136\u252b\b\u0136\u0001\u0136\u0001\u0136\u0001\u0136"+
		"\u0001\u0136\u0005\u0136\u2531\b\u0136\n\u0136\f\u0136\u2534\t\u0136\u0003"+
		"\u0136\u2536\b\u0136\u0001\u0136\u0001\u0136\u0003\u0136\u253a\b\u0136"+
		"\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0137\u0001\u0137\u0001\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0001\u0137\u0003\u0137\u2546\b\u0137"+
		"\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138"+
		"\u0001\u0138\u0003\u0138\u254f\b\u0138\u0003\u0138\u2551\b\u0138\u0001"+
		"\u0139\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u013a\u0001\u013a\u0001"+
		"\u013a\u0001\u013a\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013d\u0001\u013d\u0001"+
		"\u013d\u0001\u013d\u0001\u013e\u0001\u013e\u0001\u013e\u0001\u013e\u0001"+
		"\u013e\u0003\u013e\u256c\b\u013e\u0001\u013f\u0001\u013f\u0001\u013f\u0001"+
		"\u013f\u0003\u013f\u2572\b\u013f\u0001\u013f\u0001\u013f\u0001\u0140\u0001"+
		"\u0140\u0003\u0140\u2578\b\u0140\u0001\u0140\u0001\u0140\u0003\u0140\u257c"+
		"\b\u0140\u0001\u0140\u0001\u0140\u0003\u0140\u2580\b\u0140\u0001\u0140"+
		"\u0003\u0140\u2583\b\u0140\u0001\u0140\u0003\u0140\u2586\b\u0140\u0001"+
		"\u0141\u0001\u0141\u0001\u0141\u0001\u0141\u0001\u0142\u0001\u0142\u0003"+
		"\u0142\u258e\b\u0142\u0001\u0142\u0003\u0142\u2591\b\u0142\u0001\u0142"+
		"\u0003\u0142\u2594\b\u0142\u0001\u0142\u0001\u0142\u0003\u0142\u2598\b"+
		"\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0003"+
		"\u0142\u259f\b\u0142\u0001\u0142\u0005\u0142\u25a2\b\u0142\n\u0142\f\u0142"+
		"\u25a5\t\u0142\u0001\u0142\u0003\u0142\u25a8\b\u0142\u0001\u0142\u0003"+
		"\u0142\u25ab\b\u0142\u0001\u0142\u0003\u0142\u25ae\b\u0142\u0001\u0142"+
		"\u0003\u0142\u25b1\b\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0143"+
		"\u0001\u0143\u0003\u0143\u25b8\b\u0143\u0001\u0143\u0001\u0143\u0003\u0143"+
		"\u25bc\b\u0143\u0001\u0143\u0001\u0143\u0003\u0143\u25c0\b\u0143\u0001"+
		"\u0143\u0004\u0143\u25c3\b\u0143\u000b\u0143\f\u0143\u25c4\u0003\u0143"+
		"\u25c7\b\u0143\u0001\u0143\u0005\u0143\u25ca\b\u0143\n\u0143\f\u0143\u25cd"+
		"\t\u0143\u0001\u0144\u0001\u0144\u0001\u0145\u0001\u0145\u0001\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0003\u0146\u25d8\b\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0003\u0146\u25ea\b\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001"+
		"\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0146\u0001"+
		"\u0146\u0003\u0146\u25ff\b\u0146\u0001\u0147\u0001\u0147\u0001\u0147\u0001"+
		"\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001\u0147\u0001"+
		"\u0147\u0003\u0147\u260b\b\u0147\u0003\u0147\u260d\b\u0147\u0001\u0148"+
		"\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0149"+
		"\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149"+
		"\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149"+
		"\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149"+
		"\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149\u0001\u0149"+
		"\u0001\u0149\u0001\u0149\u0003\u0149\u2630\b\u0149\u0001\u014a\u0001\u014a"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b\u0001\u014b"+
		"\u0001\u014b\u0001\u014b\u0001\u014b\u0003\u014b\u2655\b\u014b\u0001\u014c"+
		"\u0001\u014c\u0001\u014c\u0001\u014c\u0001\u014c\u0003\u014c\u265c\b\u014c"+
		"\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0003\u014e\u2665\b\u014e\u0001\u014e\u0001\u014e\u0001\u014f"+
		"\u0001\u014f\u0001\u014f\u0003\u014f\u266c\b\u014f\u0001\u014f\u0001\u014f"+
		"\u0003\u014f\u2670\b\u014f\u0001\u0150\u0001\u0150\u0001\u0150\u0001\u0150"+
		"\u0001\u0150\u0001\u0151\u0001\u0151\u0001\u0151\u0001\u0151\u0003\u0151"+
		"\u267b\b\u0151\u0001\u0151\u0001\u0151\u0003\u0151\u267f\b\u0151\u0001"+
		"\u0152\u0001\u0152\u0001\u0152\u0001\u0152\u0003\u0152\u2685\b\u0152\u0001"+
		"\u0152\u0001\u0152\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0003"+
		"\u0153\u268d\b\u0153\u0001\u0153\u0001\u0153\u0001\u0154\u0001\u0154\u0001"+
		"\u0154\u0003\u0154\u2694\b\u0154\u0001\u0154\u0001\u0154\u0001\u0154\u0001"+
		"\u0155\u0001\u0155\u0003\u0155\u269b\b\u0155\u0001\u0155\u0001\u0155\u0003"+
		"\u0155\u269f\b\u0155\u0001\u0155\u0001\u0155\u0001\u0156\u0001\u0156\u0001"+
		"\u0156\u0001\u0156\u0001\u0156\u0001\u0157\u0001\u0157\u0001\u0157\u0001"+
		"\u0157\u0001\u0157\u0001\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0003"+
		"\u0158\u26b1\b\u0158\u0001\u0158\u0001\u0158\u0001\u0159\u0001\u0159\u0001"+
		"\u0159\u0001\u0159\u0003\u0159\u26b9\b\u0159\u0001\u0159\u0001\u0159\u0001"+
		"\u015a\u0001\u015a\u0001\u015a\u0003\u015a\u26c0\b\u015a\u0001\u015a\u0001"+
		"\u015a\u0001\u015b\u0001\u015b\u0001\u015b\u0003\u015b\u26c7\b\u015b\u0001"+
		"\u015b\u0001\u015b\u0001\u015b\u0001\u015c\u0001\u015c\u0001\u015c\u0001"+
		"\u015c\u0003\u015c\u26d0\b\u015c\u0001\u015c\u0001\u015c\u0001\u015d\u0001"+
		"\u015d\u0001\u015d\u0001\u015d\u0001\u015d\u0001\u015e\u0001\u015e\u0001"+
		"\u015e\u0003\u015e\u26dc\b\u015e\u0001\u015e\u0001\u015e\u0001\u015f\u0001"+
		"\u015f\u0001\u015f\u0001\u015f\u0001\u015f\u0003\u015f\u26e5\b\u015f\u0001"+
		"\u015f\u0001\u015f\u0001\u0160\u0001\u0160\u0001\u0160\u0003\u0160\u26ec"+
		"\b\u0160\u0001\u0160\u0001\u0160\u0003\u0160\u26f0\b\u0160\u0001\u0161"+
		"\u0001\u0161\u0001\u0161\u0003\u0161\u26f5\b\u0161\u0001\u0161\u0001\u0161"+
		"\u0003\u0161\u26f9\b\u0161\u0001\u0162\u0001\u0162\u0001\u0162\u0001\u0162"+
		"\u0003\u0162\u26ff\b\u0162\u0001\u0162\u0001\u0162\u0001\u0163\u0001\u0163"+
		"\u0001\u0163\u0001\u0163\u0003\u0163\u2707\b\u0163\u0001\u0163\u0001\u0163"+
		"\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0164\u0001\u0165\u0001\u0165"+
		"\u0001\u0165\u0003\u0165\u2712\b\u0165\u0001\u0165\u0001\u0165\u0001\u0166"+
		"\u0001\u0166\u0001\u0166\u0003\u0166\u2719\b\u0166\u0001\u0166\u0001\u0166"+
		"\u0003\u0166\u271d\b\u0166\u0001\u0167\u0001\u0167\u0001\u0167\u0003\u0167"+
		"\u2722\b\u0167\u0001\u0167\u0001\u0167\u0001\u0168\u0001\u0168\u0001\u0168"+
		"\u0003\u0168\u2729\b\u0168\u0001\u0168\u0001\u0168\u0001\u0169\u0001\u0169"+
		"\u0001\u0169\u0003\u0169\u2730\b\u0169\u0001\u0169\u0001\u0169\u0001\u016a"+
		"\u0001\u016a\u0001\u016a\u0003\u016a\u2737\b\u016a\u0001\u016a\u0001\u016a"+
		"\u0001\u016b\u0001\u016b\u0001\u016b\u0003\u016b\u273e\b\u016b\u0001\u016b"+
		"\u0001\u016b\u0001\u016c\u0001\u016c\u0001\u016d\u0001\u016d\u0003\u016d"+
		"\u2746\b\u016d\u0001\u016d\u0001\u016d\u0001\u016e\u0001\u016e\u0001\u016e"+
		"\u0001\u016e\u0003\u016e\u274e\b\u016e\u0001\u016f\u0001\u016f\u0001\u016f"+
		"\u0001\u016f\u0001\u0170\u0001\u0170\u0001\u0170\u0001\u0170\u0001\u0171"+
		"\u0001\u0171\u0001\u0171\u0001\u0171\u0001\u0172\u0001\u0172\u0001\u0172"+
		"\u0001\u0172\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0173"+
		"\u0003\u0173\u2765\b\u0173\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0175\u0001\u0176\u0001\u0176"+
		"\u0003\u0176\u2771\b\u0176\u0001\u0176\u0001\u0176\u0001\u0176\u0003\u0176"+
		"\u2776\b\u0176\u0001\u0176\u0001\u0176\u0001\u0177\u0001\u0177\u0001\u0177"+
		"\u0001\u0177\u0001\u0177\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178"+
		"\u0001\u0179\u0001\u0179\u0001\u0179\u0001\u0179\u0001\u017a\u0001\u017a"+
		"\u0001\u017a\u0001\u017b\u0001\u017b\u0001\u017b\u0001\u017c\u0001\u017c"+
		"\u0001\u017c\u0001\u017d\u0001\u017d\u0001\u017d\u0001\u017d\u0001\u017e"+
		"\u0001\u017e\u0001\u017e\u0001\u017f\u0001\u017f\u0001\u017f\u0001\u0180"+
		"\u0001\u0180\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181"+
		"\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181"+
		"\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181"+
		"\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181"+
		"\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181\u0001\u0181"+
		"\u0003\u0181\u27b9\b\u0181\u0001\u0182\u0001\u0182\u0001\u0182\u0001\u0182"+
		"\u0001\u0183\u0001\u0183\u0001\u0183\u0001\u0183\u0001\u0184\u0001\u0184"+
		"\u0001\u0184\u0001\u0184\u0001\u0184\u0001\u0185\u0001\u0185\u0001\u0185"+
		"\u0001\u0185\u0001\u0185\u0001\u0186\u0001\u0186\u0003\u0186\u27cf\b\u0186"+
		"\u0001\u0186\u0001\u0186\u0001\u0186\u0001\u0186\u0001\u0186\u0003\u0186"+
		"\u27d6\b\u0186\u0001\u0187\u0001\u0187\u0001\u0187\u0001\u0187\u0001\u0187"+
		"\u0001\u0188\u0001\u0188\u0001\u0188\u0001\u0188\u0001\u0188\u0001\u0189"+
		"\u0001\u0189\u0003\u0189\u27e4\b\u0189\u0001\u0189\u0001\u0189\u0001\u0189"+
		"\u0001\u018a\u0001\u018a\u0001\u018a\u0001\u018a\u0001";
	private static final String _serializedATNSegment1 =
		"\u018a\u0001\u018b\u0001\u018b\u0001\u018b\u0001\u018b\u0001\u018b\u0001"+
		"\u018c\u0001\u018c\u0001\u018c\u0001\u018c\u0001\u018c\u0001\u018d\u0001"+
		"\u018d\u0001\u018d\u0001\u018d\u0001\u018e\u0001\u018e\u0001\u018e\u0001"+
		"\u018e\u0001\u018e\u0001\u018f\u0001\u018f\u0001\u018f\u0001\u018f\u0001"+
		"\u018f\u0001\u018f\u0003\u018f\u2807\b\u018f\u0001\u0190\u0001\u0190\u0001"+
		"\u0190\u0001\u0190\u0001\u0190\u0001\u0190\u0001\u0191\u0001\u0191\u0001"+
		"\u0191\u0001\u0191\u0001\u0192\u0001\u0192\u0001\u0192\u0001\u0192\u0001"+
		"\u0192\u0001\u0192\u0001\u0193\u0001\u0193\u0001\u0193\u0001\u0193\u0001"+
		"\u0194\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0195\u0001"+
		"\u0195\u0001\u0195\u0001\u0195\u0001\u0195\u0001\u0196\u0001\u0196\u0001"+
		"\u0196\u0001\u0196\u0001\u0197\u0001\u0197\u0001\u0197\u0001\u0197\u0001"+
		"\u0198\u0001\u0198\u0001\u0198\u0001\u0198\u0001\u0198\u0001\u0198\u0003"+
		"\u0198\u2835\b\u0198\u0001\u0199\u0001\u0199\u0001\u0199\u0001\u0199\u0001"+
		"\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019b\u0001\u019b\u0001"+
		"\u019b\u0001\u019b\u0001\u019c\u0001\u019c\u0001\u019c\u0001\u019c\u0001"+
		"\u019d\u0001\u019d\u0001\u019d\u0001\u019d\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0001"+
		"\u019e\u0001\u019e\u0001\u019e\u0001\u019e\u0003\u019e\u2881\b\u019e\u0001"+
		"\u019f\u0001\u019f\u0003\u019f\u2885\b\u019f\u0001\u019f\u0001\u019f\u0003"+
		"\u019f\u2889\b\u019f\u0001\u019f\u0001\u019f\u0001\u019f\u0001\u019f\u0003"+
		"\u019f\u288f\b\u019f\u0001\u019f\u0001\u019f\u0003\u019f\u2893\b\u019f"+
		"\u0003\u019f\u2895\b\u019f\u0003\u019f\u2897\b\u019f\u0001\u019f\u0003"+
		"\u019f\u289a\b\u019f\u0001\u019f\u0003\u019f\u289d\b\u019f\u0001\u01a0"+
		"\u0001\u01a0\u0001\u01a0\u0003\u01a0\u28a2\b\u01a0\u0001\u01a0\u0001\u01a0"+
		"\u0001\u01a0\u0001\u01a0\u0003\u01a0\u28a8\b\u01a0\u0001\u01a0\u0001\u01a0"+
		"\u0003\u01a0\u28ac\b\u01a0\u0001\u01a0\u0001\u01a0\u0003\u01a0\u28b0\b"+
		"\u01a0\u0001\u01a0\u0003\u01a0\u28b3\b\u01a0\u0003\u01a0\u28b5\b\u01a0"+
		"\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0003\u01a1\u28ba\b\u01a1\u0001\u01a1"+
		"\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0003\u01a1\u28c0\b\u01a1\u0001\u01a1"+
		"\u0001\u01a1\u0003\u01a1\u28c4\b\u01a1\u0001\u01a1\u0001\u01a1\u0003\u01a1"+
		"\u28c8\b\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0003\u01a1\u28cd\b"+
		"\u01a1\u0001\u01a1\u0003\u01a1\u28d0\b\u01a1\u0003\u01a1\u28d2\b\u01a1"+
		"\u0001\u01a2\u0001\u01a2\u0001\u01a2\u0003\u01a2\u28d7\b\u01a2\u0001\u01a3"+
		"\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a4\u0001\u01a4\u0001\u01a4"+
		"\u0001\u01a4\u0003\u01a4\u28e1\b\u01a4\u0001\u01a5\u0001\u01a5\u0003\u01a5"+
		"\u28e5\b\u01a5\u0001\u01a5\u0001\u01a5\u0003\u01a5\u28e9\b\u01a5\u0001"+
		"\u01a5\u0003\u01a5\u28ec\b\u01a5\u0001\u01a5\u0003\u01a5\u28ef\b\u01a5"+
		"\u0001\u01a5\u0003\u01a5\u28f2\b\u01a5\u0001\u01a6\u0001\u01a6\u0001\u01a6"+
		"\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0001\u01a6\u0001\u01a7\u0001\u01a7"+
		"\u0001\u01a7\u0001\u01a7\u0001\u01a7\u0001\u01a7\u0001\u01a7\u0001\u01a8"+
		"\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8"+
		"\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0001\u01a8"+
		"\u0001\u01a8\u0001\u01a8\u0001\u01a8\u0003\u01a8\u2912\b\u01a8\u0001\u01a9"+
		"\u0001\u01a9\u0001\u01a9\u0001\u01a9\u0003\u01a9\u2918\b\u01a9\u0001\u01a9"+
		"\u0001\u01a9\u0001\u01a9\u0001\u01a9\u0003\u01a9\u291e\b\u01a9\u0001\u01a9"+
		"\u0003\u01a9\u2921\b\u01a9\u0001\u01a9\u0003\u01a9\u2924\b\u01a9\u0003"+
		"\u01a9\u2926\b\u01a9\u0003\u01a9\u2928\b\u01a9\u0001\u01a9\u0003\u01a9"+
		"\u292b\b\u01a9\u0001\u01a9\u0003\u01a9\u292e\b\u01a9\u0001\u01aa\u0001"+
		"\u01aa\u0003\u01aa\u2932\b\u01aa\u0001\u01aa\u0001\u01aa\u0001\u01aa\u0003"+
		"\u01aa\u2937\b\u01aa\u0001\u01aa\u0001\u01aa\u0001\u01aa\u0001\u01aa\u0003"+
		"\u01aa\u293d\b\u01aa\u0001\u01aa\u0003\u01aa\u2940\b\u01aa\u0001\u01aa"+
		"\u0003\u01aa\u2943\b\u01aa\u0003\u01aa\u2945\b\u01aa\u0003\u01aa\u2947"+
		"\b\u01aa\u0001\u01aa\u0003\u01aa\u294a\b\u01aa\u0001\u01aa\u0003\u01aa"+
		"\u294d\b\u01aa\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0001\u01ab\u0003\u01ab"+
		"\u2953\b\u01ab\u0001\u01ac\u0001\u01ac\u0003\u01ac\u2957\b\u01ac\u0001"+
		"\u01ac\u0001\u01ac\u0001\u01ac\u0003\u01ac\u295c\b\u01ac\u0001\u01ac\u0001"+
		"\u01ac\u0001\u01ac\u0001\u01ac\u0003\u01ac\u2962\b\u01ac\u0001\u01ac\u0003"+
		"\u01ac\u2965\b\u01ac\u0001\u01ac\u0003\u01ac\u2968\b\u01ac\u0003\u01ac"+
		"\u296a\b\u01ac\u0003\u01ac\u296c\b\u01ac\u0001\u01ac\u0003\u01ac\u296f"+
		"\b\u01ac\u0001\u01ac\u0003\u01ac\u2972\b\u01ac\u0001\u01ad\u0001\u01ad"+
		"\u0001\u01ad\u0001\u01ad\u0001\u01ad\u0001\u01ad\u0003\u01ad\u297a\b\u01ad"+
		"\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0003\u01ae\u2980\b\u01ae"+
		"\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01ae"+
		"\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0003\u01ae\u298b\b\u01ae\u0003\u01ae"+
		"\u298d\b\u01ae\u0001\u01af\u0001\u01af\u0001\u01af\u0003\u01af\u2992\b"+
		"\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0001"+
		"\u01af\u0001\u01af\u0001\u01af\u0001\u01af\u0003\u01af\u299d\b\u01af\u0003"+
		"\u01af\u299f\b\u01af\u0001\u01b0\u0001\u01b0\u0001\u01b0\u0001\u01b0\u0003"+
		"\u01b0\u29a5\b\u01b0\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0003\u01b1\u29aa"+
		"\b\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001"+
		"\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001\u01b1\u0001"+
		"\u01b1\u0003\u01b1\u29b8\b\u01b1\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0001"+
		"\u01b2\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0001"+
		"\u01b2\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0003\u01b2\u29c7\b\u01b2\u0001"+
		"\u01b2\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0001\u01b2\u0003"+
		"\u01b2\u29cf\b\u01b2\u0001\u01b3\u0001\u01b3\u0003\u01b3\u29d3\b\u01b3"+
		"\u0001\u01b3\u0001\u01b3\u0003\u01b3\u29d7\b\u01b3\u0001\u01b4\u0001\u01b4"+
		"\u0001\u01b4\u0001\u01b4\u0003\u01b4\u29dd\b\u01b4\u0001\u01b5\u0001\u01b5"+
		"\u0001\u01b5\u0001\u01b5\u0003\u01b5\u29e3\b\u01b5\u0001\u01b6\u0001\u01b6"+
		"\u0001\u01b6\u0001\u01b6\u0003\u01b6\u29e9\b\u01b6\u0001\u01b6\u0003\u01b6"+
		"\u29ec\b\u01b6\u0001\u01b7\u0001\u01b7\u0001\u01b7\u0001\u01b7\u0001\u01b7"+
		"\u0001\u01b7\u0001\u01b7\u0001\u01b7\u0001\u01b7\u0003\u01b7\u29f7\b\u01b7"+
		"\u0001\u01b8\u0001\u01b8\u0001\u01b8\u0001\u01b8\u0003\u01b8\u29fd\b\u01b8"+
		"\u0001\u01b8\u0001\u01b8\u0003\u01b8\u2a01\b\u01b8\u0001\u01b8\u0001\u01b8"+
		"\u0001\u01b8\u0003\u01b8\u2a06\b\u01b8\u0001\u01b9\u0001\u01b9\u0001\u01b9"+
		"\u0001\u01b9\u0003\u01b9\u2a0c\b\u01b9\u0001\u01b9\u0003\u01b9\u2a0f\b"+
		"\u01b9\u0001\u01ba\u0001\u01ba\u0001\u01ba\u0001\u01ba\u0001\u01bb\u0001"+
		"\u01bb\u0001\u01bb\u0003\u01bb\u2a18\b\u01bb\u0001\u01bb\u0003\u01bb\u2a1b"+
		"\b\u01bb\u0001\u01bc\u0001\u01bc\u0001\u01bc\u0001\u01bc\u0003\u01bc\u2a21"+
		"\b\u01bc\u0001\u01bd\u0001\u01bd\u0001\u01be\u0001\u01be\u0001\u01be\u0003"+
		"\u01be\u2a28\b\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001\u01be\u0001"+
		"\u01be\u0003\u01be\u2a2f\b\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u2a33"+
		"\b\u01be\u0001\u01be\u0001\u01be\u0003\u01be\u2a37\b\u01be\u0003\u01be"+
		"\u2a39\b\u01be\u0001\u01bf\u0001\u01bf\u0001\u01bf\u0003\u01bf\u2a3e\b"+
		"\u01bf\u0001\u01bf\u0003\u01bf\u2a41\b\u01bf\u0001\u01c0\u0001\u01c0\u0003"+
		"\u01c0\u2a45\b\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0003\u01c0\u2a4a"+
		"\b\u01c0\u0001\u01c1\u0001\u01c1\u0001\u01c1\u0003\u01c1\u2a4f\b\u01c1"+
		"\u0001\u01c1\u0003\u01c1\u2a52\b\u01c1\u0001\u01c2\u0001\u01c2\u0001\u01c2"+
		"\u0003\u01c2\u2a57\b\u01c2\u0001\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c3"+
		"\u0003\u01c3\u2a5d\b\u01c3\u0001\u01c4\u0001\u01c4\u0001\u01c4\u0001\u01c4"+
		"\u0003\u01c4\u2a63\b\u01c4\u0001\u01c4\u0001\u01c4\u0001\u01c4\u0001\u01c4"+
		"\u0001\u01c4\u0001\u01c4\u0003\u01c4\u2a6b\b\u01c4\u0001\u01c5\u0001\u01c5"+
		"\u0001\u01c5\u0001\u01c5\u0001\u01c5\u0001\u01c5\u0003\u01c5\u2a73\b\u01c5"+
		"\u0001\u01c6\u0001\u01c6\u0001\u01c6\u0001\u01c6\u0003\u01c6\u2a79\b\u01c6"+
		"\u0001\u01c7\u0001\u01c7\u0001\u01c7\u0003\u01c7\u2a7e\b\u01c7\u0001\u01c8"+
		"\u0001\u01c8\u0001\u01c8\u0001\u01c8\u0001\u01c8\u0003\u01c8\u2a85\b\u01c8"+
		"\u0001\u01c8\u0003\u01c8\u2a88\b\u01c8\u0001\u01c9\u0001\u01c9\u0003\u01c9"+
		"\u2a8c\b\u01c9\u0001\u01c9\u0001\u01c9\u0003\u01c9\u2a90\b\u01c9\u0001"+
		"\u01c9\u0003\u01c9\u2a93\b\u01c9\u0001\u01c9\u0001\u01c9\u0001\u01c9\u0001"+
		"\u01c9\u0003\u01c9\u2a99\b\u01c9\u0003\u01c9\u2a9b\b\u01c9\u0003\u01c9"+
		"\u2a9d\b\u01c9\u0001\u01c9\u0003\u01c9\u2aa0\b\u01c9\u0001\u01c9\u0003"+
		"\u01c9\u2aa3\b\u01c9\u0001\u01ca\u0001\u01ca\u0001\u01ca\u0003\u01ca\u2aa8"+
		"\b\u01ca\u0001\u01ca\u0003\u01ca\u2aab\b\u01ca\u0001\u01cb\u0001\u01cb"+
		"\u0001\u01cb\u0001\u01cb\u0001\u01cc\u0001\u01cc\u0001\u01cc\u0001\u01cc"+
		"\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0003\u01cd\u2ab8\b\u01cd\u0001\u01ce"+
		"\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce\u0001\u01ce"+
		"\u0001\u01cf\u0001\u01cf\u0001\u01cf\u0001\u01cf\u0001\u01cf\u0001\u01cf"+
		"\u0001\u01cf\u0001\u01d0\u0001\u01d0\u0001\u01d0\u0003\u01d0\u2acb\b\u01d0"+
		"\u0001\u01d0\u0003\u01d0\u2ace\b\u01d0\u0001\u01d1\u0001\u01d1\u0001\u01d1"+
		"\u0003\u01d1\u2ad3\b\u01d1\u0001\u01d1\u0003\u01d1\u2ad6\b\u01d1\u0001"+
		"\u01d2\u0001\u01d2\u0001\u01d2\u0003\u01d2\u2adb\b\u01d2\u0001\u01d2\u0001"+
		"\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001"+
		"\u01d2\u0001\u01d2\u0003\u01d2\u2ae6\b\u01d2\u0001\u01d3\u0001\u01d3\u0003"+
		"\u01d3\u2aea\b\u01d3\u0001\u01d3\u0001\u01d3\u0003\u01d3\u2aee\b\u01d3"+
		"\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0003\u01d3\u2af4\b\u01d3"+
		"\u0001\u01d3\u0003\u01d3\u2af7\b\u01d3\u0001\u01d3\u0003\u01d3\u2afa\b"+
		"\u01d3\u0003\u01d3\u2afc\b\u01d3\u0003\u01d3\u2afe\b\u01d3\u0001\u01d3"+
		"\u0003\u01d3\u2b01\b\u01d3\u0001\u01d3\u0003\u01d3\u2b04\b\u01d3\u0001"+
		"\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0003\u01d4\u2b0a\b\u01d4\u0001"+
		"\u01d5\u0001\u01d5\u0001\u01d5\u0001\u01d5\u0003\u01d5\u2b10\b\u01d5\u0001"+
		"\u01d5\u0003\u01d5\u2b13\b\u01d5\u0001\u01d6\u0001\u01d6\u0003\u01d6\u2b17"+
		"\b\u01d6\u0001\u01d6\u0001\u01d6\u0003\u01d6\u2b1b\b\u01d6\u0001\u01d6"+
		"\u0001\u01d6\u0001\u01d6\u0003\u01d6\u2b20\b\u01d6\u0001\u01d6\u0001\u01d6"+
		"\u0003\u01d6\u2b24\b\u01d6\u0001\u01d6\u0001\u01d6\u0003\u01d6\u2b28\b"+
		"\u01d6\u0001\u01d7\u0001\u01d7\u0001\u01d7\u0003\u01d7\u2b2d\b\u01d7\u0001"+
		"\u01d8\u0001\u01d8\u0003\u01d8\u2b31\b\u01d8\u0001\u01d8\u0001\u01d8\u0003"+
		"\u01d8\u2b35\b\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0003"+
		"\u01d8\u2b3b\b\u01d8\u0001\u01d8\u0003\u01d8\u2b3e\b\u01d8\u0001\u01d8"+
		"\u0003\u01d8\u2b41\b\u01d8\u0003\u01d8\u2b43\b\u01d8\u0003\u01d8\u2b45"+
		"\b\u01d8\u0001\u01d8\u0003\u01d8\u2b48\b\u01d8\u0001\u01d8\u0003\u01d8"+
		"\u2b4b\b\u01d8\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0003\u01d9\u2b50\b"+
		"\u01d9\u0001\u01da\u0001\u01da\u0001\u01da\u0001\u01db\u0001\u01db\u0001"+
		"\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0001\u01dc\u0003\u01dc\u2b5c"+
		"\b\u01dc\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001"+
		"\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001"+
		"\u01dd\u0003\u01dd\u2b6a\b\u01dd\u0001\u01de\u0001\u01de\u0001\u01de\u0005"+
		"\u01de\u2b6f\b\u01de\n\u01de\f\u01de\u2b72\t\u01de\u0001\u01df\u0001\u01df"+
		"\u0001\u01e0\u0001\u01e0\u0001\u01e1\u0001\u01e1\u0001\u01e2\u0001\u01e2"+
		"\u0001\u01e3\u0001\u01e3\u0001\u01e4\u0001\u01e4\u0001\u01e5\u0001\u01e5"+
		"\u0001\u01e6\u0001\u01e6\u0001\u01e6\u0005\u01e6\u2b85\b\u01e6\n\u01e6"+
		"\f\u01e6\u2b88\t\u01e6\u0001\u01e7\u0001\u01e7\u0001\u01e7\u0001\u01e7"+
		"\u0001\u01e7\u0001\u01e7\u0003\u01e7\u2b90\b\u01e7\u0001\u01e8\u0001\u01e8"+
		"\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8"+
		"\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0003\u01e8"+
		"\u2b9f\b\u01e8\u0001\u01e9\u0001\u01e9\u0001\u01ea\u0001\u01ea\u0001\u01eb"+
		"\u0001\u01eb\u0001\u01ec\u0001\u01ec\u0001\u01ed\u0001\u01ed\u0001\u01ed"+
		"\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0001\u01ed"+
		"\u0001\u01ed\u0001\u01ed\u0001\u01ed\u0003\u01ed\u2bb5\b\u01ed\u0001\u01ee"+
		"\u0001\u01ee\u0001\u01ee\u0001\u01ee\u0001\u01ee\u0003\u01ee\u2bbc\b\u01ee"+
		"\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0001\u01ef\u0003\u01ef"+
		"\u2bc3\b\u01ef\u0001\u01f0\u0001\u01f0\u0001\u01f1\u0001\u01f1\u0001\u01f1"+
		"\u0001\u01f1\u0001\u01f2\u0001\u01f2\u0001\u01f2\u0003\u01f2\u2bce\b\u01f2"+
		"\u0001\u01f2\u0001\u01f2\u0001\u01f3\u0001\u01f3\u0001\u01f3\u0005\u01f3"+
		"\u2bd5\b\u01f3\n\u01f3\f\u01f3\u2bd8\t\u01f3\u0001\u01f4\u0001\u01f4\u0001"+
		"\u01f4\u0003\u01f4\u2bdd\b\u01f4\u0001\u01f4\u0001\u01f4\u0001\u01f4\u0001"+
		"\u01f4\u0003\u01f4\u2be3\b\u01f4\u0005\u01f4\u2be5\b\u01f4\n\u01f4\f\u01f4"+
		"\u2be8\t\u01f4\u0001\u01f5\u0001\u01f5\u0001\u01f5\u0001\u01f5\u0001\u01f5"+
		"\u0001\u01f5\u0001\u01f5\u0001\u01f5\u0001\u01f5\u0001\u01f5\u0001\u01f5"+
		"\u0003\u01f5\u2bf5\b\u01f5\u0001\u01f6\u0001\u01f6\u0001\u01f6\u0001\u01f6"+
		"\u0001\u01f6\u0001\u01f6\u0003\u01f6\u2bfd\b\u01f6\u0001\u01f7\u0001\u01f7"+
		"\u0001\u01f7\u0001\u01f7\u0001\u01f7\u0001\u01f7\u0003\u01f7\u2c05\b\u01f7"+
		"\u0001\u01f8\u0001\u01f8\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0005\u01f9"+
		"\u2c0c\b\u01f9\n\u01f9\f\u01f9\u2c0f\t\u01f9\u0001\u01fa\u0001\u01fa\u0003"+
		"\u01fa\u2c13\b\u01fa\u0001\u01fa\u0001\u01fa\u0001\u01fa\u0003\u01fa\u2c18"+
		"\b\u01fa\u0005\u01fa\u2c1a\b\u01fa\n\u01fa\f\u01fa\u2c1d\t\u01fa\u0001"+
		"\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001"+
		"\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0004\u01fb\u2c2a"+
		"\b\u01fb\u000b\u01fb\f\u01fb\u2c2b\u0001\u01fb\u0001\u01fb\u0001\u01fb"+
		"\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb"+
		"\u0003\u01fb\u2c37\b\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb"+
		"\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb"+
		"\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb"+
		"\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0003\u01fb"+
		"\u2c4e\b\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb"+
		"\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb"+
		"\u0003\u01fb\u2c5b\b\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb"+
		"\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb"+
		"\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0003\u01fb\u2c6a\b\u01fb\u0001\u01fb"+
		"\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0003\u01fb\u2c70\b\u01fb\u0001\u01fb"+
		"\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0003\u01fb\u2c76\b\u01fb\u0001\u01fb"+
		"\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0003\u01fb\u2c7c\b\u01fb\u0001\u01fb"+
		"\u0001\u01fb\u0003\u01fb\u2c80\b\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb"+
		"\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0005\u01fb\u2c88\b\u01fb\n\u01fb"+
		"\f\u01fb\u2c8b\t\u01fb\u0001\u01fb\u0001\u01fb\u0001\u01fb\u0003\u01fb"+
		"\u2c90\b\u01fb\u0005\u01fb\u2c92\b\u01fb\n\u01fb\f\u01fb\u2c95\t\u01fb"+
		"\u0001\u01fc\u0001\u01fc\u0001\u01fc\u0001\u01fc\u0001\u01fc\u0001\u01fc"+
		"\u0001\u01fc\u0001\u01fc\u0001\u01fc\u0001\u01fd\u0001\u01fd\u0001\u01fd"+
		"\u0001\u01fd\u0001\u01fd\u0005\u01fd\u2ca5\b\u01fd\n\u01fd\f\u01fd\u2ca8"+
		"\t\u01fd\u0001\u01fd\u0001\u01fd\u0001\u01fe\u0001\u01fe\u0001\u01fe\u0001"+
		"\u01fe\u0001\u01fe\u0001\u01fe\u0001\u01fe\u0001\u01ff\u0001\u01ff\u0001"+
		"\u01ff\u0001\u01ff\u0001\u01ff\u0001\u01ff\u0001\u01ff\u0001\u01ff\u0001"+
		"\u01ff\u0003\u01ff\u2cbc\b\u01ff\u0001\u0200\u0001\u0200\u0001\u0200\u0001"+
		"\u0200\u0005\u0200\u2cc2\b\u0200\n\u0200\f\u0200\u2cc5\t\u0200\u0001\u0200"+
		"\u0001\u0200\u0001\u0200\u0001\u0200\u0003\u0200\u2ccb\b\u0200\u0001\u0201"+
		"\u0001\u0201\u0001\u0201\u0001\u0201\u0001\u0202\u0001\u0202\u0001\u0203"+
		"\u0001\u0203\u0001\u0203\u0001\u0203\u0005\u0203\u2cd7\b\u0203\n\u0203"+
		"\f\u0203\u2cda\t\u0203\u0001\u0203\u0001\u0203\u0001\u0203\u0001\u0203"+
		"\u0003\u0203\u2ce0\b\u0203\u0001\u0204\u0001\u0204\u0001\u0204\u0001\u0204"+
		"\u0001\u0205\u0001\u0205\u0001\u0205\u0001\u0205\u0001\u0205\u0001\u0205"+
		"\u0003\u0205\u2cec\b\u0205\u0001\u0205\u0001\u0205\u0003\u0205\u2cf0\b"+
		"\u0205\u0001\u0205\u0001\u0205\u0001\u0205\u0001\u0205\u0001\u0205\u0003"+
		"\u0205\u2cf7\b\u0205\u0001\u0205\u0001\u0205\u0003\u0205\u2cfb\b\u0205"+
		"\u0001\u0205\u0001\u0205\u0003\u0205\u2cff\b\u0205\u0001\u0205\u0001\u0205"+
		"\u0003\u0205\u2d03\b\u0205\u0001\u0205\u0001\u0205\u0003\u0205\u2d07\b"+
		"\u0205\u0001\u0205\u0001\u0205\u0003\u0205\u2d0b\b\u0205\u0001\u0205\u0001"+
		"\u0205\u0003\u0205\u2d0f\b\u0205\u0001\u0205\u0001\u0205\u0003\u0205\u2d13"+
		"\b\u0205\u0001\u0205\u0001\u0205\u0003\u0205\u2d17\b\u0205\u0001\u0205"+
		"\u0001\u0205\u0001\u0205\u0001\u0205\u0001\u0205\u0003\u0205\u2d1e\b\u0205"+
		"\u0001\u0206\u0001\u0206\u0001\u0206\u0001\u0206\u0001\u0206\u0005\u0206"+
		"\u2d25\b\u0206\n\u0206\f\u0206\u2d28\t\u0206\u0001\u0206\u0001\u0206\u0001"+
		"\u0206\u0001\u0206\u0001\u0206\u0001\u0206\u0001\u0206\u0001\u0206\u0001"+
		"\u0206\u0001\u0206\u0001\u0206\u0001\u0206\u0003\u0206\u2d36\b\u0206\u0001"+
		"\u0207\u0001\u0207\u0001\u0207\u0001\u0207\u0001\u0208\u0001\u0208\u0001"+
		"\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0003\u0209\u2d42\b\u0209\u0001"+
		"\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0001"+
		"\u0209\u0001\u0209\u0001\u0209\u0001\u0209\u0003\u0209\u2d4e\b\u0209\u0001"+
		"\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0005"+
		"\u020a\u2d56\b\u020a\n\u020a\f\u020a\u2d59\t\u020a\u0001\u020a\u0001\u020a"+
		"\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a"+
		"\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a"+
		"\u0001\u020a\u0001\u020a\u0005\u020a\u2d6b\b\u020a\n\u020a\f\u020a\u2d6e"+
		"\t\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001"+
		"\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001"+
		"\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0003\u020a\u2d80"+
		"\b\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001"+
		"\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001"+
		"\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001"+
		"\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0001"+
		"\u020a\u0001\u020a\u0001\u020a\u0001\u020a\u0003\u020a\u2d9d\b\u020a\u0001"+
		"\u020b\u0001\u020b\u0001\u020b\u0005\u020b\u2da2\b\u020b\n\u020b\f\u020b"+
		"\u2da5\t\u020b\u0001\u020c\u0001\u020c\u0001\u020c\u0001\u020c\u0001\u020d"+
		"\u0001\u020d\u0001\u020d\u0001\u020e\u0001\u020e\u0001\u020e\u0001\u020e"+
		"\u0001\u020e\u0001\u020e\u0001\u020e\u0001\u020e\u0001\u020e\u0001\u020e"+
		"\u0001\u020e\u0001\u020e\u0001\u020e\u0001\u020e\u0001\u020e\u0001\u020e"+
		"\u0001\u020e\u0001\u020e\u0003\u020e\u2dc0\b\u020e\u0001\u020e\u0001\u020e"+
		"\u0003\u020e\u2dc4\b\u020e\u0001\u020e\u0001\u020e\u0001\u020e\u0001\u020e"+
		"\u0001\u020e\u0001\u020e\u0001\u020e\u0003\u020e\u2dcd\b\u020e\u0001\u020e"+
		"\u0001\u020e\u0003\u020e\u2dd1\b\u020e\u0001\u020f\u0001\u020f\u0001\u020f"+
		"\u0003\u020f\u2dd6\b\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f"+
		"\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f"+
		"\u0001\u020f\u0003\u020f\u2de3\b\u020f\u0001\u020f\u0001\u020f\u0001\u020f"+
		"\u0003\u020f\u2de8\b\u020f\u0001\u020f\u0001\u020f\u0001\u020f\u0001\u020f"+
		"\u0001\u020f\u0001\u020f\u0001\u020f\u0003\u020f\u2df1\b\u020f\u0003\u020f"+
		"\u2df3\b\u020f\u0001\u0210\u0001\u0210\u0003\u0210\u2df7\b\u0210\u0001"+
		"\u0210\u0001\u0210\u0003\u0210\u2dfb\b\u0210\u0001\u0210\u0001\u0210\u0001"+
		"\u0210\u0001\u0210\u0003\u0210\u2e01\b\u0210\u0001\u0211\u0001\u0211\u0001"+
		"\u0212\u0003\u0212\u2e06\b\u0212\u0001\u0212\u0001\u0212\u0003\u0212\u2e0a"+
		"\b\u0212\u0001\u0212\u0001\u0212\u0003\u0212\u2e0e\b\u0212\u0001\u0212"+
		"\u0001\u0212\u0001\u0212\u0003\u0212\u2e13\b\u0212\u0001\u0212\u0001\u0212"+
		"\u0003\u0212\u2e17\b\u0212\u0001\u0212\u0001\u0212\u0001\u0212\u0003\u0212"+
		"\u2e1c\b\u0212\u0001\u0212\u0001\u0212\u0001\u0212\u0003\u0212\u2e21\b"+
		"\u0212\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001\u0213\u0001"+
		"\u0213\u0001\u0213\u0001\u0213\u0003\u0213\u2e2b\b\u0213\u0001\u0214\u0001"+
		"\u0214\u0001\u0214\u0004\u0214\u2e30\b\u0214\u000b\u0214\f\u0214\u2e31"+
		"\u0001\u0214\u0001\u0214\u0003\u0214\u2e36\b\u0214\u0001\u0214\u0001\u0214"+
		"\u0001\u0214\u0001\u0214\u0004\u0214\u2e3c\b\u0214\u000b\u0214\f\u0214"+
		"\u2e3d\u0001\u0214\u0001\u0214\u0003\u0214\u2e42\b\u0214\u0001\u0214\u0001"+
		"\u0214\u0003\u0214\u2e46\b\u0214\u0001\u0215\u0001\u0215\u0001\u0215\u0001"+
		"\u0215\u0001\u0215\u0001\u0216\u0001\u0216\u0001\u0216\u0001\u0216\u0001"+
		"\u0216\u0001\u0217\u0003\u0217\u2e53\b\u0217\u0001\u0217\u0001\u0217\u0005"+
		"\u0217\u2e57\b\u0217\n\u0217\f\u0217\u2e5a\t\u0217\u0001\u0218\u0001\u0218"+
		"\u0003\u0218\u2e5e\b\u0218\u0001\u0218\u0001\u0218\u0001\u0218\u0005\u0218"+
		"\u2e63\b\u0218\n\u0218\f\u0218\u2e66\t\u0218\u0001\u0219\u0001\u0219\u0001"+
		"\u0219\u0001\u0219\u0001\u0219\u0003\u0219\u2e6d\b\u0219\u0001\u0219\u0001"+
		"\u0219\u0001\u0219\u0001\u021a\u0001\u021a\u0001\u021a\u0003\u021a\u2e75"+
		"\b\u021a\u0001\u021a\u0001\u021a\u0001\u021a\u0003\u021a\u2e7a\b\u021a"+
		"\u0001\u021b\u0001\u021b\u0003\u021b\u2e7e\b\u021b\u0001\u021b\u0001\u021b"+
		"\u0001\u021b\u0003\u021b\u2e83\b\u021b\u0001\u021b\u0001\u021b\u0003\u021b"+
		"\u2e87\b\u021b\u0001\u021c\u0001\u021c\u0001\u021c\u0001\u021c\u0001\u021c"+
		"\u0001\u021c\u0001\u021c\u0003\u021c\u2e90\b\u021c\u0001\u021c\u0001\u021c"+
		"\u0005\u021c\u2e94\b\u021c\n\u021c\f\u021c\u2e97\t\u021c\u0001\u021d\u0003"+
		"\u021d\u2e9a\b\u021d\u0001\u021d\u0003\u021d\u2e9d\b\u021d\u0001\u021d"+
		"\u0003\u021d\u2ea0\b\u021d\u0001\u021d\u0001\u021d\u0003\u021d\u2ea4\b"+
		"\u021d\u0001\u021d\u0003\u021d\u2ea7\b\u021d\u0001\u021d\u0003\u021d\u2eaa"+
		"\b\u021d\u0001\u021e\u0001\u021e\u0001\u021e\u0001\u021f\u0001\u021f\u0001"+
		"\u021f\u0001\u0220\u0003\u0220\u2eb3\b\u0220\u0001\u0220\u0001\u0220\u0001"+
		"\u0221\u0003\u0221\u2eb8\b\u0221\u0001\u0221\u0003\u0221\u2ebb\b\u0221"+
		"\u0001\u0221\u0001\u0221\u0001\u0222\u0001\u0222\u0001\u0222\u0005\u0222"+
		"\u2ec2\b\u0222\n\u0222\f\u0222\u2ec5\t\u0222\u0001\u0222\u0003\u0222\u2ec8"+
		"\b\u0222\u0001\u0223\u0001\u0223\u0003\u0223\u2ecc\b\u0223\u0001\u0223"+
		"\u0001\u0223\u0003\u0223\u2ed0\b\u0223\u0001\u0223\u0001\u0223\u0003\u0223"+
		"\u2ed4\b\u0223\u0003\u0223\u2ed6\b\u0223\u0001\u0224\u0003\u0224\u2ed9"+
		"\b\u0224\u0001\u0224\u0001\u0224\u0001\u0225\u0003\u0225\u2ede\b\u0225"+
		"\u0001\u0225\u0001\u0225\u0003\u0225\u2ee2\b\u0225\u0001\u0225\u0001\u0225"+
		"\u0003\u0225\u2ee6\b\u0225\u0001\u0226\u0001\u0226\u0001\u0226\u0001\u0226"+
		"\u0003\u0226\u2eec\b\u0226\u0001\u0227\u0001\u0227\u0001\u0227\u0003\u0227"+
		"\u2ef1\b\u0227\u0001\u0228\u0003\u0228\u2ef4\b\u0228\u0001\u0228\u0001"+
		"\u0228\u0001\u0229\u0001\u0229\u0003\u0229\u2efa\b\u0229\u0001\u022a\u0001"+
		"\u022a\u0001\u022b\u0001\u022b\u0001\u022c\u0001\u022c\u0001\u022c\u0001"+
		"\u022d\u0001\u022d\u0001\u022d\u0001\u022e\u0001\u022e\u0001\u022e\u0005"+
		"\u022e\u2f09\b\u022e\n\u022e\f\u022e\u2f0c\t\u022e\u0001\u022f\u0001\u022f"+
		"\u0001\u022f\u0001\u0230\u0001\u0230\u0001\u0230\u0001\u0231\u0001\u0231"+
		"\u0001\u0231\u0005\u0231\u2f17\b\u0231\n\u0231\f\u0231\u2f1a\t\u0231\u0001"+
		"\u0232\u0001\u0232\u0001\u0233\u0001\u0233\u0005\u0233\u2f20\b\u0233\n"+
		"\u0233\f\u0233\u2f23\t\u0233\u0001\u0233\u0001\u0233\u0001\u0233\u0001"+
		"\u0233\u0005\u0233\u2f29\b\u0233\n\u0233\f\u0233\u2f2c\t\u0233\u0003\u0233"+
		"\u2f2e\b\u0233\u0001\u0234\u0001\u0234\u0003\u0234\u2f32\b\u0234\u0001"+
		"\u0234\u0003\u0234\u2f35\b\u0234\u0001\u0234\u0003\u0234\u2f38\b\u0234"+
		"\u0001\u0234\u0003\u0234\u2f3b\b\u0234\u0001\u0234\u0003\u0234\u2f3e\b"+
		"\u0234\u0001\u0234\u0003\u0234\u2f41\b\u0234\u0001\u0234\u0003\u0234\u2f44"+
		"\b\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0001"+
		"\u0234\u0001\u0234\u0003\u0234\u2f4d\b\u0234\u0001\u0234\u0001\u0234\u0001"+
		"\u0234\u0001\u0234\u0001\u0234\u0003\u0234\u2f54\b\u0234\u0001\u0234\u0003"+
		"\u0234\u2f57\b\u0234\u0001\u0234\u0003\u0234\u2f5a\b\u0234\u0001\u0234"+
		"\u0001\u0234\u0003\u0234\u2f5e\b\u0234\u0001\u0234\u0003\u0234\u2f61\b"+
		"\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0003\u0234\u2f67"+
		"\b\u0234\u0001\u0234\u0003\u0234\u2f6a\b\u0234\u0001\u0234\u0003\u0234"+
		"\u2f6d\b\u0234\u0001\u0234\u0001\u0234\u0001\u0234\u0003\u0234\u2f72\b"+
		"\u0234\u0001\u0234\u0003\u0234\u2f75\b\u0234\u0003\u0234\u2f77\b\u0234"+
		"\u0001\u0235\u0001\u0235\u0001\u0235\u0001\u0235\u0001\u0235\u0001\u0235"+
		"\u0001\u0235\u0001\u0235\u0001\u0235\u0001\u0235\u0001\u0235\u0001\u0235"+
		"\u0003\u0235\u2f85\b\u0235\u0001\u0236\u0001\u0236\u0001\u0236\u0001\u0236"+
		"\u0003\u0236\u2f8b\b\u0236\u0001\u0236\u0001\u0236\u0001\u0236\u0005\u0236"+
		"\u2f90\b\u0236\n\u0236\f\u0236\u2f93\t\u0236\u0001\u0236\u0001\u0236\u0001"+
		"\u0237\u0001\u0237\u0001\u0237\u0001\u0237\u0001\u0237\u0001\u0237\u0001"+
		"\u0237\u0001\u0238\u0001\u0238\u0001\u0238\u0005\u0238\u2fa1\b\u0238\n"+
		"\u0238\f\u0238\u2fa4\t\u0238\u0001\u0239\u0003\u0239\u2fa7\b\u0239\u0001"+
		"\u0239\u0001\u0239\u0001\u0239\u0003\u0239\u2fac\b\u0239\u0001\u0239\u0001"+
		"\u0239\u0001\u023a\u0001\u023a\u0003\u023a\u2fb2\b\u023a\u0001\u023b\u0001"+
		"\u023b\u0003\u023b\u2fb6\b\u023b\u0001\u023c\u0003\u023c\u2fb9\b\u023c"+
		"\u0001\u023c\u0001\u023c\u0001\u023c\u0001\u023c\u0003\u023c\u2fbf\b\u023c"+
		"\u0001\u023c\u0001\u023c\u0001\u023c\u0001\u023c\u0001\u023c\u0003\u023c"+
		"\u2fc6\b\u023c\u0003\u023c\u2fc8\b\u023c\u0001\u023c\u0001\u023c\u0003"+
		"\u023c\u2fcc\b\u023c\u0001\u023c\u0001\u023c\u0001\u023c\u0001\u023c\u0001"+
		"\u023c\u0003\u023c\u2fd3\b\u023c\u0001\u023d\u0001\u023d\u0001\u023d\u0001"+
		"\u023d\u0001\u023d\u0001\u023d\u0001\u023d\u0001\u023d\u0001\u023d\u0001"+
		"\u023d\u0001\u023d\u0001\u023d\u0001\u023d\u0001\u023d\u0003\u023d\u2fe3"+
		"\b\u023d\u0001\u023d\u0001\u023d\u0001\u023d\u0001\u023d\u0001\u023d\u0001"+
		"\u023d\u0001\u023d\u0001\u023d\u0001\u023d\u0003\u023d\u2fee\b\u023d\u0001"+
		"\u023e\u0001\u023e\u0001\u023e\u0001\u023e\u0001\u023e\u0001\u023e\u0001"+
		"\u023e\u0001\u023e\u0001\u023e\u0001\u023e\u0001\u023e\u0003\u023e\u2ffb"+
		"\b\u023e\u0001\u023e\u0001\u023e\u0001\u023f\u0001\u023f\u0001\u023f\u0001"+
		"\u023f\u0001\u023f\u0001\u023f\u0001\u023f\u0001\u023f\u0003\u023f\u3007"+
		"\b\u023f\u0001\u0240\u0001\u0240\u0001\u0241\u0001\u0241\u0001\u0241\u0001"+
		"\u0241\u0001\u0242\u0001\u0242\u0001\u0243\u0001\u0243\u0003\u0243\u3013"+
		"\b\u0243\u0001\u0243\u0001\u0243\u0001\u0243\u0001\u0243\u0003\u0243\u3019"+
		"\b\u0243\u0001\u0243\u0001\u0243\u0005\u0243\u301d\b\u0243\n\u0243\f\u0243"+
		"\u3020\t\u0243\u0001\u0244\u0001\u0244\u0001\u0244\u0001\u0245\u0001\u0245"+
		"\u0001\u0245\u0001\u0245\u0001\u0245\u0001\u0245\u0001\u0245\u0001\u0245"+
		"\u0001\u0245\u0003\u0245\u302e\b\u0245\u0001\u0246\u0001\u0246\u0001\u0246"+
		"\u0001\u0246\u0001\u0246\u0001\u0246\u0001\u0246\u0001\u0246\u0003\u0246"+
		"\u3038\b\u0246\u0001\u0246\u0003\u0246\u303b\b\u0246\u0001\u0247\u0001"+
		"\u0247\u0001\u0248\u0001\u0248\u0001\u0249\u0001\u0249\u0001\u0249\u0001"+
		"\u0249\u0001\u0249\u0001\u0249\u0001\u0249\u0001\u0249\u0001\u0249\u0001"+
		"\u0249\u0001\u0249\u0003\u0249\u304c\b\u0249\u0001\u0249\u0003\u0249\u304f"+
		"\b\u0249\u0001\u024a\u0001\u024a\u0001\u024a\u0001\u024a\u0001\u024a\u0001"+
		"\u024a\u0001\u024a\u0001\u024a\u0005\u024a\u3059\b\u024a\n\u024a\f\u024a"+
		"\u305c\t\u024a\u0001\u024b\u0001\u024b\u0001\u024b\u0001\u024c\u0001\u024c"+
		"\u0001\u024c\u0003\u024c\u3064\b\u024c\u0001\u024c\u0003\u024c\u3067\b"+
		"\u024c\u0001\u024c\u0003\u024c\u306a\b\u024c\u0001\u024c\u0003\u024c\u306d"+
		"\b\u024c\u0001\u024c\u0003\u024c\u3070\b\u024c\u0001\u024c\u0003\u024c"+
		"\u3073\b\u024c\u0001\u024c\u0003\u024c\u3076\b\u024c\u0001\u024c\u0001"+
		"\u024c\u0001\u024d\u0001\u024d\u0001\u024d\u0001\u024d\u0001\u024d\u0001"+
		"\u024d\u0001\u024d\u0001\u024d\u0001\u024d\u0001\u024d\u0001\u024d\u0001"+
		"\u024d\u0001\u024d\u0005\u024d\u3087\b\u024d\n\u024d\f\u024d\u308a\t\u024d"+
		"\u0001\u024d\u0001\u024d\u0001\u024d\u0001\u024d\u0003\u024d\u3090\b\u024d"+
		"\u0003\u024d\u3092\b\u024d\u0001\u024d\u0001\u024d\u0001\u024d\u0001\u024d"+
		"\u0001\u024d\u0001\u024d\u0001\u024d\u0001\u024d\u0001\u024d\u0001\u024d"+
		"\u0001\u024d\u0003\u024d\u309f\b\u024d\u0001\u024e\u0001\u024e\u0001\u024e"+
		"\u0001\u024e\u0005\u024e\u30a5\b\u024e\n\u024e\f\u024e\u30a8\t\u024e\u0001"+
		"\u024e\u0001\u024e\u0001\u024f\u0001\u024f\u0001\u024f\u0001\u024f\u0001"+
		"\u0250\u0001\u0250\u0001\u0250\u0001\u0250\u0001\u0250\u0003\u0250\u30b5"+
		"\b\u0250\u0003\u0250\u30b7\b\u0250\u0001\u0250\u0001\u0250\u0001\u0250"+
		"\u0003\u0250\u30bc\b\u0250\u0003\u0250\u30be\b\u0250\u0003\u0250\u30c0"+
		"\b\u0250\u0001\u0251\u0001\u0251\u0001\u0251\u0001\u0251\u0005\u0251\u30c6"+
		"\b\u0251\n\u0251\f\u0251\u30c9\t\u0251\u0001\u0252\u0001\u0252\u0003\u0252"+
		"\u30cd\b\u0252\u0001\u0253\u0001\u0253\u0001\u0253\u0001\u0253\u0001\u0253"+
		"\u0001\u0254\u0001\u0254\u0001\u0254\u0003\u0254\u30d7\b\u0254\u0001\u0254"+
		"\u0001\u0254\u0003\u0254\u30db\b\u0254\u0001\u0255\u0001\u0255\u0003\u0255"+
		"\u30df\b\u0255\u0001\u0255\u0001\u0255\u0001\u0256\u0001\u0256\u0005\u0256"+
		"\u30e5\b\u0256\n\u0256\f\u0256\u30e8\t\u0256\u0001\u0256\u0001\u0256\u0001"+
		"\u0256\u0001\u0256\u0001\u0256\u0003\u0256\u30ef\b\u0256\u0001\u0256\u0001"+
		"\u0256\u0001\u0256\u0001\u0256\u0001\u0256\u0001\u0256\u0005\u0256\u30f7"+
		"\b\u0256\n\u0256\f\u0256\u30fa\t\u0256\u0001\u0257\u0001\u0257\u0001\u0258"+
		"\u0003\u0258\u30ff\b\u0258\u0001\u0258\u0001\u0258\u0001\u0259\u0001\u0259"+
		"\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a"+
		"\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a"+
		"\u0001\u025a\u0001\u025a\u0003\u025a\u3113\b\u025a\u0001\u025a\u0001\u025a"+
		"\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0003\u025a"+
		"\u311c\b\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0003\u025a"+
		"\u3122\b\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0003\u025a"+
		"\u3128\b\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0003\u025a"+
		"\u312e\b\u025a\u0001\u025a\u0001\u025a\u0003\u025a\u3132\b\u025a\u0001"+
		"\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0003\u025a\u3139"+
		"\b\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001\u025a\u0001"+
		"\u025a\u0005\u025a\u3141\b\u025a\n\u025a\f\u025a\u3144\t\u025a\u0001\u025a"+
		"\u0001\u025a\u0001\u025a\u0003\u025a\u3149\b\u025a\u0001\u025a\u0001\u025a"+
		"\u0001\u025a\u0001\u025a\u0001\u025a\u0003\u025a\u3150\b\u025a\u0001\u025b"+
		"\u0001\u025b\u0001\u025b\u0001\u025c\u0001\u025c\u0001\u025c\u0003\u025c"+
		"\u3158\b\u025c\u0001\u025d\u0001\u025d\u0001\u025d\u0005\u025d\u315d\b"+
		"\u025d\n\u025d\f\u025d\u3160\t\u025d\u0001\u025e\u0001\u025e\u0001\u025e"+
		"\u0001\u025e\u0003\u025e\u3166\b\u025e\u0001\u025e\u0001\u025e\u0001\u025e"+
		"\u0001\u025e\u0001\u025e\u0001\u025e\u0003\u025e\u316e\b\u025e\u0001\u025e"+
		"\u0001\u025e\u0001\u025e\u0001\u025e\u0001\u025e\u0001\u025e\u0001\u025e"+
		"\u0003\u025e\u3177\b\u025e\u0001\u025f\u0001\u025f\u0001\u025f\u0001\u0260"+
		"\u0001\u0260\u0001\u0260\u0001\u0261\u0001\u0261\u0001\u0261\u0003\u0261"+
		"\u3182\b\u0261\u0001\u0261\u0003\u0261\u3185\b\u0261\u0001\u0261\u0001"+
		"\u0261\u0003\u0261\u3189\b\u0261\u0001\u0262\u0001\u0262\u0001\u0262\u0001"+
		"\u0262\u0001\u0262\u0005\u0262\u3190\b\u0262\n\u0262\f\u0262\u3193\t\u0262"+
		"\u0001\u0263\u0001\u0263\u0001\u0264\u0001\u0264\u0001\u0265\u0001\u0265"+
		"\u0001\u0265\u0001\u0265\u0003\u0265\u319d\b\u0265\u0001\u0265\u0001\u0265"+
		"\u0003\u0265\u31a1\b\u0265\u0001\u0265\u0003\u0265\u31a4\b\u0265\u0001"+
		"\u0265\u0001\u0265\u0003\u0265\u31a8\b\u0265\u0001\u0265\u0001\u0265\u0003"+
		"\u0265\u31ac\b\u0265\u0001\u0265\u0003\u0265\u31af\b\u0265\u0003\u0265"+
		"\u31b1\b\u0265\u0001\u0266\u0001\u0266\u0001\u0267\u0001\u0267\u0001\u0267"+
		"\u0001\u0267\u0001\u0267\u0001\u0267\u0001\u0267\u0001\u0267\u0001\u0267"+
		"\u0001\u0267\u0001\u0267\u0001\u0267\u0001\u0267\u0005\u0267\u31c2\b\u0267"+
		"\n\u0267\f\u0267\u31c5\t\u0267\u0001\u0267\u0001\u0267\u0001\u0267\u0001"+
		"\u0267\u0001\u0267\u0001\u0267\u0001\u0267\u0001\u0267\u0001\u0267\u0005"+
		"\u0267\u31d0\b\u0267\n\u0267\f\u0267\u31d3\t\u0267\u0001\u0267\u0001\u0267"+
		"\u0003\u0267\u31d7\b\u0267\u0001\u0267\u0000\u0003\u03f6\u0438\u04ac\u0268"+
		"\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a"+
		"\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082"+
		"\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a"+
		"\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2"+
		"\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca"+
		"\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2"+
		"\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa"+
		"\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112"+
		"\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a"+
		"\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142"+
		"\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a"+
		"\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172"+
		"\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a"+
		"\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2"+
		"\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba"+
		"\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2"+
		"\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea"+
		"\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202"+
		"\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a"+
		"\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232"+
		"\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a"+
		"\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262"+
		"\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a"+
		"\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292"+
		"\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa"+
		"\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2"+
		"\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da"+
		"\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2"+
		"\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a"+
		"\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322"+
		"\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a"+
		"\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352"+
		"\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a"+
		"\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382"+
		"\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a"+
		"\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2"+
		"\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca"+
		"\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2"+
		"\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa"+
		"\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410\u0412"+
		"\u0414\u0416\u0418\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a"+
		"\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c\u043e\u0440\u0442"+
		"\u0444\u0446\u0448\u044a\u044c\u044e\u0450\u0452\u0454\u0456\u0458\u045a"+
		"\u045c\u045e\u0460\u0462\u0464\u0466\u0468\u046a\u046c\u046e\u0470\u0472"+
		"\u0474\u0476\u0478\u047a\u047c\u047e\u0480\u0482\u0484\u0486\u0488\u048a"+
		"\u048c\u048e\u0490\u0492\u0494\u0496\u0498\u049a\u049c\u049e\u04a0\u04a2"+
		"\u04a4\u04a6\u04a8\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4\u04b6\u04b8\u04ba"+
		"\u04bc\u04be\u04c0\u04c2\u04c4\u04c6\u04c8\u04ca\u04cc\u04ce\u0000y\u0002"+
		"\u0000\u0011\u0011\u010c\u010c\u0002\u0000\u02fe\u02fe\u0338\u0338\u0002"+
		"\u0000\u0251\u0252\u0254\u0254\u0002\u0000\u0371\u0371\u0373\u0374\u0003"+
		"\u0000\u0164\u0164\u02da\u02da\u0361\u0361\u0002\u0000\u0094\u0094\u0256"+
		"\u0256\u0002\u0000\u00ee\u00ee\u0317\u0317\u0003\u0000\u0233\u0233\u0287"+
		"\u0287\u0317\u0317\u0006\u0000\u0007\u0007\u01e6\u01e6\u021f\u021f\u0285"+
		"\u0285\u02d2\u02d2\u031a\u031a\b\u000077^^aa\u00b9\u00b9\u012f\u012f\u01b1"+
		"\u01b1\u022c\u022c\u0345\u0345\u0002\u0000\u024f\u024f\u02cc\u02cc\u0003"+
		"\u0000\u0086\u0086\u027c\u027c\u032d\u032d\u0004\u0000##%%\u0086\u0086"+
		"\u00d3\u00d3\u0004\u0000\u0086\u0086\u00a7\u00a7\u00b1\u00b1\u0193\u0193"+
		"\u0004\u0000\u0216\u0216\u0234\u0234\u024f\u024f\u02cc\u02cc\u0002\u0000"+
		"\u0086\u0086\u0283\u0283\u0002\u0000\u0243\u0243\u024b\u024b\b\u0000\u0086"+
		"\u0086\u0088\u0088\u0092\u0092\u0136\u0136\u0190\u0190\u0243\u0243\u024b"+
		"\u024b\u0283\u0283\u0002\u0000\u0086\u0086\u00d3\u00d3\u0005\u0000\u00a3"+
		"\u00a3\u01a5\u01a5\u01ad\u01ad\u0331\u0331\u0343\u0343\u0003\u0000\u01b9"+
		"\u01b9\u02cc\u02cc\u02ce\u02ce\u0002\u0000\u00c2\u00c2\u00d2\u00d2\u0004"+
		"\u0000GG\u00a2\u00a2\u01d4\u01d4\u0209\u0209\u0003\u0000\u00c2\u00c2\u00d2"+
		"\u00d2\u00d4\u00d4\u0002\u0000\u0146\u0146\u01b1\u01b1\u0002\u0000\u00d3"+
		"\u00d3\u00f8\u00f8\u0003\u0000\u0086\u0086\u01ac\u01ac\u02d1\u02d1\u0002"+
		"\u0000\n\n\u023b\u023b\u0003\u0000\u0086\u0086\u00d3\u00d3\u02bf\u02bf"+
		"\u0002\u0000\u00b6\u00b6\u0143\u0143\u0002\u0000\u01bb\u01bb\u0323\u0323"+
		"\u0003\u0000\u0118\u0118\u01f4\u01f4\u0295\u0295\u0002\u0000\u00b0\u00b0"+
		"\u01bf\u01bf\u0002\u0000\u01b4\u01b4\u023a\u023a\u0003\u0000\u00e2\u00e2"+
		"\u0123\u0123\u02ca\u02ca\u0002\u0000\u001c\u001c\u01a2\u01a2\u0002\u0000"+
		"\n\n\u00ca\u00ca\u0003\u0000__\u00e0\u00e0\u02b0\u02b0\u0003\u0000\u00a5"+
		"\u00a5\u027d\u027d\u02d4\u02d4\u0002\u0000..QQ\u0004\u000011\u00b9\u00b9"+
		"\u012f\u012f\u01b1\u01b1\u0003\u000011\u0118\u0118\u014c\u014c\u0002\u0000"+
		"\u01dc\u01dc\u01de\u01de\u0002\u0000\u00a7\u00a7\u0193\u0193\u0002\u0000"+
		"\u0145\u0145\u032c\u032c\u0006\u0000=>\u009b\u009c\u0164\u0165\u01e3\u01e4"+
		"\u01f2\u01f3\u033e\u033f\u0003\u0000\u015e\u015f\u0222\u0222\u02aa\u02aa"+
		"\u0002\u0000dd\u01ed\u01ed\u0003\u0000LL\u0121\u0121\u01d6\u01d6\u0003"+
		"\u0000\u0001\u0001\u0122\u0122\u01d5\u01d5\u0002\u0000\u0181\u0181\u02d5"+
		"\u02d6\u0002\u0000\u028b\u028b\u028d\u028d\u0001\u0000\u01f8\u0202\u0013"+
		"\u0000\u0001\u000122>>IILL]]\u009c\u009c\u0120\u0122\u0165\u0165\u01b2"+
		"\u01b2\u01cf\u01cf\u01d5\u01d6\u01e4\u01e4\u01f3\u01f3\u0268\u0268\u02a3"+
		"\u02a3\u033f\u033f\u0347\u0347\u037b\u037b\b\u000012^^aa\u00b9\u00b9\u012f"+
		"\u012f\u01b1\u01b1\u022c\u022c\u0345\u0345\u0003\u0000PP\u0137\u0137\u0322"+
		"\u0322\u0001\u0000\u02a1\u02a2\u0001\u0000\u0371\u0372\u0002\u0000\u0104"+
		"\u0104\u0306\u0306\u0002\u0000\u02d4\u02d4\u0329\u0329\u0001\u0000\u02e0"+
		"\u02e1\u0002\u0000\u0128\u0128\u017c\u017c\u0002\u0000\u01b3\u01b3\u01e5"+
		"\u01e5\u0002\u000055\u013c\u013c2\u0000\u0003\u0003\u0018\u0018\u001a"+
		"\u001a34WXs}\u00a7\u00a7\u00ab\u00ac\u00b1\u00b1\u00d5\u00d5\u00d8\u00d8"+
		"\u00df\u00df\u00e5\u00e6\u00f5\u00f5\u0124\u0125\u0152\u0152\u0160\u0162"+
		"\u0166\u0167\u017f\u017f\u0192\u0193\u019f\u019f\u01a7\u01a7\u01ac\u01ac"+
		"\u0208\u0208\u020c\u020c\u0213\u0214\u0228\u0228\u022a\u022a\u0244\u0245"+
		"\u0261\u0261\u0277\u0277\u0292\u0292\u0296\u0296\u02ab\u02ab\u02b7\u02b8"+
		"\u02c5\u02c5\u02cf\u02cf\u02e8\u02e8\u02ea\u02ea\u02ec\u02ec\u02ee\u02f0"+
		"\u02f2\u02f2\u02f5\u02f5\u02f7\u02f8\u0300\u0301\u030b\u030b\u0313\u0313"+
		"\u031d\u031e\u0320\u0320\u0332\u0333\u0005\u0000\u016d\u016d\u0196\u0196"+
		"\u029e\u029e\u033d\u033d\u0340\u0341\u0002\u0000\u033a\u033c\u0342\u0342"+
		"\u0002\u0000\u02a3\u02a3\u02b0\u02b0\u0002\u0000\u00cc\u00cc\u02b0\u02b0"+
		"\u000e\u0000\u0010\u0010\u00a6\u00a6\u0159\u0159\u020e\u020e\u025a\u025a"+
		"\u027e\u027e\u02ad\u02ad\u02c3\u02c3\u02d7\u02d7\u02dc\u02dc\u02df\u02df"+
		"\u031b\u031b\u032a\u032a\u032e\u032e\u0004\u0000  \u01b6\u01b6\u0284\u0284"+
		"\u02bb\u02bb\u0002\u0000ee\u024c\u024c\u0002\u0000\u0011\u0011\u01b1\u01b1"+
		"\u0001\u0000\u00be\u00bf\u0002\u0000\u0085\u0085\u02ac\u02ac\u0002\u0000"+
		"\u0110\u0110\u014a\u014a\u0004\u0000\u00a5\u00a5\u027d\u027d\u02de\u02de"+
		"\u032d\u032d(\u0000\u0006\u0006\t\t\u000f\u000f..\u007f\u007f\u0086\u0086"+
		"\u008b\u008b\u0095\u0095\u00c0\u00c0\u00cf\u00cf\u010e\u010f\u0119\u0119"+
		"\u013d\u013d\u0163\u0163\u0168\u0168\u016b\u016c\u0176\u0176\u0192\u0192"+
		"\u01a0\u01a0\u01b3\u01b3\u01e5\u01e5\u01e9\u01e9\u020f\u020f\u0231\u0231"+
		"\u0237\u0237\u0259\u0259\u025c\u025c\u0262\u0262\u0288\u0288\u028a\u028a"+
		"\u02ac\u02ac\u02db\u02db\u02dd\u02dd\u02e0\u02e0\u02e7\u02e7\u030c\u030c"+
		"\u0319\u0319\u0325\u0326\u032d\u032d\u0330\u0330Y\u0000\u0007\u0007\r"+
		"\r\u001b\u001b**rr\u0083\u0083\u0086\u0086\u008c\u008c\u00a4\u00a4\u00ae"+
		"\u00ae\u00b8\u00b8\u00bc\u00bc\u00c6\u00c6\u00c9\u00c9\u00cb\u00cb\u00cd"+
		"\u00cd\u00cf\u00d0\u00d3\u00d3\u00e3\u00e3\u00e9\u00e9\u00ec\u00ec\u00f0"+
		"\u00f0\u00f2\u00f2\u0108\u0109\u010d\u010e\u0116\u0116\u0128\u0128\u0138"+
		"\u0138\u013a\u013c\u0149\u0149\u014c\u014d\u014f\u014f\u0154\u0154\u015b"+
		"\u015b\u015f\u015f\u016f\u0170\u0173\u0173\u017c\u017c\u0182\u0182\u0192"+
		"\u0192\u0196\u0196\u01a0\u01a0\u01a9\u01a9\u01ab\u01ab\u01bd\u01bd\u01c2"+
		"\u01c2\u01d3\u01d3\u01d7\u01d7\u01dc\u01de\u01e1\u01e1\u01e6\u01e6\u01e8"+
		"\u01e9\u01ed\u01ed\u01f5\u01f5\u01f7\u0202\u0204\u0205\u0210\u0210\u0218"+
		"\u0218\u021c\u021f\u0224\u0224\u0226\u0226\u0228\u0228\u022b\u022b\u0231"+
		"\u0232\u0235\u0235\u0247\u0248\u024a\u024a\u024c\u024c\u024e\u024e\u0259"+
		"\u0259\u025e\u025e\u0262\u0262\u027a\u027a\u027c\u027c\u0285\u0285\u02a5"+
		"\u02a5\u02b3\u02b3\u02b5\u02b5\u02b9\u02ba\u02d2\u02d2\u02db\u02dd\u02f5"+
		"\u02f5\u0316\u0316\u031a\u031a\u0325\u0326\u0328\u0328\u032b\u032b\u0330"+
		"\u0330\u0344\u0344\u000f\u0000\u001f\u001f<<ii\u0096\u0096\u009f\u00a1"+
		"\u010f\u010f\u0127\u0127\u013b\u013b\u0183\u0183\u019a\u019a\u02a9\u02a9"+
		"\u02cb\u02cb\u02fa\u02fa\u030a\u030a\u0315\u0315\u0004\u0000jj\u025d\u025d"+
		"\u0307\u0308\u0355\u0355\u0002\u0000\u013f\u013f\u01c2\u01c2\u0002\u0000"+
		"\u02fb\u02fb\u034d\u034d\u0001\u0000\u02c9\u02ca\u0003\u0000\u00a8\u00a8"+
		"\u02e5\u02e5\u02f3\u02f3\u0003\u0000\u00a9\u00a9\u02e6\u02e6\u02f4\u02f4"+
		"\u0003\u0000\u0081\u0081\u0089\u008a\u0133\u0133\u0001\u0000\u0397\u0398"+
		"\u0001\u0000\u0394\u0396\u0002\u0000\u0385\u0385\u0397\u0398\u0002\u0000"+
		"\u0142\u0142\u0177\u0177\u0003\u0000\u0184\u0184\u0265\u0265\u0304\u0304"+
		"\u0004\u0000\u015b\u015b\u02e4\u02e4\u02e7\u02e7\u034d\u034d\u0006\u0000"+
		"\u0157\u0157\u0348\u0348\u034b\u034b\u0358\u0358\u035f\u035f\u0362\u0362"+
		"\u0003\u0000\u01c1\u01c1\u034f\u034f\u035b\u035b\u0002\u0000\u0350\u0354"+
		"\u035e\u035e\u0002\u0000no\u0359\u0359\u0005\u0000\u034c\u034c\u035a\u035a"+
		"\u035c\u035d\u0360\u0361\u0364\u0364\u0002\u0000\u0349\u0349\u0363\u0363"+
		"\u0002\u0000,,\u00be\u00be\u0001\u0000\u0175\u0176\u0002\u0000\u0140\u0140"+
		"\u024a\u024a\u0003\u0000\u00bd\u00bd\u022b\u022b\u0262\u0262\u0002\u0000"+
		"\u016b\u016b\u0173\u0173\u0002\u0000\u010e\u010e\u0171\u0171\u0002\u0000"+
		"**\u0366\u0366\u0001\u0000\u0379\u037a\u0002\u0000\u0011\u0011\u00c7\u00c7"+
		"\u0003\u0000]]\u01cf\u01cf\u0347\u0347\u0003\u0000\u0118\u0118\u0174\u0174"+
		"\u0257\u0257\u0002\u0000((\u00b0\u00b0\u0002\u0000\u010c\u010c\u016e\u016e"+
		"\u0002\u0000SS\u025f\u025f\u0002\u0000YY\u02d3\u02d3\u0002\u0000\u023d"+
		"\u023d\u0286\u0286\u0002\u0000\u0278\u0278\u02d8\u02d8\u0001\u0000\u037e"+
		"\u0384\u0003\u0000\u0011\u0011\u001e\u001e\u02a4\u02a4\u0001\u0000\u025f"+
		"\u0260\u0002\u0000\u010c\u010c\u01ae\u01ae\u0001\u0000\u0130\u0131\u3968"+
		"\u0000\u04d1\u0001\u0000\u0000\u0000\u0002\u04d5\u0001\u0000\u0000\u0000"+
		"\u0004\u04e6\u0001\u0000\u0000\u0000\u0006\u04ec\u0001\u0000\u0000\u0000"+
		"\b\u04f4\u0001\u0000\u0000\u0000\n\u04f6\u0001\u0000\u0000\u0000\f\u0520"+
		"\u0001\u0000\u0000\u0000\u000e\u0522\u0001\u0000\u0000\u0000\u0010\u052d"+
		"\u0001\u0000\u0000\u0000\u0012\u053c\u0001\u0000\u0000\u0000\u0014\u053e"+
		"\u0001\u0000\u0000\u0000\u0016\u054b\u0001\u0000\u0000\u0000\u0018\u0564"+
		"\u0001\u0000\u0000\u0000\u001a\u0576\u0001\u0000\u0000\u0000\u001c\u0578"+
		"\u0001\u0000\u0000\u0000\u001e\u0584\u0001\u0000\u0000\u0000 \u05a9\u0001"+
		"\u0000\u0000\u0000\"\u05ab\u0001\u0000\u0000\u0000$\u05bd\u0001\u0000"+
		"\u0000\u0000&\u05e1\u0001\u0000\u0000\u0000(\u05f1\u0001\u0000\u0000\u0000"+
		"*\u0634\u0001\u0000\u0000\u0000,\u0636\u0001\u0000\u0000\u0000.\u0638"+
		"\u0001\u0000\u0000\u00000\u0645\u0001\u0000\u0000\u00002\u064e\u0001\u0000"+
		"\u0000\u00004\u0652\u0001\u0000\u0000\u00006\u066b\u0001\u0000\u0000\u0000"+
		"8\u066d\u0001\u0000\u0000\u0000:\u06a5\u0001\u0000\u0000\u0000<\u06a7"+
		"\u0001\u0000\u0000\u0000>\u06ad\u0001\u0000\u0000\u0000@\u06c9\u0001\u0000"+
		"\u0000\u0000B\u06cb\u0001\u0000\u0000\u0000D\u06cf\u0001\u0000\u0000\u0000"+
		"F\u06d6\u0001\u0000\u0000\u0000H\u06da\u0001\u0000\u0000\u0000J\u06e7"+
		"\u0001\u0000\u0000\u0000L\u070c\u0001\u0000\u0000\u0000N\u0778\u0001\u0000"+
		"\u0000\u0000P\u07ac\u0001\u0000\u0000\u0000R\u07ae\u0001\u0000\u0000\u0000"+
		"T\u07bf\u0001\u0000\u0000\u0000V\u07c1\u0001\u0000\u0000\u0000X\u07e9"+
		"\u0001\u0000\u0000\u0000Z\u07eb\u0001\u0000\u0000\u0000\\\u0802\u0001"+
		"\u0000\u0000\u0000^\u0804\u0001\u0000\u0000\u0000`\u081e\u0001\u0000\u0000"+
		"\u0000b\u0820\u0001\u0000\u0000\u0000d\u082c\u0001\u0000\u0000\u0000f"+
		"\u082e\u0001\u0000\u0000\u0000h\u0830\u0001\u0000\u0000\u0000j\u0839\u0001"+
		"\u0000\u0000\u0000l\u083e\u0001\u0000\u0000\u0000n\u0847\u0001\u0000\u0000"+
		"\u0000p\u084c\u0001\u0000\u0000\u0000r\u085a\u0001\u0000\u0000\u0000t"+
		"\u0875\u0001\u0000\u0000\u0000v\u087e\u0001\u0000\u0000\u0000x\u08e8\u0001"+
		"\u0000\u0000\u0000z\u0907\u0001\u0000\u0000\u0000|\u0911\u0001\u0000\u0000"+
		"\u0000~\u0931\u0001\u0000\u0000\u0000\u0080\u0933\u0001\u0000\u0000\u0000"+
		"\u0082\u0938\u0001\u0000\u0000\u0000\u0084\u094f\u0001\u0000\u0000\u0000"+
		"\u0086\u0979\u0001\u0000\u0000\u0000\u0088\u09a5\u0001\u0000\u0000\u0000"+
		"\u008a\u09c0\u0001\u0000\u0000\u0000\u008c\u09c2\u0001\u0000\u0000\u0000"+
		"\u008e\u09fa\u0001\u0000\u0000\u0000\u0090\u0a59\u0001\u0000\u0000\u0000"+
		"\u0092\u0a5b\u0001\u0000\u0000\u0000\u0094\u0a5f\u0001\u0000\u0000\u0000"+
		"\u0096\u0a63\u0001\u0000\u0000\u0000\u0098\u0a82\u0001\u0000\u0000\u0000"+
		"\u009a\u0a8b\u0001\u0000\u0000\u0000\u009c\u0a8d\u0001\u0000\u0000\u0000"+
		"\u009e\u0ae0\u0001\u0000\u0000\u0000\u00a0\u0ae2\u0001\u0000\u0000\u0000"+
		"\u00a2\u0ae4\u0001\u0000\u0000\u0000\u00a4\u0b60\u0001\u0000\u0000\u0000"+
		"\u00a6\u0b62\u0001\u0000\u0000\u0000\u00a8\u0b64\u0001\u0000\u0000\u0000"+
		"\u00aa\u0bb9\u0001\u0000\u0000\u0000\u00ac\u0c20\u0001\u0000\u0000\u0000"+
		"\u00ae\u0c22\u0001\u0000\u0000\u0000\u00b0\u0c26\u0001\u0000\u0000\u0000"+
		"\u00b2\u0c2a\u0001\u0000\u0000\u0000\u00b4\u0c32\u0001\u0000\u0000\u0000"+
		"\u00b6\u0c3a\u0001\u0000\u0000\u0000\u00b8\u0cdc\u0001\u0000\u0000\u0000"+
		"\u00ba\u0cfa\u0001\u0000\u0000\u0000\u00bc\u0d43\u0001\u0000\u0000\u0000"+
		"\u00be\u0d45\u0001\u0000\u0000\u0000\u00c0\u0d51\u0001\u0000\u0000\u0000"+
		"\u00c2\u0d7a\u0001\u0000\u0000\u0000\u00c4\u0d7c\u0001\u0000\u0000\u0000"+
		"\u00c6\u0d9b\u0001\u0000\u0000\u0000\u00c8\u0ddc\u0001\u0000\u0000\u0000"+
		"\u00ca\u0e1a\u0001\u0000\u0000\u0000\u00cc\u0e56\u0001\u0000\u0000\u0000"+
		"\u00ce\u0f12\u0001\u0000\u0000\u0000\u00d0\u0f14\u0001\u0000\u0000\u0000"+
		"\u00d2\u0f18\u0001\u0000\u0000\u0000\u00d4\u0f1c\u0001\u0000\u0000\u0000"+
		"\u00d6\u0f29\u0001\u0000\u0000\u0000\u00d8\u0f2f\u0001\u0000\u0000\u0000"+
		"\u00da\u0f86\u0001\u0000\u0000\u0000\u00dc\u0fac\u0001\u0000\u0000\u0000"+
		"\u00de\u1002\u0001\u0000\u0000\u0000\u00e0\u1004\u0001\u0000\u0000\u0000"+
		"\u00e2\u103a\u0001\u0000\u0000\u0000\u00e4\u10c6\u0001\u0000\u0000\u0000"+
		"\u00e6\u10d0\u0001\u0000\u0000\u0000\u00e8\u115d\u0001\u0000\u0000\u0000"+
		"\u00ea\u115f\u0001\u0000\u0000\u0000\u00ec\u11d0\u0001\u0000\u0000\u0000"+
		"\u00ee\u120b\u0001\u0000\u0000\u0000\u00f0\u120d\u0001\u0000\u0000\u0000"+
		"\u00f2\u121e\u0001\u0000\u0000\u0000\u00f4\u1250\u0001\u0000\u0000\u0000"+
		"\u00f6\u1282\u0001\u0000\u0000\u0000\u00f8\u12dc\u0001\u0000\u0000\u0000"+
		"\u00fa\u1320\u0001\u0000\u0000\u0000\u00fc\u1345\u0001\u0000\u0000\u0000"+
		"\u00fe\u13c4\u0001\u0000\u0000\u0000\u0100\u13e3\u0001\u0000\u0000\u0000"+
		"\u0102\u13fb\u0001\u0000\u0000\u0000\u0104\u145c\u0001\u0000\u0000\u0000"+
		"\u0106\u145f\u0001\u0000\u0000\u0000\u0108\u1484\u0001\u0000\u0000\u0000"+
		"\u010a\u149e\u0001\u0000\u0000\u0000\u010c\u14a3\u0001\u0000\u0000\u0000"+
		"\u010e\u14a7\u0001\u0000\u0000\u0000\u0110\u14b6\u0001\u0000\u0000\u0000"+
		"\u0112\u14b8\u0001\u0000\u0000\u0000\u0114\u14bc\u0001\u0000\u0000\u0000"+
		"\u0116\u14c0\u0001\u0000\u0000\u0000\u0118\u14c9\u0001\u0000\u0000\u0000"+
		"\u011a\u14df\u0001\u0000\u0000\u0000\u011c\u14f7\u0001\u0000\u0000\u0000"+
		"\u011e\u1521\u0001\u0000\u0000\u0000\u0120\u153f\u0001\u0000\u0000\u0000"+
		"\u0122\u1541\u0001\u0000\u0000\u0000\u0124\u158c\u0001\u0000\u0000\u0000"+
		"\u0126\u158e\u0001\u0000\u0000\u0000\u0128\u1597\u0001\u0000\u0000\u0000"+
		"\u012a\u15b9\u0001\u0000\u0000\u0000\u012c\u15bc\u0001\u0000\u0000\u0000"+
		"\u012e\u15c1\u0001\u0000\u0000\u0000\u0130\u15c5\u0001\u0000\u0000\u0000"+
		"\u0132\u163d\u0001\u0000\u0000\u0000\u0134\u163f\u0001\u0000\u0000\u0000"+
		"\u0136\u16ef\u0001\u0000\u0000\u0000\u0138\u16f1\u0001\u0000\u0000\u0000"+
		"\u013a\u16f3\u0001\u0000\u0000\u0000\u013c\u172f\u0001\u0000\u0000\u0000"+
		"\u013e\u1753\u0001\u0000\u0000\u0000\u0140\u177a\u0001\u0000\u0000\u0000"+
		"\u0142\u17a0\u0001\u0000\u0000\u0000\u0144\u17d1\u0001\u0000\u0000\u0000"+
		"\u0146\u17f7\u0001\u0000\u0000\u0000\u0148\u17f9\u0001\u0000\u0000\u0000"+
		"\u014a\u17fc\u0001\u0000\u0000\u0000\u014c\u180a\u0001\u0000\u0000\u0000"+
		"\u014e\u1840\u0001\u0000\u0000\u0000\u0150\u1842\u0001\u0000\u0000\u0000"+
		"\u0152\u186d\u0001\u0000\u0000\u0000\u0154\u1889\u0001\u0000\u0000\u0000"+
		"\u0156\u188b\u0001\u0000\u0000\u0000\u0158\u18ff\u0001\u0000\u0000\u0000"+
		"\u015a\u1930\u0001\u0000\u0000\u0000\u015c\u1932\u0001\u0000\u0000\u0000"+
		"\u015e\u1948\u0001\u0000\u0000\u0000\u0160\u196a\u0001\u0000\u0000\u0000"+
		"\u0162\u197d\u0001\u0000\u0000\u0000\u0164\u197f\u0001\u0000\u0000\u0000"+
		"\u0166\u1983\u0001\u0000\u0000\u0000\u0168\u1985\u0001\u0000\u0000\u0000"+
		"\u016a\u1989\u0001\u0000\u0000\u0000\u016c\u19ae\u0001\u0000\u0000\u0000"+
		"\u016e\u19c4\u0001\u0000\u0000\u0000\u0170\u19c9\u0001\u0000\u0000\u0000"+
		"\u0172\u19cb\u0001\u0000\u0000\u0000\u0174\u19cd\u0001\u0000\u0000\u0000"+
		"\u0176\u19d1\u0001\u0000\u0000\u0000\u0178\u19fb\u0001\u0000\u0000\u0000"+
		"\u017a\u1af2\u0001\u0000\u0000\u0000\u017c\u1af4\u0001\u0000\u0000\u0000"+
		"\u017e\u1afe\u0001\u0000\u0000\u0000\u0180\u1b06\u0001\u0000\u0000\u0000"+
		"\u0182\u1b0e\u0001\u0000\u0000\u0000\u0184\u1b69\u0001\u0000\u0000\u0000"+
		"\u0186\u1b6b\u0001\u0000\u0000\u0000\u0188\u1b6d\u0001\u0000\u0000\u0000"+
		"\u018a\u1b85\u0001\u0000\u0000\u0000\u018c\u1b8a\u0001\u0000\u0000\u0000"+
		"\u018e\u1b8d\u0001\u0000\u0000\u0000\u0190\u1b99\u0001\u0000\u0000\u0000"+
		"\u0192\u1b9d\u0001\u0000\u0000\u0000\u0194\u1c4a\u0001\u0000\u0000\u0000"+
		"\u0196\u1c4c\u0001\u0000\u0000\u0000\u0198\u1c5f\u0001\u0000\u0000\u0000"+
		"\u019a\u1c7b\u0001\u0000\u0000\u0000\u019c\u1c7f\u0001\u0000\u0000\u0000"+
		"\u019e\u1c83\u0001\u0000\u0000\u0000\u01a0\u1cae\u0001\u0000\u0000\u0000"+
		"\u01a2\u1cd8\u0001\u0000\u0000\u0000\u01a4\u1cf4\u0001\u0000\u0000\u0000"+
		"\u01a6\u1d21\u0001\u0000\u0000\u0000\u01a8\u1d23\u0001\u0000\u0000\u0000"+
		"\u01aa\u1d46\u0001\u0000\u0000\u0000\u01ac\u1d48\u0001\u0000\u0000\u0000"+
		"\u01ae\u1d4e\u0001\u0000\u0000\u0000\u01b0\u1d50\u0001\u0000\u0000\u0000"+
		"\u01b2\u1e0e\u0001\u0000\u0000\u0000\u01b4\u1e69\u0001\u0000\u0000\u0000"+
		"\u01b6\u1e6b\u0001\u0000\u0000\u0000\u01b8\u1e91\u0001\u0000\u0000\u0000"+
		"\u01ba\u1ea0\u0001\u0000\u0000\u0000\u01bc\u1ebd\u0001\u0000\u0000\u0000"+
		"\u01be\u1ee4\u0001\u0000\u0000\u0000\u01c0\u1f42\u0001\u0000\u0000\u0000"+
		"\u01c2\u1fc3\u0001\u0000\u0000\u0000\u01c4\u1fc5\u0001\u0000\u0000\u0000"+
		"\u01c6\u200b\u0001\u0000\u0000\u0000\u01c8\u2029\u0001\u0000\u0000\u0000"+
		"\u01ca\u202d\u0001\u0000\u0000\u0000\u01cc\u202f\u0001\u0000\u0000\u0000"+
		"\u01ce\u2038\u0001\u0000\u0000\u0000\u01d0\u2041\u0001\u0000\u0000\u0000"+
		"\u01d2\u2059\u0001\u0000\u0000\u0000\u01d4\u206e\u0001\u0000\u0000\u0000"+
		"\u01d6\u2070\u0001\u0000\u0000\u0000\u01d8\u2072\u0001\u0000\u0000\u0000"+
		"\u01da\u2087\u0001\u0000\u0000\u0000\u01dc\u2089\u0001\u0000\u0000\u0000"+
		"\u01de\u208b\u0001\u0000\u0000\u0000\u01e0\u2094\u0001\u0000\u0000\u0000"+
		"\u01e2\u2129\u0001\u0000\u0000\u0000\u01e4\u214b\u0001\u0000\u0000\u0000"+
		"\u01e6\u214d\u0001\u0000\u0000\u0000\u01e8\u2155\u0001\u0000\u0000\u0000"+
		"\u01ea\u2159\u0001\u0000\u0000\u0000\u01ec\u215d\u0001\u0000\u0000\u0000"+
		"\u01ee\u2161\u0001\u0000\u0000\u0000\u01f0\u2170\u0001\u0000\u0000\u0000"+
		"\u01f2\u2174\u0001\u0000\u0000\u0000\u01f4\u2178\u0001\u0000\u0000\u0000"+
		"\u01f6\u217c\u0001\u0000\u0000\u0000\u01f8\u2192\u0001\u0000\u0000\u0000"+
		"\u01fa\u2194\u0001\u0000\u0000\u0000\u01fc\u219a\u0001\u0000\u0000\u0000"+
		"\u01fe\u21a7\u0001\u0000\u0000\u0000\u0200\u21bb\u0001\u0000\u0000\u0000"+
		"\u0202\u21bd\u0001\u0000\u0000\u0000\u0204\u21d1\u0001\u0000\u0000\u0000"+
		"\u0206\u21fa\u0001\u0000\u0000\u0000\u0208\u21fc\u0001\u0000\u0000\u0000"+
		"\u020a\u21fe\u0001\u0000\u0000\u0000\u020c\u2202\u0001\u0000\u0000\u0000"+
		"\u020e\u2206\u0001\u0000\u0000\u0000\u0210\u220a\u0001\u0000\u0000\u0000"+
		"\u0212\u220e\u0001\u0000\u0000\u0000\u0214\u2249\u0001\u0000\u0000\u0000"+
		"\u0216\u22b3\u0001\u0000\u0000\u0000\u0218\u22e7\u0001\u0000\u0000\u0000"+
		"\u021a\u22e9\u0001\u0000\u0000\u0000\u021c\u22f0\u0001\u0000\u0000\u0000"+
		"\u021e\u22f4\u0001\u0000\u0000\u0000\u0220\u2310\u0001\u0000\u0000\u0000"+
		"\u0222\u231d\u0001\u0000\u0000\u0000\u0224\u231f\u0001\u0000\u0000\u0000"+
		"\u0226\u2323\u0001\u0000\u0000\u0000\u0228\u2344\u0001\u0000\u0000\u0000"+
		"\u022a\u2347\u0001\u0000\u0000\u0000\u022c\u234b\u0001\u0000\u0000\u0000"+
		"\u022e\u234f\u0001\u0000\u0000\u0000\u0230\u2353\u0001\u0000\u0000\u0000"+
		"\u0232\u23b4\u0001\u0000\u0000\u0000\u0234\u23b6\u0001\u0000\u0000\u0000"+
		"\u0236\u23be\u0001\u0000\u0000\u0000\u0238\u23c1\u0001\u0000\u0000\u0000"+
		"\u023a\u23d0\u0001\u0000\u0000\u0000\u023c\u23e2\u0001\u0000\u0000\u0000"+
		"\u023e\u23e9\u0001\u0000\u0000\u0000\u0240\u23ee\u0001\u0000\u0000\u0000"+
		"\u0242\u23f7\u0001\u0000\u0000\u0000\u0244\u23fa\u0001\u0000\u0000\u0000"+
		"\u0246\u240f\u0001\u0000\u0000\u0000\u0248\u2411\u0001\u0000\u0000\u0000"+
		"\u024a\u2414\u0001\u0000\u0000\u0000\u024c\u2419\u0001\u0000\u0000\u0000"+
		"\u024e\u2432\u0001\u0000\u0000\u0000\u0250\u2445\u0001\u0000\u0000\u0000"+
		"\u0252\u2453\u0001\u0000\u0000\u0000\u0254\u245d\u0001\u0000\u0000\u0000"+
		"\u0256\u245f\u0001\u0000\u0000\u0000\u0258\u2467\u0001\u0000\u0000\u0000"+
		"\u025a\u2484\u0001\u0000\u0000\u0000\u025c\u2493\u0001\u0000\u0000\u0000"+
		"\u025e\u24b5\u0001\u0000\u0000\u0000\u0260\u24df\u0001\u0000\u0000\u0000"+
		"\u0262\u24f3\u0001\u0000\u0000\u0000\u0264\u2502\u0001\u0000\u0000\u0000"+
		"\u0266\u2505\u0001\u0000\u0000\u0000\u0268\u2507\u0001\u0000\u0000\u0000"+
		"\u026a\u250f\u0001\u0000\u0000\u0000\u026c\u2517\u0001\u0000\u0000\u0000"+
		"\u026e\u2545\u0001\u0000\u0000\u0000\u0270\u2550\u0001\u0000\u0000\u0000"+
		"\u0272\u2552\u0001\u0000\u0000\u0000\u0274\u2556\u0001\u0000\u0000\u0000"+
		"\u0276\u255a\u0001\u0000\u0000\u0000\u0278\u255e\u0001\u0000\u0000\u0000"+
		"\u027a\u2562\u0001\u0000\u0000\u0000\u027c\u256b\u0001\u0000\u0000\u0000"+
		"\u027e\u256d\u0001\u0000\u0000\u0000\u0280\u2575\u0001\u0000\u0000\u0000"+
		"\u0282\u2587\u0001\u0000\u0000\u0000\u0284\u258b\u0001\u0000\u0000\u0000"+
		"\u0286\u25b5\u0001\u0000\u0000\u0000\u0288\u25ce\u0001\u0000\u0000\u0000"+
		"\u028a\u25d0\u0001\u0000\u0000\u0000\u028c\u25fe\u0001\u0000\u0000\u0000"+
		"\u028e\u260c\u0001\u0000\u0000\u0000\u0290\u260e\u0001\u0000\u0000\u0000"+
		"\u0292\u262f\u0001\u0000\u0000\u0000\u0294\u2631\u0001\u0000\u0000\u0000"+
		"\u0296\u2654\u0001\u0000\u0000\u0000\u0298\u2656\u0001\u0000\u0000\u0000"+
		"\u029a\u265d\u0001\u0000\u0000\u0000\u029c\u2661\u0001\u0000\u0000\u0000"+
		"\u029e\u2668\u0001\u0000\u0000\u0000\u02a0\u2671\u0001\u0000\u0000\u0000"+
		"\u02a2\u2676\u0001\u0000\u0000\u0000\u02a4\u2680\u0001\u0000\u0000\u0000"+
		"\u02a6\u2688\u0001\u0000\u0000\u0000\u02a8\u2690\u0001\u0000\u0000\u0000"+
		"\u02aa\u2698\u0001\u0000\u0000\u0000\u02ac\u26a2\u0001\u0000\u0000\u0000"+
		"\u02ae\u26a7\u0001\u0000\u0000\u0000\u02b0\u26ac\u0001\u0000\u0000\u0000"+
		"\u02b2\u26b4\u0001\u0000\u0000\u0000\u02b4\u26bc\u0001\u0000\u0000\u0000"+
		"\u02b6\u26c3\u0001\u0000\u0000\u0000\u02b8\u26cb\u0001\u0000\u0000\u0000"+
		"\u02ba\u26d3\u0001\u0000\u0000\u0000\u02bc\u26d8\u0001\u0000\u0000\u0000"+
		"\u02be\u26df\u0001\u0000\u0000\u0000\u02c0\u26e8\u0001\u0000\u0000\u0000"+
		"\u02c2\u26f1\u0001\u0000\u0000\u0000\u02c4\u26fa\u0001\u0000\u0000\u0000"+
		"\u02c6\u2702\u0001\u0000\u0000\u0000\u02c8\u270a\u0001\u0000\u0000\u0000"+
		"\u02ca\u270e\u0001\u0000\u0000\u0000\u02cc\u2715\u0001\u0000\u0000\u0000"+
		"\u02ce\u271e\u0001\u0000\u0000\u0000\u02d0\u2725\u0001\u0000\u0000\u0000"+
		"\u02d2\u272c\u0001\u0000\u0000\u0000\u02d4\u2733\u0001\u0000\u0000\u0000"+
		"\u02d6\u273a\u0001\u0000\u0000\u0000\u02d8\u2741\u0001\u0000\u0000\u0000"+
		"\u02da\u2743\u0001\u0000\u0000\u0000\u02dc\u274d\u0001\u0000\u0000\u0000"+
		"\u02de\u274f\u0001\u0000\u0000\u0000\u02e0\u2753\u0001\u0000\u0000\u0000"+
		"\u02e2\u2757\u0001\u0000\u0000\u0000\u02e4\u275b\u0001\u0000\u0000\u0000"+
		"\u02e6\u2764\u0001\u0000\u0000\u0000\u02e8\u2766\u0001\u0000\u0000\u0000"+
		"\u02ea\u276a\u0001\u0000\u0000\u0000\u02ec\u276e\u0001\u0000\u0000\u0000"+
		"\u02ee\u2779\u0001\u0000\u0000\u0000\u02f0\u277e\u0001\u0000\u0000\u0000"+
		"\u02f2\u2782\u0001\u0000\u0000\u0000\u02f4\u2786\u0001\u0000\u0000\u0000"+
		"\u02f6\u2789\u0001\u0000\u0000\u0000\u02f8\u278c\u0001\u0000\u0000\u0000"+
		"\u02fa\u278f\u0001\u0000\u0000\u0000\u02fc\u2793\u0001\u0000\u0000\u0000"+
		"\u02fe\u2796\u0001\u0000\u0000\u0000\u0300\u2799\u0001\u0000\u0000\u0000"+
		"\u0302\u27b8\u0001\u0000\u0000\u0000\u0304\u27ba\u0001\u0000\u0000\u0000"+
		"\u0306\u27be\u0001\u0000\u0000\u0000\u0308\u27c2\u0001\u0000\u0000\u0000"+
		"\u030a\u27c7\u0001\u0000\u0000\u0000\u030c\u27cc\u0001\u0000\u0000\u0000"+
		"\u030e\u27d7\u0001\u0000\u0000\u0000\u0310\u27dc\u0001\u0000\u0000\u0000"+
		"\u0312\u27e1\u0001\u0000\u0000\u0000\u0314\u27e8\u0001\u0000\u0000\u0000"+
		"\u0316\u27ed\u0001\u0000\u0000\u0000\u0318\u27f2\u0001\u0000\u0000\u0000"+
		"\u031a\u27f7\u0001\u0000\u0000\u0000\u031c\u27fb\u0001\u0000\u0000\u0000"+
		"\u031e\u2800\u0001\u0000\u0000\u0000\u0320\u2808\u0001\u0000\u0000\u0000"+
		"\u0322\u280e\u0001\u0000\u0000\u0000\u0324\u2812\u0001\u0000\u0000\u0000"+
		"\u0326\u2818\u0001\u0000\u0000\u0000\u0328\u281c\u0001\u0000\u0000\u0000"+
		"\u032a\u2821\u0001\u0000\u0000\u0000\u032c\u2826\u0001\u0000\u0000\u0000"+
		"\u032e\u282a\u0001\u0000\u0000\u0000\u0330\u282e\u0001\u0000\u0000\u0000"+
		"\u0332\u2836\u0001\u0000\u0000\u0000\u0334\u283a\u0001\u0000\u0000\u0000"+
		"\u0336\u283e\u0001\u0000\u0000\u0000\u0338\u2842\u0001\u0000\u0000\u0000"+
		"\u033a\u2846\u0001\u0000\u0000\u0000\u033c\u2880\u0001\u0000\u0000\u0000"+
		"\u033e\u2882\u0001\u0000\u0000\u0000\u0340\u289e\u0001\u0000\u0000\u0000"+
		"\u0342\u28b6\u0001\u0000\u0000\u0000\u0344\u28d3\u0001\u0000\u0000\u0000"+
		"\u0346\u28d8\u0001\u0000\u0000\u0000\u0348\u28dc\u0001\u0000\u0000\u0000"+
		"\u034a\u28e2\u0001\u0000\u0000\u0000\u034c\u28f3\u0001\u0000\u0000\u0000"+
		"\u034e\u28fa\u0001\u0000\u0000\u0000\u0350\u2911\u0001\u0000\u0000\u0000"+
		"\u0352\u2913\u0001\u0000\u0000\u0000\u0354\u292f\u0001\u0000\u0000\u0000"+
		"\u0356\u294e\u0001\u0000\u0000\u0000\u0358\u2954\u0001\u0000\u0000\u0000"+
		"\u035a\u2973\u0001\u0000\u0000\u0000\u035c\u297b\u0001\u0000\u0000\u0000"+
		"\u035e\u298e\u0001\u0000\u0000\u0000\u0360\u29a0\u0001\u0000\u0000\u0000"+
		"\u0362\u29b7\u0001\u0000\u0000\u0000\u0364\u29ce\u0001\u0000\u0000\u0000"+
		"\u0366\u29d0\u0001\u0000\u0000\u0000\u0368\u29d8\u0001\u0000\u0000\u0000"+
		"\u036a\u29de\u0001\u0000\u0000\u0000\u036c\u29e4\u0001\u0000\u0000\u0000"+
		"\u036e\u29ed\u0001\u0000\u0000\u0000\u0370\u29f8\u0001\u0000\u0000\u0000"+
		"\u0372\u2a07\u0001\u0000\u0000\u0000\u0374\u2a10\u0001\u0000\u0000\u0000"+
		"\u0376\u2a14\u0001\u0000\u0000\u0000\u0378\u2a1c\u0001\u0000\u0000\u0000"+
		"\u037a\u2a22\u0001\u0000\u0000\u0000\u037c\u2a24\u0001\u0000\u0000\u0000"+
		"\u037e\u2a3a\u0001\u0000\u0000\u0000\u0380\u2a42\u0001\u0000\u0000\u0000"+
		"\u0382\u2a4b\u0001\u0000\u0000\u0000\u0384\u2a53\u0001\u0000\u0000\u0000"+
		"\u0386\u2a58\u0001\u0000\u0000\u0000\u0388\u2a5e\u0001\u0000\u0000\u0000"+
		"\u038a\u2a6c\u0001\u0000\u0000\u0000\u038c\u2a74\u0001\u0000\u0000\u0000"+
		"\u038e\u2a7a\u0001\u0000\u0000\u0000\u0390\u2a7f\u0001\u0000\u0000\u0000"+
		"\u0392\u2a89\u0001\u0000\u0000\u0000\u0394\u2aa4\u0001\u0000\u0000\u0000"+
		"\u0396\u2aac\u0001\u0000\u0000\u0000\u0398\u2ab0\u0001\u0000\u0000\u0000"+
		"\u039a\u2ab4\u0001\u0000\u0000\u0000\u039c\u2ab9\u0001\u0000\u0000\u0000"+
		"\u039e\u2ac0\u0001\u0000\u0000\u0000\u03a0\u2ac7\u0001\u0000\u0000\u0000"+
		"\u03a2\u2acf\u0001\u0000\u0000\u0000\u03a4\u2ad7\u0001\u0000\u0000\u0000"+
		"\u03a6\u2ae7\u0001\u0000\u0000\u0000\u03a8\u2b05\u0001\u0000\u0000\u0000"+
		"\u03aa\u2b0b\u0001\u0000\u0000\u0000\u03ac\u2b14\u0001\u0000\u0000\u0000"+
		"\u03ae\u2b29\u0001\u0000\u0000\u0000\u03b0\u2b2e\u0001\u0000\u0000\u0000"+
		"\u03b2\u2b4c\u0001\u0000\u0000\u0000\u03b4\u2b51\u0001\u0000\u0000\u0000"+
		"\u03b6\u2b54\u0001\u0000\u0000\u0000\u03b8\u2b5b\u0001\u0000\u0000\u0000"+
		"\u03ba\u2b69\u0001\u0000\u0000\u0000\u03bc\u2b6b\u0001\u0000\u0000\u0000"+
		"\u03be\u2b73\u0001\u0000\u0000\u0000\u03c0\u2b75\u0001\u0000\u0000\u0000"+
		"\u03c2\u2b77\u0001\u0000\u0000\u0000\u03c4\u2b79\u0001\u0000\u0000\u0000"+
		"\u03c6\u2b7b\u0001\u0000\u0000\u0000\u03c8\u2b7d\u0001\u0000\u0000\u0000"+
		"\u03ca\u2b7f\u0001\u0000\u0000\u0000\u03cc\u2b81\u0001\u0000\u0000\u0000"+
		"\u03ce\u2b8f\u0001\u0000\u0000\u0000\u03d0\u2b9e\u0001\u0000\u0000\u0000"+
		"\u03d2\u2ba0\u0001\u0000\u0000\u0000\u03d4\u2ba2\u0001\u0000\u0000\u0000"+
		"\u03d6\u2ba4\u0001\u0000\u0000\u0000\u03d8\u2ba6\u0001\u0000\u0000\u0000"+
		"\u03da\u2bb4\u0001\u0000\u0000\u0000\u03dc\u2bbb\u0001\u0000\u0000\u0000"+
		"\u03de\u2bc2\u0001\u0000\u0000\u0000\u03e0\u2bc4\u0001\u0000\u0000\u0000"+
		"\u03e2\u2bc6\u0001\u0000\u0000\u0000\u03e4\u2bcd\u0001\u0000\u0000\u0000"+
		"\u03e6\u2bd1\u0001\u0000\u0000\u0000\u03e8\u2bd9\u0001\u0000\u0000\u0000"+
		"\u03ea\u2bf4\u0001\u0000\u0000\u0000\u03ec\u2bfc\u0001\u0000\u0000\u0000"+
		"\u03ee\u2c04\u0001\u0000\u0000\u0000\u03f0\u2c06\u0001\u0000\u0000\u0000"+
		"\u03f2\u2c08\u0001\u0000\u0000\u0000\u03f4\u2c10\u0001\u0000\u0000\u0000"+
		"\u03f6\u2c36\u0001\u0000\u0000\u0000\u03f8\u2c96\u0001\u0000\u0000\u0000"+
		"\u03fa\u2c9f\u0001\u0000\u0000\u0000\u03fc\u2cab\u0001\u0000\u0000\u0000"+
		"\u03fe\u2cbb\u0001\u0000\u0000\u0000\u0400\u2cca\u0001\u0000\u0000\u0000"+
		"\u0402\u2ccc\u0001\u0000\u0000\u0000\u0404\u2cd0\u0001\u0000\u0000\u0000"+
		"\u0406\u2cdf\u0001\u0000\u0000\u0000\u0408\u2ce1\u0001\u0000\u0000\u0000"+
		"\u040a\u2d1d\u0001\u0000\u0000\u0000\u040c\u2d35\u0001\u0000\u0000\u0000"+
		"\u040e\u2d37\u0001\u0000\u0000\u0000\u0410\u2d3b\u0001\u0000\u0000\u0000"+
		"\u0412\u2d4d\u0001\u0000\u0000\u0000\u0414\u2d9c\u0001\u0000\u0000\u0000"+
		"\u0416\u2d9e\u0001\u0000\u0000\u0000\u0418\u2da6\u0001\u0000\u0000\u0000"+
		"\u041a\u2daa\u0001\u0000\u0000\u0000\u041c\u2dd0\u0001\u0000\u0000\u0000"+
		"\u041e\u2df2\u0001\u0000\u0000\u0000\u0420\u2e00\u0001\u0000\u0000\u0000"+
		"\u0422\u2e02\u0001\u0000\u0000\u0000\u0424\u2e20\u0001\u0000\u0000\u0000"+
		"\u0426\u2e2a\u0001\u0000\u0000\u0000\u0428\u2e45\u0001\u0000\u0000\u0000"+
		"\u042a\u2e47\u0001\u0000\u0000\u0000\u042c\u2e4c\u0001\u0000\u0000\u0000"+
		"\u042e\u2e52\u0001\u0000\u0000\u0000\u0430\u2e5b\u0001\u0000\u0000\u0000"+
		"\u0432\u2e67\u0001\u0000\u0000\u0000\u0434\u2e79\u0001\u0000\u0000\u0000"+
		"\u0436\u2e86\u0001\u0000\u0000\u0000\u0438\u2e8f\u0001\u0000\u0000\u0000"+
		"\u043a\u2e99\u0001\u0000\u0000\u0000\u043c\u2eab\u0001\u0000\u0000\u0000"+
		"\u043e\u2eae\u0001\u0000\u0000\u0000\u0440\u2eb2\u0001\u0000\u0000\u0000"+
		"\u0442\u2eb7\u0001\u0000\u0000\u0000\u0444\u2ebe\u0001\u0000\u0000\u0000"+
		"\u0446\u2ed5\u0001\u0000\u0000\u0000\u0448\u2ed8\u0001\u0000\u0000\u0000"+
		"\u044a\u2ee5\u0001\u0000\u0000\u0000\u044c\u2eeb\u0001\u0000\u0000\u0000"+
		"\u044e\u2eed\u0001\u0000\u0000\u0000\u0450\u2ef3\u0001\u0000\u0000\u0000"+
		"\u0452\u2ef9\u0001\u0000\u0000\u0000\u0454\u2efb\u0001\u0000\u0000\u0000"+
		"\u0456\u2efd\u0001\u0000\u0000\u0000\u0458\u2eff\u0001\u0000\u0000\u0000"+
		"\u045a\u2f02\u0001\u0000\u0000\u0000\u045c\u2f05\u0001\u0000\u0000\u0000"+
		"\u045e\u2f0d\u0001\u0000\u0000\u0000\u0460\u2f10\u0001\u0000\u0000\u0000"+
		"\u0462\u2f13\u0001\u0000\u0000\u0000\u0464\u2f1b\u0001\u0000\u0000\u0000"+
		"\u0466\u2f2d\u0001\u0000\u0000\u0000\u0468\u2f76\u0001\u0000\u0000\u0000"+
		"\u046a\u2f84\u0001\u0000\u0000\u0000\u046c\u2f86\u0001\u0000\u0000\u0000"+
		"\u046e\u2f96\u0001\u0000\u0000\u0000\u0470\u2f9d\u0001\u0000\u0000\u0000"+
		"\u0472\u2fa6\u0001\u0000\u0000\u0000\u0474\u2faf\u0001\u0000\u0000\u0000"+
		"\u0476\u2fb5\u0001\u0000\u0000\u0000\u0478\u2fd2\u0001\u0000\u0000\u0000"+
		"\u047a\u2fed\u0001\u0000\u0000\u0000\u047c\u2fef\u0001\u0000\u0000\u0000"+
		"\u047e\u2ffe\u0001\u0000\u0000\u0000\u0480\u3008\u0001\u0000\u0000\u0000"+
		"\u0482\u300a\u0001\u0000\u0000\u0000\u0484\u300e\u0001\u0000\u0000\u0000"+
		"\u0486\u3010\u0001\u0000\u0000\u0000\u0488\u3021\u0001\u0000\u0000\u0000"+
		"\u048a\u302d\u0001\u0000\u0000\u0000\u048c\u3037\u0001\u0000\u0000\u0000"+
		"\u048e\u303c\u0001\u0000\u0000\u0000\u0490\u303e\u0001\u0000\u0000\u0000"+
		"\u0492\u3040\u0001\u0000\u0000\u0000\u0494\u3050\u0001\u0000\u0000\u0000"+
		"\u0496\u305d\u0001\u0000\u0000\u0000\u0498\u3060\u0001\u0000\u0000\u0000"+
		"\u049a\u309e\u0001\u0000\u0000\u0000\u049c\u30a0\u0001\u0000\u0000\u0000"+
		"\u049e\u30ab\u0001\u0000\u0000\u0000\u04a0\u30bf\u0001\u0000\u0000\u0000"+
		"\u04a2\u30c1\u0001\u0000\u0000\u0000\u04a4\u30cc\u0001\u0000\u0000\u0000"+
		"\u04a6\u30ce\u0001\u0000\u0000\u0000\u04a8\u30d3\u0001\u0000\u0000\u0000"+
		"\u04aa\u30dc\u0001\u0000\u0000\u0000\u04ac\u30e2\u0001\u0000\u0000\u0000"+
		"\u04ae\u30fb\u0001\u0000\u0000\u0000\u04b0\u30fe\u0001\u0000\u0000\u0000"+
		"\u04b2\u3102\u0001\u0000\u0000\u0000\u04b4\u314f\u0001\u0000\u0000\u0000"+
		"\u04b6\u3151\u0001\u0000\u0000\u0000\u04b8\u3157\u0001\u0000\u0000\u0000"+
		"\u04ba\u3159\u0001\u0000\u0000\u0000\u04bc\u3176\u0001\u0000\u0000\u0000"+
		"\u04be\u3178\u0001\u0000\u0000\u0000\u04c0\u317b\u0001\u0000\u0000\u0000"+
		"\u04c2\u3181\u0001\u0000\u0000\u0000\u04c4\u318a\u0001\u0000\u0000\u0000"+
		"\u04c6\u3194\u0001\u0000\u0000\u0000\u04c8\u3196\u0001\u0000\u0000\u0000"+
		"\u04ca\u31b0\u0001\u0000\u0000\u0000\u04cc\u31b2\u0001\u0000\u0000\u0000"+
		"\u04ce\u31d6\u0001\u0000\u0000\u0000\u04d0\u04d2\u0003\u0002\u0001\u0000"+
		"\u04d1\u04d0\u0001\u0000\u0000\u0000\u04d1\u04d2\u0001\u0000\u0000\u0000"+
		"\u04d2\u04d3\u0001\u0000\u0000\u0000\u04d3\u04d4\u0005\u0000\u0000\u0001"+
		"\u04d4\u0001\u0001\u0000\u0000\u0000\u04d5\u04da\u0003\u0004\u0002\u0000"+
		"\u04d6\u04d7\u0005\u0391\u0000\u0000\u04d7\u04d9\u0003\u0004\u0002\u0000"+
		"\u04d8\u04d6\u0001\u0000\u0000\u0000\u04d9\u04dc\u0001\u0000\u0000\u0000"+
		"\u04da\u04d8\u0001\u0000\u0000\u0000\u04da\u04db\u0001\u0000\u0000\u0000"+
		"\u04db\u04de\u0001\u0000\u0000\u0000\u04dc\u04da\u0001\u0000\u0000\u0000"+
		"\u04dd\u04df\u0005\u0391\u0000\u0000\u04de\u04dd\u0001\u0000\u0000\u0000"+
		"\u04de\u04df\u0001\u0000\u0000\u0000\u04df\u0003\u0001\u0000\u0000\u0000"+
		"\u04e0\u04e7\u0003\u0006\u0003\u0000\u04e1\u04e7\u0003\b\u0004\u0000\u04e2"+
		"\u04e7\u0003\u033c\u019e\u0000\u04e3\u04e7\u0003\u02e6\u0173\u0000\u04e4"+
		"\u04e7\u0003\u0302\u0181\u0000\u04e5\u04e7\u0003&\u0013\u0000\u04e6\u04e0"+
		"\u0001\u0000\u0000\u0000\u04e6\u04e1\u0001\u0000\u0000\u0000\u04e6\u04e2"+
		"\u0001\u0000\u0000\u0000\u04e6\u04e3\u0001\u0000\u0000\u0000\u04e6\u04e4"+
		"\u0001\u0000\u0000\u0000\u04e6\u04e5\u0001\u0000\u0000\u0000\u04e7\u0005"+
		"\u0001\u0000\u0000\u0000\u04e8\u04ed\u0003\u0086C\u0000\u04e9\u04ed\u0003"+
		"\u014e\u00a7\u0000\u04ea\u04ed\u0003\u0296\u014b\u0000\u04eb\u04ed\u0003"+
		"\u02dc\u016e\u0000\u04ec\u04e8\u0001\u0000\u0000\u0000\u04ec\u04e9\u0001"+
		"\u0000\u0000\u0000\u04ec\u04ea\u0001\u0000\u0000\u0000\u04ec\u04eb\u0001"+
		"\u0000\u0000\u0000\u04ed\u0007\u0001\u0000\u0000\u0000\u04ee\u04f5\u0003"+
		"\u042e\u0217\u0000\u04ef\u04f5\u0003\n\u0005\u0000\u04f0\u04f5\u0003\f"+
		"\u0006\u0000\u04f1\u04f5\u0003\u001e\u000f\u0000\u04f2\u04f5\u0003\"\u0011"+
		"\u0000\u04f3\u04f5\u0003\u0014\n\u0000\u04f4\u04ee\u0001\u0000\u0000\u0000"+
		"\u04f4\u04ef\u0001\u0000\u0000\u0000\u04f4\u04f0\u0001\u0000\u0000\u0000"+
		"\u04f4\u04f1\u0001\u0000\u0000\u0000\u04f4\u04f2\u0001\u0000\u0000\u0000"+
		"\u04f4\u04f3\u0001\u0000\u0000\u0000\u04f5\t\u0001\u0000\u0000\u0000\u04f6"+
		"\u04f8\u0005\u0155\u0000\u0000\u04f7\u04f9\u0005\u01ec\u0000\u0000\u04f8"+
		"\u04f7\u0001\u0000\u0000\u0000\u04f8\u04f9\u0001\u0000\u0000\u0000\u04f9"+
		"\u04fa\u0001\u0000\u0000\u0000\u04fa\u04fb\u0005\u015c\u0000\u0000\u04fb"+
		"\u04fd\u0003\u03ea\u01f5\u0000\u04fc\u04fe\u0003\u019c\u00ce\u0000\u04fd"+
		"\u04fc\u0001\u0000\u0000\u0000\u04fd\u04fe\u0001\u0000\u0000\u0000\u04fe"+
		"\u0501\u0001\u0000\u0000\u0000\u04ff\u0502\u0003$\u0012\u0000\u0500\u0502"+
		"\u0003\u042e\u0217\u0000\u0501\u04ff\u0001\u0000\u0000\u0000\u0501\u0500"+
		"\u0001\u0000\u0000\u0000\u0502\u000b\u0001\u0000\u0000\u0000\u0503\u0505"+
		"\u0005\u0155\u0000\u0000\u0504\u0506\u0005\u01ec\u0000\u0000\u0505\u0504"+
		"\u0001\u0000\u0000\u0000\u0505\u0506\u0001\u0000\u0000\u0000\u0506\u0507"+
		"\u0001\u0000\u0000\u0000\u0507\u0508\u0005\u0011\u0000\u0000\u0508\u0521"+
		"\u0003\u000e\u0007\u0000\u0509\u050b\u0005\u0155\u0000\u0000\u050a\u050c"+
		"\u0005\u01ec\u0000\u0000\u050b\u050a\u0001\u0000\u0000\u0000\u050b\u050c"+
		"\u0001\u0000\u0000\u0000\u050c\u050d\u0001\u0000\u0000\u0000\u050d\u0516"+
		"\u0007\u0000\u0000\u0000\u050e\u050f\u0005\u0334\u0000\u0000\u050f\u0510"+
		"\u0003\u04b4\u025a\u0000\u0510\u0512\u0005\u02e3\u0000\u0000\u0511\u0513"+
		"\u0003\u000e\u0007\u0000\u0512\u0511\u0001\u0000\u0000\u0000\u0513\u0514"+
		"\u0001\u0000\u0000\u0000\u0514\u0512\u0001\u0000\u0000\u0000\u0514\u0515"+
		"\u0001\u0000\u0000\u0000\u0515\u0517\u0001\u0000\u0000\u0000\u0516\u050e"+
		"\u0001\u0000\u0000\u0000\u0517\u0518\u0001\u0000\u0000\u0000\u0518\u0516"+
		"\u0001\u0000\u0000\u0000\u0518\u0519\u0001\u0000\u0000\u0000\u0519\u051c"+
		"\u0001\u0000\u0000\u0000\u051a\u051b\u0005\u00ce\u0000\u0000\u051b\u051d"+
		"\u0003\u000e\u0007\u0000\u051c\u051a\u0001\u0000\u0000\u0000\u051c\u051d"+
		"\u0001\u0000\u0000\u0000\u051d\u051e\u0001\u0000\u0000\u0000\u051e\u051f"+
		"\u0003\u04b2\u0259\u0000\u051f\u0521\u0001\u0000\u0000\u0000\u0520\u0503"+
		"\u0001\u0000\u0000\u0000\u0520\u0509\u0001\u0000\u0000\u0000\u0521\r\u0001"+
		"\u0000\u0000\u0000\u0522\u0523\u0005\u015c\u0000\u0000\u0523\u0528\u0003"+
		"\u03ea\u01f5\u0000\u0524\u0525\u0005\u038a\u0000\u0000\u0525\u0526\u0003"+
		"\u03e6\u01f3\u0000\u0526\u0527\u0005\u038b\u0000\u0000\u0527\u0529\u0001"+
		"\u0000\u0000\u0000\u0528\u0524\u0001\u0000\u0000\u0000\u0528\u0529\u0001"+
		"\u0000\u0000\u0000\u0529\u052b\u0001\u0000\u0000\u0000\u052a\u052c\u0003"+
		"\u0010\b\u0000\u052b\u052a\u0001\u0000\u0000\u0000\u052b\u052c\u0001\u0000"+
		"\u0000\u0000\u052c\u000f\u0001\u0000\u0000\u0000\u052d\u052e\u0005\u0326"+
		"\u0000\u0000\u052e\u052f\u0005\u038a\u0000\u0000\u052f\u0534\u0003\u0012"+
		"\t\u0000\u0530\u0531\u0005\u0390\u0000\u0000\u0531\u0533\u0003\u0012\t"+
		"\u0000\u0532\u0530\u0001\u0000\u0000\u0000\u0533\u0536\u0001\u0000\u0000"+
		"\u0000\u0534\u0532\u0001\u0000\u0000\u0000\u0534\u0535\u0001\u0000\u0000"+
		"\u0000\u0535\u0537\u0001\u0000\u0000\u0000\u0536\u0534\u0001\u0000\u0000"+
		"\u0000\u0537\u0538\u0005\u038b\u0000\u0000\u0538\u0011\u0001\u0000\u0000"+
		"\u0000\u0539\u053d\u0003\u03e4\u01f2\u0000\u053a\u053d\u0005\u00b0\u0000"+
		"\u0000\u053b\u053d\u0005\u01bf\u0000\u0000\u053c\u0539\u0001\u0000\u0000"+
		"\u0000\u053c\u053a\u0001\u0000\u0000\u0000\u053c\u053b\u0001\u0000\u0000"+
		"\u0000\u053d\u0013\u0001\u0000\u0000\u0000\u053e\u053f\u0005\u0198\u0000"+
		"\u0000\u053f\u0540\u0005\u015c\u0000\u0000\u0540\u0542\u0003\u03ea\u01f5"+
		"\u0000\u0541\u0543\u0003\u0450\u0228\u0000\u0542\u0541\u0001\u0000\u0000"+
		"\u0000\u0542\u0543\u0001\u0000\u0000\u0000\u0543\u0544\u0001\u0000\u0000"+
		"\u0000\u0544\u0545\u0005\u0321\u0000\u0000\u0545\u0546\u0003\u0464\u0232"+
		"\u0000\u0546\u0547\u0005\u01d9\u0000\u0000\u0547\u0548\u0003\u04ac\u0256"+
		"\u0000\u0548\u0549\u0003\u0016\u000b\u0000\u0549\u0015\u0001\u0000\u0000"+
		"\u0000\u054a\u054c\u0003\u0018\f\u0000\u054b\u054a\u0001\u0000\u0000\u0000"+
		"\u054c\u054d\u0001\u0000\u0000\u0000\u054d\u054b\u0001\u0000\u0000\u0000"+
		"\u054d\u054e\u0001\u0000\u0000\u0000\u054e\u0017\u0001\u0000\u0000\u0000"+
		"\u054f\u0550\u0005\u0334\u0000\u0000\u0550\u0553\u0005\u018b\u0000\u0000"+
		"\u0551\u0552\u0005\u001d\u0000\u0000\u0552\u0554\u0003\u04ac\u0256\u0000"+
		"\u0553\u0551\u0001\u0000\u0000\u0000\u0553\u0554\u0001\u0000\u0000\u0000"+
		"\u0554\u0555\u0001\u0000\u0000\u0000\u0555\u0556\u0005\u02e3\u0000\u0000"+
		"\u0556\u0558\u0003\u001a\r\u0000\u0557\u054f\u0001\u0000\u0000\u0000\u0558"+
		"\u0559\u0001\u0000\u0000\u0000\u0559\u0557\u0001\u0000\u0000\u0000\u0559"+
		"\u055a\u0001\u0000\u0000\u0000\u055a\u0565\u0001\u0000\u0000\u0000\u055b"+
		"\u055c\u0005\u0334\u0000\u0000\u055c\u055d\u0005\u01b5\u0000\u0000\u055d"+
		"\u0560\u0005\u018b\u0000\u0000\u055e\u055f\u0005\u001d\u0000\u0000\u055f"+
		"\u0561\u0003\u04ac\u0256\u0000\u0560\u055e\u0001\u0000\u0000\u0000\u0560"+
		"\u0561\u0001\u0000\u0000\u0000\u0561\u0562\u0001\u0000\u0000\u0000\u0562"+
		"\u0563\u0005\u02e3\u0000\u0000\u0563\u0565\u0003\u001c\u000e\u0000\u0564"+
		"\u0557\u0001\u0000\u0000\u0000\u0564\u055b\u0001\u0000\u0000\u0000\u0565"+
		"\u0019\u0001\u0000\u0000\u0000\u0566\u0567\u0005\u0314\u0000\u0000\u0567"+
		"\u0568\u0005\u028e\u0000\u0000\u0568\u0569\u0003\u03e4\u01f2\u0000\u0569"+
		"\u056a\u0005\u0380\u0000\u0000\u056a\u0572\u0003\u03f6\u01fb\u0000\u056b"+
		"\u056c\u0005\u0390\u0000\u0000\u056c\u056d\u0003\u03e4\u01f2\u0000\u056d"+
		"\u056e\u0005\u0380\u0000\u0000\u056e\u056f\u0003\u03f6\u01fb\u0000\u056f"+
		"\u0571\u0001\u0000\u0000\u0000\u0570\u056b\u0001\u0000\u0000\u0000\u0571"+
		"\u0574\u0001\u0000\u0000\u0000\u0572\u0570\u0001\u0000\u0000\u0000\u0572"+
		"\u0573\u0001\u0000\u0000\u0000\u0573\u0577\u0001\u0000\u0000\u0000\u0574"+
		"\u0572\u0001\u0000\u0000\u0000\u0575\u0577\u0005\u00bb\u0000\u0000\u0576"+
		"\u0566\u0001\u0000\u0000\u0000\u0576\u0575\u0001\u0000\u0000\u0000\u0577"+
		"\u001b\u0001\u0000\u0000\u0000\u0578\u057d\u0005\u0155\u0000\u0000\u0579"+
		"\u057a\u0005\u038a\u0000\u0000\u057a\u057b\u0003\u03e6\u01f3\u0000\u057b"+
		"\u057c\u0005\u038b\u0000\u0000\u057c\u057e\u0001\u0000\u0000\u0000\u057d"+
		"\u0579\u0001\u0000\u0000\u0000\u057d\u057e\u0001\u0000\u0000\u0000\u057e"+
		"\u057f\u0001\u0000\u0000\u0000\u057f\u0580\u0005\u0326\u0000\u0000\u0580"+
		"\u0581\u0005\u038a\u0000\u0000\u0581\u0582\u0003\u03f2\u01f9\u0000\u0582"+
		"\u0583\u0005\u038b\u0000\u0000\u0583\u001d\u0001\u0000\u0000\u0000\u0584"+
		"\u0585\u0005\u0314\u0000\u0000\u0585\u0587\u0003\u03ea\u01f5\u0000\u0586"+
		"\u0588\u0003\u0450\u0228\u0000\u0587\u0586\u0001\u0000\u0000\u0000\u0587"+
		"\u0588\u0001\u0000\u0000\u0000\u0588\u0589\u0001\u0000\u0000\u0000\u0589"+
		"\u058a\u0005\u028e\u0000\u0000\u058a\u058b\u0003\u03e4\u01f2\u0000\u058b"+
		"\u058c\u0005\u0380\u0000\u0000\u058c\u0594\u0003\u03f6\u01fb\u0000\u058d"+
		"\u058e\u0005\u0390\u0000\u0000\u058e\u058f\u0003\u03e4\u01f2\u0000\u058f"+
		"\u0590\u0005\u0380\u0000\u0000\u0590\u0591\u0003\u03f6\u01fb\u0000\u0591"+
		"\u0593\u0001\u0000\u0000\u0000\u0592\u058d\u0001\u0000\u0000\u0000\u0593"+
		"\u0596\u0001\u0000\u0000\u0000\u0594\u0592\u0001\u0000\u0000\u0000\u0594"+
		"\u0595\u0001\u0000\u0000\u0000\u0595\u0599\u0001\u0000\u0000\u0000\u0596"+
		"\u0594\u0001\u0000\u0000\u0000\u0597\u0598\u0005\u0117\u0000\u0000\u0598"+
		"\u059a\u0003\u0462\u0231\u0000\u0599\u0597\u0001\u0000\u0000\u0000\u0599"+
		"\u059a\u0001\u0000\u0000\u0000\u059a\u059d\u0001\u0000\u0000\u0000\u059b"+
		"\u059c\u0005\u0335\u0000\u0000\u059c\u059e\u0003\u04ac\u0256\u0000\u059d"+
		"\u059b\u0001\u0000\u0000\u0000\u059d\u059e\u0001\u0000\u0000\u0000\u059e"+
		"\u001f\u0001\u0000\u0000\u0000\u059f\u05a1\u0003\u03ea\u01f5\u0000\u05a0"+
		"\u05a2\u0003\u0450\u0228\u0000\u05a1\u05a0\u0001\u0000\u0000\u0000\u05a1"+
		"\u05a2\u0001\u0000\u0000\u0000\u05a2\u05aa\u0001\u0000\u0000\u0000\u05a3"+
		"\u05a4\u0005\u038a\u0000\u0000\u05a4\u05a5\u0003\u04b2\u0259\u0000\u05a5"+
		"\u05a7\u0005\u038b\u0000\u0000\u05a6\u05a8\u0003\u0450\u0228\u0000\u05a7"+
		"\u05a6\u0001\u0000\u0000\u0000\u05a7\u05a8\u0001\u0000\u0000\u0000\u05a8"+
		"\u05aa\u0001\u0000\u0000\u0000\u05a9\u059f\u0001\u0000\u0000\u0000\u05a9"+
		"\u05a3\u0001\u0000\u0000\u0000\u05aa!\u0001\u0000\u0000\u0000\u05ab\u05ac"+
		"\u0005\u00bb\u0000\u0000\u05ac\u05ad\u0005\u0117\u0000\u0000\u05ad\u05af"+
		"\u0003\u03ea\u01f5\u0000\u05ae\u05b0\u0003\u0450\u0228\u0000\u05af\u05ae"+
		"\u0001\u0000\u0000\u0000\u05af\u05b0\u0001\u0000\u0000\u0000\u05b0\u05b7"+
		"\u0001\u0000\u0000\u0000\u05b1\u05b2\u0005\u0321\u0000\u0000\u05b2\u05b5"+
		"\u0003 \u0010\u0000\u05b3\u05b4\u0005\u0390\u0000\u0000\u05b4\u05b6\u0003"+
		" \u0010\u0000\u05b5\u05b3\u0001\u0000\u0000\u0000\u05b5\u05b6\u0001\u0000"+
		"\u0000\u0000\u05b6\u05b8\u0001\u0000\u0000\u0000\u05b7\u05b1\u0001\u0000"+
		"\u0000\u0000\u05b7\u05b8\u0001\u0000\u0000\u0000\u05b8\u05bb\u0001\u0000"+
		"\u0000\u0000\u05b9\u05ba\u0005\u0335\u0000\u0000\u05ba\u05bc\u0003\u04ac"+
		"\u0256\u0000\u05bb\u05b9\u0001\u0000\u0000\u0000\u05bb\u05bc\u0001\u0000"+
		"\u0000\u0000\u05bc#\u0001\u0000\u0000\u0000\u05bd\u05be\u0005\u0326\u0000"+
		"\u0000\u05be\u05bf\u0005\u038a\u0000\u0000\u05bf\u05c0\u0003\u03f2\u01f9"+
		"\u0000\u05c0\u05c6\u0005\u038b\u0000\u0000\u05c1\u05c2\u0005\u0390\u0000"+
		"\u0000\u05c2\u05c3\u0005\u038a\u0000\u0000\u05c3\u05c4\u0003\u03f2\u01f9"+
		"\u0000\u05c4\u05c5\u0005\u038b\u0000\u0000\u05c5\u05c7\u0001\u0000\u0000"+
		"\u0000\u05c6\u05c1\u0001\u0000\u0000\u0000\u05c6\u05c7\u0001\u0000\u0000"+
		"\u0000\u05c7%\u0001\u0000\u0000\u0000\u05c8\u05e2\u0003*\u0015\u0000\u05c9"+
		"\u05e2\u00038\u001c\u0000\u05ca\u05e2\u0003:\u001d\u0000\u05cb\u05e2\u0003"+
		">\u001f\u0000\u05cc\u05e2\u0003@ \u0000\u05cd\u05e2\u0003B!\u0000\u05ce"+
		"\u05e2\u0003D\"\u0000\u05cf\u05e2\u0003H$\u0000\u05d0\u05e2\u0003J%\u0000"+
		"\u05d1\u05e2\u0003L&\u0000\u05d2\u05e2\u0003^/\u0000\u05d3\u05e2\u0003"+
		"b1\u0000\u05d4\u05e2\u0003h4\u0000\u05d5\u05e2\u0003r9\u0000\u05d6\u05e2"+
		"\u0003t:\u0000\u05d7\u05e2\u0003v;\u0000\u05d8\u05e2\u0003x<\u0000\u05d9"+
		"\u05e2\u0003z=\u0000\u05da\u05e2\u0003|>\u0000\u05db\u05e2\u0003~?\u0000"+
		"\u05dc\u05e2\u0003\u0080@\u0000\u05dd\u05e2\u0003\u0082A\u0000\u05de\u05e2"+
		"\u0003\u0084B\u0000\u05df\u05e2\u0003\u027e\u013f\u0000\u05e0\u05e2\u0003"+
		"(\u0014\u0000\u05e1\u05c8\u0001\u0000\u0000\u0000\u05e1\u05c9\u0001\u0000"+
		"\u0000\u0000\u05e1\u05ca\u0001\u0000\u0000\u0000\u05e1\u05cb\u0001\u0000"+
		"\u0000\u0000\u05e1\u05cc\u0001\u0000\u0000\u0000\u05e1\u05cd\u0001\u0000"+
		"\u0000\u0000\u05e1\u05ce\u0001\u0000\u0000\u0000\u05e1\u05cf\u0001\u0000"+
		"\u0000\u0000\u05e1\u05d0\u0001\u0000\u0000\u0000\u05e1\u05d1\u0001\u0000"+
		"\u0000\u0000\u05e1\u05d2\u0001\u0000\u0000\u0000\u05e1\u05d3\u0001\u0000"+
		"\u0000\u0000\u05e1\u05d4\u0001\u0000\u0000\u0000\u05e1\u05d5\u0001\u0000"+
		"\u0000\u0000\u05e1\u05d6\u0001\u0000\u0000\u0000\u05e1\u05d7\u0001\u0000"+
		"\u0000\u0000\u05e1\u05d8\u0001\u0000\u0000\u0000\u05e1\u05d9\u0001\u0000"+
		"\u0000\u0000\u05e1\u05da\u0001\u0000\u0000\u0000\u05e1\u05db\u0001\u0000"+
		"\u0000\u0000\u05e1\u05dc\u0001\u0000\u0000\u0000\u05e1\u05dd\u0001\u0000"+
		"\u0000\u0000\u05e1\u05de\u0001\u0000\u0000\u0000\u05e1\u05df\u0001\u0000"+
		"\u0000\u0000\u05e1\u05e0\u0001\u0000\u0000\u0000\u05e2\'\u0001\u0000\u0000"+
		"\u0000\u05e3\u05e5\u0005R\u0000\u0000\u05e4\u05e6\u0007\u0001\u0000\u0000"+
		"\u05e5\u05e4\u0001\u0000\u0000\u0000\u05e5\u05e6\u0001\u0000\u0000\u0000"+
		"\u05e6\u05e9\u0001\u0000\u0000\u0000\u05e7\u05e8\u0005\u01a9\u0000\u0000"+
		"\u05e8\u05ea\u0003\u03d0\u01e8\u0000\u05e9\u05e7\u0001\u0000\u0000\u0000"+
		"\u05e9\u05ea\u0001\u0000\u0000\u0000\u05ea\u05f2\u0001\u0000\u0000\u0000"+
		"\u05eb\u05ec\u0005\u02b1\u0000\u0000\u05ec\u05ef\u0005\u02fe\u0000\u0000"+
		"\u05ed\u05ee\u0005\u01a9\u0000\u0000\u05ee\u05f0\u0003\u03d0\u01e8\u0000"+
		"\u05ef\u05ed\u0001\u0000\u0000\u0000\u05ef\u05f0\u0001\u0000\u0000\u0000"+
		"\u05f0\u05f2\u0001\u0000\u0000\u0000\u05f1\u05e3\u0001\u0000\u0000\u0000"+
		"\u05f1\u05eb\u0001\u0000\u0000\u0000\u05f2)\u0001\u0000\u0000\u0000\u05f3"+
		"\u05f4\u0005\u0094\u0000\u0000\u05f4\u05f5\u0005\u015c\u0000\u0000\u05f5"+
		"\u05f6\u0003\u03ea\u01f5\u0000\u05f6\u05fb\u0005\u0117\u0000\u0000\u05f7"+
		"\u05fc\u0003l6\u0000\u05f8\u05fc\u0003j5\u0000\u05f9\u05fc\u0003n7\u0000"+
		"\u05fa\u05fc\u0003,\u0016\u0000\u05fb\u05f7\u0001\u0000\u0000\u0000\u05fb"+
		"\u05f8\u0001\u0000\u0000\u0000\u05fb\u05f9\u0001\u0000\u0000\u0000\u05fb"+
		"\u05fa\u0001\u0000\u0000\u0000\u05fc\u05fe\u0001\u0000\u0000\u0000\u05fd"+
		"\u05ff\u0003.\u0017\u0000\u05fe\u05fd\u0001\u0000\u0000\u0000\u05fe\u05ff"+
		"\u0001\u0000\u0000\u0000\u05ff\u0601\u0001\u0000\u0000\u0000\u0600\u0602"+
		"\u0003\u03e2\u01f1\u0000\u0601\u0600\u0001\u0000\u0000\u0000\u0601\u0602"+
		"\u0001\u0000\u0000\u0000\u0602\u0604\u0001\u0000\u0000\u0000\u0603\u0605"+
		"\u00030\u0018\u0000\u0604\u0603\u0001\u0000\u0000\u0000\u0604\u0605\u0001"+
		"\u0000\u0000\u0000\u0605\u0609\u0001\u0000\u0000\u0000\u0606\u0608\u0003"+
		"\u01e4\u00f2\u0000\u0607\u0606\u0001\u0000\u0000\u0000\u0608\u060b\u0001"+
		"\u0000\u0000\u0000\u0609\u0607\u0001\u0000\u0000\u0000\u0609\u060a\u0001"+
		"\u0000\u0000\u0000\u060a\u060f\u0001\u0000\u0000\u0000\u060b\u0609\u0001"+
		"\u0000\u0000\u0000\u060c\u060d\u0005\u0324\u0000\u0000\u060d\u060e\u0005"+
		"\u0380\u0000\u0000\u060e\u0610\u0007\u0002\u0000\u0000\u060f\u060c\u0001"+
		"\u0000\u0000\u0000\u060f\u0610\u0001\u0000\u0000\u0000\u0610\u0635\u0001"+
		"\u0000\u0000\u0000\u0611\u0612\u0005\u0094\u0000\u0000\u0612\u0613\u0005"+
		"\u015c\u0000\u0000\u0613\u0618\u0003\u03ea\u01f5\u0000\u0614\u0615\u0005"+
		"\u038a\u0000\u0000\u0615\u0616\u0003\u03e6\u01f3\u0000\u0616\u0617\u0005"+
		"\u038b\u0000\u0000\u0617\u0619\u0001\u0000\u0000\u0000\u0618\u0614\u0001"+
		"\u0000\u0000\u0000\u0618\u0619\u0001\u0000\u0000\u0000\u0619\u061a\u0001"+
		"\u0000\u0000\u0000\u061a\u061b\u0005\u0117\u0000\u0000\u061b\u061c\u0005"+
		"\u038a\u0000\u0000\u061c\u061d\u0005\u0287\u0000\u0000\u061d\u061e\u0003"+
		"\u0444\u0222\u0000\u061e\u0622\u0005\u0117\u0000\u0000\u061f\u0623\u0003"+
		"l6\u0000\u0620\u0623\u0003j5\u0000\u0621\u0623\u0003n7\u0000\u0622\u061f"+
		"\u0001\u0000\u0000\u0000\u0622\u0620\u0001\u0000\u0000\u0000\u0622\u0621"+
		"\u0001\u0000\u0000\u0000\u0623\u0624\u0001\u0000\u0000\u0000\u0624\u0626"+
		"\u0005\u038b\u0000\u0000\u0625\u0627\u0003.\u0017\u0000\u0626\u0625\u0001"+
		"\u0000\u0000\u0000\u0626\u0627\u0001\u0000\u0000\u0000\u0627\u0629\u0001"+
		"\u0000\u0000\u0000\u0628\u062a\u0003\u03e2\u01f1\u0000\u0629\u0628\u0001"+
		"\u0000\u0000\u0000\u0629\u062a\u0001\u0000\u0000\u0000\u062a\u062c\u0001"+
		"\u0000\u0000\u0000\u062b\u062d\u00030\u0018\u0000\u062c\u062b\u0001\u0000"+
		"\u0000\u0000\u062c\u062d\u0001\u0000\u0000\u0000\u062d\u0631\u0001\u0000"+
		"\u0000\u0000\u062e\u0630\u0003\u01e4\u00f2\u0000\u062f\u062e\u0001\u0000"+
		"\u0000\u0000\u0630\u0633\u0001\u0000\u0000\u0000\u0631\u062f\u0001\u0000"+
		"\u0000\u0000\u0631\u0632\u0001\u0000\u0000\u0000\u0632\u0635\u0001\u0000"+
		"\u0000\u0000\u0633\u0631\u0001\u0000\u0000\u0000\u0634\u05f3\u0001\u0000"+
		"\u0000\u0000\u0634\u0611\u0001\u0000\u0000\u0000\u0635+\u0001\u0000\u0000"+
		"\u0000\u0636\u0637\u0007\u0003\u0000\u0000\u0637-\u0001\u0000\u0000\u0000"+
		"\u0638\u0639\u0005\u0109\u0000\u0000\u0639\u063a\u0005\u0380\u0000\u0000"+
		"\u063a\u063b\u0005\u038a\u0000\u0000\u063b\u0640\u0003\u03ca\u01e5\u0000"+
		"\u063c\u063d\u0005\u0390\u0000\u0000\u063d\u063f\u0003\u03ca\u01e5\u0000"+
		"\u063e\u063c\u0001\u0000\u0000\u0000\u063f\u0642\u0001\u0000\u0000\u0000"+
		"\u0640\u063e\u0001\u0000\u0000\u0000\u0640\u0641\u0001\u0000\u0000\u0000"+
		"\u0641\u0643\u0001\u0000\u0000\u0000\u0642\u0640\u0001\u0000\u0000\u0000"+
		"\u0643\u0644\u0005\u038b\u0000\u0000\u0644/\u0001\u0000\u0000\u0000\u0645"+
		"\u0646\u0005\u010b\u0000\u0000\u0646\u0647\u0005\u0380\u0000\u0000\u0647"+
		"\u064a\u0005\u038a\u0000\u0000\u0648\u064b\u00032\u0019\u0000\u0649\u064b"+
		"\u00034\u001a\u0000\u064a\u0648\u0001\u0000\u0000\u0000\u064a\u0649\u0001"+
		"\u0000\u0000\u0000\u064b\u064c\u0001\u0000\u0000\u0000\u064c\u064d\u0005"+
		"\u038b\u0000\u0000\u064d1\u0001\u0000\u0000\u0000\u064e\u064f\u0005\u0115"+
		"\u0000\u0000\u064f\u0650\u0005\u0380\u0000\u0000\u0650\u0651\u0003\u03ca"+
		"\u01e5\u0000\u06513\u0001\u0000\u0000\u0000\u0652\u0653\u0005\u030c\u0000"+
		"\u0000\u0653\u0654\u0005\u0380\u0000\u0000\u0654\u0658\u0003\u0186\u00c3"+
		"\u0000\u0655\u0657\u0003\u01e2\u00f1\u0000\u0656\u0655\u0001\u0000\u0000"+
		"\u0000\u0657\u065a\u0001\u0000\u0000\u0000\u0658\u0656\u0001\u0000\u0000"+
		"\u0000\u0658\u0659\u0001\u0000\u0000\u0000\u06595\u0001\u0000\u0000\u0000"+
		"\u065a\u0658\u0001\u0000\u0000\u0000\u065b\u065c\u0005\u02af\u0000\u0000"+
		"\u065c\u065d\u0005\u0380\u0000\u0000\u065d\u065e\u0005\u038a\u0000\u0000"+
		"\u065e\u065f\u0005\u0115\u0000\u0000\u065f\u0660\u0005\u0380\u0000\u0000"+
		"\u0660\u066c\u0003\u03ca\u01e5\u0000\u0661\u0662\u0005\u030c\u0000\u0000"+
		"\u0662\u0663\u0005\u0380\u0000\u0000\u0663\u0665\u0003\u0186\u00c3\u0000"+
		"\u0664\u0666\u0003\u01e2\u00f1\u0000\u0665\u0664\u0001\u0000\u0000\u0000"+
		"\u0666\u0667\u0001\u0000\u0000\u0000\u0667\u0665\u0001\u0000\u0000\u0000"+
		"\u0667\u0668\u0001\u0000\u0000\u0000\u0668\u0669\u0001\u0000\u0000\u0000"+
		"\u0669\u066a\u0005\u038b\u0000\u0000\u066a\u066c\u0001\u0000\u0000\u0000"+
		"\u066b\u065b\u0001\u0000\u0000\u0000\u066b\u0661\u0001\u0000\u0000\u0000"+
		"\u066c7\u0001\u0000\u0000\u0000\u066d\u066e\u0005\u0094\u0000\u0000\u066e"+
		"\u0673\u0005\u015c\u0000\u0000\u066f\u0674\u0003l6\u0000\u0670\u0674\u0003"+
		"j5\u0000\u0671\u0674\u0003n7\u0000\u0672\u0674\u0003,\u0016\u0000\u0673"+
		"\u066f\u0001\u0000\u0000\u0000\u0673\u0670\u0001\u0000\u0000\u0000\u0673"+
		"\u0671\u0001\u0000\u0000\u0000\u0673\u0672\u0001\u0000\u0000\u0000\u0674"+
		"\u0675\u0001\u0000\u0000\u0000\u0675\u067b\u0005\u0117\u0000\u0000\u0676"+
		"\u067c\u0003\u03ea\u01f5\u0000\u0677\u0678\u0005\u038a\u0000\u0000\u0678"+
		"\u0679\u0003\u042e\u0217\u0000\u0679\u067a\u0005\u038b\u0000\u0000\u067a"+
		"\u067c\u0001\u0000\u0000\u0000\u067b\u0676\u0001\u0000\u0000\u0000\u067b"+
		"\u0677\u0001\u0000\u0000\u0000\u067c\u067e\u0001\u0000\u0000\u0000\u067d"+
		"\u067f\u0003\u0482\u0241\u0000\u067e\u067d\u0001\u0000\u0000\u0000\u067e"+
		"\u067f\u0001\u0000\u0000\u0000\u067f\u0681\u0001\u0000\u0000\u0000\u0680"+
		"\u0682\u00030\u0018\u0000\u0681\u0680\u0001\u0000\u0000\u0000\u0681\u0682"+
		"\u0001\u0000\u0000\u0000\u0682\u0684\u0001\u0000\u0000\u0000\u0683\u0685"+
		"\u0003\u01e4\u00f2\u0000\u0684\u0683\u0001\u0000\u0000\u0000\u0684\u0685"+
		"\u0001\u0000\u0000\u0000\u0685\u0689\u0001\u0000\u0000\u0000\u0686\u0687"+
		"\u0005\u0324\u0000\u0000\u0687\u0688\u0005\u0380\u0000\u0000\u0688\u068a"+
		"\u0005\u0255\u0000\u0000\u0689\u0686\u0001\u0000\u0000\u0000\u0689\u068a"+
		"\u0001\u0000\u0000\u0000\u068a\u068c\u0001\u0000\u0000\u0000\u068b\u068d"+
		"\u0005\u0135\u0000\u0000\u068c\u068b\u0001\u0000\u0000\u0000\u068c\u068d"+
		"\u0001\u0000\u0000\u0000\u068d9\u0001\u0000\u0000\u0000\u068e\u0690\u0005"+
		"\u0086\u0000\u0000\u068f\u0691\u0003\u02f8\u017c\u0000\u0690\u068f\u0001"+
		"\u0000\u0000\u0000\u0690\u0691\u0001\u0000\u0000\u0000\u0691\u0692\u0001"+
		"\u0000\u0000\u0000\u0692\u0693\u0005\u01d9\u0000\u0000\u0693\u0694\u0003"+
		"\u0292\u0149\u0000\u0694\u0696\u0003\u03ea\u01f5\u0000\u0695\u0697\u0003"+
		"<\u001e\u0000\u0696\u0695\u0001\u0000\u0000\u0000\u0696\u0697\u0001\u0000"+
		"\u0000\u0000\u0697\u0698\u0001\u0000\u0000\u0000\u0698\u0699\u0005\u015d"+
		"\u0000\u0000\u0699\u069a\u0003\u03ca\u01e5\u0000\u069a\u06a6\u0001\u0000"+
		"\u0000\u0000\u069b\u069d\u0005\u0086\u0000\u0000\u069c\u069e\u0003\u02f8"+
		"\u017c\u0000\u069d\u069c\u0001\u0000\u0000\u0000\u069d\u069e\u0001\u0000"+
		"\u0000\u0000\u069e\u069f\u0001\u0000\u0000\u0000\u069f\u06a0\u0005\u01d9"+
		"\u0000\u0000\u06a0\u06a1\u0005\u0084\u0000\u0000\u06a1\u06a2\u0003\u0424"+
		"\u0212\u0000\u06a2\u06a3\u0005\u015d\u0000\u0000\u06a3\u06a4\u0003\u03ca"+
		"\u01e5\u0000\u06a4\u06a6\u0001\u0000\u0000\u0000\u06a5\u068e\u0001\u0000"+
		"\u0000\u0000\u06a5\u069b\u0001\u0000\u0000\u0000\u06a6;\u0001\u0000\u0000"+
		"\u0000\u06a7\u06a9\u0005\u038a\u0000\u0000\u06a8\u06aa\u0003\u00c0`\u0000"+
		"\u06a9\u06a8\u0001\u0000\u0000\u0000\u06a9\u06aa\u0001\u0000\u0000\u0000"+
		"\u06aa\u06ab\u0001\u0000\u0000\u0000\u06ab\u06ac\u0005\u038b\u0000\u0000"+
		"\u06ac=\u0001\u0000\u0000\u0000\u06ad\u06af\u0005\u0087\u0000\u0000\u06ae"+
		"\u06b0\u0005\u0338\u0000\u0000\u06af\u06ae\u0001\u0000\u0000\u0000\u06af"+
		"\u06b0\u0001\u0000\u0000\u0000\u06b0?\u0001\u0000\u0000\u0000\u06b1\u06b2"+
		"\u0005\u00ed\u0000\u0000\u06b2\u06b6\u0005\u0143\u0000\u0000\u06b3\u06b7"+
		"\u0003\u03ca\u01e5\u0000\u06b4\u06b7\u0003\u03d0\u01e8\u0000\u06b5\u06b7"+
		"\u0005\u0370\u0000\u0000\u06b6\u06b3\u0001\u0000\u0000\u0000\u06b6\u06b4"+
		"\u0001\u0000\u0000\u0000\u06b6\u06b5\u0001\u0000\u0000\u0000\u06b7\u06c4"+
		"\u0001\u0000\u0000\u0000\u06b8\u06b9\u0005\u0321\u0000\u0000\u06b9\u06ba"+
		"\u0005\u038a\u0000\u0000\u06ba\u06bf\u0003\u03d0\u01e8\u0000\u06bb\u06bc"+
		"\u0005\u0390\u0000\u0000\u06bc\u06be\u0003\u03d0\u01e8\u0000\u06bd\u06bb"+
		"\u0001\u0000\u0000\u0000\u06be\u06c1\u0001\u0000\u0000\u0000\u06bf\u06bd"+
		"\u0001\u0000\u0000\u0000\u06bf\u06c0\u0001\u0000\u0000\u0000\u06c0\u06c2"+
		"\u0001\u0000\u0000\u0000\u06c1\u06bf\u0001\u0000\u0000\u0000\u06c2\u06c3"+
		"\u0005\u038b\u0000\u0000\u06c3\u06c5\u0001\u0000\u0000\u0000\u06c4\u06b8"+
		"\u0001\u0000\u0000\u0000\u06c4\u06c5\u0001\u0000\u0000\u0000\u06c5\u06ca"+
		"\u0001\u0000\u0000\u0000\u06c6\u06c7\u0005\u00ed\u0000\u0000\u06c7\u06c8"+
		"\u0005\u0143\u0000\u0000\u06c8\u06ca\u0005\u0376\u0000\u0000\u06c9\u06b1"+
		"\u0001\u0000\u0000\u0000\u06c9\u06c6\u0001\u0000\u0000\u0000\u06caA\u0001"+
		"\u0000\u0000\u0000\u06cb\u06cc\u0005\u00ed\u0000\u0000\u06cc\u06cd\u0005"+
		"\u02de\u0000\u0000\u06cd\u06ce\u0003\u03ea\u01f5\u0000\u06ceC\u0001\u0000"+
		"\u0000\u0000\u06cf\u06d2\u0005\u00f1\u0000\u0000\u06d0\u06d1\u0005\u0321"+
		"\u0000\u0000\u06d1\u06d3\u0007\u0004\u0000\u0000\u06d2\u06d0\u0001\u0000"+
		"\u0000\u0000\u06d2\u06d3\u0001\u0000\u0000\u0000\u06d3\u06d4\u0001\u0000"+
		"\u0000\u0000\u06d4\u06d5\u0003\u0004\u0002\u0000\u06d5E\u0001\u0000\u0000"+
		"\u0000\u06d6\u06d7\u0005\u01f0\u0000\u0000\u06d7\u06d8\u0005\u0380\u0000"+
		"\u0000\u06d8\u06d9\u0003\u03f0\u01f8\u0000\u06d9G\u0001\u0000\u0000\u0000"+
		"\u06da\u06de\u0005\u0126\u0000\u0000\u06db\u06df\u0003n7\u0000\u06dc\u06df"+
		"\u0003j5\u0000\u06dd\u06df\u0003l6\u0000\u06de\u06db\u0001\u0000\u0000"+
		"\u0000\u06de\u06dc\u0001\u0000\u0000\u0000\u06de\u06dd\u0001\u0000\u0000"+
		"\u0000\u06df\u06e0\u0001\u0000\u0000\u0000\u06e0\u06e2\u0005\u0375\u0000"+
		"\u0000\u06e1\u06e3\u0003F#\u0000\u06e2\u06e1\u0001\u0000\u0000\u0000\u06e2"+
		"\u06e3\u0001\u0000\u0000\u0000\u06e3\u06e5\u0001\u0000\u0000\u0000\u06e4"+
		"\u06e6\u0003\u03e2\u01f1\u0000\u06e5\u06e4\u0001\u0000\u0000\u0000\u06e5"+
		"\u06e6\u0001\u0000\u0000\u0000\u06e6I\u0001\u0000\u0000\u0000\u06e7\u06e8"+
		"\u0005\u012a\u0000\u0000\u06e8\u0702\u0005\u01ee\u0000\u0000\u06e9\u06f6"+
		"\u0005\u01d9\u0000\u0000\u06ea\u06eb\u0003\u0292\u0149\u0000\u06eb\u06ec"+
		"\u0003\u03ea\u01f5\u0000\u06ec\u06f7\u0001\u0000\u0000\u0000\u06ed\u06ee"+
		"\u0005\u0011\u0000\u0000\u06ee\u06ef\u0003\u0294\u014a\u0000\u06ef\u06f4"+
		"\u0005\u014a\u0000\u0000\u06f0\u06f1\u0005\u00a5\u0000\u0000\u06f1\u06f5"+
		"\u0003\u03d0\u01e8\u0000\u06f2\u06f3\u0005\u027d\u0000\u0000\u06f3\u06f5"+
		"\u0003\u03b8\u01dc\u0000\u06f4\u06f0\u0001\u0000\u0000\u0000\u06f4\u06f2"+
		"\u0001\u0000\u0000\u0000\u06f5\u06f7\u0001\u0000\u0000\u0000\u06f6\u06ea"+
		"\u0001\u0000\u0000\u0000\u06f6\u06ed\u0001\u0000\u0000\u0000\u06f7\u0703"+
		"\u0001\u0000\u0000\u0000\u06f8\u06f9\u0005\u01d9\u0000\u0000\u06f9\u06fa"+
		"\u0005\u011b\u0000\u0000\u06fa\u06fb\u0003\u0294\u014a\u0000\u06fb\u0700"+
		"\u0005\u014a\u0000\u0000\u06fc\u06fd\u0005\u00a5\u0000\u0000\u06fd\u0701"+
		"\u0003\u03d0\u01e8\u0000\u06fe\u06ff\u0005\u027d\u0000\u0000\u06ff\u0701"+
		"\u0003\u03b8\u01dc\u0000\u0700\u06fc\u0001\u0000\u0000\u0000\u0700\u06fe"+
		"\u0001\u0000\u0000\u0000\u0701\u0703\u0001\u0000\u0000\u0000\u0702\u06e9"+
		"\u0001\u0000\u0000\u0000\u0702\u06f8\u0001\u0000\u0000\u0000\u0703\u0704"+
		"\u0001\u0000\u0000\u0000\u0704\u0705\u0005\u02f9\u0000\u0000\u0705\u0706"+
		"\u0005\u0259\u0000\u0000\u0706\u070a\u0003\u03d0\u01e8\u0000\u0707\u0708"+
		"\u0007\u0005\u0000\u0000\u0708\u0709\u0005\u009e\u0000\u0000\u0709\u070b"+
		"\u0005\u012b\u0000\u0000\u070a\u0707\u0001\u0000\u0000\u0000\u070a\u070b"+
		"\u0001\u0000\u0000\u0000\u070bK\u0001\u0000\u0000\u0000\u070c\u076c\u0005"+
		"\u012a\u0000\u0000\u070d\u0713\u0003N\'\u0000\u070e\u0710\u0005\u0011"+
		"\u0000\u0000\u070f\u0711\u0005\u0219\u0000\u0000\u0710\u070f\u0001\u0000"+
		"\u0000\u0000\u0710\u0711\u0001\u0000\u0000\u0000\u0711\u0713\u0001\u0000"+
		"\u0000\u0000\u0712\u070d\u0001\u0000\u0000\u0000\u0712\u070e\u0001\u0000"+
		"\u0000\u0000\u0713\u0714\u0001\u0000\u0000\u0000\u0714\u0715\u0005\u01d9"+
		"\u0000\u0000\u0715\u076d\u0005\u0006\u0000\u0000\u0716\u071c\u0003R)\u0000"+
		"\u0717\u0719\u0005\u0011\u0000\u0000\u0718\u071a\u0005\u0219\u0000\u0000"+
		"\u0719\u0718\u0001\u0000\u0000\u0000\u0719\u071a\u0001\u0000\u0000\u0000"+
		"\u071a\u071c\u0001\u0000\u0000\u0000\u071b\u0716\u0001\u0000\u0000\u0000"+
		"\u071b\u0717\u0001\u0000\u0000\u0000\u071c\u071d\u0001\u0000\u0000\u0000"+
		"\u071d\u0724\u0005\u01d9\u0000\u0000\u071e\u0725\u0005\u0319\u0000\u0000"+
		"\u071f\u0720\u0005\u0247\u0000\u0000\u0720\u0725\u0005\u01a3\u0000\u0000"+
		"\u0721\u0725\u0005\u032d\u0000\u0000\u0722\u0725\u0005\u00a5\u0000\u0000"+
		"\u0723\u0725\u0005\u0158\u0000\u0000\u0724\u071e\u0001\u0000\u0000\u0000"+
		"\u0724\u071f\u0001\u0000\u0000\u0000\u0724\u0721\u0001\u0000\u0000\u0000"+
		"\u0724\u0722\u0001\u0000\u0000\u0000\u0724\u0723\u0001\u0000\u0000\u0000"+
		"\u0725\u0726\u0001\u0000\u0000\u0000\u0726\u076d\u0003\u03ea\u01f5\u0000"+
		"\u0727\u072d\u0003V+\u0000\u0728\u072a\u0005\u0011\u0000\u0000\u0729\u072b"+
		"\u0005\u0219\u0000\u0000\u072a\u0729\u0001\u0000\u0000\u0000\u072a\u072b"+
		"\u0001\u0000\u0000\u0000\u072b\u072d\u0001\u0000\u0000\u0000\u072c\u0727"+
		"\u0001\u0000\u0000\u0000\u072c\u0728\u0001\u0000\u0000\u0000\u072d\u072e"+
		"\u0001\u0000\u0000\u0000\u072e\u0736\u0005\u01d9\u0000\u0000\u072f\u0730"+
		"\u0005\u027d\u0000\u0000\u0730\u0737\u0003\u03b8\u01dc\u0000\u0731\u0732"+
		"\u0005\u0011\u0000\u0000\u0732\u0733\u0005\u027e\u0000\u0000\u0733\u0734"+
		"\u0005\u014a\u0000\u0000\u0734\u0735\u0005\u00a5\u0000\u0000\u0735\u0737"+
		"\u0003\u03d0\u01e8\u0000\u0736\u072f\u0001\u0000\u0000\u0000\u0736\u0731"+
		"\u0001\u0000\u0000\u0000\u0737\u076d\u0001\u0000\u0000\u0000\u0738\u073e"+
		"\u0003V+\u0000\u0739\u073b\u0005\u0011\u0000\u0000\u073a\u073c\u0005\u0219"+
		"\u0000\u0000\u073b\u073a\u0001\u0000\u0000\u0000\u073b\u073c\u0001\u0000"+
		"\u0000\u0000\u073c\u073e\u0001\u0000\u0000\u0000\u073d\u0738\u0001\u0000"+
		"\u0000\u0000\u073d\u0739\u0001\u0000\u0000\u0000\u073e\u073f\u0001\u0000"+
		"\u0000\u0000\u073f\u0740\u0005\u01d9\u0000\u0000\u0740\u0741\u0005\u011b"+
		"\u0000\u0000\u0741\u0742\u0005\u027e\u0000\u0000\u0742\u0743\u0005\u014a"+
		"\u0000\u0000\u0743\u0744\u0005\u00a5\u0000\u0000\u0744\u076d\u0003\u03d0"+
		"\u01e8\u0000\u0745\u074b\u0003Z-\u0000\u0746\u0748\u0005\u0011\u0000\u0000"+
		"\u0747\u0749\u0005\u0219\u0000\u0000\u0748\u0747\u0001\u0000\u0000\u0000"+
		"\u0748\u0749\u0001\u0000\u0000\u0000\u0749\u074b\u0001\u0000\u0000\u0000"+
		"\u074a\u0745\u0001\u0000\u0000\u0000\u074a\u0746\u0001\u0000\u0000\u0000"+
		"\u074b\u074c\u0001\u0000\u0000\u0000\u074c\u0759\u0005\u01d9\u0000\u0000"+
		"\u074d\u074e\u0003\u03ba\u01dd\u0000\u074e\u074f\u0003\u03ea\u01f5\u0000"+
		"\u074f\u075a\u0001\u0000\u0000\u0000\u0750\u0751\u0005\u0011\u0000\u0000"+
		"\u0751\u0752\u0003\u0294\u014a\u0000\u0752\u0757\u0005\u014a\u0000\u0000"+
		"\u0753\u0754\u0005\u00a5\u0000\u0000\u0754\u0758\u0003\u03d0\u01e8\u0000"+
		"\u0755\u0756\u0005\u027d\u0000\u0000\u0756\u0758\u0003\u03b8\u01dc\u0000"+
		"\u0757\u0753\u0001\u0000\u0000\u0000\u0757\u0755\u0001\u0000\u0000\u0000"+
		"\u0758\u075a\u0001\u0000\u0000\u0000\u0759\u074d\u0001\u0000\u0000\u0000"+
		"\u0759\u0750\u0001\u0000\u0000\u0000\u075a\u076d\u0001\u0000\u0000\u0000"+
		"\u075b\u0761\u0003Z-\u0000\u075c\u075e\u0005\u0011\u0000\u0000\u075d\u075f"+
		"\u0005\u0219\u0000\u0000\u075e\u075d\u0001\u0000\u0000\u0000\u075e\u075f"+
		"\u0001\u0000\u0000\u0000\u075f\u0761\u0001\u0000\u0000\u0000\u0760\u075b"+
		"\u0001\u0000\u0000\u0000\u0760\u075c\u0001\u0000\u0000\u0000\u0761\u0762"+
		"\u0001\u0000\u0000\u0000\u0762\u0763\u0005\u01d9\u0000\u0000\u0763\u0764"+
		"\u0005\u011b\u0000\u0000\u0764\u0765\u0003\u0294\u014a\u0000\u0765\u076a"+
		"\u0005\u014a\u0000\u0000\u0766\u0767\u0005\u00a5\u0000\u0000\u0767\u076b"+
		"\u0003\u03d0\u01e8\u0000\u0768\u0769\u0005\u027d\u0000\u0000\u0769\u076b"+
		"\u0003\u03b8\u01dc\u0000\u076a\u0766\u0001\u0000\u0000\u0000\u076a\u0768"+
		"\u0001\u0000\u0000\u0000\u076b\u076d\u0001\u0000\u0000\u0000\u076c\u0712"+
		"\u0001\u0000\u0000\u0000\u076c\u071b\u0001\u0000\u0000\u0000\u076c\u072c"+
		"\u0001\u0000\u0000\u0000\u076c\u073d\u0001\u0000\u0000\u0000\u076c\u074a"+
		"\u0001\u0000\u0000\u0000\u076c\u0760\u0001\u0000\u0000\u0000\u076d\u076e"+
		"\u0001\u0000\u0000\u0000\u076e\u0770\u0005\u02f9\u0000\u0000\u076f\u0771"+
		"\u0005\u0259\u0000\u0000\u0770\u076f\u0001\u0000\u0000\u0000\u0770\u0771"+
		"\u0001\u0000\u0000\u0000\u0771\u0772\u0001\u0000\u0000\u0000\u0772\u0776"+
		"\u0003\u03d0\u01e8\u0000\u0773\u0774\u0005\u0336\u0000\u0000\u0774\u0775"+
		"\u0005\u012a\u0000\u0000\u0775\u0777\u0005\u01e1\u0000\u0000\u0776\u0773"+
		"\u0001\u0000\u0000\u0000\u0776\u0777\u0001\u0000\u0000\u0000\u0777M\u0001"+
		"\u0000\u0000\u0000\u0778\u077d\u0003P(\u0000\u0779\u077a\u0005\u0390\u0000"+
		"\u0000\u077a\u077c\u0003P(\u0000\u077b\u0779\u0001\u0000\u0000\u0000\u077c"+
		"\u077f\u0001\u0000\u0000\u0000\u077d\u077b\u0001\u0000\u0000\u0000\u077d"+
		"\u077e\u0001\u0000\u0000\u0000\u077eO\u0001\u0000\u0000\u0000\u077f\u077d"+
		"\u0001\u0000\u0000\u0000\u0780\u078d\u0005\u0097\u0000\u0000\u0781\u078e"+
		"\u0005\u0006\u0000\u0000\u0782\u0783\u0005\u00a4\u0000\u0000\u0783\u0784"+
		"\u0005\u00ec\u0000\u0000\u0784\u078e\u0005\u017b\u0000\u0000\u0785\u078e"+
		"\u0005\u00a5\u0000\u0000\u0786\u078e\u0005\u0158\u0000\u0000\u0787\u0788"+
		"\u0005\u01ab\u0000\u0000\u0788\u078e\u0005\u020f\u0000\u0000\u0789\u078e"+
		"\u0005\u0259\u0000\u0000\u078a\u078e\u0005\u0290\u0000\u0000\u078b\u078e"+
		"\u0005\u0319\u0000\u0000\u078c\u078e\u0005\u032d\u0000\u0000\u078d\u0781"+
		"\u0001\u0000\u0000\u0000\u078d\u0782\u0001\u0000\u0000\u0000\u078d\u0785"+
		"\u0001\u0000\u0000\u0000\u078d\u0786\u0001\u0000\u0000\u0000\u078d\u0787"+
		"\u0001\u0000\u0000\u0000\u078d\u0789\u0001\u0000\u0000\u0000\u078d\u078a"+
		"\u0001\u0000\u0000\u0000\u078d\u078b\u0001\u0000\u0000\u0000\u078d\u078c"+
		"\u0001\u0000\u0000\u0000\u078e\u07ad\u0001\u0000\u0000\u0000\u078f\u0790"+
		"\u0005)\u0000\u0000\u0790\u0791\u0005\u0188\u0000\u0000\u0791\u079e\u0005"+
		"\u020f\u0000\u0000\u0792\u0793\u0005)\u0000\u0000\u0793\u0794\u0005\u025f"+
		"\u0000\u0000\u0794\u0795\u0005\u0005\u0000\u0000\u0795\u079e\u0005\u020f"+
		"\u0000\u0000\u0796\u0797\u0005)\u0000\u0000\u0797\u0798\u0005\u028a\u0000"+
		"\u0000\u0798\u079e\u0005\u020f\u0000\u0000\u0799\u079a\u0005)\u0000\u0000"+
		"\u079a\u079e\u0005\u02db\u0000\u0000\u079b\u079c\u0005-\u0000\u0000\u079c"+
		"\u079e\u0005\u020f\u0000\u0000\u079d\u078f\u0001\u0000\u0000\u0000\u079d"+
		"\u0792\u0001\u0000\u0000\u0000\u079d\u0796\u0001\u0000\u0000\u0000\u079d"+
		"\u0799\u0001\u0000\u0000\u0000\u079d\u079b\u0001\u0000\u0000\u0000\u079e"+
		"\u07ad\u0001\u0000\u0000\u0000\u079f\u07a0\u0005\u00ed\u0000\u0000\u07a0"+
		"\u07ab\u0005\u02de\u0000\u0000\u07a1\u07a2\u0005\u0147\u0000\u0000\u07a2"+
		"\u07ab\u0005\u0290\u0000\u0000\u07a3\u07a4\u0005\u0186\u0000\u0000\u07a4"+
		"\u07ab\u0005\u012b\u0000\u0000\u07a5\u07a6\u0005\u01a3\u0000\u0000\u07a6"+
		"\u07ab\u0007\u0006\u0000\u0000\u07a7\u07a8\u0005\u01eb\u0000\u0000\u07a8"+
		"\u07a9\u0005\u0290\u0000\u0000\u07a9\u07ab\u0005\u024d\u0000\u0000\u07aa"+
		"\u079f\u0001\u0000\u0000\u0000\u07aa\u07a1\u0001\u0000\u0000\u0000\u07aa"+
		"\u07a3\u0001\u0000\u0000\u0000\u07aa\u07a5\u0001\u0000\u0000\u0000\u07aa"+
		"\u07a7\u0001\u0000\u0000\u0000\u07ab\u07ad\u0001\u0000\u0000\u0000\u07ac"+
		"\u0780\u0001\u0000\u0000\u0000\u07ac\u079d\u0001\u0000\u0000\u0000\u07ac"+
		"\u07aa\u0001\u0000\u0000\u0000\u07adQ\u0001\u0000\u0000\u0000\u07ae\u07b3"+
		"\u0003T*\u0000\u07af\u07b0\u0005\u0390\u0000\u0000\u07b0\u07b2\u0003T"+
		"*\u0000\u07b1\u07af\u0001\u0000\u0000\u0000\u07b2\u07b5\u0001\u0000\u0000"+
		"\u0000\u07b3\u07b1\u0001\u0000\u0000\u0000\u07b3\u07b4\u0001\u0000\u0000"+
		"\u0000\u07b4S\u0001\u0000\u0000\u0000\u07b5\u07b3\u0001\u0000\u0000\u0000"+
		"\u07b6\u07c0\u0005\u01a3\u0000\u0000\u07b7\u07c0\u0005\u01a2\u0000\u0000"+
		"\u07b8\u07c0\u0005\u0317\u0000\u0000\u07b9\u07c0\u0005\u01df\u0000\u0000"+
		"\u07ba\u07bb\u0005\u0097\u0000\u0000\u07bb\u07c0\u0005\u027d\u0000\u0000"+
		"\u07bc\u07bd\u0005\u0149\u0000\u0000\u07bd\u07c0\u0005\u0219\u0000\u0000"+
		"\u07be\u07c0\u0005\u031f\u0000\u0000\u07bf\u07b6\u0001\u0000\u0000\u0000"+
		"\u07bf\u07b7\u0001\u0000\u0000\u0000\u07bf\u07b8\u0001\u0000\u0000\u0000"+
		"\u07bf\u07b9\u0001\u0000\u0000\u0000\u07bf\u07ba\u0001\u0000\u0000\u0000"+
		"\u07bf\u07bc\u0001\u0000\u0000\u0000\u07bf\u07be\u0001\u0000\u0000\u0000"+
		"\u07c0U\u0001\u0000\u0000\u0000\u07c1\u07c6\u0003X,\u0000\u07c2\u07c3"+
		"\u0005\u0390\u0000\u0000\u07c3\u07c5\u0003X,\u0000\u07c4\u07c2\u0001\u0000"+
		"\u0000\u0000\u07c5\u07c8\u0001\u0000\u0000\u0000\u07c6\u07c4\u0001\u0000"+
		"\u0000\u0000\u07c6\u07c7\u0001\u0000\u0000\u0000\u07c7W\u0001\u0000\u0000"+
		"\u0000\u07c8\u07c6\u0001\u0000\u0000\u0000\u07c9\u07ea\u0005\u01a2\u0000"+
		"\u0000\u07ca\u07ea\u0005\u01a3\u0000\u0000\u07cb\u07ea\u0005\u0317\u0000"+
		"\u0000\u07cc\u07e4\u0005\u0097\u0000\u0000\u07cd\u07e5\u0005\u02d4\u0000"+
		"\u0000\u07ce\u07cf\u0005\u00f3\u0000\u0000\u07cf\u07e5\u0005\u02d4\u0000"+
		"\u0000\u07d0\u07e5\u0005\u0329\u0000\u0000\u07d1\u07d2\u0005\u018f\u0000"+
		"\u0000\u07d2\u07e5\u0005\u0329\u0000\u0000\u07d3\u07d4\u0005\u0188\u0000"+
		"\u0000\u07d4\u07e5\u0005\u020f\u0000\u0000\u07d5\u07d6\u0005\u025f\u0000"+
		"\u0000\u07d6\u07d7\u0005\u0005\u0000\u0000\u07d7\u07e5\u0005\u020f\u0000"+
		"\u0000\u07d8\u07d9\u0005\u028a\u0000\u0000\u07d9\u07e5\u0005\u020f\u0000"+
		"\u0000\u07da\u07e5\u0005\u02db\u0000\u0000\u07db\u07e5\u0005\u0288\u0000"+
		"\u0000\u07dc\u07e5\u0005\u0119\u0000\u0000\u07dd\u07e5\u0005\u021a\u0000"+
		"\u0000\u07de\u07df\u0005\u0108\u0000\u0000\u07df\u07e5\u0005\u0113\u0000"+
		"\u0000\u07e0\u07e5\u0005\u02ac\u0000\u0000\u07e1\u07e5\u0005\u020a\u0000"+
		"\u0000\u07e2\u07e5\u0005\u02c2\u0000\u0000\u07e3\u07e5\u0005\u02de\u0000"+
		"\u0000\u07e4\u07cd\u0001\u0000\u0000\u0000\u07e4\u07ce\u0001\u0000\u0000"+
		"\u0000\u07e4\u07d0\u0001\u0000\u0000\u0000\u07e4\u07d1\u0001\u0000\u0000"+
		"\u0000\u07e4\u07d3\u0001\u0000\u0000\u0000\u07e4\u07d5\u0001\u0000\u0000"+
		"\u0000\u07e4\u07d8\u0001\u0000\u0000\u0000\u07e4\u07da\u0001\u0000\u0000"+
		"\u0000\u07e4\u07db\u0001\u0000\u0000\u0000\u07e4\u07dc\u0001\u0000\u0000"+
		"\u0000\u07e4\u07dd\u0001\u0000\u0000\u0000\u07e4\u07de\u0001\u0000\u0000"+
		"\u0000\u07e4\u07e0\u0001\u0000\u0000\u0000\u07e4\u07e1\u0001\u0000\u0000"+
		"\u0000\u07e4\u07e2\u0001\u0000\u0000\u0000\u07e4\u07e3\u0001\u0000\u0000"+
		"\u0000\u07e5\u07ea\u0001\u0000\u0000\u0000\u07e6\u07e7\u0005\n\u0000\u0000"+
		"\u07e7\u07e8\u0005\u0281\u0000\u0000\u07e8\u07ea\u0005\u01e0\u0000\u0000"+
		"\u07e9\u07c9\u0001\u0000\u0000\u0000\u07e9\u07ca\u0001\u0000\u0000\u0000"+
		"\u07e9\u07cb\u0001\u0000\u0000\u0000\u07e9\u07cc\u0001\u0000\u0000\u0000"+
		"\u07e9\u07e6\u0001\u0000\u0000\u0000\u07eaY\u0001\u0000\u0000\u0000\u07eb"+
		"\u07f0\u0003\\.\u0000\u07ec\u07ed\u0005\u0390\u0000\u0000\u07ed\u07ef"+
		"\u0003\\.\u0000\u07ee\u07ec\u0001\u0000\u0000\u0000\u07ef\u07f2\u0001"+
		"\u0000\u0000\u0000\u07f0\u07ee\u0001\u0000\u0000\u0000\u07f0\u07f1\u0001"+
		"\u0000\u0000\u0000\u07f1[\u0001\u0000\u0000\u0000\u07f2\u07f0\u0001\u0000"+
		"\u0000\u0000\u07f3\u0803\u0005\u0287\u0000\u0000\u07f4\u0803\u0005\u0155"+
		"\u0000\u0000\u07f5\u0803\u0005\u0314\u0000\u0000\u07f6\u0803\u0005\u00bb"+
		"\u0000\u0000\u07f7\u0803\u0005\u0308\u0000\u0000\u07f8\u0803\u0005\u0232"+
		"\u0000\u0000\u07f9\u0803\u0005\u0317\u0000\u0000\u07fa\u07fd\u0005\u022d"+
		"\u0000\u0000\u07fb\u07fc\u0005\u0390\u0000\u0000\u07fc\u07fe\u0005\u0339"+
		"\u0000\u0000\u07fd\u07fb\u0001\u0000\u0000\u0000\u07fd\u07fe\u0001\u0000"+
		"\u0000\u0000\u07fe\u0803\u0001\u0000\u0000\u0000\u07ff\u0803\u0005\u01a3"+
		"\u0000\u0000\u0800\u0803\u0005\u01df\u0000\u0000\u0801\u0803\u0005)\u0000"+
		"\u0000\u0802\u07f3\u0001\u0000\u0000\u0000\u0802\u07f4\u0001\u0000\u0000"+
		"\u0000\u0802\u07f5\u0001\u0000\u0000\u0000\u0802\u07f6\u0001\u0000\u0000"+
		"\u0000\u0802\u07f7\u0001\u0000\u0000\u0000\u0802\u07f8\u0001\u0000\u0000"+
		"\u0000\u0802\u07f9\u0001\u0000\u0000\u0000\u0802\u07fa\u0001\u0000\u0000"+
		"\u0000\u0802\u07ff\u0001\u0000\u0000\u0000\u0802\u0800\u0001\u0000\u0000"+
		"\u0000\u0802\u0801\u0001\u0000\u0000\u0000\u0803]\u0001\u0000\u0000\u0000"+
		"\u0804\u0805\u0005\u012a\u0000\u0000\u0805\u0806\u0003`0\u0000\u0806\u0818"+
		"\u0005\u01d9\u0000\u0000\u0807\u0808\u0005\u00a5\u0000\u0000\u0808\u0819"+
		"\u0003\u03d0\u01e8\u0000\u0809\u080a\u0005\u027d\u0000\u0000\u080a\u0819"+
		"\u0003\u03d0\u01e8\u0000\u080b\u080c\u0005\u0119\u0000\u0000\u080c\u0819"+
		"\u0003\u03d0\u01e8\u0000\u080d\u080e\u0005\u02d4\u0000\u0000\u080e\u0815"+
		"\u0003\u03ea\u01f5\u0000\u080f\u0810\u0005\u0011\u0000\u0000\u0810\u0811"+
		"\u0005\u02d7\u0000\u0000\u0811\u0812\u0005\u014a\u0000\u0000\u0812\u0813"+
		"\u0005\u027d\u0000\u0000\u0813\u0815\u0003\u03b8\u01dc\u0000\u0814\u080d"+
		"\u0001\u0000\u0000\u0000\u0814\u080f\u0001\u0000\u0000\u0000\u0815\u0819"+
		"\u0001\u0000\u0000\u0000\u0816\u0817\u0005\u0329\u0000\u0000\u0817\u0819"+
		"\u0003\u03d0\u01e8\u0000\u0818\u0807\u0001\u0000\u0000\u0000\u0818\u0809"+
		"\u0001\u0000\u0000\u0000\u0818\u080b\u0001\u0000\u0000\u0000\u0818\u0814"+
		"\u0001\u0000\u0000\u0000\u0818\u0816\u0001\u0000\u0000\u0000\u0819\u081a"+
		"\u0001\u0000\u0000\u0000\u081a\u081b\u0005\u02f9\u0000\u0000\u081b\u081c"+
		"\u0005\u0290\u0000\u0000\u081c\u081d\u0003\u03d0\u01e8\u0000\u081d_\u0001"+
		"\u0000\u0000\u0000\u081e\u081f\u0007\u0007\u0000\u0000\u081fa\u0001\u0000"+
		"\u0000\u0000\u0820\u0821\u0005\u012a\u0000\u0000\u0821\u0822\u0005\u0259"+
		"\u0000\u0000\u0822\u0823\u0003d2\u0000\u0823\u0828\u0005\u02f9\u0000\u0000"+
		"\u0824\u0825\u0005\u0259\u0000\u0000\u0825\u0829\u0003d2\u0000\u0826\u0827"+
		"\u0005\u0319\u0000\u0000\u0827\u0829\u0003\u03d0\u01e8\u0000\u0828\u0824"+
		"\u0001\u0000\u0000\u0000\u0828\u0826\u0001\u0000\u0000\u0000\u0829c\u0001"+
		"\u0000\u0000\u0000\u082a\u082d\u0003f3\u0000\u082b\u082d\u0003\u03d0\u01e8"+
		"\u0000\u082c\u082a\u0001\u0000\u0000\u0000\u082c\u082b\u0001\u0000\u0000"+
		"\u0000\u082de\u0001\u0000\u0000\u0000\u082e\u082f\u0007\b\u0000\u0000"+
		"\u082fg\u0001\u0000\u0000\u0000\u0830\u0834\u0005\u017a\u0000\u0000\u0831"+
		"\u0835\u0003j5\u0000\u0832\u0835\u0003l6\u0000\u0833\u0835\u0003n7\u0000"+
		"\u0834\u0831\u0001\u0000\u0000\u0000\u0834\u0832\u0001\u0000\u0000\u0000"+
		"\u0834\u0833\u0001\u0000\u0000\u0000\u0835\u0837\u0001\u0000\u0000\u0000"+
		"\u0836\u0838\u0003\u03e2\u01f1\u0000\u0837\u0836\u0001\u0000\u0000\u0000"+
		"\u0837\u0838\u0001\u0000\u0000\u0000\u0838i\u0001\u0000\u0000\u0000\u0839"+
		"\u083a\u0005\u0387\u0000\u0000\u083a\u083c\u0005\u0399\u0000\u0000\u083b"+
		"\u083d\u0003p8\u0000\u083c\u083b\u0001\u0000\u0000\u0000\u083c\u083d\u0001"+
		"\u0000\u0000\u0000\u083dk\u0001\u0000\u0000\u0000\u083e\u0840\u0005\u0387"+
		"\u0000\u0000\u083f\u0841\u0003\u03b8\u01dc\u0000\u0840\u083f\u0001\u0000"+
		"\u0000\u0000\u0840\u0841\u0001\u0000\u0000\u0000\u0841\u0842\u0001\u0000"+
		"\u0000\u0000\u0842\u0843\u0005\u0396\u0000\u0000\u0843\u0845\u0003\u03d0"+
		"\u01e8\u0000\u0844\u0846\u0003p8\u0000\u0845\u0844\u0001\u0000\u0000\u0000"+
		"\u0845\u0846\u0001\u0000\u0000\u0000\u0846m\u0001\u0000\u0000\u0000\u0847"+
		"\u0848\u0005\u0387\u0000\u0000\u0848\u084a\u0003\u03ea\u01f5\u0000\u0849"+
		"\u084b\u0003p8\u0000\u084a\u0849\u0001\u0000\u0000\u0000\u084a\u084b\u0001"+
		"\u0000\u0000\u0000\u084bo\u0001\u0000\u0000\u0000\u084c\u0858\u0005\u0395"+
		"\u0000\u0000\u084d\u0852\u0005\u036f\u0000\u0000\u084e\u084f\u0005\u0395"+
		"\u0000\u0000\u084f\u0851\u0005\u036f\u0000\u0000\u0850\u084e\u0001\u0000"+
		"\u0000\u0000\u0851\u0854\u0001\u0000\u0000\u0000\u0852\u0850\u0001\u0000"+
		"\u0000\u0000\u0852\u0853\u0001\u0000\u0000\u0000\u0853\u0856\u0001\u0000"+
		"\u0000\u0000\u0854\u0852\u0001\u0000\u0000\u0000\u0855\u0857\u0005\u0395"+
		"\u0000\u0000\u0856\u0855\u0001\u0000\u0000\u0000\u0856\u0857\u0001\u0000"+
		"\u0000\u0000\u0857\u0859\u0001\u0000\u0000\u0000\u0858\u084d\u0001\u0000"+
		"\u0000\u0000\u0858\u0859\u0001\u0000\u0000\u0000\u0859q\u0001\u0000\u0000"+
		"\u0000\u085a\u085b\u0005\u0221\u0000\u0000\u085b\u085f\u0005\u0375\u0000"+
		"\u0000\u085c\u0860\u0003l6\u0000\u085d\u0860\u0003j5\u0000\u085e\u0860"+
		"\u0003n7\u0000\u085f\u085c\u0001\u0000\u0000\u0000\u085f\u085d\u0001\u0000"+
		"\u0000\u0000\u085f\u085e\u0001\u0000\u0000\u0000\u0860\u0864\u0001\u0000"+
		"\u0000\u0000\u0861\u0862\u0005\u01f0\u0000\u0000\u0862\u0863\u0005\u0380"+
		"\u0000\u0000\u0863\u0865\u0003\u03f0\u01f8\u0000\u0864\u0861\u0001\u0000"+
		"\u0000\u0000\u0864\u0865\u0001\u0000\u0000\u0000\u0865\u0869\u0001\u0000"+
		"\u0000\u0000\u0866\u0867\u00056\u0000\u0000\u0867\u0868\u0005\u0380\u0000"+
		"\u0000\u0868\u086a\u0003\u0208\u0104\u0000\u0869\u0866\u0001\u0000\u0000"+
		"\u0000\u0869\u086a\u0001\u0000\u0000\u0000\u086a\u086e\u0001\u0000\u0000"+
		"\u0000\u086b\u086c\u0005\u02a6\u0000\u0000\u086c\u086d\u0005\u0380\u0000"+
		"\u0000\u086d\u086f\u0007\t\u0000\u0000\u086e\u086b\u0001\u0000\u0000\u0000"+
		"\u086e\u086f\u0001\u0000\u0000\u0000\u086f\u0873\u0001\u0000\u0000\u0000"+
		"\u0870\u0871\u0005\u01ec\u0000\u0000\u0871\u0872\u0005\u0380\u0000\u0000"+
		"\u0872\u0874\u0003\u0208\u0104\u0000\u0873\u0870\u0001\u0000\u0000\u0000"+
		"\u0873\u0874\u0001\u0000\u0000\u0000\u0874s\u0001\u0000\u0000\u0000\u0875"+
		"\u0879\u0005\u023b\u0000\u0000\u0876\u087a\u0003l6\u0000\u0877\u087a\u0003"+
		"j5\u0000\u0878\u087a\u0003n7\u0000\u0879\u0876\u0001\u0000\u0000\u0000"+
		"\u0879\u0877\u0001\u0000\u0000\u0000\u0879\u0878\u0001\u0000\u0000\u0000"+
		"\u087a\u087c\u0001\u0000\u0000\u0000\u087b\u087d\u0003\u03e2\u01f1\u0000"+
		"\u087c\u087b\u0001\u0000\u0000\u0000\u087c\u087d\u0001\u0000\u0000\u0000"+
		"\u087du\u0001\u0000\u0000\u0000\u087e\u0882\u0005\u0256\u0000\u0000\u087f"+
		"\u0880\u0005\u012a\u0000\u0000\u0880\u0881\u0005\u01e1\u0000\u0000\u0881"+
		"\u0883\u0005\u0110\u0000\u0000\u0882\u087f\u0001\u0000\u0000\u0000\u0882"+
		"\u0883\u0001\u0000\u0000\u0000\u0883\u08de\u0001\u0000\u0000\u0000\u0884"+
		"\u088a\u0003P(\u0000\u0885\u0887\u0005\u0011\u0000\u0000\u0886\u0888\u0005"+
		"\u0219\u0000\u0000\u0887\u0886\u0001\u0000\u0000\u0000\u0887\u0888\u0001"+
		"\u0000\u0000\u0000\u0888\u088a\u0001\u0000\u0000\u0000\u0889\u0884\u0001"+
		"\u0000\u0000\u0000\u0889\u0885\u0001\u0000\u0000\u0000\u088a\u088b\u0001"+
		"\u0000\u0000\u0000\u088b\u088c\u0005\u01d9\u0000\u0000\u088c\u08df\u0005"+
		"\u0006\u0000\u0000\u088d\u0893\u0003R)\u0000\u088e\u0890\u0005\u0011\u0000"+
		"\u0000\u088f\u0891\u0005\u0219\u0000\u0000\u0890\u088f\u0001\u0000\u0000"+
		"\u0000\u0890\u0891\u0001\u0000\u0000\u0000\u0891\u0893\u0001\u0000\u0000"+
		"\u0000\u0892\u088d\u0001\u0000\u0000\u0000\u0892\u088e\u0001\u0000\u0000"+
		"\u0000\u0893\u0894\u0001\u0000\u0000\u0000\u0894\u089a\u0005\u01d9\u0000"+
		"\u0000\u0895\u0896\u0005\u0247\u0000\u0000\u0896\u089b\u0005\u01a3\u0000"+
		"\u0000\u0897\u089b\u0005\u032d\u0000\u0000\u0898\u089b\u0005\u00a5\u0000"+
		"\u0000\u0899\u089b\u0005\u0158\u0000\u0000\u089a\u0895\u0001\u0000\u0000"+
		"\u0000\u089a\u0897\u0001\u0000\u0000\u0000\u089a\u0898\u0001\u0000\u0000"+
		"\u0000\u089a\u0899\u0001\u0000\u0000\u0000\u089b\u089c\u0001\u0000\u0000"+
		"\u0000\u089c\u08df\u0003\u03ea\u01f5\u0000\u089d\u08a3\u0003V+\u0000\u089e"+
		"\u08a0\u0005\u0011\u0000\u0000\u089f\u08a1\u0005\u0219\u0000\u0000\u08a0"+
		"\u089f\u0001\u0000\u0000\u0000\u08a0\u08a1\u0001\u0000\u0000\u0000\u08a1"+
		"\u08a3\u0001\u0000\u0000\u0000\u08a2\u089d\u0001\u0000\u0000\u0000\u08a2"+
		"\u089e\u0001\u0000\u0000\u0000\u08a3\u08a4\u0001\u0000\u0000\u0000\u08a4"+
		"\u08ac\u0005\u01d9\u0000\u0000\u08a5\u08a6\u0005\u027d\u0000\u0000\u08a6"+
		"\u08ad\u0003\u03b8\u01dc\u0000\u08a7\u08a8\u0005\u0011\u0000\u0000\u08a8"+
		"\u08a9\u0005\u027e\u0000\u0000\u08a9\u08aa\u0005\u014a\u0000\u0000\u08aa"+
		"\u08ab\u0005\u00a5\u0000\u0000\u08ab\u08ad\u0003\u03d0\u01e8\u0000\u08ac"+
		"\u08a5\u0001\u0000\u0000\u0000\u08ac\u08a7\u0001\u0000\u0000\u0000\u08ad"+
		"\u08df\u0001\u0000\u0000\u0000\u08ae\u08b4\u0003V+\u0000\u08af\u08b1\u0005"+
		"\u0011\u0000\u0000\u08b0\u08b2\u0005\u0219\u0000\u0000\u08b1\u08b0\u0001"+
		"\u0000\u0000\u0000\u08b1\u08b2\u0001\u0000\u0000\u0000\u08b2\u08b4\u0001"+
		"\u0000\u0000\u0000\u08b3\u08ae\u0001\u0000\u0000\u0000\u08b3\u08af\u0001"+
		"\u0000\u0000\u0000\u08b4\u08b5\u0001\u0000\u0000\u0000\u08b5\u08b6\u0005"+
		"\u01d9\u0000\u0000\u08b6\u08b7\u0005\u011b\u0000\u0000\u08b7\u08b8\u0005"+
		"\u027e\u0000\u0000\u08b8\u08b9\u0005\u014a\u0000\u0000\u08b9\u08df\u0005"+
		"\u00a5\u0000\u0000\u08ba\u08c0\u0003Z-\u0000\u08bb\u08bd\u0005\u0011\u0000"+
		"\u0000\u08bc\u08be\u0005\u0219\u0000\u0000\u08bd\u08bc\u0001\u0000\u0000"+
		"\u0000\u08bd\u08be\u0001\u0000\u0000\u0000\u08be\u08c0\u0001\u0000\u0000"+
		"\u0000\u08bf\u08ba\u0001\u0000\u0000\u0000\u08bf\u08bb\u0001\u0000\u0000"+
		"\u0000\u08c0\u08c1\u0001\u0000\u0000\u0000\u08c1\u08cb\u0005\u01d9\u0000"+
		"\u0000\u08c2\u08c3\u0003\u03ba\u01dd\u0000\u08c3\u08c4\u0003\u03ea\u01f5"+
		"\u0000\u08c4\u08cc\u0001\u0000\u0000\u0000\u08c5\u08c6\u0005\u0011\u0000"+
		"\u0000\u08c6\u08c7\u0003\u0294\u014a\u0000\u08c7\u08c8\u0005\u014a\u0000"+
		"\u0000\u08c8\u08c9\u0005\u027d\u0000\u0000\u08c9\u08ca\u0003\u03b8\u01dc"+
		"\u0000\u08ca\u08cc\u0001\u0000\u0000\u0000\u08cb\u08c2\u0001\u0000\u0000"+
		"\u0000\u08cb\u08c5\u0001\u0000\u0000\u0000\u08cc\u08df\u0001\u0000\u0000"+
		"\u0000\u08cd\u08d3\u0003Z-\u0000\u08ce\u08d0\u0005\u0011\u0000\u0000\u08cf"+
		"\u08d1\u0005\u0219\u0000\u0000\u08d0\u08cf\u0001\u0000\u0000\u0000\u08d0"+
		"\u08d1\u0001\u0000\u0000\u0000\u08d1\u08d3\u0001\u0000\u0000\u0000\u08d2"+
		"\u08cd\u0001\u0000\u0000\u0000\u08d2\u08ce\u0001\u0000\u0000\u0000\u08d3"+
		"\u08d4\u0001\u0000\u0000\u0000\u08d4\u08d5\u0005\u01d9\u0000\u0000\u08d5"+
		"\u08d6\u0005\u011b\u0000\u0000\u08d6\u08d7\u0003\u0294\u014a\u0000\u08d7"+
		"\u08dc\u0005\u014a\u0000\u0000\u08d8\u08d9\u0005\u00a5\u0000\u0000\u08d9"+
		"\u08dd\u0003\u03d0\u01e8\u0000\u08da\u08db\u0005\u027d\u0000\u0000\u08db"+
		"\u08dd\u0003\u03b8\u01dc\u0000\u08dc\u08d8\u0001\u0000\u0000\u0000\u08dc"+
		"\u08da\u0001\u0000\u0000\u0000\u08dd\u08df\u0001\u0000\u0000\u0000\u08de"+
		"\u0889\u0001\u0000\u0000\u0000\u08de\u0892\u0001\u0000\u0000\u0000\u08de"+
		"\u08a2\u0001\u0000\u0000\u0000\u08de\u08b3\u0001\u0000\u0000\u0000\u08de"+
		"\u08bf\u0001\u0000\u0000\u0000\u08de\u08d2\u0001\u0000\u0000\u0000\u08df"+
		"\u08e0\u0001\u0000\u0000\u0000\u08e0\u08e2\u0005\u0117\u0000\u0000\u08e1"+
		"\u08e3\u0005\u0259\u0000\u0000\u08e2\u08e1\u0001\u0000\u0000\u0000\u08e2"+
		"\u08e3\u0001\u0000\u0000\u0000\u08e3\u08e4\u0001\u0000\u0000\u0000\u08e4"+
		"\u08e6\u0003\u03d0\u01e8\u0000\u08e5\u08e7\u0003\u02d8\u016c\u0000\u08e6"+
		"\u08e5\u0001\u0000\u0000\u0000\u08e6\u08e7\u0001\u0000\u0000\u0000\u08e7"+
		"w\u0001\u0000\u0000\u0000\u08e8\u08e9\u0005\u0256\u0000\u0000\u08e9\u08ea"+
		"\u0003`0\u0000\u08ea\u0901\u0005\u01d9\u0000\u0000\u08eb\u08ec\u0005\u00a5"+
		"\u0000\u0000\u08ec\u0902\u0003\u03d0\u01e8\u0000\u08ed\u08ee\u0005\u027d"+
		"\u0000\u0000\u08ee\u0902\u0003\u03b8\u01dc\u0000\u08ef\u08f0\u0005\u02d4"+
		"\u0000\u0000\u08f0\u08f7\u0003\u03ea\u01f5\u0000\u08f1\u08f2\u0005\u0011"+
		"\u0000\u0000\u08f2\u08f3\u0005\u02d7\u0000\u0000\u08f3\u08f4\u0005\u014a"+
		"\u0000\u0000\u08f4\u08f5\u0005\u027d\u0000\u0000\u08f5\u08f7\u0003\u03b8"+
		"\u01dc\u0000\u08f6\u08ef\u0001\u0000\u0000\u0000\u08f6\u08f1\u0001\u0000"+
		"\u0000\u0000\u08f7\u0902\u0001\u0000\u0000\u0000\u08f8\u08f9\u0005\u0329"+
		"\u0000\u0000\u08f9\u0900\u0003\u03ea\u01f5\u0000\u08fa\u08fb\u0005\u0011"+
		"\u0000\u0000\u08fb\u08fc\u0005\u032a\u0000\u0000\u08fc\u08fd\u0005\u014a"+
		"\u0000\u0000\u08fd\u08fe\u0005\u027d\u0000\u0000\u08fe\u0900\u0003\u03b8"+
		"\u01dc\u0000\u08ff\u08f8\u0001\u0000\u0000\u0000\u08ff\u08fa\u0001\u0000"+
		"\u0000\u0000\u0900\u0902\u0001\u0000\u0000\u0000\u0901\u08eb\u0001\u0000"+
		"\u0000\u0000\u0901\u08ed\u0001\u0000\u0000\u0000\u0901\u08f6\u0001\u0000"+
		"\u0000\u0000\u0901\u08ff\u0001\u0000\u0000\u0000\u0902\u0903\u0001\u0000"+
		"\u0000\u0000\u0903\u0904\u0005\u0117\u0000\u0000\u0904\u0905\u0005\u0290"+
		"\u0000\u0000\u0905\u0906\u0003\u03d0\u01e8\u0000\u0906y\u0001\u0000\u0000"+
		"\u0000\u0907\u0908\u0005\u0256\u0000\u0000\u0908\u0909\u0005\u0259\u0000"+
		"\u0000\u0909\u090a\u0003d2\u0000\u090a\u090f\u0005\u0117\u0000\u0000\u090b"+
		"\u090c\u0005\u0259\u0000\u0000\u090c\u0910\u0003d2\u0000\u090d\u090e\u0005"+
		"\u0319\u0000\u0000\u090e\u0910\u0003\u03d0\u01e8\u0000\u090f\u090b\u0001"+
		"\u0000\u0000\u0000\u090f\u090d\u0001\u0000\u0000\u0000\u0910{\u0001\u0000"+
		"\u0000\u0000\u0911\u0913\u0005\u025b\u0000\u0000\u0912\u0914\u0005\u0338"+
		"\u0000\u0000\u0913\u0912\u0001\u0000\u0000\u0000\u0913\u0914\u0001\u0000"+
		"\u0000\u0000\u0914}\u0001\u0000\u0000\u0000\u0915\u0916\u0005\u028e\u0000"+
		"\u0000\u0916\u0917\u0003\u03d0\u01e8\u0000\u0917\u0918\u0005\u0380\u0000"+
		"\u0000\u0918\u0919\u0003\u03f6\u01fb\u0000\u0919\u0932\u0001\u0000\u0000"+
		"\u0000\u091a\u091b\u0005\u028e\u0000\u0000\u091b\u091c\u0005\u038a\u0000"+
		"\u0000\u091c\u0921\u0003\u03d0\u01e8\u0000\u091d\u091e\u0005\u0390\u0000"+
		"\u0000\u091e\u0920\u0003\u03d0\u01e8\u0000\u091f\u091d\u0001\u0000\u0000"+
		"\u0000\u0920\u0923\u0001\u0000\u0000\u0000\u0921\u091f\u0001\u0000\u0000"+
		"\u0000\u0921\u0922\u0001\u0000\u0000\u0000\u0922\u0924\u0001\u0000\u0000"+
		"\u0000\u0923\u0921\u0001\u0000\u0000\u0000\u0924\u0925\u0005\u038b\u0000"+
		"\u0000\u0925\u0926\u0005\u0380\u0000\u0000\u0926\u0927\u0005\u038a\u0000"+
		"\u0000\u0927\u092c\u0003\u03f6\u01fb\u0000\u0928\u0929\u0005\u0390\u0000"+
		"\u0000\u0929\u092b\u0003\u03f6\u01fb\u0000\u092a\u0928\u0001\u0000\u0000"+
		"\u0000\u092b\u092e\u0001\u0000\u0000\u0000\u092c\u092a\u0001\u0000\u0000"+
		"\u0000\u092c\u092d\u0001\u0000\u0000\u0000\u092d\u092f\u0001\u0000\u0000"+
		"\u0000\u092e\u092c\u0001\u0000\u0000\u0000\u092f\u0930\u0005\u038b\u0000"+
		"\u0000\u0930\u0932\u0001\u0000\u0000\u0000\u0931\u0915\u0001\u0000\u0000"+
		"\u0000\u0931\u091a\u0001\u0000\u0000\u0000\u0932\u007f\u0001\u0000\u0000"+
		"\u0000\u0933\u0934\u0005\u0308\u0000\u0000\u0934\u0935\u0005\u018f\u0000"+
		"\u0000\u0935\u0936\u0005\u0329\u0000\u0000\u0936\u0937\u0003\u03ea\u01f5"+
		"\u0000\u0937\u0081\u0001\u0000\u0000\u0000\u0938\u093a\u0005\u0308\u0000"+
		"\u0000\u0939\u093b\u0005\u02d4\u0000\u0000\u093a\u0939\u0001\u0000\u0000"+
		"\u0000\u093a\u093b\u0001\u0000\u0000\u0000\u093b\u093d\u0001\u0000\u0000"+
		"\u0000\u093c\u093e\u0003\u02f8\u017c\u0000\u093d\u093c\u0001\u0000\u0000"+
		"\u0000\u093d\u093e\u0001\u0000\u0000\u0000\u093e\u093f\u0001\u0000\u0000"+
		"\u0000\u093f\u0940\u0003\u03ea\u01f5\u0000\u0940\u0083\u0001\u0000\u0000"+
		"\u0000\u0941\u0942\u0005\u0312\u0000\u0000\u0942\u0950\u0003\u03d0\u01e8"+
		"\u0000\u0943\u0944\u0005\u0312\u0000\u0000\u0944\u0945\u0005\u038a\u0000"+
		"\u0000\u0945\u094a\u0003\u03d0\u01e8\u0000\u0946\u0947\u0005\u0390\u0000"+
		"\u0000\u0947\u0949\u0003\u03d0\u01e8\u0000\u0948\u0946\u0001\u0000\u0000"+
		"\u0000\u0949\u094c\u0001\u0000\u0000\u0000\u094a\u0948\u0001\u0000\u0000"+
		"\u0000\u094a\u094b\u0001\u0000\u0000\u0000\u094b\u094d\u0001\u0000\u0000"+
		"\u0000\u094c\u094a\u0001\u0000\u0000\u0000\u094d\u094e\u0005\u038b\u0000"+
		"\u0000\u094e\u0950\u0001\u0000\u0000\u0000\u094f\u0941\u0001\u0000\u0000"+
		"\u0000\u094f\u0943\u0001\u0000\u0000\u0000\u0950\u0085\u0001\u0000\u0000"+
		"\u0000\u0951\u097a\u0003\u0092I\u0000\u0952\u097a\u0003\u0096K\u0000\u0953"+
		"\u097a\u0003\u009eO\u0000\u0954\u097a\u0003\u00a2Q\u0000\u0955\u097a\u0003"+
		"\u00a4R\u0000\u0956\u097a\u0003\u00aaU\u0000\u0957\u097a\u0003\u00acV"+
		"\u0000\u0958\u097a\u0003\u00b8\\\u0000\u0959\u097a\u0003\u00ba]\u0000"+
		"\u095a\u097a\u0003\u00bc^\u0000\u095b\u097a\u0003\u00c2a\u0000\u095c\u097a"+
		"\u0003\u00c4b\u0000\u095d\u097a\u0003\u00c6c\u0000\u095e\u097a\u0003\u00c8"+
		"d\u0000\u095f\u097a\u0003\u00f6{\u0000\u0960\u097a\u0003\u00cae\u0000"+
		"\u0961\u097a\u0003\u00ccf\u0000\u0962\u097a\u0003\u00ceg\u0000\u0963\u097a"+
		"\u0003\u00d8l\u0000\u0964\u097a\u0003\u00dam\u0000\u0965\u097a\u0003\u00dc"+
		"n\u0000\u0966\u097a\u0003\u00deo\u0000\u0967\u097a\u0003\u00e4r\u0000"+
		"\u0968\u097a\u0003\u00e8t\u0000\u0969\u097a\u0003\u00ecv\u0000\u096a\u097a"+
		"\u0003\u00eew\u0000\u096b\u097a\u0003\u00e2q\u0000\u096c\u097a\u0003\u00f2"+
		"y\u0000\u096d\u097a\u0003\u00f4z\u0000\u096e\u097a\u0003\u00f8|\u0000"+
		"\u096f\u097a\u0003\u0218\u010c\u0000\u0970\u097a\u0003\u00fa}\u0000\u0971"+
		"\u097a\u0003\u00fc~\u0000\u0972\u097a\u0003\u00fe\u007f\u0000\u0973\u097a"+
		"\u0003\u0124\u0092\u0000\u0974\u097a\u0003\u0130\u0098\u0000\u0975\u097a"+
		"\u0003\u0132\u0099\u0000\u0976\u097a\u0003\u0134\u009a\u0000\u0977\u097a"+
		"\u0003\u0136\u009b\u0000\u0978\u097a\u0003\u013a\u009d\u0000\u0979\u0951"+
		"\u0001\u0000\u0000\u0000\u0979\u0952\u0001\u0000\u0000\u0000\u0979\u0953"+
		"\u0001\u0000\u0000\u0000\u0979\u0954\u0001\u0000\u0000\u0000\u0979\u0955"+
		"\u0001\u0000\u0000\u0000\u0979\u0956\u0001\u0000\u0000\u0000\u0979\u0957"+
		"\u0001\u0000\u0000\u0000\u0979\u0958\u0001\u0000\u0000\u0000\u0979\u0959"+
		"\u0001\u0000\u0000\u0000\u0979\u095a\u0001\u0000\u0000\u0000\u0979\u095b"+
		"\u0001\u0000\u0000\u0000\u0979\u095c\u0001\u0000\u0000\u0000\u0979\u095d"+
		"\u0001\u0000\u0000\u0000\u0979\u095e\u0001\u0000\u0000\u0000\u0979\u095f"+
		"\u0001\u0000\u0000\u0000\u0979\u0960\u0001\u0000\u0000\u0000\u0979\u0961"+
		"\u0001\u0000\u0000\u0000\u0979\u0962\u0001\u0000\u0000\u0000\u0979\u0963"+
		"\u0001\u0000\u0000\u0000\u0979\u0964\u0001\u0000\u0000\u0000\u0979\u0965"+
		"\u0001\u0000\u0000\u0000\u0979\u0966\u0001\u0000\u0000\u0000\u0979\u0967"+
		"\u0001\u0000\u0000\u0000\u0979\u0968\u0001\u0000\u0000\u0000\u0979\u0969"+
		"\u0001\u0000\u0000\u0000\u0979\u096a\u0001\u0000\u0000\u0000\u0979\u096b"+
		"\u0001\u0000\u0000\u0000\u0979\u096c\u0001\u0000\u0000\u0000\u0979\u096d"+
		"\u0001\u0000\u0000\u0000\u0979\u096e\u0001\u0000\u0000\u0000\u0979\u096f"+
		"\u0001\u0000\u0000\u0000\u0979\u0970\u0001\u0000\u0000\u0000\u0979\u0971"+
		"\u0001\u0000\u0000\u0000\u0979\u0972\u0001\u0000\u0000\u0000\u0979\u0973"+
		"\u0001\u0000\u0000\u0000\u0979\u0974\u0001\u0000\u0000\u0000\u0979\u0975"+
		"\u0001\u0000\u0000\u0000\u0979\u0976\u0001\u0000\u0000\u0000\u0979\u0977"+
		"\u0001\u0000\u0000\u0000\u0979\u0978\u0001\u0000\u0000\u0000\u097a\u0087"+
		"\u0001\u0000\u0000\u0000\u097b\u097c\u0005\u001a\u0000\u0000\u097c\u097d"+
		"\u0005\u0380\u0000\u0000\u097d\u09a6\u0003\u0208\u0104\u0000\u097e\u097f"+
		"\u0005t\u0000\u0000\u097f\u0980\u0005\u0380\u0000\u0000\u0980\u09a6\u0003"+
		"\u03f0\u01f8\u0000\u0981\u0982\u0005\u00df\u0000\u0000\u0982\u0983\u0005"+
		"\u0380\u0000\u0000\u0983\u09a6\u0003\u0208\u0104\u0000\u0984\u0985\u0005"+
		"\u00f5\u0000\u0000\u0985\u0986\u0005\u0380\u0000\u0000\u0986\u09a6\u0003"+
		"\u0208\u0104\u0000\u0987\u0988\u0005\u0152\u0000\u0000\u0988\u0989\u0005"+
		"\u0380\u0000\u0000\u0989\u09a6\u0003\u03f0\u01f8\u0000\u098a\u098b\u0005"+
		"\u01ac\u0000\u0000\u098b\u098c\u0005\u0380\u0000\u0000\u098c\u09a6\u0003"+
		"\u03ca\u01e5\u0000\u098d\u098e\u0005\u0208\u0000\u0000\u098e\u098f\u0005"+
		"\u0380\u0000\u0000\u098f\u09a6\u0003\u0208\u0104\u0000\u0990\u0991\u0005"+
		"\u0213\u0000\u0000\u0991\u0992\u0005\u0380\u0000\u0000\u0992\u09a6\u0003"+
		"\u0208\u0104\u0000\u0993\u0994\u0005\u0214\u0000\u0000\u0994\u0995\u0005"+
		"\u0380\u0000\u0000\u0995\u09a6\u0003\u0208\u0104\u0000\u0996\u0997\u0005"+
		"\u0244\u0000\u0000\u0997\u0998\u0005\u0380\u0000\u0000\u0998\u09a6\u0003"+
		"\u0208\u0104\u0000\u0999\u099a\u0005\u0245\u0000\u0000\u099a\u099b\u0005"+
		"\u0380\u0000\u0000\u099b\u09a6\u0003\u0208\u0104\u0000\u099c\u099d\u0005"+
		"\u0277\u0000\u0000\u099d\u099e\u0005\u0380\u0000\u0000\u099e\u09a6\u0003"+
		"\u0400\u0200\u0000\u099f\u09a0\u0005\u028c\u0000\u0000\u09a0\u09a1\u0005"+
		"\u0380\u0000\u0000\u09a1\u09a6\u0003\u03ca\u01e5\u0000\u09a2\u09a3\u0005"+
		"\u02ab\u0000\u0000\u09a3\u09a4\u0005\u0380\u0000\u0000\u09a4\u09a6\u0003"+
		"\u0208\u0104\u0000\u09a5\u097b\u0001\u0000\u0000\u0000\u09a5\u097e\u0001"+
		"\u0000\u0000\u0000\u09a5\u0981\u0001\u0000\u0000\u0000\u09a5\u0984\u0001"+
		"\u0000\u0000\u0000\u09a5\u0987\u0001\u0000\u0000\u0000\u09a5\u098a\u0001"+
		"\u0000\u0000\u0000\u09a5\u098d\u0001\u0000\u0000\u0000\u09a5\u0990\u0001"+
		"\u0000\u0000\u0000\u09a5\u0993\u0001\u0000\u0000\u0000\u09a5\u0996\u0001"+
		"\u0000\u0000\u0000\u09a5\u0999\u0001\u0000\u0000\u0000\u09a5\u099c\u0001"+
		"\u0000\u0000\u0000\u09a5\u099f\u0001\u0000\u0000\u0000\u09a5\u09a2\u0001"+
		"\u0000\u0000\u0000\u09a6\u0089\u0001\u0000\u0000\u0000\u09a7\u09a8\u0005"+
		"\u00a7\u0000\u0000\u09a8\u09a9\u0005\u0380\u0000\u0000\u09a9\u09c1\u0003"+
		"\u03f0\u01f8\u0000\u09aa\u09ab\u0005\u0193\u0000\u0000\u09ab\u09ac\u0005"+
		"\u0380\u0000\u0000\u09ac\u09c1\u0003\u03f0\u01f8\u0000\u09ad\u09c1\u0003"+
		"\u008cF\u0000\u09ae\u09af\u0005\u0192\u0000\u0000\u09af\u09b0\u0005\u0380"+
		"\u0000\u0000\u09b0\u09c1\u0003\u03f0\u01f8\u0000\u09b1\u09b2\u0005\u01ac"+
		"\u0000\u0000\u09b2\u09b3\u0005\u0380\u0000\u0000\u09b3\u09c1\u0003\u03ca"+
		"\u01e5\u0000\u09b4\u09b5\u0005\u020c\u0000\u0000\u09b5\u09b6\u0005\u0380"+
		"\u0000\u0000\u09b6\u09c1\u0003\u0208\u0104\u0000\u09b7\u09b8\u0005\u028c"+
		"\u0000\u0000\u09b8\u09b9\u0005\u0380\u0000\u0000\u09b9\u09c1\u0003\u03ca"+
		"\u01e5\u0000\u09ba\u09bb\u0005\u02b7\u0000\u0000\u09bb\u09bc\u0005\u0380"+
		"\u0000\u0000\u09bc\u09c1\u0003\u03f0\u01f8\u0000\u09bd\u09be\u0005\u02b8"+
		"\u0000\u0000\u09be\u09bf\u0005\u0380\u0000\u0000\u09bf\u09c1\u0003\u03f0"+
		"\u01f8\u0000\u09c0\u09a7\u0001\u0000\u0000\u0000\u09c0\u09aa\u0001\u0000"+
		"\u0000\u0000\u09c0\u09ad\u0001\u0000\u0000\u0000\u09c0\u09ae\u0001\u0000"+
		"\u0000\u0000\u09c0\u09b1\u0001\u0000\u0000\u0000\u09c0\u09b4\u0001\u0000"+
		"\u0000\u0000\u09c0\u09b7\u0001\u0000\u0000\u0000\u09c0\u09ba\u0001\u0000"+
		"\u0000\u0000\u09c0\u09bd\u0001\u0000\u0000\u0000\u09c1\u008b\u0001\u0000"+
		"\u0000\u0000\u09c2\u09c3\u0005\u00b1\u0000\u0000\u09c3\u09c4\u0005\u0380"+
		"\u0000\u0000\u09c4\u09c5\u0003\u03ca\u01e5\u0000\u09c5\u008d\u0001\u0000"+
		"\u0000\u0000\u09c6\u09c7\u0005\u01f7\u0000\u0000\u09c7\u09c8\u0005\u0380"+
		"\u0000\u0000\u09c8\u09fb\u0003\u03ca\u01e5\u0000\u09c9\u09ca\u0005\u0180"+
		"\u0000\u0000\u09ca\u09cb\u0005\u0380\u0000\u0000\u09cb\u09fb\u0003\u03ca"+
		"\u01e5\u0000\u09cc\u09cd\u0005\u00c6\u0000\u0000\u09cd\u09ce\u0005\u0380"+
		"\u0000\u0000\u09ce\u09fb\u0003\u03ca\u01e5\u0000\u09cf\u09d0\u0005\u010d"+
		"\u0000\u0000\u09d0\u09d1\u0005\u0380\u0000\u0000\u09d1\u09fb\u0003\u03ca"+
		"\u01e5\u0000\u09d2\u09d3\u0005\u0199\u0000\u0000\u09d3\u09d4\u0005\u0380"+
		"\u0000\u0000\u09d4\u09fb\u0003\u03ca\u01e5\u0000\u09d5\u09d6\u0005\u016f"+
		"\u0000\u0000\u09d6\u09d7\u0005\u0380\u0000\u0000\u09d7\u09fb\u0003\u03ca"+
		"\u01e5\u0000\u09d8\u09d9\u0005\u00cf\u0000\u0000\u09d9\u09da\u0005\u0380"+
		"\u0000\u0000\u09da\u09fb\u0003\u03ca\u01e5\u0000\u09db\u09dc\u0005\u01a8"+
		"\u0000\u0000\u09dc\u09dd\u0005\u0380\u0000\u0000\u09dd\u09fb\u0003\u0208"+
		"\u0104\u0000\u09de\u09df\u0005\u00c3\u0000\u0000\u09df\u09e0\u0005\u0380"+
		"\u0000\u0000\u09e0\u09fb\u0003\u0208\u0104\u0000\u09e1\u09e2\u0005\u00af"+
		"\u0000\u0000\u09e2\u09e3\u0005\u0380\u0000\u0000\u09e3\u09fb\u0003\u03f0"+
		"\u01f8\u0000\u09e4\u09e5\u0005\u019c\u0000\u0000\u09e5\u09e6\u0005\u0380"+
		"\u0000\u0000\u09e6\u09fb\u0003\u03f0\u01f8\u0000\u09e7\u09e8\u0005\u00b4"+
		"\u0000\u0000\u09e8\u09e9\u0005\u0380\u0000\u0000\u09e9\u09fb\u0003\u03ca"+
		"\u01e5\u0000\u09ea\u09eb\u0005\u00b2\u0000\u0000\u09eb\u09ec\u0005\u0380"+
		"\u0000\u0000\u09ec\u09fb\u0003\u03ca\u01e5\u0000\u09ed\u09ee\u0005\u00b3"+
		"\u0000\u0000\u09ee\u09ef\u0005\u0380\u0000\u0000\u09ef\u09fb\u0003\u03ca"+
		"\u01e5\u0000\u09f0\u09f1\u0005\u019b\u0000\u0000\u09f1\u09f2\u0005\u0380"+
		"\u0000\u0000\u09f2\u09fb\u0003\u03f0\u01f8\u0000\u09f3\u09f4\u0005\u0263"+
		"\u0000\u0000\u09f4\u09f5\u0005\u0380\u0000\u0000\u09f5\u09fb\u0003\u03ca"+
		"\u01e5\u0000\u09f6\u09f7\u0005\u0264\u0000\u0000\u09f7\u09f8\u0005\u0380"+
		"\u0000\u0000\u09f8\u09fb\u0003\u03ca\u01e5\u0000\u09f9\u09fb\u0003\u02f2"+
		"\u0179\u0000\u09fa\u09c6\u0001\u0000\u0000\u0000\u09fa\u09c9\u0001\u0000"+
		"\u0000\u0000\u09fa\u09cc\u0001\u0000\u0000\u0000\u09fa\u09cf\u0001\u0000"+
		"\u0000\u0000\u09fa\u09d2\u0001\u0000\u0000\u0000\u09fa\u09d5\u0001\u0000"+
		"\u0000\u0000\u09fa\u09d8\u0001\u0000\u0000\u0000\u09fa\u09db\u0001\u0000"+
		"\u0000\u0000\u09fa\u09de\u0001\u0000\u0000\u0000\u09fa\u09e1\u0001\u0000"+
		"\u0000\u0000\u09fa\u09e4\u0001\u0000\u0000\u0000\u09fa\u09e7\u0001\u0000"+
		"\u0000\u0000\u09fa\u09ea\u0001\u0000\u0000\u0000\u09fa\u09ed\u0001\u0000"+
		"\u0000\u0000\u09fa\u09f0\u0001\u0000\u0000\u0000\u09fa\u09f3\u0001\u0000"+
		"\u0000\u0000\u09fa\u09f6\u0001\u0000\u0000\u0000\u09fa\u09f9\u0001\u0000"+
		"\u0000\u0000\u09fb\u008f\u0001\u0000\u0000\u0000\u09fc\u09fd\u0005\u0003"+
		"\u0000\u0000\u09fd\u09fe\u0005\u0380\u0000\u0000\u09fe\u0a5a\u0003\u0208"+
		"\u0104\u0000\u09ff\u0a00\u00053\u0000\u0000\u0a00\u0a01\u0005\u0380\u0000"+
		"\u0000\u0a01\u0a5a\u0003\u0208\u0104\u0000\u0a02\u0a03\u0005W\u0000\u0000"+
		"\u0a03\u0a04\u0005\u0380\u0000\u0000\u0a04\u0a5a\u0003\u03ca\u01e5\u0000"+
		"\u0a05\u0a06\u0005X\u0000\u0000\u0a06\u0a07\u0005\u0380\u0000\u0000\u0a07"+
		"\u0a5a\u0003\u03ca\u01e5\u0000\u0a08\u0a09\u0005\u00ab\u0000\u0000\u0a09"+
		"\u0a0a\u0005\u0380\u0000\u0000\u0a0a\u0a5a\u0003\u03ca\u01e5\u0000\u0a0b"+
		"\u0a0c\u0005\u00ac\u0000\u0000\u0a0c\u0a0d\u0005\u0380\u0000\u0000\u0a0d"+
		"\u0a5a\u0003\u03ca\u01e5\u0000\u0a0e\u0a0f\u0005\u00e5\u0000\u0000\u0a0f"+
		"\u0a10\u0005\u0380\u0000\u0000\u0a10\u0a5a\u0003\u0208\u0104\u0000\u0a11"+
		"\u0a12\u0005\u00e6\u0000\u0000\u0a12\u0a13\u0005\u0380\u0000\u0000\u0a13"+
		"\u0a5a\u0003\u0208\u0104\u0000\u0a14\u0a15\u0005\u0166\u0000\u0000\u0a15"+
		"\u0a16\u0005\u0380\u0000\u0000\u0a16\u0a5a\u0003\u03f0\u01f8\u0000\u0a17"+
		"\u0a18\u0005\u017f\u0000\u0000\u0a18\u0a19\u0005\u0380\u0000\u0000\u0a19"+
		"\u0a5a\u0003\u03f0\u01f8\u0000\u0a1a\u0a1b\u0005\u0228\u0000\u0000\u0a1b"+
		"\u0a1c\u0005\u0380\u0000\u0000\u0a1c\u0a5a\u0003\u03ca\u01e5\u0000\u0a1d"+
		"\u0a1e\u0005\u0261\u0000\u0000\u0a1e\u0a1f\u0005\u0380\u0000\u0000\u0a1f"+
		"\u0a5a\u0003\u03f0\u01f8\u0000\u0a20\u0a21\u0005\u0296\u0000\u0000\u0a21"+
		"\u0a22\u0005\u0380\u0000\u0000\u0a22\u0a5a\u0003\u03ca\u01e5\u0000\u0a23"+
		"\u0a24\u0005\u02b8\u0000\u0000\u0a24\u0a25\u0005\u0380\u0000\u0000\u0a25"+
		"\u0a5a\u0003\u03f0\u01f8\u0000\u0a26\u0a27\u0005\u02c5\u0000\u0000\u0a27"+
		"\u0a28\u0005\u0380\u0000\u0000\u0a28\u0a5a\u0003\u0208\u0104\u0000\u0a29"+
		"\u0a2a\u0005\u02e8\u0000\u0000\u0a2a\u0a2b\u0005\u0380\u0000\u0000\u0a2b"+
		"\u0a5a\u0003\u0208\u0104\u0000\u0a2c\u0a2d\u0005\u02ea\u0000\u0000\u0a2d"+
		"\u0a2e\u0005\u0380\u0000\u0000\u0a2e\u0a5a\u0003\u03ca\u01e5\u0000\u0a2f"+
		"\u0a30\u0005\u02ec\u0000\u0000\u0a30\u0a31\u0005\u0380\u0000\u0000\u0a31"+
		"\u0a5a\u0003\u03ca\u01e5\u0000\u0a32\u0a33\u0005\u02ee\u0000\u0000\u0a33"+
		"\u0a34\u0005\u0380\u0000\u0000\u0a34\u0a5a\u0003\u03ca\u01e5\u0000\u0a35"+
		"\u0a36\u0005\u02ef\u0000\u0000\u0a36\u0a37\u0005\u0380\u0000\u0000\u0a37"+
		"\u0a5a\u0003\u03ca\u01e5\u0000\u0a38\u0a39\u0005\u02f0\u0000\u0000\u0a39"+
		"\u0a3a\u0005\u0380\u0000\u0000\u0a3a\u0a5a\u0003\u03ca\u01e5\u0000\u0a3b"+
		"\u0a3c\u0005\u02f2\u0000\u0000\u0a3c\u0a3d\u0005\u0380\u0000\u0000\u0a3d"+
		"\u0a5a\u0003\u03ca\u01e5\u0000\u0a3e\u0a3f\u0005\u02f5\u0000\u0000\u0a3f"+
		"\u0a40\u0005\u0380\u0000\u0000\u0a40\u0a5a\u0003\u03ca\u01e5\u0000\u0a41"+
		"\u0a42\u0005\u02f7\u0000\u0000\u0a42\u0a43\u0005\u0380\u0000\u0000\u0a43"+
		"\u0a5a\u0003\u03ca\u01e5\u0000\u0a44\u0a45\u0005\u02f8\u0000\u0000\u0a45"+
		"\u0a46\u0005\u0380\u0000\u0000\u0a46\u0a5a\u0003\u03ca\u01e5\u0000\u0a47"+
		"\u0a48\u0005\u0301\u0000\u0000\u0a48\u0a49\u0005\u0380\u0000\u0000\u0a49"+
		"\u0a5a\u0003\u03ca\u01e5\u0000\u0a4a\u0a4b\u0005\u030b\u0000\u0000\u0a4b"+
		"\u0a4c\u0005\u0380\u0000\u0000\u0a4c\u0a5a\u0003\u03f0\u01f8\u0000\u0a4d"+
		"\u0a4e\u0005\u0313\u0000\u0000\u0a4e\u0a4f\u0005\u0380\u0000\u0000\u0a4f"+
		"\u0a5a\u0003\u03ca\u01e5\u0000\u0a50\u0a51\u0005\u0320\u0000\u0000\u0a51"+
		"\u0a52\u0005\u0380\u0000\u0000\u0a52\u0a5a\u0003\u0208\u0104\u0000\u0a53"+
		"\u0a54\u0005\u0332\u0000\u0000\u0a54\u0a55\u0005\u0380\u0000\u0000\u0a55"+
		"\u0a5a\u0003\u03f0\u01f8\u0000\u0a56\u0a57\u0005\u0333\u0000\u0000\u0a57"+
		"\u0a58\u0005\u0380\u0000\u0000\u0a58\u0a5a\u0003\u03f0\u01f8\u0000\u0a59"+
		"\u09fc\u0001\u0000\u0000\u0000\u0a59\u09ff\u0001\u0000\u0000\u0000\u0a59"+
		"\u0a02\u0001\u0000\u0000\u0000\u0a59\u0a05\u0001\u0000\u0000\u0000\u0a59"+
		"\u0a08\u0001\u0000\u0000\u0000\u0a59\u0a0b\u0001\u0000\u0000\u0000\u0a59"+
		"\u0a0e\u0001\u0000\u0000\u0000\u0a59\u0a11\u0001\u0000\u0000\u0000\u0a59"+
		"\u0a14\u0001\u0000\u0000\u0000\u0a59\u0a17\u0001\u0000\u0000\u0000\u0a59"+
		"\u0a1a\u0001\u0000\u0000\u0000\u0a59\u0a1d\u0001\u0000\u0000\u0000\u0a59"+
		"\u0a20\u0001\u0000\u0000\u0000\u0a59\u0a23\u0001\u0000";
	private static final String _serializedATNSegment2 =
		"\u0000\u0000\u0a59\u0a26\u0001\u0000\u0000\u0000\u0a59\u0a29\u0001\u0000"+
		"\u0000\u0000\u0a59\u0a2c\u0001\u0000\u0000\u0000\u0a59\u0a2f\u0001\u0000"+
		"\u0000\u0000\u0a59\u0a32\u0001\u0000\u0000\u0000\u0a59\u0a35\u0001\u0000"+
		"\u0000\u0000\u0a59\u0a38\u0001\u0000\u0000\u0000\u0a59\u0a3b\u0001\u0000"+
		"\u0000\u0000\u0a59\u0a3e\u0001\u0000\u0000\u0000\u0a59\u0a41\u0001\u0000"+
		"\u0000\u0000\u0a59\u0a44\u0001\u0000\u0000\u0000\u0a59\u0a47\u0001\u0000"+
		"\u0000\u0000\u0a59\u0a4a\u0001\u0000\u0000\u0000\u0a59\u0a4d\u0001\u0000"+
		"\u0000\u0000\u0a59\u0a50\u0001\u0000\u0000\u0000\u0a59\u0a53\u0001\u0000"+
		"\u0000\u0000\u0a59\u0a56\u0001\u0000\u0000\u0000\u0a5a\u0091\u0001\u0000"+
		"\u0000\u0000\u0a5b\u0a5c\u0005\u001c\u0000\u0000\u0a5c\u0a5d\u0005\u0006"+
		"\u0000\u0000\u0a5d\u0a5e\u0003\u0146\u00a3\u0000\u0a5e\u0093\u0001\u0000"+
		"\u0000\u0000\u0a5f\u0a60\u0005\u00d3\u0000\u0000\u0a60\u0a61\u0005\u0380"+
		"\u0000\u0000\u0a61\u0a62\u0003\u0208\u0104\u0000\u0a62\u0095\u0001\u0000"+
		"\u0000\u0000\u0a63\u0a64\u0005\u001c\u0000\u0000\u0a64\u0a66\u0005\u000f"+
		"\u0000\u0000\u0a65\u0a67\u0003\u02f8\u017c\u0000\u0a66\u0a65\u0001\u0000"+
		"\u0000\u0000\u0a66\u0a67\u0001\u0000\u0000\u0000\u0a67\u0a68\u0001\u0000"+
		"\u0000\u0000\u0a68\u0a80\u0003\u03d0\u01e8\u0000\u0a69\u0a81\u0003\u0098"+
		"L\u0000\u0a6a\u0a6c\u0005\u028e\u0000\u0000\u0a6b\u0a6d\u0003\u009aM\u0000"+
		"\u0a6c\u0a6b\u0001\u0000\u0000\u0000\u0a6d\u0a6e\u0001\u0000\u0000\u0000"+
		"\u0a6e\u0a6c\u0001\u0000\u0000\u0000\u0a6e\u0a6f\u0001\u0000\u0000\u0000"+
		"\u0a6f\u0a81\u0001\u0000\u0000\u0000\u0a70\u0a72\u0005\u0312\u0000\u0000"+
		"\u0a71\u0a73\u0003\u009cN\u0000\u0a72\u0a71\u0001\u0000\u0000\u0000\u0a73"+
		"\u0a74\u0001\u0000\u0000\u0000\u0a74\u0a72\u0001\u0000\u0000\u0000\u0a74"+
		"\u0a75\u0001\u0000\u0000\u0000\u0a75\u0a81\u0001\u0000\u0000\u0000\u0a76"+
		"\u0a77\u0005\u01a2\u0000\u0000\u0a77\u0a78\u0005\u008b\u0000\u0000\u0a78"+
		"\u0a79\u0005\u00ef\u0000\u0000\u0a79\u0a7a\u0005\u038a\u0000\u0000\u0a7a"+
		"\u0a7b\u0003\u0154\u00aa\u0000\u0a7b\u0a7c\u0005\u038b\u0000\u0000\u0a7c"+
		"\u0a81\u0001\u0000\u0000\u0000\u0a7d\u0a7e\u0005\u01a2\u0000\u0000\u0a7e"+
		"\u0a7f\u0005\t\u0000\u0000\u0a7f\u0a81\u0003\u0156\u00ab\u0000\u0a80\u0a69"+
		"\u0001\u0000\u0000\u0000\u0a80\u0a6a\u0001\u0000\u0000\u0000\u0a80\u0a70"+
		"\u0001\u0000\u0000\u0000\u0a80\u0a76\u0001\u0000\u0000\u0000\u0a80\u0a7d"+
		"\u0001\u0000\u0000\u0000\u0a81\u0097\u0001\u0000\u0000\u0000\u0a82\u0a83"+
		"\u0007\n\u0000\u0000\u0a83\u0099\u0001\u0000\u0000\u0000\u0a84\u0a85\u0005"+
		"\u032d\u0000\u0000\u0a85\u0a86\u0005\u0380\u0000\u0000\u0a86\u0a8c\u0003"+
		"\u03d0\u01e8\u0000\u0a87\u0a88\u0005\u027c\u0000\u0000\u0a88\u0a89\u0005"+
		"\u0380\u0000\u0000\u0a89\u0a8c\u0003\u03ca\u01e5\u0000\u0a8a\u0a8c\u0003"+
		"\u02f2\u0179\u0000\u0a8b\u0a84\u0001\u0000\u0000\u0000\u0a8b\u0a87\u0001"+
		"\u0000\u0000\u0000\u0a8b\u0a8a\u0001\u0000\u0000\u0000\u0a8c\u009b\u0001"+
		"\u0000\u0000\u0000\u0a8d\u0a8e\u0007\u000b\u0000\u0000\u0a8e\u009d\u0001"+
		"\u0000\u0000\u0000\u0a8f\u0a91\u0005\u001c\u0000\u0000\u0a90\u0a92\u0005"+
		" \u0000\u0000\u0a91\u0a90\u0001\u0000\u0000\u0000\u0a91\u0a92\u0001\u0000"+
		"\u0000\u0000\u0a92\u0a93\u0001\u0000\u0000\u0000\u0a93\u0a95\u0005\u0158"+
		"\u0000\u0000\u0a94\u0a96\u0003\u02f8\u017c\u0000\u0a95\u0a94\u0001\u0000"+
		"\u0000\u0000\u0a95\u0a96\u0001\u0000\u0000\u0000\u0a96\u0a97\u0001\u0000"+
		"\u0000\u0000\u0a97\u0a98\u0003\u03d0\u01e8\u0000\u0a98\u0a9c\u0005\u028e"+
		"\u0000\u0000\u0a99\u0a9a\u0005\"\u0000\u0000\u0a9a\u0a9b\u0005\u0380\u0000"+
		"\u0000\u0a9b\u0a9d\u0003\u03ca\u01e5\u0000\u0a9c\u0a99\u0001\u0000\u0000"+
		"\u0000\u0a9c\u0a9d\u0001\u0000\u0000\u0000\u0a9d\u0aa1\u0001\u0000\u0000"+
		"\u0000\u0a9e\u0a9f\u0005H\u0000\u0000\u0a9f\u0aa0\u0005\u0380\u0000\u0000"+
		"\u0aa0\u0aa2\u0003\u03ca\u01e5\u0000\u0aa1\u0a9e\u0001\u0000\u0000\u0000"+
		"\u0aa1\u0aa2\u0001\u0000\u0000\u0000\u0aa2\u0aa6\u0001\u0000\u0000\u0000"+
		"\u0aa3\u0aa4\u0005%\u0000\u0000\u0aa4\u0aa5\u0005\u0380\u0000\u0000\u0aa5"+
		"\u0aa7\u0003\u03ca\u01e5\u0000\u0aa6\u0aa3\u0001\u0000\u0000\u0000\u0aa6"+
		"\u0aa7\u0001\u0000\u0000\u0000\u0aa7\u0aa9\u0001\u0000\u0000\u0000\u0aa8"+
		"\u0aaa\u0003\u0094J\u0000\u0aa9\u0aa8\u0001\u0000\u0000\u0000\u0aa9\u0aaa"+
		"\u0001\u0000\u0000\u0000\u0aaa\u0ab1\u0001\u0000\u0000\u0000\u0aab\u0aac"+
		"\u0005!\u0000\u0000\u0aac\u0aad\u0005\u0380\u0000\u0000\u0aad\u0aae\u0005"+
		"\u038a\u0000\u0000\u0aae\u0aaf\u0003\u03ca\u01e5\u0000\u0aaf\u0ab0\u0005"+
		"\u038b\u0000\u0000\u0ab0\u0ab2\u0001\u0000\u0000\u0000\u0ab1\u0aab\u0001"+
		"\u0000\u0000\u0000\u0ab1\u0ab2\u0001\u0000\u0000\u0000\u0ab2\u0ab9\u0001"+
		"\u0000\u0000\u0000\u0ab3\u0ab4\u0005#\u0000\u0000\u0ab4\u0ab5\u0005\u0380"+
		"\u0000\u0000\u0ab5\u0ab6\u0005\u038a\u0000\u0000\u0ab6\u0ab7\u0003\u03ca"+
		"\u01e5\u0000\u0ab7\u0ab8\u0005\u038b\u0000\u0000\u0ab8\u0aba\u0001\u0000"+
		"\u0000\u0000\u0ab9\u0ab3\u0001\u0000\u0000\u0000\u0ab9\u0aba\u0001\u0000"+
		"\u0000\u0000\u0aba\u0abc\u0001\u0000\u0000\u0000\u0abb\u0abd\u0003\u02f2"+
		"\u0179\u0000\u0abc\u0abb\u0001\u0000\u0000\u0000\u0abc\u0abd\u0001\u0000"+
		"\u0000\u0000\u0abd\u0ae1\u0001\u0000\u0000\u0000\u0abe\u0ac0\u0005\u001c"+
		"\u0000\u0000\u0abf\u0ac1\u0005 \u0000\u0000\u0ac0\u0abf\u0001\u0000\u0000"+
		"\u0000\u0ac0\u0ac1\u0001\u0000\u0000\u0000\u0ac1\u0ac2\u0001\u0000\u0000"+
		"\u0000\u0ac2\u0ac3\u0005\u0158\u0000\u0000\u0ac3\u0ac4\u0003\u03d0\u01e8"+
		"\u0000\u0ac4\u0ac5\u0003\u0148\u00a4\u0000\u0ac5\u0ae1\u0001\u0000\u0000"+
		"\u0000\u0ac6\u0ac8\u0005\u001c\u0000\u0000\u0ac7\u0ac9\u0005 \u0000\u0000"+
		"\u0ac8\u0ac7\u0001\u0000\u0000\u0000\u0ac8\u0ac9\u0001\u0000\u0000\u0000"+
		"\u0ac9\u0aca\u0001\u0000\u0000\u0000\u0aca\u0acb\u0005\u0158\u0000\u0000"+
		"\u0acb\u0acc\u0003\u03d0\u01e8\u0000\u0acc\u0acd\u0003\u014c\u00a6\u0000"+
		"\u0acd\u0ae1\u0001\u0000\u0000\u0000\u0ace\u0ad0\u0005\u001c\u0000\u0000"+
		"\u0acf\u0ad1\u0005 \u0000\u0000\u0ad0\u0acf\u0001\u0000\u0000\u0000\u0ad0"+
		"\u0ad1\u0001\u0000\u0000\u0000\u0ad1\u0ad2\u0001\u0000\u0000\u0000\u0ad2"+
		"\u0ad4\u0005\u0158\u0000\u0000\u0ad3\u0ad5\u0003\u02f8\u017c\u0000\u0ad4"+
		"\u0ad3\u0001\u0000\u0000\u0000\u0ad4\u0ad5\u0001\u0000\u0000\u0000\u0ad5"+
		"\u0ad6\u0001\u0000\u0000\u0000\u0ad6\u0ad7\u0003\u03d0\u01e8\u0000\u0ad7"+
		"\u0ad8\u0005\u0312\u0000\u0000\u0ad8\u0add\u0003\u00a0P\u0000\u0ad9\u0ada"+
		"\u0005\u0390\u0000\u0000\u0ada\u0adc\u0003\u00a0P\u0000\u0adb\u0ad9\u0001"+
		"\u0000\u0000\u0000\u0adc\u0adf\u0001\u0000\u0000\u0000\u0add\u0adb\u0001"+
		"\u0000\u0000\u0000\u0add\u0ade\u0001\u0000\u0000\u0000\u0ade\u0ae1\u0001"+
		"\u0000\u0000\u0000\u0adf\u0add\u0001\u0000\u0000\u0000\u0ae0\u0a8f\u0001"+
		"\u0000\u0000\u0000\u0ae0\u0abe\u0001\u0000\u0000\u0000\u0ae0\u0ac6\u0001"+
		"\u0000\u0000\u0000\u0ae0\u0ace\u0001\u0000\u0000\u0000\u0ae1\u009f\u0001"+
		"\u0000\u0000\u0000\u0ae2\u0ae3\u0007\f\u0000\u0000\u0ae3\u00a1\u0001\u0000"+
		"\u0000\u0000\u0ae4\u0ae5\u0005\u001c\u0000\u0000\u0ae5\u0ae6\u0005\u008e"+
		"\u0000\u0000\u0ae6\u0ae7\u0003\u013c\u009e\u0000\u0ae7\u00a3\u0001\u0000"+
		"\u0000\u0000\u0ae8\u0ae9\u0005\u001c\u0000\u0000\u0ae9\u0aeb\u0005\u00a5"+
		"\u0000\u0000\u0aea\u0aec\u0003\u02f8\u017c\u0000\u0aeb\u0aea\u0001\u0000"+
		"\u0000\u0000\u0aeb\u0aec\u0001\u0000\u0000\u0000\u0aec\u0aed\u0001\u0000"+
		"\u0000\u0000\u0aed\u0aee\u0003\u03d0\u01e8\u0000\u0aee\u0aef\u0005\u023c"+
		"\u0000\u0000\u0aef\u0af0\u0005\u02f9\u0000\u0000\u0af0\u0af1\u0003\u03d0"+
		"\u01e8\u0000\u0af1\u0b61\u0001\u0000\u0000\u0000\u0af2\u0af3\u0005\u001c"+
		"\u0000\u0000\u0af3\u0af5\u0005\u00a5\u0000\u0000\u0af4\u0af6\u0003\u02f8"+
		"\u017c\u0000\u0af5\u0af4\u0001\u0000\u0000\u0000\u0af5\u0af6\u0001\u0000"+
		"\u0000\u0000\u0af6\u0af7\u0001\u0000\u0000\u0000\u0af7\u0af8\u0003\u03d0"+
		"\u01e8\u0000\u0af8\u0af9\u0005\u02d0\u0000\u0000\u0af9\u0afa\u0005\u0336"+
		"\u0000\u0000\u0afa\u0afb\u0003\u03d0\u01e8\u0000\u0afb\u0b61\u0001\u0000"+
		"\u0000\u0000\u0afc\u0afd\u0005\u001c\u0000\u0000\u0afd\u0aff\u0005\u00a5"+
		"\u0000\u0000\u0afe\u0b00\u0003\u02f8\u017c\u0000\u0aff\u0afe\u0001\u0000"+
		"\u0000\u0000\u0aff\u0b00\u0001\u0000\u0000\u0000\u0b00\u0b01\u0001\u0000"+
		"\u0000\u0000\u0b01\u0b02\u0003\u03d0\u01e8\u0000\u0b02\u0b06\u0005\u028e"+
		"\u0000\u0000\u0b03\u0b04\u0005\u00a7\u0000\u0000\u0b04\u0b05\u0005\u0380"+
		"\u0000\u0000\u0b05\u0b07\u0003\u03f0\u01f8\u0000\u0b06\u0b03\u0001\u0000"+
		"\u0000\u0000\u0b06\u0b07\u0001\u0000\u0000\u0000\u0b07\u0b0b\u0001\u0000"+
		"\u0000\u0000\u0b08\u0b09\u0005\u0193\u0000\u0000\u0b09\u0b0a\u0005\u0380"+
		"\u0000\u0000\u0b0a\u0b0c\u0003\u03f0\u01f8\u0000\u0b0b\u0b08\u0001\u0000"+
		"\u0000\u0000\u0b0b\u0b0c\u0001\u0000\u0000\u0000\u0b0c\u0b0e\u0001\u0000"+
		"\u0000\u0000\u0b0d\u0b0f\u0003\u008cF\u0000\u0b0e\u0b0d\u0001\u0000\u0000"+
		"\u0000\u0b0e\u0b0f\u0001\u0000\u0000\u0000\u0b0f\u0b11\u0001\u0000\u0000"+
		"\u0000\u0b10\u0b12\u0003\u02f2\u0179\u0000\u0b11\u0b10\u0001\u0000\u0000"+
		"\u0000\u0b11\u0b12\u0001\u0000\u0000\u0000\u0b12\u0b61\u0001\u0000\u0000"+
		"\u0000\u0b13\u0b14\u0005\u001c\u0000\u0000\u0b14\u0b15\u0005\u00a5\u0000"+
		"\u0000\u0b15\u0b16\u0003\u03d0\u01e8\u0000\u0b16\u0b17\u0003\u0148\u00a4"+
		"\u0000\u0b17\u0b61\u0001\u0000\u0000\u0000\u0b18\u0b19\u0005\u001c\u0000"+
		"\u0000\u0b19\u0b1a\u0005\u00a5\u0000\u0000\u0b1a\u0b1b\u0003\u03d0\u01e8"+
		"\u0000\u0b1b\u0b1c\u0003\u014c\u00a6\u0000\u0b1c\u0b61\u0001\u0000\u0000"+
		"\u0000\u0b1d\u0b1e\u0005\u001c\u0000\u0000\u0b1e\u0b20\u0005\u00a5\u0000"+
		"\u0000\u0b1f\u0b21\u0003\u02f8\u017c\u0000\u0b20\u0b1f\u0001\u0000\u0000"+
		"\u0000\u0b20\u0b21\u0001\u0000\u0000\u0000\u0b21\u0b22\u0001\u0000\u0000"+
		"\u0000\u0b22\u0b23\u0003\u03d0\u01e8\u0000\u0b23\u0b24\u0005\u0312\u0000"+
		"\u0000\u0b24\u0b29\u0003\u00a6S\u0000\u0b25\u0b26\u0005\u0390\u0000\u0000"+
		"\u0b26\u0b28\u0003\u00a6S\u0000\u0b27\u0b25\u0001\u0000\u0000\u0000\u0b28"+
		"\u0b2b\u0001\u0000\u0000\u0000\u0b29\u0b27\u0001\u0000\u0000\u0000\u0b29"+
		"\u0b2a\u0001\u0000\u0000\u0000\u0b2a\u0b61\u0001\u0000\u0000\u0000\u0b2b"+
		"\u0b29\u0001\u0000\u0000\u0000\u0b2c\u0b2d\u0005\u001c\u0000\u0000\u0b2d"+
		"\u0b2e\u0005\u00a5\u0000\u0000\u0b2e\u0b2f\u0003\u03d0\u01e8\u0000\u0b2f"+
		"\u0b30\u0005\u00d2\u0000\u0000\u0b30\u0b31\u0005\u0241\u0000\u0000\u0b31"+
		"\u0b32\u0005\u02f9\u0000\u0000\u0b32\u0b33\u0005\b\u0000\u0000\u0b33\u0b37"+
		"\u0003\u00a8T\u0000\u0b34\u0b35\u0005\u0140\u0000\u0000\u0b35\u0b36\u0005"+
		"\u00cd\u0000\u0000\u0b36\u0b38\u0005q\u0000\u0000\u0b37\u0b34\u0001\u0000"+
		"\u0000\u0000\u0b37\u0b38\u0001\u0000\u0000\u0000\u0b38\u0b61\u0001\u0000"+
		"\u0000\u0000\u0b39\u0b3a\u0005\u001c\u0000\u0000\u0b3a\u0b3b\u0005\u00a5"+
		"\u0000\u0000\u0b3b\u0b3c\u0003\u03d0\u01e8\u0000\u0b3c\u0b3d\u0005\u00c2"+
		"\u0000\u0000\u0b3d\u0b41\u0005\u0241\u0000\u0000\u0b3e\u0b3f\u0005\u02f9"+
		"\u0000\u0000\u0b3f\u0b40\u0005\b\u0000\u0000\u0b40\u0b42\u0003\u00a8T"+
		"\u0000\u0b41\u0b3e\u0001\u0000\u0000\u0000\u0b41\u0b42\u0001\u0000\u0000"+
		"\u0000\u0b42\u0b61\u0001\u0000\u0000\u0000\u0b43\u0b44\u0005\u001c\u0000"+
		"\u0000\u0b44\u0b45\u0005\u00a5\u0000\u0000\u0b45\u0b46\u0003\u03d0\u01e8"+
		"\u0000\u0b46\u0b47\u0005\u0234\u0000\u0000\u0b47\u0b61\u0001\u0000\u0000"+
		"\u0000\u0b48\u0b49\u0005\u001c\u0000\u0000\u0b49\u0b4a\u0005\u00a5\u0000"+
		"\u0000\u0b4a\u0b4b\u0003\u03d0\u01e8\u0000\u0b4b\u0b4c\u0005\u00d2\u0000"+
		"\u0000\u0b4c\u0b4d\u0005\u0103\u0000\u0000\u0b4d\u0b4e\u0005\u02f9\u0000"+
		"\u0000\u0b4e\u0b4f\u0005\b\u0000\u0000\u0b4f\u0b50\u0003\u00a8T\u0000"+
		"\u0b50\u0b61\u0001\u0000\u0000\u0000\u0b51\u0b52\u0005\u001c\u0000\u0000"+
		"\u0b52\u0b53\u0005\u00a5\u0000\u0000\u0b53\u0b54\u0003\u03d0\u01e8\u0000"+
		"\u0b54\u0b55\u0005\u00c2\u0000\u0000\u0b55\u0b59\u0005\u0103\u0000\u0000"+
		"\u0b56\u0b57\u0005\u02f9\u0000\u0000\u0b57\u0b58\u0005\b\u0000\u0000\u0b58"+
		"\u0b5a\u0003\u00a8T\u0000\u0b59\u0b56\u0001\u0000\u0000\u0000\u0b59\u0b5a"+
		"\u0001\u0000\u0000\u0000\u0b5a\u0b61\u0001\u0000\u0000\u0000\u0b5b\u0b5c"+
		"\u0005\u001c\u0000\u0000\u0b5c\u0b5d\u0005\u00a5\u0000\u0000\u0b5d\u0b5e"+
		"\u0003\u03d0\u01e8\u0000\u0b5e\u0b5f\u0005\u0216\u0000\u0000\u0b5f\u0b61"+
		"\u0001\u0000\u0000\u0000\u0b60\u0ae8\u0001\u0000\u0000\u0000\u0b60\u0af2"+
		"\u0001\u0000\u0000\u0000\u0b60\u0afc\u0001\u0000\u0000\u0000\u0b60\u0b13"+
		"\u0001\u0000\u0000\u0000\u0b60\u0b18\u0001\u0000\u0000\u0000\u0b60\u0b1d"+
		"\u0001\u0000\u0000\u0000\u0b60\u0b2c\u0001\u0000\u0000\u0000\u0b60\u0b39"+
		"\u0001\u0000\u0000\u0000\u0b60\u0b43\u0001\u0000\u0000\u0000\u0b60\u0b48"+
		"\u0001\u0000\u0000\u0000\u0b60\u0b51\u0001\u0000\u0000\u0000\u0b60\u0b5b"+
		"\u0001\u0000\u0000\u0000\u0b61\u00a5\u0001\u0000\u0000\u0000\u0b62\u0b63"+
		"\u0007\r\u0000\u0000\u0b63\u00a7\u0001\u0000\u0000\u0000\u0b64\u0b69\u0003"+
		"\u03b6\u01db\u0000\u0b65\u0b66\u0005\u0390\u0000\u0000\u0b66\u0b68\u0003"+
		"\u03b6\u01db\u0000\u0b67\u0b65\u0001\u0000\u0000\u0000\u0b68\u0b6b\u0001"+
		"\u0000\u0000\u0000\u0b69\u0b67\u0001\u0000\u0000\u0000\u0b69\u0b6a\u0001"+
		"\u0000\u0000\u0000\u0b6a\u00a9\u0001\u0000\u0000\u0000\u0b6b\u0b69\u0001"+
		"\u0000\u0000\u0000\u0b6c\u0b6d\u0005\u001c\u0000\u0000\u0b6d\u0b6e\u0005"+
		"\u00cb\u0000\u0000\u0b6e\u0b70\u0005\u02d4\u0000\u0000\u0b6f\u0b71\u0003"+
		"\u02f8\u017c\u0000\u0b70\u0b6f\u0001\u0000\u0000\u0000\u0b70\u0b71\u0001"+
		"\u0000\u0000\u0000\u0b71\u0b72\u0001\u0000\u0000\u0000\u0b72\u0b7b\u0003"+
		"\u03ea\u01f5\u0000\u0b73\u0b7c\u0003\u0098L\u0000\u0b74\u0b7c\u0005\u0234"+
		"\u0000\u0000\u0b75\u0b77\u0005\u028e\u0000\u0000\u0b76\u0b78\u0003\u016e"+
		"\u00b7\u0000\u0b77\u0b76\u0001\u0000\u0000\u0000\u0b78\u0b79\u0001\u0000"+
		"\u0000\u0000\u0b79\u0b77\u0001\u0000\u0000\u0000\u0b79\u0b7a\u0001\u0000"+
		"\u0000\u0000\u0b7a\u0b7c\u0001\u0000\u0000\u0000\u0b7b\u0b73\u0001\u0000"+
		"\u0000\u0000\u0b7b\u0b74\u0001\u0000\u0000\u0000\u0b7b\u0b75\u0001\u0000"+
		"\u0000\u0000\u0b7c\u0bba\u0001\u0000\u0000\u0000\u0b7d\u0b7e\u0005\u001c"+
		"\u0000\u0000\u0b7e\u0b7f\u0005\u00cb\u0000\u0000\u0b7f\u0b81\u0005\u02d4"+
		"\u0000\u0000\u0b80\u0b82\u0003\u02f8\u017c\u0000\u0b81\u0b80\u0001\u0000"+
		"\u0000\u0000\u0b81\u0b82\u0001\u0000\u0000\u0000\u0b82\u0b83\u0001\u0000"+
		"\u0000\u0000\u0b83\u0b88\u0003\u03ea\u01f5\u0000\u0b84\u0b85\u0005\u02d0"+
		"\u0000\u0000\u0b85\u0b89\u0005\u0336\u0000\u0000\u0b86\u0b87\u0005\u023c"+
		"\u0000\u0000\u0b87\u0b89\u0005\u02f9\u0000\u0000\u0b88\u0b84\u0001\u0000"+
		"\u0000\u0000\u0b88\u0b86\u0001\u0000\u0000\u0000\u0b89\u0b8a\u0001\u0000"+
		"\u0000\u0000\u0b8a\u0b8b\u0003\u03ea\u01f5\u0000\u0b8b\u0bba\u0001\u0000"+
		"\u0000\u0000\u0b8c\u0b8d\u0005\u001c\u0000\u0000\u0b8d\u0b8e\u0005\u00cb"+
		"\u0000\u0000\u0b8e\u0b90\u0005\u02d4\u0000\u0000\u0b8f\u0b91\u0003\u02f8"+
		"\u017c\u0000\u0b90\u0b8f\u0001\u0000\u0000\u0000\u0b90\u0b91\u0001\u0000"+
		"\u0000\u0000\u0b91\u0b92\u0001\u0000\u0000\u0000\u0b92\u0b95\u0003\u03ea"+
		"\u01f5\u0000\u0b93\u0b96\u0003\u0148\u00a4\u0000\u0b94\u0b96\u0003\u014c"+
		"\u00a6\u0000\u0b95\u0b93\u0001\u0000\u0000\u0000\u0b95\u0b94\u0001\u0000"+
		"\u0000\u0000\u0b96\u0bba\u0001\u0000\u0000\u0000\u0b97\u0b98\u0005\u001c"+
		"\u0000\u0000\u0b98\u0b99\u0005\u00cb\u0000\u0000\u0b99\u0b9b\u0005\u02d4"+
		"\u0000\u0000\u0b9a\u0b9c\u0003\u02f8\u017c\u0000\u0b9b\u0b9a\u0001\u0000"+
		"\u0000\u0000\u0b9b\u0b9c\u0001\u0000\u0000\u0000\u0b9c\u0b9d\u0001\u0000"+
		"\u0000\u0000\u0b9d\u0b9e\u0003\u03ea\u01f5\u0000\u0b9e\u0b9f\u0003\u0120"+
		"\u0090\u0000\u0b9f\u0bba\u0001\u0000\u0000\u0000\u0ba0\u0ba1\u0005\u001c"+
		"\u0000\u0000\u0ba1\u0ba2\u0005\u00cb\u0000\u0000\u0ba2\u0ba4\u0005\u02d4"+
		"\u0000\u0000\u0ba3\u0ba5\u0003\u02f8\u017c\u0000\u0ba4\u0ba3\u0001\u0000"+
		"\u0000\u0000\u0ba4\u0ba5\u0001\u0000\u0000\u0000\u0ba5\u0ba6\u0001\u0000"+
		"\u0000\u0000\u0ba6\u0ba7\u0003\u03ea\u01f5\u0000\u0ba7\u0ba8\u0005\u0312"+
		"\u0000\u0000\u0ba8\u0bad\u0003\u0170\u00b8\u0000\u0ba9\u0baa\u0005\u0390"+
		"\u0000\u0000\u0baa\u0bac\u0003\u0170\u00b8\u0000\u0bab\u0ba9\u0001\u0000"+
		"\u0000\u0000\u0bac\u0baf\u0001\u0000\u0000\u0000\u0bad\u0bab\u0001\u0000"+
		"\u0000\u0000\u0bad\u0bae\u0001\u0000\u0000\u0000\u0bae\u0bba\u0001\u0000"+
		"\u0000\u0000\u0baf\u0bad\u0001\u0000\u0000\u0000\u0bb0\u0bb1\u0005\u001c"+
		"\u0000\u0000\u0bb1\u0bb2\u0005\u00cb\u0000\u0000\u0bb2\u0bb4\u0005\u02d4"+
		"\u0000\u0000\u0bb3\u0bb5\u0003\u02f8\u017c\u0000\u0bb4\u0bb3\u0001\u0000"+
		"\u0000\u0000\u0bb4\u0bb5\u0001\u0000\u0000\u0000\u0bb5\u0bb6\u0001\u0000"+
		"\u0000\u0000\u0bb6\u0bb7\u0003\u03ea\u01f5\u0000\u0bb7\u0bb8\u0003\u0100"+
		"\u0080\u0000\u0bb8\u0bba\u0001\u0000\u0000\u0000\u0bb9\u0b6c\u0001\u0000"+
		"\u0000\u0000\u0bb9\u0b7d\u0001\u0000\u0000\u0000\u0bb9\u0b8c\u0001\u0000"+
		"\u0000\u0000\u0bb9\u0b97\u0001\u0000\u0000\u0000\u0bb9\u0ba0\u0001\u0000"+
		"\u0000\u0000\u0bb9\u0bb0\u0001\u0000\u0000\u0000\u0bba\u00ab\u0001\u0000"+
		"\u0000\u0000\u0bbb\u0bbc\u0005\u001c\u0000\u0000\u0bbc\u0bbd\u0005\u00f3"+
		"\u0000\u0000\u0bbd\u0bbf\u0005\u02d4\u0000\u0000\u0bbe\u0bc0\u0003\u02f8"+
		"\u017c\u0000\u0bbf\u0bbe\u0001\u0000\u0000\u0000\u0bbf\u0bc0\u0001\u0000"+
		"\u0000\u0000\u0bc0\u0bc1\u0001\u0000\u0000\u0000\u0bc1\u0bc2\u0003\u03ea"+
		"\u01f5\u0000\u0bc2\u0bc4\u0005\u0234\u0000\u0000\u0bc3\u0bc5\u0003\u03ca"+
		"\u01e5\u0000\u0bc4\u0bc3\u0001\u0000\u0000\u0000\u0bc4\u0bc5\u0001\u0000"+
		"\u0000\u0000\u0bc5\u0c21\u0001\u0000\u0000\u0000\u0bc6\u0bc7\u0005\u001c"+
		"\u0000\u0000\u0bc7\u0bc8\u0005\u00f3\u0000\u0000\u0bc8\u0bca\u0005\u02d4"+
		"\u0000\u0000\u0bc9\u0bcb\u0003\u02f8\u017c\u0000\u0bca\u0bc9\u0001\u0000"+
		"\u0000\u0000\u0bca\u0bcb\u0001\u0000\u0000\u0000\u0bcb\u0bcc\u0001\u0000"+
		"\u0000\u0000\u0bcc\u0bcd\u0003\u03ea\u01f5\u0000\u0bcd\u0bce\u0005\n\u0000"+
		"\u0000\u0bce\u0bcf\u0005\u0109\u0000\u0000\u0bcf\u0bd0\u0005\u038a\u0000"+
		"\u0000\u0bd0\u0bd1\u0003\u03cc\u01e6\u0000\u0bd1\u0bd2\u0005\u038b\u0000"+
		"\u0000\u0bd2\u0c21\u0001\u0000\u0000\u0000\u0bd3\u0bd4\u0005\u001c\u0000"+
		"\u0000\u0bd4\u0bd5\u0005\u00f3\u0000\u0000\u0bd5\u0bd7\u0005\u02d4\u0000"+
		"\u0000\u0bd6\u0bd8\u0003\u02f8\u017c\u0000\u0bd7\u0bd6\u0001\u0000\u0000"+
		"\u0000\u0bd7\u0bd8\u0001\u0000\u0000\u0000\u0bd8\u0bd9\u0001\u0000\u0000"+
		"\u0000\u0bd9\u0bda\u0003\u03ea\u01f5\u0000\u0bda\u0bdb\u0005\u023b\u0000"+
		"\u0000\u0bdb\u0bdc\u0005\u0109\u0000\u0000\u0bdc\u0bdd\u0005\u038a\u0000"+
		"\u0000\u0bdd\u0bde\u0003\u03cc\u01e6\u0000\u0bde\u0bdf\u0005\u038b\u0000"+
		"\u0000\u0bdf\u0c21\u0001\u0000\u0000\u0000\u0be0\u0be1\u0005\u001c\u0000"+
		"\u0000\u0be1\u0be2\u0005\u00f3\u0000\u0000\u0be2\u0be4\u0005\u02d4\u0000"+
		"\u0000\u0be3\u0be5\u0003\u02f8\u017c\u0000\u0be4\u0be3\u0001\u0000\u0000"+
		"\u0000\u0be4\u0be5\u0001\u0000\u0000\u0000\u0be5\u0be6\u0001\u0000\u0000"+
		"\u0000\u0be6\u0be7\u0003\u03ea\u01f5\u0000\u0be7\u0beb\u0005\u028e\u0000"+
		"\u0000\u0be8\u0be9\u00059\u0000\u0000\u0be9\u0bea\u0005\u0380\u0000\u0000"+
		"\u0bea\u0bec\u0003\u0208\u0104\u0000\u0beb\u0be8\u0001\u0000\u0000\u0000"+
		"\u0beb\u0bec\u0001\u0000\u0000\u0000\u0bec\u0bee\u0001\u0000\u0000\u0000"+
		"\u0bed\u0bef\u0003\u014a\u00a5\u0000\u0bee\u0bed\u0001\u0000\u0000\u0000"+
		"\u0bee\u0bef\u0001\u0000\u0000\u0000\u0bef\u0c21\u0001\u0000\u0000\u0000"+
		"\u0bf0\u0bf1\u0005\u001c\u0000\u0000\u0bf1\u0bf2\u0005\u00f3\u0000\u0000"+
		"\u0bf2\u0bf4\u0005\u02d4\u0000\u0000\u0bf3\u0bf5\u0003\u02f8\u017c\u0000"+
		"\u0bf4\u0bf3\u0001\u0000\u0000\u0000\u0bf4\u0bf5\u0001\u0000\u0000\u0000"+
		"\u0bf5\u0bf6\u0001\u0000\u0000\u0000\u0bf6\u0bf7\u0003\u03ea\u01f5\u0000"+
		"\u0bf7\u0bf8\u0003\u014c\u00a6\u0000\u0bf8\u0c21\u0001\u0000\u0000\u0000"+
		"\u0bf9\u0bfa\u0005\u001c\u0000\u0000\u0bfa\u0bfb\u0005\u00f3\u0000\u0000"+
		"\u0bfb\u0bfc\u0005\u02d4\u0000\u0000\u0bfc\u0bfe\u0003\u03ea\u01f5\u0000"+
		"\u0bfd\u0bff\u0003\u02f8\u017c\u0000\u0bfe\u0bfd\u0001\u0000\u0000\u0000"+
		"\u0bfe\u0bff\u0001\u0000\u0000\u0000\u0bff\u0c00\u0001\u0000\u0000\u0000"+
		"\u0c00\u0c01\u0005\n\u0000\u0000\u0c01\u0c02\u0005\u01f5\u0000\u0000\u0c02"+
		"\u0c03\u0005\u038a\u0000\u0000\u0c03\u0c04\u0003\u03e4\u01f2\u0000\u0c04"+
		"\u0c05\u0005\u0380\u0000\u0000\u0c05\u0c0d\u0003\u03ca\u01e5\u0000\u0c06"+
		"\u0c07\u0005\u0390\u0000\u0000\u0c07\u0c08\u0003\u03e4\u01f2\u0000\u0c08"+
		"\u0c09\u0005\u0380\u0000\u0000\u0c09\u0c0a\u0003\u03ca\u01e5\u0000\u0c0a"+
		"\u0c0c\u0001\u0000\u0000\u0000\u0c0b\u0c06\u0001\u0000\u0000\u0000\u0c0c"+
		"\u0c0f\u0001\u0000\u0000\u0000\u0c0d\u0c0b\u0001\u0000\u0000\u0000\u0c0d"+
		"\u0c0e\u0001\u0000\u0000\u0000\u0c0e\u0c10\u0001\u0000\u0000\u0000\u0c0f"+
		"\u0c0d\u0001\u0000\u0000\u0000\u0c10\u0c11\u0005\u038b\u0000\u0000\u0c11"+
		"\u0c12\u0005\u017d\u0000\u0000\u0c12\u0c13\u0003\u03ca\u01e5\u0000\u0c13"+
		"\u0c21\u0001\u0000\u0000\u0000\u0c14\u0c15\u0005\u001c\u0000\u0000\u0c15"+
		"\u0c16\u0005\u00f3\u0000\u0000\u0c16\u0c17\u0005\u02d4\u0000\u0000\u0c17"+
		"\u0c19\u0003\u03ea\u01f5\u0000\u0c18\u0c1a\u0003\u02f8\u017c\u0000\u0c19"+
		"\u0c18\u0001\u0000\u0000\u0000\u0c19\u0c1a\u0001\u0000\u0000\u0000\u0c1a"+
		"\u0c1b\u0001\u0000\u0000\u0000\u0c1b\u0c1c\u0005\u00ca\u0000\u0000\u0c1c"+
		"\u0c1d\u0005\u01f5\u0000\u0000\u0c1d\u0c1e\u0005\u017d\u0000\u0000\u0c1e"+
		"\u0c1f\u0003\u03ca\u01e5\u0000\u0c1f\u0c21\u0001\u0000\u0000\u0000\u0c20"+
		"\u0bbb\u0001\u0000\u0000\u0000\u0c20\u0bc6\u0001\u0000\u0000\u0000\u0c20"+
		"\u0bd3\u0001\u0000\u0000\u0000\u0c20\u0be0\u0001\u0000\u0000\u0000\u0c20"+
		"\u0bf0\u0001\u0000\u0000\u0000\u0c20\u0bf9\u0001\u0000\u0000\u0000\u0c20"+
		"\u0c14\u0001\u0000\u0000\u0000\u0c21\u00ad\u0001\u0000\u0000\u0000\u0c22"+
		"\u0c23\u0005\u0140\u0000\u0000\u0c23\u0c24\u0005\u00cd\u0000\u0000\u0c24"+
		"\u0c25\u0005q\u0000\u0000\u0c25\u00af\u0001\u0000\u0000\u0000\u0c26\u0c27"+
		"\u0005\u0242\u0000\u0000\u0c27\u0c28\u0005\u0380\u0000\u0000\u0c28\u0c29"+
		"\u0003\u03ca\u01e5\u0000\u0c29\u00b1\u0001\u0000\u0000\u0000\u0c2a\u0c2f"+
		"\u0003\u03d0\u01e8\u0000\u0c2b\u0c2c\u0005\u0390\u0000\u0000\u0c2c\u0c2e"+
		"\u0003\u03d0\u01e8\u0000\u0c2d\u0c2b\u0001\u0000\u0000\u0000\u0c2e\u0c31"+
		"\u0001\u0000\u0000\u0000\u0c2f\u0c2d\u0001\u0000\u0000\u0000\u0c2f\u0c30"+
		"\u0001\u0000\u0000\u0000\u0c30\u00b3\u0001\u0000\u0000\u0000\u0c31\u0c2f"+
		"\u0001\u0000\u0000\u0000\u0c32\u0c37\u0003\u03d0\u01e8\u0000\u0c33\u0c34"+
		"\u0005\u0390\u0000\u0000\u0c34\u0c36\u0003\u03d0\u01e8\u0000\u0c35\u0c33"+
		"\u0001\u0000\u0000\u0000\u0c36\u0c39\u0001\u0000\u0000\u0000\u0c37\u0c35"+
		"\u0001\u0000\u0000\u0000\u0c37\u0c38\u0001\u0000\u0000\u0000\u0c38\u00b5"+
		"\u0001\u0000\u0000\u0000\u0c39\u0c37\u0001\u0000\u0000\u0000\u0c3a\u0c3f"+
		"\u0003\u0180\u00c0\u0000\u0c3b\u0c3c\u0005\u0390\u0000\u0000\u0c3c\u0c3e"+
		"\u0003\u0180\u00c0\u0000\u0c3d\u0c3b\u0001\u0000\u0000\u0000\u0c3e\u0c41"+
		"\u0001\u0000\u0000\u0000\u0c3f\u0c3d\u0001\u0000\u0000\u0000\u0c3f\u0c40"+
		"\u0001\u0000\u0000\u0000\u0c40\u00b7\u0001\u0000\u0000\u0000\u0c41\u0c3f"+
		"\u0001\u0000\u0000\u0000\u0c42\u0c43\u0005\u001c\u0000\u0000\u0c43\u0c44"+
		"\u0005\u0103\u0000\u0000\u0c44\u0c46\u0005\u012c\u0000\u0000\u0c45\u0c47"+
		"\u0003\u02f8\u017c\u0000\u0c46\u0c45\u0001\u0000\u0000\u0000\u0c46\u0c47"+
		"\u0001\u0000\u0000\u0000\u0c47\u0c48\u0001\u0000\u0000\u0000\u0c48\u0c49"+
		"\u0003\u03d0\u01e8\u0000\u0c49\u0c4a\u0005\u023c\u0000\u0000\u0c4a\u0c4b"+
		"\u0005\u02f9\u0000\u0000\u0c4b\u0c4c\u0003\u03d0\u01e8\u0000\u0c4c\u0cdd"+
		"\u0001\u0000\u0000\u0000\u0c4d\u0c4e\u0005\u001c\u0000\u0000\u0c4e\u0c4f"+
		"\u0005\u0103\u0000\u0000\u0c4f\u0c51\u0005\u012c\u0000\u0000\u0c50\u0c52"+
		"\u0003\u02f8\u017c\u0000\u0c51\u0c50\u0001\u0000\u0000\u0000\u0c51\u0c52"+
		"\u0001\u0000\u0000\u0000\u0c52\u0c53\u0001\u0000\u0000\u0000\u0c53\u0c54"+
		"\u0003\u03d0\u01e8\u0000\u0c54\u0c58\u0005\u028e\u0000\u0000\u0c55\u0c56"+
		"\u0005\u01d1\u0000\u0000\u0c56\u0c57\u0005\u0380\u0000\u0000\u0c57\u0c59"+
		"\u0003\u03bc\u01de\u0000\u0c58\u0c55\u0001\u0000\u0000\u0000\u0c58\u0c59"+
		"\u0001\u0000\u0000\u0000\u0c59\u0c5b\u0001\u0000\u0000\u0000\u0c5a\u0c5c"+
		"\u0003\u00b0X\u0000\u0c5b\u0c5a\u0001\u0000\u0000\u0000\u0c5b\u0c5c\u0001"+
		"\u0000\u0000\u0000\u0c5c\u0cdd\u0001\u0000\u0000\u0000\u0c5d\u0c5e\u0005"+
		"\u001c\u0000\u0000\u0c5e\u0c5f\u0005\u0103\u0000\u0000\u0c5f\u0c61\u0005"+
		"\u012c\u0000\u0000\u0c60\u0c62\u0003\u02f8\u017c\u0000\u0c61\u0c60\u0001"+
		"\u0000\u0000\u0000\u0c61\u0c62\u0001\u0000\u0000\u0000\u0c62\u0c63\u0001"+
		"\u0000\u0000\u0000\u0c63\u0c64\u0003\u03d0\u01e8\u0000\u0c64\u0c65\u0005"+
		"\u028e\u0000\u0000\u0c65\u0c66\u0005\u01d1\u0000\u0000\u0c66\u0c67\u0005"+
		"\u0380\u0000\u0000\u0c67\u0c69\u0003\u03bc\u01de\u0000\u0c68\u0c6a\u0003"+
		"\u00b0X\u0000\u0c69\u0c68\u0001\u0000\u0000\u0000\u0c69\u0c6a\u0001\u0000"+
		"\u0000\u0000\u0c6a\u0cdd\u0001\u0000\u0000\u0000\u0c6b\u0c6c\u0005\u001c"+
		"\u0000\u0000\u0c6c\u0c6d\u0005\u0103\u0000\u0000\u0c6d\u0c6f\u0005\u012c"+
		"\u0000\u0000\u0c6e\u0c70\u0003\u02f8\u017c\u0000\u0c6f\u0c6e\u0001\u0000"+
		"\u0000\u0000\u0c6f\u0c70\u0001\u0000\u0000\u0000\u0c70\u0c71\u0001\u0000"+
		"\u0000\u0000\u0c71\u0c72\u0003\u03d0\u01e8\u0000\u0c72\u0c73\u0005\n\u0000"+
		"\u0000\u0c73\u0c74\u0003\u00b2Y\u0000\u0c74\u0c75\u0005\u02f9\u0000\u0000"+
		"\u0c75\u0c76\u0005\u0013\u0000\u0000\u0c76\u0cdd\u0001\u0000\u0000\u0000"+
		"\u0c77\u0c78\u0005\u001c\u0000\u0000\u0c78\u0c79\u0005\u0103\u0000\u0000"+
		"\u0c79\u0c7b\u0005\u012c\u0000\u0000\u0c7a\u0c7c\u0003\u02f8\u017c\u0000"+
		"\u0c7b\u0c7a\u0001\u0000\u0000\u0000\u0c7b\u0c7c\u0001\u0000\u0000\u0000"+
		"\u0c7c\u0c7d\u0001\u0000\u0000\u0000\u0c7d\u0c7e\u0003\u03d0\u01e8\u0000"+
		"\u0c7e\u0c7f\u0005\u01a6\u0000\u0000\u0c7f\u0c80\u0005\u00a6\u0000\u0000"+
		"\u0c80\u0c81\u0003\u00b2Y\u0000\u0c81\u0c82\u0005\u02f9\u0000\u0000\u0c82"+
		"\u0c83\u0005\u0103\u0000\u0000\u0c83\u0c84\u0005\u012c\u0000\u0000\u0c84"+
		"\u0c85\u0003\u03d0\u01e8\u0000\u0c85\u0cdd\u0001\u0000\u0000\u0000\u0c86"+
		"\u0c87\u0005\u001c\u0000\u0000\u0c87\u0c88\u0005\u0103\u0000\u0000\u0c88"+
		"\u0c8a\u0005\u012c\u0000\u0000\u0c89\u0c8b\u0003\u02f8\u017c\u0000\u0c8a"+
		"\u0c89\u0001\u0000\u0000\u0000\u0c8a\u0c8b\u0001\u0000\u0000\u0000\u0c8b"+
		"\u0c8c\u0001\u0000\u0000\u0000\u0c8c\u0c8d\u0003\u03d0\u01e8\u0000\u0c8d"+
		"\u0c8e\u0005\u023b\u0000\u0000\u0c8e\u0c8f\u0003\u00b2Y\u0000\u0c8f\u0c90"+
		"\u0005\u0117\u0000\u0000\u0c90\u0c91\u0005\u0013\u0000\u0000\u0c91\u0cdd"+
		"\u0001\u0000\u0000\u0000\u0c92\u0c93\u0005\u001c\u0000\u0000\u0c93\u0c94"+
		"\u0005\u0103\u0000\u0000\u0c94\u0c96\u0005\u012c\u0000\u0000\u0c95\u0c97"+
		"\u0003\u02f8\u017c\u0000\u0c96\u0c95\u0001\u0000\u0000\u0000\u0c96\u0c97"+
		"\u0001\u0000\u0000\u0000\u0c97\u0c98\u0001\u0000\u0000\u0000\u0c98\u0c99"+
		"\u0003\u03d0\u01e8\u0000\u0c99\u0c9a\u0005\n\u0000\u0000\u0c9a\u0c9b\u0003"+
		"\u00b4Z\u0000\u0c9b\u0c9c\u0005\u02f9\u0000\u0000\u0c9c\u0c9d\u0005\u0016"+
		"\u0000\u0000\u0c9d\u0cdd\u0001\u0000\u0000\u0000\u0c9e\u0c9f\u0005\u001c"+
		"\u0000\u0000\u0c9f\u0ca0\u0005\u0103\u0000\u0000\u0ca0\u0ca2\u0005\u012c"+
		"\u0000\u0000\u0ca1\u0ca3\u0003\u02f8\u017c\u0000\u0ca2\u0ca1\u0001\u0000"+
		"\u0000\u0000\u0ca2\u0ca3\u0001\u0000\u0000\u0000\u0ca3\u0ca4\u0001\u0000"+
		"\u0000\u0000\u0ca4\u0ca5\u0003\u03d0\u01e8\u0000\u0ca5\u0ca6\u0005\u01a6"+
		"\u0000\u0000\u0ca6\u0ca7\u0005\u0291\u0000\u0000\u0ca7\u0ca8\u0003\u00b4"+
		"Z\u0000\u0ca8\u0ca9\u0005\u02f9\u0000\u0000\u0ca9\u0caa\u0005\u0103\u0000"+
		"\u0000\u0caa\u0cab\u0005\u012c\u0000\u0000\u0cab\u0cac\u0003\u03d0\u01e8"+
		"\u0000\u0cac\u0cdd\u0001\u0000\u0000\u0000\u0cad\u0cae\u0005\u001c\u0000"+
		"\u0000\u0cae\u0caf\u0005\u0103\u0000\u0000\u0caf\u0cb1\u0005\u012c\u0000"+
		"\u0000\u0cb0\u0cb2\u0003\u02f8\u017c\u0000\u0cb1\u0cb0\u0001\u0000\u0000"+
		"\u0000\u0cb1\u0cb2\u0001\u0000\u0000\u0000\u0cb2\u0cb3\u0001\u0000\u0000"+
		"\u0000\u0cb3\u0cb4\u0003\u03d0\u01e8\u0000\u0cb4\u0cb5\u0005\u023b\u0000"+
		"\u0000\u0cb5\u0cb6\u0003\u00b4Z\u0000\u0cb6\u0cb7\u0005\u0117\u0000\u0000"+
		"\u0cb7\u0cb8\u0005\u0016\u0000\u0000\u0cb8\u0cdd\u0001\u0000\u0000\u0000"+
		"\u0cb9\u0cba\u0005\u001c\u0000\u0000\u0cba\u0cbb\u0005\u0103\u0000\u0000"+
		"\u0cbb\u0cbd\u0005\u012c\u0000\u0000\u0cbc\u0cbe\u0003\u02f8\u017c\u0000"+
		"\u0cbd\u0cbc\u0001\u0000\u0000\u0000\u0cbd\u0cbe\u0001\u0000\u0000\u0000"+
		"\u0cbe\u0cbf\u0001\u0000\u0000\u0000\u0cbf\u0cc0\u0003\u03d0\u01e8\u0000"+
		"\u0cc0\u0cc1\u0005\n\u0000\u0000\u0cc1\u0cc2\u0003\u00b6[\u0000\u0cc2"+
		"\u0cc3\u0005\u02f9\u0000\u0000\u0cc3\u0cc5\u0005\u0012\u0000\u0000\u0cc4"+
		"\u0cc6\u0003\u00aeW\u0000\u0cc5\u0cc4\u0001\u0000\u0000\u0000\u0cc5\u0cc6"+
		"\u0001\u0000\u0000\u0000\u0cc6\u0cdd\u0001\u0000\u0000\u0000\u0cc7\u0cc8"+
		"\u0005\u001c\u0000\u0000\u0cc8\u0cc9\u0005\u0103\u0000\u0000\u0cc9\u0ccb"+
		"\u0005\u012c\u0000\u0000\u0cca\u0ccc\u0003\u02f8\u017c\u0000\u0ccb\u0cca"+
		"\u0001\u0000\u0000\u0000\u0ccb\u0ccc\u0001\u0000\u0000\u0000\u0ccc\u0ccd"+
		"\u0001\u0000\u0000\u0000\u0ccd\u0cce\u0003\u03d0\u01e8\u0000\u0cce\u0ccf"+
		"\u0005\u023b\u0000\u0000\u0ccf\u0cd0\u0003\u00b6[\u0000\u0cd0\u0cd1\u0005"+
		"\u0117\u0000\u0000\u0cd1\u0cd2\u0005\u0012\u0000\u0000\u0cd2\u0cdd\u0001"+
		"\u0000\u0000\u0000\u0cd3\u0cd4\u0005\u001c\u0000\u0000\u0cd4\u0cd5\u0005"+
		"\u0103\u0000\u0000\u0cd5\u0cd7\u0005\u012c\u0000\u0000\u0cd6\u0cd8\u0003"+
		"\u02f8\u017c\u0000\u0cd7\u0cd6\u0001\u0000\u0000\u0000\u0cd7\u0cd8\u0001"+
		"\u0000\u0000\u0000\u0cd8\u0cd9\u0001\u0000\u0000\u0000\u0cd9\u0cda\u0003"+
		"\u03d0\u01e8\u0000\u0cda\u0cdb\u0007\u000e\u0000\u0000\u0cdb\u0cdd\u0001"+
		"\u0000\u0000\u0000\u0cdc\u0c42\u0001\u0000\u0000\u0000\u0cdc\u0c4d\u0001"+
		"\u0000\u0000\u0000\u0cdc\u0c5d\u0001\u0000\u0000\u0000\u0cdc\u0c6b\u0001"+
		"\u0000\u0000\u0000\u0cdc\u0c77\u0001\u0000\u0000\u0000\u0cdc\u0c86\u0001"+
		"\u0000\u0000\u0000\u0cdc\u0c92\u0001\u0000\u0000\u0000\u0cdc\u0c9e\u0001"+
		"\u0000\u0000\u0000\u0cdc\u0cad\u0001\u0000\u0000\u0000\u0cdc\u0cb9\u0001"+
		"\u0000\u0000\u0000\u0cdc\u0cc7\u0001\u0000\u0000\u0000\u0cdc\u0cd3\u0001"+
		"\u0000\u0000\u0000\u0cdd\u00b9\u0001\u0000\u0000\u0000\u0cde\u0cdf\u0005"+
		"\u001c\u0000\u0000\u0cdf\u0ce0\u0005\u0108\u0000\u0000\u0ce0\u0ce2\u0005"+
		"\u0113\u0000\u0000\u0ce1\u0ce3\u0003\u02f8\u017c\u0000\u0ce2\u0ce1\u0001"+
		"\u0000\u0000\u0000\u0ce2\u0ce3\u0001\u0000\u0000\u0000\u0ce3\u0ce4\u0001"+
		"\u0000\u0000\u0000\u0ce4\u0ce5\u0003\u03d0\u01e8\u0000\u0ce5\u0ce6\u0005"+
		"\u023c\u0000\u0000\u0ce6\u0ce7\u0005\u02f9\u0000\u0000\u0ce7\u0ce8\u0003"+
		"\u03d0\u01e8\u0000\u0ce8\u0cfb\u0001\u0000\u0000\u0000\u0ce9\u0cea\u0005"+
		"\u001c\u0000\u0000\u0cea\u0ceb\u0005\u0108\u0000\u0000\u0ceb\u0ced\u0005"+
		"\u0113\u0000\u0000\u0cec\u0cee\u0003\u02f8\u017c\u0000\u0ced\u0cec\u0001"+
		"\u0000\u0000\u0000\u0ced\u0cee\u0001\u0000\u0000\u0000\u0cee\u0cef\u0001"+
		"\u0000\u0000\u0000\u0cef\u0cf0\u0003\u03d0\u01e8\u0000\u0cf0\u0cf4\u0005"+
		"\u028e\u0000\u0000\u0cf1\u0cf3\u0003\u01e2\u00f1\u0000\u0cf2\u0cf1\u0001"+
		"\u0000\u0000\u0000\u0cf3\u0cf6\u0001\u0000\u0000\u0000\u0cf4\u0cf2\u0001"+
		"\u0000\u0000\u0000\u0cf4\u0cf5\u0001\u0000\u0000\u0000\u0cf5\u0cf8\u0001"+
		"\u0000\u0000\u0000\u0cf6\u0cf4\u0001\u0000\u0000\u0000\u0cf7\u0cf9\u0003"+
		"\u02f2\u0179\u0000\u0cf8\u0cf7\u0001\u0000\u0000\u0000\u0cf8\u0cf9\u0001"+
		"\u0000\u0000\u0000\u0cf9\u0cfb\u0001\u0000\u0000\u0000\u0cfa\u0cde\u0001"+
		"\u0000\u0000\u0000\u0cfa\u0ce9\u0001\u0000\u0000\u0000\u0cfb\u00bb\u0001"+
		"\u0000\u0000\u0000\u0cfc\u0cfd\u0003\u00be_\u0000\u0cfd\u0cfe\u0005\u023c"+
		"\u0000\u0000\u0cfe\u0cff\u0005\u02f9\u0000\u0000\u0cff\u0d00\u0003\u03d0"+
		"\u01e8\u0000\u0d00\u0d44\u0001\u0000\u0000\u0000\u0d01\u0d02\u0003\u00be"+
		"_\u0000\u0d02\u0d03\u0005\u028e\u0000\u0000\u0d03\u0d04\u0003\u02f2\u0179"+
		"\u0000\u0d04\u0d44\u0001\u0000\u0000\u0000\u0d05\u0d06\u0003\u00be_\u0000"+
		"\u0d06\u0d07\u0005\u028e\u0000\u0000\u0d07\u0d08\u0005\u0283\u0000\u0000"+
		"\u0d08\u0d44\u0001\u0000\u0000\u0000\u0d09\u0d0a\u0003\u00be_\u0000\u0d0a"+
		"\u0d0b\u0005\u0312\u0000\u0000\u0d0b\u0d0c\u0007\u000f\u0000\u0000\u0d0c"+
		"\u0d44\u0001\u0000\u0000\u0000\u0d0d\u0d0e\u0003\u00be_\u0000\u0d0e\u0d0f"+
		"\u0005\u028e\u0000\u0000\u0d0f\u0d10\u0005$\u0000\u0000\u0d10\u0d11\u0005"+
		"\u0380\u0000\u0000\u0d11\u0d12\u0003\u03d0\u01e8\u0000\u0d12\u0d44\u0001"+
		"\u0000\u0000\u0000\u0d13\u0d14\u0003\u00be_\u0000\u0d14\u0d15\u0005\u028e"+
		"\u0000\u0000\u0d15\u0d16\u0005\u0136\u0000\u0000\u0d16\u0d17\u0005\u0380"+
		"\u0000\u0000\u0d17\u0d1b\u0005\u038a\u0000\u0000\u0d18\u0d1a\u0003\u0164"+
		"\u00b2\u0000\u0d19\u0d18\u0001\u0000\u0000\u0000\u0d1a\u0d1d\u0001\u0000"+
		"\u0000\u0000\u0d1b\u0d19\u0001\u0000\u0000\u0000\u0d1b\u0d1c\u0001\u0000"+
		"\u0000\u0000\u0d1c\u0d1e\u0001\u0000\u0000\u0000\u0d1d\u0d1b\u0001\u0000"+
		"\u0000\u0000\u0d1e\u0d1f\u0005\u038b\u0000\u0000\u0d1f\u0d44\u0001\u0000"+
		"\u0000\u0000\u0d20\u0d21\u0003\u00be_\u0000\u0d21\u0d22\u0005\u028e\u0000"+
		"\u0000\u0d22\u0d23\u0005\u0092\u0000\u0000\u0d23\u0d24\u0005\u0380\u0000"+
		"\u0000\u0d24\u0d28\u0005\u038a\u0000\u0000\u0d25\u0d27\u0003\u03d0\u01e8"+
		"\u0000\u0d26\u0d25\u0001\u0000\u0000\u0000\u0d27\u0d2a\u0001\u0000\u0000"+
		"\u0000\u0d28\u0d26\u0001\u0000\u0000\u0000\u0d28\u0d29\u0001\u0000\u0000"+
		"\u0000\u0d29\u0d2b\u0001\u0000\u0000\u0000\u0d2a\u0d28\u0001\u0000\u0000"+
		"\u0000\u0d2b\u0d2c\u0005\u038b\u0000\u0000\u0d2c\u0d44\u0001\u0000\u0000"+
		"\u0000\u0d2d\u0d2e\u0003\u00be_\u0000\u0d2e\u0d2f\u0005\u028e\u0000\u0000"+
		"\u0d2f\u0d30\u0005\u0190\u0000\u0000\u0d30\u0d31\u0005\u0380\u0000\u0000"+
		"\u0d31\u0d32\u0003\u03f0\u01f8\u0000\u0d32\u0d44\u0001\u0000\u0000\u0000"+
		"\u0d33\u0d34\u0003\u00be_\u0000\u0d34\u0d35\u0005\u028e\u0000\u0000\u0d35"+
		"\u0d36\u0005\u0088\u0000\u0000\u0d36\u0d37\u0005\u0380\u0000\u0000\u0d37"+
		"\u0d38\u0003\u0166\u00b3\u0000\u0d38\u0d44\u0001\u0000\u0000\u0000\u0d39"+
		"\u0d3a\u0003\u00be_\u0000\u0d3a\u0d3b\u0005\u028e\u0000\u0000\u0d3b\u0d3c"+
		"\u0007\u0010\u0000\u0000\u0d3c\u0d3d\u0005\u0380\u0000\u0000\u0d3d\u0d3e"+
		"\u0003\u03d0\u01e8\u0000\u0d3e\u0d44\u0001\u0000\u0000\u0000\u0d3f\u0d40"+
		"\u0003\u00be_\u0000\u0d40\u0d41\u0005\u0312\u0000\u0000\u0d41\u0d42\u0007"+
		"\u0011\u0000\u0000\u0d42\u0d44\u0001\u0000\u0000\u0000\u0d43\u0cfc\u0001"+
		"\u0000\u0000\u0000\u0d43\u0d01\u0001\u0000\u0000\u0000\u0d43\u0d05\u0001"+
		"\u0000\u0000\u0000\u0d43\u0d09\u0001\u0000\u0000\u0000\u0d43\u0d0d\u0001"+
		"\u0000\u0000\u0000\u0d43\u0d13\u0001\u0000\u0000\u0000\u0d43\u0d20\u0001"+
		"\u0000\u0000\u0000\u0d43\u0d2d\u0001\u0000\u0000\u0000\u0d43\u0d33\u0001"+
		"\u0000\u0000\u0000\u0d43\u0d39\u0001\u0000\u0000\u0000\u0d43\u0d3f\u0001"+
		"\u0000\u0000\u0000\u0d44\u00bd\u0001\u0000\u0000\u0000\u0d45\u0d46\u0005"+
		"\u001c\u0000\u0000\u0d46\u0d48\u0005\u0119\u0000\u0000\u0d47\u0d49\u0003"+
		"\u02f8\u017c\u0000\u0d48\u0d47\u0001\u0000\u0000\u0000\u0d48\u0d49\u0001"+
		"\u0000\u0000\u0000\u0d49\u0d4a\u0001\u0000\u0000\u0000\u0d4a\u0d4b\u0003"+
		"\u03d0\u01e8\u0000\u0d4b\u0d4d\u0005\u038a\u0000\u0000\u0d4c\u0d4e\u0003"+
		"\u00c0`\u0000\u0d4d\u0d4c\u0001\u0000\u0000\u0000\u0d4d\u0d4e\u0001\u0000"+
		"\u0000\u0000\u0d4e\u0d4f\u0001\u0000\u0000\u0000\u0d4f\u0d50\u0005\u038b"+
		"\u0000\u0000\u0d50\u00bf\u0001\u0000\u0000\u0000\u0d51\u0d56\u0003\u040a"+
		"\u0205\u0000\u0d52\u0d53\u0005\u0390\u0000\u0000\u0d53\u0d55\u0003\u040a"+
		"\u0205\u0000\u0d54\u0d52\u0001\u0000\u0000\u0000\u0d55\u0d58\u0001\u0000"+
		"\u0000\u0000\u0d56\u0d54\u0001\u0000\u0000\u0000\u0d56\u0d57\u0001\u0000"+
		"\u0000\u0000\u0d57\u00c1\u0001\u0000\u0000\u0000\u0d58\u0d56\u0001\u0000"+
		"\u0000\u0000\u0d59\u0d5a\u0005\u001c\u0000\u0000\u0d5a\u0d5b\u0005\u0188"+
		"\u0000\u0000\u0d5b\u0d5d\u0005\u020f\u0000\u0000\u0d5c\u0d5e\u0003\u02f8"+
		"\u017c\u0000\u0d5d\u0d5c\u0001\u0000\u0000\u0000\u0d5d\u0d5e\u0001\u0000"+
		"\u0000\u0000\u0d5e\u0d5f\u0001\u0000\u0000\u0000\u0d5f\u0d60\u0003\u03d0"+
		"\u01e8\u0000\u0d60\u0d61\u0005\u028e\u0000\u0000\u0d61\u0d62\u0005\\\u0000"+
		"\u0000\u0d62\u0d63\u0005\u037c\u0000\u0000\u0d63\u0d64\u0003\u03f6\u01fb"+
		"\u0000\u0d64\u0d7b\u0001\u0000\u0000\u0000\u0d65\u0d66\u0005\u001c\u0000"+
		"\u0000\u0d66\u0d67\u0005\u0188\u0000\u0000\u0d67\u0d69\u0005\u020f\u0000"+
		"\u0000\u0d68\u0d6a\u0003\u02f8\u017c\u0000\u0d69\u0d68\u0001\u0000\u0000"+
		"\u0000\u0d69\u0d6a\u0001\u0000\u0000\u0000\u0d6a\u0d6b\u0001\u0000\u0000"+
		"\u0000\u0d6b\u0d6c\u0003\u03d0\u01e8\u0000\u0d6c\u0d6d\u0005\u023c\u0000"+
		"\u0000\u0d6d\u0d6e\u0005\u02f9\u0000\u0000\u0d6e\u0d6f\u0003\u03d0\u01e8"+
		"\u0000\u0d6f\u0d7b\u0001\u0000\u0000\u0000\u0d70\u0d71\u0005\u001c\u0000"+
		"\u0000\u0d71\u0d72\u0005\u0188\u0000\u0000\u0d72\u0d74\u0005\u020f\u0000"+
		"\u0000\u0d73\u0d75\u0003\u02f8\u017c\u0000\u0d74\u0d73\u0001\u0000\u0000"+
		"\u0000\u0d74\u0d75\u0001\u0000\u0000\u0000\u0d75\u0d76\u0001\u0000\u0000"+
		"\u0000\u0d76\u0d77\u0003\u03d0\u01e8\u0000\u0d77\u0d78\u0005\u028e\u0000"+
		"\u0000\u0d78\u0d79\u0003\u02f2\u0179\u0000\u0d79\u0d7b\u0001\u0000\u0000"+
		"\u0000\u0d7a\u0d59\u0001\u0000\u0000\u0000\u0d7a\u0d65\u0001\u0000\u0000"+
		"\u0000\u0d7a\u0d70\u0001\u0000\u0000\u0000\u0d7b\u00c3\u0001\u0000\u0000"+
		"\u0000\u0d7c\u0d7d\u0005\u001c\u0000\u0000\u0d7d\u0d7e\u0005\u018f\u0000"+
		"\u0000\u0d7e\u0d7f\u0005\u0329\u0000\u0000\u0d7f\u0d99\u0003\u03d0\u01e8"+
		"\u0000\u0d80\u0d81\u0005\u023c\u0000\u0000\u0d81\u0d82\u0005\u02f9\u0000"+
		"\u0000\u0d82\u0d9a\u0003\u03d0\u01e8\u0000\u0d83\u0d84\u0005\u007f\u0000"+
		"\u0000\u0d84\u0d85\u0005`\u0000\u0000\u0d85\u0d86\u0005\u038a\u0000\u0000"+
		"\u0d86\u0d87\u0003\u03f2\u01f9\u0000\u0d87\u0d88\u0005\u038b\u0000\u0000"+
		"\u0d88\u0d9a\u0001\u0000\u0000\u0000\u0d89\u0d8a\u0005\u00ca\u0000\u0000"+
		"\u0d8a\u0d8b\u0005\u0080\u0000\u0000\u0d8b\u0d9a\u0005\u0168\u0000\u0000"+
		"\u0d8c\u0d8e\u0003\u0098L\u0000\u0d8d\u0d8f\u0005\u022f\u0000\u0000\u0d8e"+
		"\u0d8d\u0001\u0000\u0000\u0000\u0d8e\u0d8f\u0001\u0000\u0000\u0000\u0d8f"+
		"\u0d9a\u0001\u0000\u0000\u0000\u0d90\u0d92\u0005\u028e\u0000\u0000\u0d91"+
		"\u0d93\u0005\u0283\u0000\u0000\u0d92\u0d91\u0001\u0000\u0000\u0000\u0d92"+
		"\u0d93\u0001\u0000\u0000\u0000\u0d93\u0d95\u0001\u0000\u0000\u0000\u0d94"+
		"\u0d96\u0003\u02f2\u0179\u0000\u0d95\u0d94\u0001\u0000\u0000\u0000\u0d95"+
		"\u0d96\u0001\u0000\u0000\u0000\u0d96\u0d9a\u0001\u0000\u0000\u0000\u0d97"+
		"\u0d98\u0005\u0312\u0000\u0000\u0d98\u0d9a\u0007\u000f\u0000\u0000\u0d99"+
		"\u0d80\u0001\u0000\u0000\u0000\u0d99\u0d83\u0001\u0000\u0000\u0000\u0d99"+
		"\u0d89\u0001\u0000\u0000\u0000\u0d99\u0d8c\u0001\u0000\u0000\u0000\u0d99"+
		"\u0d90\u0001\u0000\u0000\u0000\u0d99\u0d97\u0001\u0000\u0000\u0000\u0d9a"+
		"\u00c5\u0001\u0000\u0000\u0000\u0d9b\u0d9c\u0005\u001c\u0000\u0000\u0d9c"+
		"\u0d9d\u0005\u01ab\u0000\u0000\u0d9d\u0d9e\u0005\u020f\u0000\u0000\u0d9e"+
		"\u0d9f\u0003\u0142\u00a1\u0000\u0d9f\u00c7\u0001\u0000\u0000\u0000\u0da0"+
		"\u0da2\u0005\u001c\u0000\u0000\u0da1\u0da3\u0005\u01b6\u0000\u0000\u0da2"+
		"\u0da1\u0001\u0000\u0000\u0000\u0da2\u0da3\u0001\u0000\u0000\u0000\u0da3"+
		"\u0da4\u0001\u0000\u0000\u0000\u0da4\u0da6\u0005\u0158\u0000\u0000\u0da5"+
		"\u0da7\u0003\u02f8\u017c\u0000\u0da6\u0da5\u0001\u0000\u0000\u0000\u0da6"+
		"\u0da7\u0001\u0000\u0000\u0000\u0da7\u0da8\u0001\u0000\u0000\u0000\u0da8"+
		"\u0da9\u0003\u03d0\u01e8\u0000\u0da9\u0dab\u0005\u028e\u0000\u0000\u0daa"+
		"\u0dac\u0003\u0094J\u0000\u0dab\u0daa\u0001\u0000\u0000\u0000\u0dab\u0dac"+
		"\u0001\u0000\u0000\u0000\u0dac\u0dad\u0001\u0000\u0000\u0000\u0dad\u0daf"+
		"\u0003\u01a2\u00d1\u0000\u0dae\u0db0\u0003\u02f2\u0179\u0000\u0daf\u0dae"+
		"\u0001\u0000\u0000\u0000\u0daf\u0db0\u0001\u0000\u0000\u0000\u0db0\u0ddd"+
		"\u0001\u0000\u0000\u0000\u0db1\u0db3\u0005\u001c\u0000\u0000\u0db2\u0db4"+
		"\u0005\u01b6\u0000\u0000\u0db3\u0db2\u0001\u0000\u0000\u0000\u0db3\u0db4"+
		"\u0001\u0000\u0000\u0000\u0db4\u0db5\u0001\u0000\u0000\u0000\u0db5\u0db7"+
		"\u0005\u0158\u0000\u0000\u0db6\u0db8\u0003\u02f8\u017c\u0000\u0db7\u0db6"+
		"\u0001\u0000\u0000\u0000\u0db7\u0db8\u0001\u0000\u0000\u0000\u0db8\u0db9"+
		"\u0001\u0000\u0000\u0000\u0db9\u0dba\u0003\u03d0\u01e8\u0000\u0dba\u0dbc"+
		"\u0005\u028e\u0000\u0000\u0dbb\u0dbd\u0003\u0094J\u0000\u0dbc\u0dbb\u0001"+
		"\u0000\u0000\u0000\u0dbc\u0dbd\u0001\u0000\u0000\u0000\u0dbd\u0dbe\u0001"+
		"\u0000\u0000\u0000\u0dbe\u0dc0\u0003\u01a4\u00d2\u0000\u0dbf\u0dc1\u0003"+
		"\u02f2\u0179\u0000\u0dc0\u0dbf\u0001\u0000\u0000\u0000\u0dc0\u0dc1\u0001"+
		"\u0000\u0000\u0000\u0dc1\u0ddd\u0001\u0000\u0000\u0000\u0dc2\u0dc4\u0005"+
		"\u001c\u0000\u0000\u0dc3\u0dc5\u0005\u01b6\u0000\u0000\u0dc4\u0dc3\u0001"+
		"\u0000\u0000\u0000\u0dc4\u0dc5\u0001\u0000\u0000\u0000\u0dc5\u0dc6\u0001"+
		"\u0000\u0000\u0000\u0dc6\u0dc7\u0005\u0158\u0000\u0000\u0dc7\u0dc8\u0003"+
		"\u03d0\u01e8\u0000\u0dc8\u0dc9\u0003\u0148\u00a4\u0000\u0dc9\u0ddd\u0001"+
		"\u0000\u0000\u0000\u0dca\u0dcc\u0005\u001c\u0000\u0000\u0dcb\u0dcd\u0005"+
		"\u01b6\u0000\u0000\u0dcc\u0dcb\u0001\u0000\u0000\u0000\u0dcc\u0dcd\u0001"+
		"\u0000\u0000\u0000\u0dcd\u0dce\u0001\u0000\u0000\u0000\u0dce\u0dcf\u0005"+
		"\u0158\u0000\u0000\u0dcf\u0dd0\u0003\u03d0\u01e8\u0000\u0dd0\u0dd1\u0003"+
		"\u014c\u00a6\u0000\u0dd1\u0ddd\u0001\u0000\u0000\u0000\u0dd2\u0dd4\u0005"+
		"\u001c\u0000\u0000\u0dd3\u0dd5\u0005\u01b6\u0000\u0000\u0dd4\u0dd3\u0001"+
		"\u0000\u0000\u0000\u0dd4\u0dd5\u0001\u0000\u0000\u0000\u0dd5\u0dd6\u0001"+
		"\u0000\u0000\u0000\u0dd6\u0dd7\u0005\u0158\u0000\u0000\u0dd7\u0dd8\u0003"+
		"\u02f8\u017c\u0000\u0dd8\u0dd9\u0003\u03d0\u01e8\u0000\u0dd9\u0dda\u0005"+
		"\u0312\u0000\u0000\u0dda\u0ddb\u0007\u0012\u0000\u0000\u0ddb\u0ddd\u0001"+
		"\u0000\u0000\u0000\u0ddc\u0da0\u0001\u0000\u0000\u0000\u0ddc\u0db1\u0001"+
		"\u0000\u0000\u0000\u0ddc\u0dc2\u0001\u0000\u0000\u0000\u0ddc\u0dca\u0001"+
		"\u0000\u0000\u0000\u0ddc\u0dd2\u0001\u0000\u0000\u0000\u0ddd\u00c9\u0001"+
		"\u0000\u0000\u0000\u0dde\u0ddf\u0005\u001c\u0000\u0000\u0ddf\u0de1\u0005"+
		"\u020a\u0000\u0000\u0de0\u0de2\u0003\u02f8\u017c\u0000\u0de1\u0de0\u0001"+
		"\u0000\u0000\u0000\u0de1\u0de2\u0001\u0000\u0000\u0000\u0de2\u0de3\u0001"+
		"\u0000\u0000\u0000\u0de3\u0de4\u0003\u03d0\u01e8\u0000\u0de4\u0de6\u0005"+
		"\u028e\u0000\u0000\u0de5\u0de7\u0003\u008eG\u0000\u0de6\u0de5\u0001\u0000"+
		"\u0000\u0000\u0de6\u0de7\u0001\u0000\u0000\u0000\u0de7\u0de9\u0001\u0000"+
		"\u0000\u0000\u0de8\u0dea\u0003\u02f2\u0179\u0000\u0de9\u0de8\u0001\u0000"+
		"\u0000\u0000\u0de9\u0dea\u0001\u0000\u0000\u0000\u0dea\u0e1b\u0001\u0000"+
		"\u0000\u0000\u0deb\u0dec\u0005\u001c\u0000\u0000\u0dec\u0ded\u0005\u020a"+
		"\u0000\u0000\u0ded\u0dee\u0003\u03d0\u01e8\u0000\u0dee\u0def\u0003\u0148"+
		"\u00a4\u0000\u0def\u0e1b\u0001\u0000\u0000\u0000\u0df0\u0df1\u0005\u001c"+
		"\u0000\u0000\u0df1\u0df2\u0005\u020a\u0000\u0000\u0df2\u0df3\u0003\u03d0"+
		"\u01e8\u0000\u0df3\u0df4\u0003\u014c\u00a6\u0000\u0df4\u0e1b\u0001\u0000"+
		"\u0000\u0000\u0df5\u0df6\u0005\u001c\u0000\u0000\u0df6\u0df8\u0005\u020a"+
		"\u0000\u0000\u0df7\u0df9\u0003\u02f8\u017c\u0000\u0df8\u0df7\u0001\u0000"+
		"\u0000\u0000\u0df8\u0df9\u0001\u0000\u0000\u0000\u0df9\u0dfa\u0001\u0000"+
		"\u0000\u0000\u0dfa\u0dfb\u0003\u03d0\u01e8\u0000\u0dfb\u0dfc\u0005\u0312"+
		"\u0000\u0000\u0dfc\u0dfd\u0005\u020c\u0000\u0000\u0dfd\u0dfe\u0005\u0380"+
		"\u0000\u0000\u0dfe\u0dff\u0003\u0208\u0104\u0000\u0dff\u0e1b\u0001\u0000"+
		"\u0000\u0000\u0e00\u0e01\u0005\u001c\u0000\u0000\u0e01\u0e03\u0005\u020a"+
		"\u0000\u0000\u0e02\u0e04\u0003\u02f8\u017c\u0000\u0e03\u0e02\u0001\u0000"+
		"\u0000\u0000\u0e03\u0e04\u0001\u0000\u0000\u0000\u0e04\u0e05\u0001\u0000"+
		"\u0000\u0000\u0e05\u0e06\u0003\u03d0\u01e8\u0000\u0e06\u0e07\u0005\u0312"+
		"\u0000\u0000\u0e07\u0e08\u0005\u0086\u0000\u0000\u0e08\u0e1b\u0001\u0000"+
		"\u0000\u0000\u0e09\u0e0a\u0005\u001c\u0000\u0000\u0e0a\u0e0c\u0005\u020a"+
		"\u0000\u0000\u0e0b\u0e0d\u0003\u02f8\u017c\u0000\u0e0c\u0e0b\u0001\u0000"+
		"\u0000\u0000\u0e0c\u0e0d\u0001\u0000\u0000\u0000\u0e0d\u0e0e\u0001\u0000"+
		"\u0000\u0000\u0e0e\u0e0f\u0003\u03d0\u01e8\u0000\u0e0f\u0e13\u0005\u0234"+
		"\u0000\u0000\u0e10\u0e11\u0005\u0211\u0000\u0000\u0e11\u0e12\u0005\u0380"+
		"\u0000\u0000\u0e12\u0e14\u0003\u03ca\u01e5\u0000\u0e13\u0e10\u0001\u0000"+
		"\u0000\u0000\u0e13\u0e14\u0001\u0000\u0000\u0000\u0e14\u0e18\u0001\u0000"+
		"\u0000\u0000\u0e15\u0e16\u0005\u01a1\u0000\u0000\u0e16\u0e17\u0005\u0380"+
		"\u0000\u0000\u0e17\u0e19\u0003\u03ca\u01e5\u0000\u0e18\u0e15\u0001\u0000"+
		"\u0000\u0000\u0e18\u0e19\u0001\u0000\u0000\u0000\u0e19\u0e1b\u0001\u0000"+
		"\u0000\u0000\u0e1a\u0dde\u0001\u0000\u0000\u0000\u0e1a\u0deb\u0001\u0000"+
		"\u0000\u0000\u0e1a\u0df0\u0001\u0000\u0000\u0000\u0e1a\u0df5\u0001\u0000"+
		"\u0000\u0000\u0e1a\u0e00\u0001\u0000\u0000\u0000\u0e1a\u0e09\u0001\u0000"+
		"\u0000\u0000\u0e1b\u00cb\u0001\u0000\u0000\u0000\u0e1c\u0e1d\u0005\u001c"+
		"\u0000\u0000\u0e1d\u0e1f\u0005\u021a\u0000\u0000\u0e1e\u0e20\u0003\u02f8"+
		"\u017c\u0000\u0e1f\u0e1e\u0001\u0000\u0000\u0000\u0e1f\u0e20\u0001\u0000"+
		"\u0000\u0000\u0e20\u0e21\u0001\u0000\u0000\u0000\u0e21\u0e22\u0003\u03d0"+
		"\u01e8\u0000\u0e22\u0e24\u0005\u038a\u0000\u0000\u0e23\u0e25\u0003\u00c0"+
		"`\u0000\u0e24\u0e23\u0001\u0000\u0000\u0000\u0e24\u0e25\u0001\u0000\u0000"+
		"\u0000\u0e25\u0e26\u0001\u0000\u0000\u0000\u0e26\u0e27\u0005\u038b\u0000"+
		"\u0000\u0e27\u0e28\u0005\u023c\u0000\u0000\u0e28\u0e29\u0005\u02f9\u0000"+
		"\u0000\u0e29\u0e2a\u0003\u03d0\u01e8\u0000\u0e2a\u0e57\u0001\u0000\u0000"+
		"\u0000\u0e2b\u0e2c\u0005\u001c\u0000\u0000\u0e2c\u0e2e\u0005\u021a\u0000"+
		"\u0000\u0e2d\u0e2f\u0003\u02f8\u017c\u0000\u0e2e\u0e2d\u0001\u0000\u0000"+
		"\u0000\u0e2e\u0e2f\u0001\u0000\u0000\u0000\u0e2f\u0e30\u0001\u0000\u0000"+
		"\u0000\u0e30\u0e31\u0003\u03d0\u01e8\u0000\u0e31\u0e33\u0005\u038a\u0000"+
		"\u0000\u0e32\u0e34\u0003\u00c0`\u0000\u0e33\u0e32\u0001\u0000\u0000\u0000"+
		"\u0e33\u0e34\u0001\u0000\u0000\u0000\u0e34\u0e35\u0001\u0000\u0000\u0000"+
		"\u0e35\u0e36\u0005\u038b\u0000\u0000\u0e36\u0e37\u0005\u028e\u0000\u0000"+
		"\u0e37\u0e38\u0003\u02f2\u0179\u0000\u0e38\u0e57\u0001\u0000\u0000\u0000"+
		"\u0e39\u0e3a\u0005\u001c\u0000\u0000\u0e3a\u0e3c\u0005\u021a\u0000\u0000"+
		"\u0e3b\u0e3d\u0003\u02f8\u017c\u0000\u0e3c\u0e3b\u0001\u0000\u0000\u0000"+
		"\u0e3c\u0e3d\u0001\u0000\u0000\u0000\u0e3d\u0e3e\u0001\u0000\u0000\u0000"+
		"\u0e3e\u0e3f\u0003\u03d0\u01e8\u0000\u0e3f\u0e41\u0005\u038a\u0000\u0000"+
		"\u0e40\u0e42\u0003\u00c0`\u0000\u0e41\u0e40\u0001\u0000\u0000\u0000\u0e41"+
		"\u0e42\u0001\u0000\u0000\u0000\u0e42\u0e43\u0001\u0000\u0000\u0000\u0e43"+
		"\u0e44\u0005\u038b\u0000\u0000\u0e44\u0e45\u0005\u0312\u0000\u0000\u0e45"+
		"\u0e46\u0005\u0086\u0000\u0000\u0e46\u0e57\u0001\u0000\u0000\u0000\u0e47"+
		"\u0e48\u0005\u001c\u0000\u0000\u0e48\u0e4a\u0005\u021a\u0000\u0000\u0e49"+
		"\u0e4b\u0003\u02f8\u017c\u0000\u0e4a\u0e49\u0001\u0000\u0000\u0000\u0e4a"+
		"\u0e4b\u0001\u0000\u0000\u0000\u0e4b\u0e4c\u0001\u0000\u0000\u0000\u0e4c"+
		"\u0e4d\u0003\u03d0\u01e8\u0000\u0e4d\u0e4f\u0005\u038a\u0000\u0000\u0e4e"+
		"\u0e50\u0003\u00c0`\u0000\u0e4f\u0e4e\u0001\u0000\u0000\u0000\u0e4f\u0e50"+
		"\u0001\u0000\u0000\u0000\u0e50\u0e51\u0001\u0000\u0000\u0000\u0e51\u0e52"+
		"\u0005\u038b\u0000\u0000\u0e52\u0e53\u0005\u00ed\u0000\u0000\u0e53\u0e54"+
		"\u0005+\u0000\u0000\u0e54\u0e55\u0003\u01aa\u00d5\u0000\u0e55\u0e57\u0001"+
		"\u0000\u0000\u0000\u0e56\u0e1c\u0001\u0000\u0000\u0000\u0e56\u0e2b\u0001"+
		"\u0000\u0000\u0000\u0e56\u0e39\u0001\u0000\u0000\u0000\u0e56\u0e47\u0001"+
		"\u0000\u0000\u0000\u0e57\u00cd\u0001\u0000\u0000\u0000\u0e58\u0e59\u0005"+
		"\u001c\u0000\u0000\u0e59\u0e5a\u0005\u0241\u0000\u0000\u0e5a\u0e5c\u0005"+
		"\u012c\u0000\u0000\u0e5b\u0e5d\u0003\u02f8\u017c\u0000\u0e5c\u0e5b\u0001"+
		"\u0000\u0000\u0000\u0e5c\u0e5d\u0001\u0000\u0000\u0000\u0e5d\u0e5e\u0001"+
		"\u0000\u0000\u0000\u0e5e\u0e5f\u0003\u03d0\u01e8\u0000\u0e5f\u0e60\u0005"+
		"\u023c\u0000\u0000\u0e60\u0e61\u0005\u02f9\u0000\u0000\u0e61\u0e62\u0003"+
		"\u03d0\u01e8\u0000\u0e62\u0f13\u0001\u0000\u0000\u0000\u0e63\u0e64\u0005"+
		"\u001c\u0000\u0000\u0e64\u0e65\u0005\u0241\u0000\u0000\u0e65\u0e67\u0005"+
		"\u012c\u0000\u0000\u0e66\u0e68\u0003\u02f8\u017c\u0000\u0e67\u0e66\u0001"+
		"\u0000\u0000\u0000\u0e67\u0e68\u0001\u0000\u0000\u0000\u0e68\u0e69\u0001"+
		"\u0000\u0000\u0000\u0e69\u0e6a\u0003\u03d0\u01e8\u0000\u0e6a\u0e6e\u0005"+
		"\u028e\u0000\u0000\u0e6b\u0e6c\u0005\u01d1\u0000\u0000\u0e6c\u0e6d\u0005"+
		"\u0380\u0000\u0000\u0e6d\u0e6f\u0003\u03bc\u01de\u0000\u0e6e\u0e6b\u0001"+
		"\u0000\u0000\u0000\u0e6e\u0e6f\u0001\u0000\u0000\u0000\u0e6f\u0e73\u0001"+
		"\u0000\u0000\u0000\u0e70\u0e71\u0005\u0242\u0000\u0000\u0e71\u0e72\u0005"+
		"\u0380\u0000\u0000\u0e72\u0e74\u0003\u03ca\u01e5\u0000\u0e73\u0e70\u0001"+
		"\u0000\u0000\u0000\u0e73\u0e74\u0001\u0000\u0000\u0000\u0e74\u0f13\u0001"+
		"\u0000\u0000\u0000\u0e75\u0e76\u0005\u001c\u0000\u0000\u0e76\u0e77\u0005"+
		"\u0241\u0000\u0000\u0e77\u0e79\u0005\u012c\u0000\u0000\u0e78\u0e7a\u0003"+
		"\u02f8\u017c\u0000\u0e79\u0e78\u0001\u0000\u0000\u0000\u0e79\u0e7a\u0001"+
		"\u0000\u0000\u0000\u0e7a\u0e7b\u0001\u0000\u0000\u0000\u0e7b\u0e7c\u0003"+
		"\u03d0\u01e8\u0000\u0e7c\u0e7d\u0005\u028e\u0000\u0000\u0e7d\u0e7e\u0005"+
		"\u01d1\u0000\u0000\u0e7e\u0e7f\u0005\u0380\u0000\u0000\u0e7f\u0e80\u0003"+
		"\u03bc\u01de\u0000\u0e80\u0e81\u0005\u0014\u0000\u0000\u0e81\u0e82\u0005"+
		"\u0380\u0000\u0000\u0e82\u0e87\u0003\u0182\u00c1\u0000\u0e83\u0e84\u0005"+
		"\u0390\u0000\u0000\u0e84\u0e86\u0003\u0182\u00c1\u0000\u0e85\u0e83\u0001"+
		"\u0000\u0000\u0000\u0e86\u0e89\u0001\u0000\u0000\u0000\u0e87\u0e85\u0001"+
		"\u0000\u0000\u0000\u0e87\u0e88\u0001\u0000\u0000\u0000\u0e88\u0e8d\u0001"+
		"\u0000\u0000\u0000\u0e89\u0e87\u0001\u0000\u0000\u0000\u0e8a\u0e8b\u0005"+
		"\u0242\u0000\u0000\u0e8b\u0e8c\u0005\u0380\u0000\u0000\u0e8c\u0e8e\u0003"+
		"\u03ca\u01e5\u0000\u0e8d\u0e8a\u0001\u0000\u0000\u0000\u0e8d\u0e8e\u0001"+
		"\u0000\u0000\u0000\u0e8e\u0f13\u0001\u0000\u0000\u0000\u0e8f\u0e90\u0005"+
		"\u001c\u0000\u0000\u0e90\u0e91\u0005\u0241\u0000\u0000\u0e91\u0e93\u0005"+
		"\u012c\u0000\u0000\u0e92\u0e94\u0003\u02f8\u017c\u0000\u0e93\u0e92\u0001"+
		"\u0000\u0000\u0000\u0e93\u0e94\u0001\u0000\u0000\u0000\u0e94\u0e95\u0001"+
		"\u0000\u0000\u0000\u0e95\u0e96\u0003\u03d0\u01e8\u0000\u0e96\u0e97\u0005"+
		"\n\u0000\u0000\u0e97\u0e98\u0003\u00b2Y\u0000\u0e98\u0e99\u0005\u02f9"+
		"\u0000\u0000\u0e99\u0e9a\u0005\u0013\u0000\u0000\u0e9a\u0f13\u0001\u0000"+
		"\u0000\u0000\u0e9b\u0e9c\u0005\u001c\u0000\u0000\u0e9c\u0e9d\u0005\u0241"+
		"\u0000\u0000\u0e9d\u0e9f\u0005\u012c\u0000\u0000\u0e9e\u0ea0\u0003\u02f8"+
		"\u017c\u0000\u0e9f\u0e9e\u0001\u0000\u0000\u0000\u0e9f\u0ea0\u0001\u0000"+
		"\u0000\u0000\u0ea0\u0ea1\u0001\u0000\u0000\u0000\u0ea1\u0ea2\u0003\u03d0"+
		"\u01e8\u0000\u0ea2\u0ea3\u0005\u01a6\u0000\u0000\u0ea3\u0ea4\u0005\u00a6"+
		"\u0000\u0000\u0ea4\u0ea5\u0003\u00b2Y\u0000\u0ea5\u0ea6\u0005\u02f9\u0000"+
		"\u0000\u0ea6\u0ea7\u0005\u0241\u0000\u0000\u0ea7\u0ea8\u0005\u012c\u0000"+
		"\u0000\u0ea8\u0ea9\u0003\u03d0\u01e8\u0000\u0ea9\u0f13\u0001\u0000\u0000"+
		"\u0000\u0eaa\u0eab\u0005\u001c\u0000\u0000\u0eab\u0eac\u0005\u0241\u0000"+
		"\u0000\u0eac\u0eae\u0005\u012c\u0000\u0000\u0ead\u0eaf\u0003\u02f8\u017c"+
		"\u0000\u0eae\u0ead\u0001\u0000\u0000\u0000\u0eae\u0eaf\u0001\u0000\u0000"+
		"\u0000\u0eaf\u0eb0\u0001\u0000\u0000\u0000\u0eb0\u0eb1\u0003\u03d0\u01e8"+
		"\u0000\u0eb1\u0eb2\u0005\u023b\u0000\u0000\u0eb2\u0eb3\u0003\u00b2Y\u0000"+
		"\u0eb3\u0eb4\u0005\u0117\u0000\u0000\u0eb4\u0eb5\u0005\u0013\u0000\u0000"+
		"\u0eb5\u0f13\u0001\u0000\u0000\u0000\u0eb6\u0eb7\u0005\u001c\u0000\u0000"+
		"\u0eb7\u0eb8\u0005\u0241\u0000\u0000\u0eb8\u0eba\u0005\u012c\u0000\u0000"+
		"\u0eb9\u0ebb\u0003\u02f8\u017c\u0000\u0eba\u0eb9\u0001\u0000\u0000\u0000"+
		"\u0eba\u0ebb\u0001\u0000\u0000\u0000\u0ebb\u0ebc\u0001\u0000\u0000\u0000"+
		"\u0ebc\u0ebd\u0003\u03d0\u01e8\u0000\u0ebd\u0ebe\u0005\n\u0000\u0000\u0ebe"+
		"\u0ebf\u0003\u00b4Z\u0000\u0ebf\u0ec0\u0005\u02f9\u0000\u0000\u0ec0\u0ec1"+
		"\u0005\u0016\u0000\u0000\u0ec1\u0f13\u0001\u0000\u0000\u0000\u0ec2\u0ec3"+
		"\u0005\u001c\u0000\u0000\u0ec3\u0ec4\u0005\u0241\u0000\u0000\u0ec4\u0ec6"+
		"\u0005\u012c\u0000\u0000\u0ec5\u0ec7\u0003\u02f8\u017c\u0000\u0ec6\u0ec5"+
		"\u0001\u0000\u0000\u0000\u0ec6\u0ec7\u0001\u0000\u0000\u0000\u0ec7\u0ec8"+
		"\u0001\u0000\u0000\u0000\u0ec8\u0ec9\u0003\u03d0\u01e8\u0000\u0ec9\u0eca"+
		"\u0005\u01a6\u0000\u0000\u0eca\u0ecb\u0005\u0291\u0000\u0000\u0ecb\u0ecc"+
		"\u0003\u00b4Z\u0000\u0ecc\u0ecd\u0005\u02f9\u0000\u0000\u0ecd\u0ece\u0005"+
		"\u0241\u0000\u0000\u0ece\u0ecf\u0005\u012c\u0000\u0000\u0ecf\u0ed0\u0003"+
		"\u03d0\u01e8\u0000\u0ed0\u0f13\u0001\u0000\u0000\u0000\u0ed1\u0ed2\u0005"+
		"\u001c\u0000\u0000\u0ed2\u0ed3\u0005\u0241\u0000\u0000\u0ed3\u0ed5\u0005"+
		"\u012c\u0000\u0000\u0ed4\u0ed6\u0003\u02f8\u017c\u0000\u0ed5\u0ed4\u0001"+
		"\u0000\u0000\u0000\u0ed5\u0ed6\u0001\u0000\u0000\u0000\u0ed6\u0ed7\u0001"+
		"\u0000\u0000\u0000\u0ed7\u0ed8\u0003\u03d0\u01e8\u0000\u0ed8\u0ed9\u0005"+
		"\u023b\u0000\u0000\u0ed9\u0eda\u0003\u00b4Z\u0000\u0eda\u0edb\u0005\u0117"+
		"\u0000\u0000\u0edb\u0edc\u0005\u0016\u0000\u0000\u0edc\u0f13\u0001\u0000"+
		"\u0000\u0000\u0edd\u0ede\u0005\u001c\u0000\u0000\u0ede\u0edf\u0005\u0241"+
		"\u0000\u0000\u0edf\u0ee1\u0005\u012c\u0000\u0000\u0ee0\u0ee2\u0003\u02f8"+
		"\u017c\u0000\u0ee1\u0ee0\u0001\u0000\u0000\u0000\u0ee1\u0ee2\u0001\u0000"+
		"\u0000\u0000\u0ee2\u0ee3\u0001\u0000\u0000\u0000\u0ee3\u0ee4\u0003\u03d0"+
		"\u01e8\u0000\u0ee4\u0ee5\u0005\n\u0000\u0000\u0ee5\u0ee6\u0003\u00a8T"+
		"\u0000\u0ee6\u0ee7\u0005\u02f9\u0000\u0000\u0ee7\u0ee9\u0005\u0012\u0000"+
		"\u0000\u0ee8\u0eea\u0003\u00aeW\u0000\u0ee9\u0ee8\u0001\u0000\u0000\u0000"+
		"\u0ee9\u0eea\u0001\u0000\u0000\u0000\u0eea\u0f13\u0001\u0000\u0000\u0000"+
		"\u0eeb\u0eec\u0005\u001c\u0000\u0000\u0eec\u0eed\u0005\u0241\u0000\u0000"+
		"\u0eed\u0eef\u0005\u012c\u0000\u0000\u0eee\u0ef0\u0003\u02f8\u017c\u0000"+
		"\u0eef\u0eee\u0001\u0000\u0000\u0000\u0eef\u0ef0\u0001\u0000\u0000\u0000"+
		"\u0ef0\u0ef1\u0001\u0000\u0000\u0000\u0ef1\u0ef2\u0003\u03d0\u01e8\u0000"+
		"\u0ef2\u0ef3\u0005\u023b\u0000\u0000\u0ef3\u0ef4\u0003\u00a8T\u0000\u0ef4"+
		"\u0ef5\u0005\u0117\u0000\u0000\u0ef5\u0ef6\u0005\u0012\u0000\u0000\u0ef6"+
		"\u0f13\u0001\u0000\u0000\u0000\u0ef7\u0ef8\u0005\u001c\u0000\u0000\u0ef8"+
		"\u0ef9\u0005\u0241\u0000\u0000\u0ef9\u0efb\u0005\u012c\u0000\u0000\u0efa"+
		"\u0efc\u0003\u02f8\u017c\u0000\u0efb\u0efa\u0001\u0000\u0000\u0000\u0efb"+
		"\u0efc\u0001\u0000\u0000\u0000\u0efc\u0efd\u0001\u0000\u0000\u0000\u0efd"+
		"\u0efe\u0003\u03d0\u01e8\u0000\u0efe\u0eff\u0005\u0234\u0000\u0000\u0eff"+
		"\u0f13\u0001\u0000\u0000\u0000\u0f00\u0f01\u0005\u001c\u0000\u0000\u0f01"+
		"\u0f02\u0005\u0241\u0000\u0000\u0f02\u0f04\u0005\u012c\u0000\u0000\u0f03"+
		"\u0f05\u0003\u02f8\u017c\u0000\u0f04\u0f03\u0001\u0000\u0000\u0000\u0f04"+
		"\u0f05\u0001\u0000\u0000\u0000\u0f05\u0f06\u0001\u0000\u0000\u0000\u0f06"+
		"\u0f07\u0003\u03d0\u01e8\u0000\u0f07\u0f08\u0005\u02cc\u0000\u0000\u0f08"+
		"\u0f13\u0001\u0000\u0000\u0000\u0f09\u0f0a\u0005\u001c\u0000\u0000\u0f0a"+
		"\u0f0b\u0005\u0241\u0000\u0000\u0f0b\u0f0d\u0005\u012c\u0000\u0000\u0f0c"+
		"\u0f0e\u0003\u02f8\u017c\u0000\u0f0d\u0f0c\u0001\u0000\u0000\u0000\u0f0d"+
		"\u0f0e\u0001\u0000\u0000\u0000\u0f0e\u0f0f\u0001\u0000\u0000\u0000\u0f0f"+
		"\u0f10\u0003\u03d0\u01e8\u0000\u0f10\u0f11\u0005\u024f\u0000\u0000\u0f11"+
		"\u0f13\u0001\u0000\u0000\u0000\u0f12\u0e58\u0001\u0000\u0000\u0000\u0f12"+
		"\u0e63\u0001\u0000\u0000\u0000\u0f12\u0e75\u0001\u0000\u0000\u0000\u0f12"+
		"\u0e8f\u0001\u0000\u0000\u0000\u0f12\u0e9b\u0001\u0000\u0000\u0000\u0f12"+
		"\u0eaa\u0001\u0000\u0000\u0000\u0f12\u0eb6\u0001\u0000\u0000\u0000\u0f12"+
		"\u0ec2\u0001\u0000\u0000\u0000\u0f12\u0ed1\u0001\u0000\u0000\u0000\u0f12"+
		"\u0edd\u0001\u0000\u0000\u0000\u0f12\u0eeb\u0001\u0000\u0000\u0000\u0f12"+
		"\u0ef7\u0001\u0000\u0000\u0000\u0f12\u0f00\u0001\u0000\u0000\u0000\u0f12"+
		"\u0f09\u0001\u0000\u0000\u0000\u0f13\u00cf\u0001\u0000\u0000\u0000\u0f14"+
		"\u0f15\u0005\u0099\u0000\u0000\u0f15\u0f16\u0005\u0380\u0000\u0000\u0f16"+
		"\u0f17\u0003\u03f0\u01f8\u0000\u0f17\u00d1\u0001\u0000\u0000\u0000\u0f18"+
		"\u0f19\u0005\u0116\u0000\u0000\u0f19\u0f1a\u0005\u0380\u0000\u0000\u0f1a"+
		"\u0f1b\u0007\u0013\u0000\u0000\u0f1b\u00d3\u0001\u0000\u0000\u0000\u0f1c"+
		"\u0f1d\u0005\u01ba\u0000\u0000\u0f1d\u0f1e\u0005\u0380\u0000\u0000\u0f1e"+
		"\u0f1f\u0005\u038a\u0000\u0000\u0f1f\u0f24\u0003\u03d0\u01e8\u0000\u0f20"+
		"\u0f21\u0005\u0390\u0000\u0000\u0f21\u0f23\u0003\u03d0\u01e8\u0000\u0f22"+
		"\u0f20\u0001\u0000\u0000\u0000\u0f23\u0f26\u0001\u0000\u0000\u0000\u0f24"+
		"\u0f22\u0001\u0000\u0000\u0000\u0f24\u0f25\u0001\u0000\u0000\u0000\u0f25"+
		"\u0f27\u0001\u0000\u0000\u0000\u0f26\u0f24\u0001\u0000\u0000\u0000\u0f27"+
		"\u0f28\u0005\u038b\u0000\u0000\u0f28\u00d5\u0001\u0000\u0000\u0000\u0f29"+
		"\u0f2a\u0005\u01d9\u0000\u0000\u0f2a\u0f2b\u0003\u03f0\u01f8\u0000\u0f2b"+
		"\u0f2c\u0005\u0207\u0000\u0000\u0f2c\u0f2d\u0005\u00c8\u0000\u0000\u0f2d"+
		"\u0f2e\u0007\u0014\u0000\u0000\u0f2e\u00d7\u0001\u0000\u0000\u0000\u0f2f"+
		"\u0f30\u0005\u001c\u0000\u0000\u0f30\u0f31\u0005\u0247\u0000\u0000\u0f31"+
		"\u0f33\u0005\u01a3\u0000\u0000\u0f32\u0f34\u0003\u02f8\u017c\u0000\u0f33"+
		"\u0f32\u0001\u0000\u0000\u0000\u0f33\u0f34\u0001\u0000\u0000\u0000\u0f34"+
		"\u0f35\u0001\u0000\u0000\u0000\u0f35\u0f4a\u0003\u03d0\u01e8\u0000\u0f36"+
		"\u0f38\u0005\u028e\u0000\u0000\u0f37\u0f39\u0003\u00d0h\u0000\u0f38\u0f37"+
		"\u0001\u0000\u0000\u0000\u0f38\u0f39\u0001\u0000\u0000\u0000\u0f39\u0f3b"+
		"\u0001\u0000\u0000\u0000\u0f3a\u0f3c\u0003\u00d2i\u0000\u0f3b\u0f3a\u0001"+
		"\u0000\u0000\u0000\u0f3b\u0f3c\u0001\u0000\u0000\u0000\u0f3c\u0f43\u0001"+
		"\u0000\u0000\u0000\u0f3d\u0f3e\u0005\u02b4\u0000\u0000\u0f3e\u0f3f\u0005"+
		"\u0380\u0000\u0000\u0f3f\u0f40\u0005\u038a\u0000\u0000\u0f40\u0f44\u0003"+
		"\u03ca\u01e5\u0000\u0f41\u0f42\u0005\u0144\u0000\u0000\u0f42\u0f44\u0005"+
		"\u038b\u0000\u0000\u0f43\u0f3d\u0001\u0000\u0000\u0000\u0f43\u0f41\u0001"+
		"\u0000\u0000\u0000\u0f43\u0f44\u0001\u0000\u0000\u0000\u0f44\u0f48\u0001"+
		"\u0000\u0000\u0000\u0f45\u0f46\u0005\u00dc\u0000\u0000\u0f46\u0f47\u0005"+
		"\u0380\u0000\u0000\u0f47\u0f49\u0003\u03ca\u01e5\u0000\u0f48\u0f45\u0001"+
		"\u0000\u0000\u0000\u0f48\u0f49\u0001\u0000\u0000\u0000\u0f49\u0f4b\u0001"+
		"\u0000\u0000\u0000\u0f4a\u0f36\u0001\u0000\u0000\u0000\u0f4a\u0f4b\u0001"+
		"\u0000\u0000\u0000\u0f4b\u0f58\u0001\u0000\u0000\u0000\u0f4c\u0f56\u0003"+
		"\u00d4j\u0000\u0f4d\u0f4e\u0005\u0303\u0000\u0000\u0f4e\u0f53\u0003\u00d6"+
		"k\u0000\u0f4f\u0f50\u0005\u0390\u0000\u0000\u0f50\u0f52\u0003\u00d6k\u0000"+
		"\u0f51\u0f4f\u0001\u0000\u0000\u0000\u0f52\u0f55\u0001\u0000\u0000\u0000"+
		"\u0f53\u0f51\u0001\u0000\u0000\u0000\u0f53\u0f54\u0001\u0000\u0000\u0000"+
		"\u0f54\u0f57\u0001\u0000\u0000\u0000\u0f55\u0f53\u0001\u0000\u0000\u0000"+
		"\u0f56\u0f4d\u0001\u0000\u0000\u0000\u0f56\u0f57\u0001\u0000\u0000\u0000"+
		"\u0f57\u0f59\u0001\u0000\u0000\u0000\u0f58\u0f4c\u0001\u0000\u0000\u0000"+
		"\u0f58\u0f59\u0001\u0000\u0000\u0000\u0f59\u00d9\u0001\u0000\u0000\u0000"+
		"\u0f5a\u0f5b\u0005\u001c\u0000\u0000\u0f5b\u0f5d\u0005\u0259\u0000\u0000"+
		"\u0f5c\u0f5e\u0003\u02f8\u017c\u0000\u0f5d\u0f5c\u0001\u0000\u0000\u0000"+
		"\u0f5d\u0f5e\u0001\u0000\u0000\u0000\u0f5e\u0f5f\u0001\u0000\u0000\u0000"+
		"\u0f5f\u0f60\u0003\u03d0\u01e8\u0000\u0f60\u0f61\u0005\u023c\u0000\u0000"+
		"\u0f61\u0f62\u0005\u02f9\u0000\u0000\u0f62\u0f63\u0003\u03d0\u01e8\u0000"+
		"\u0f63\u0f87\u0001\u0000\u0000\u0000\u0f64\u0f65\u0005\u001c\u0000\u0000"+
		"\u0f65\u0f67\u0005\u0259\u0000\u0000\u0f66\u0f68\u0003\u02f8\u017c\u0000"+
		"\u0f67\u0f66\u0001\u0000\u0000\u0000\u0f67\u0f68\u0001\u0000\u0000\u0000"+
		"\u0f68\u0f69\u0001\u0000\u0000\u0000\u0f69\u0f6a\u0003\u03d0\u01e8\u0000"+
		"\u0f6a\u0f6b\u0005\u028e\u0000\u0000\u0f6b\u0f6c\u0003\u02f2\u0179\u0000"+
		"\u0f6c\u0f87\u0001\u0000\u0000\u0000\u0f6d\u0f6e\u0005\u001c\u0000\u0000"+
		"\u0f6e\u0f70\u0005\u0259\u0000\u0000\u0f6f\u0f71\u0003\u02f8\u017c\u0000"+
		"\u0f70\u0f6f\u0001\u0000\u0000\u0000\u0f70\u0f71\u0001\u0000\u0000\u0000"+
		"\u0f71\u0f72\u0001\u0000\u0000\u0000\u0f72\u0f73\u0003\u03d0\u01e8\u0000"+
		"\u0f73\u0f74\u0005\u0312\u0000\u0000\u0f74\u0f75\u0005\u0086\u0000\u0000"+
		"\u0f75\u0f87\u0001\u0000\u0000\u0000\u0f76\u0f77\u0005\u001c\u0000\u0000"+
		"\u0f77\u0f79\u0005\u0259\u0000\u0000\u0f78\u0f7a\u0003\u02f8\u017c\u0000"+
		"\u0f79\u0f78\u0001\u0000\u0000\u0000\u0f79\u0f7a\u0001\u0000\u0000\u0000"+
		"\u0f7a\u0f7b\u0001\u0000\u0000\u0000\u0f7b\u0f7c\u0003\u03d0\u01e8\u0000"+
		"\u0f7c\u0f7d\u0003\u0148\u00a4\u0000\u0f7d\u0f87\u0001\u0000\u0000\u0000"+
		"\u0f7e\u0f7f\u0005\u001c\u0000\u0000\u0f7f\u0f81\u0005\u0259\u0000\u0000"+
		"\u0f80\u0f82\u0003\u02f8\u017c\u0000\u0f81\u0f80\u0001\u0000\u0000\u0000"+
		"\u0f81\u0f82\u0001\u0000\u0000\u0000\u0f82\u0f83\u0001\u0000\u0000\u0000"+
		"\u0f83\u0f84\u0003\u03d0\u01e8\u0000\u0f84\u0f85\u0003\u014c\u00a6\u0000"+
		"\u0f85\u0f87\u0001\u0000\u0000\u0000\u0f86\u0f5a\u0001\u0000\u0000\u0000"+
		"\u0f86\u0f64\u0001\u0000\u0000\u0000\u0f86\u0f6d\u0001\u0000\u0000\u0000"+
		"\u0f86\u0f76\u0001\u0000\u0000\u0000\u0f86\u0f7e\u0001\u0000\u0000\u0000"+
		"\u0f87\u00db\u0001\u0000\u0000\u0000\u0f88\u0f89\u0005\u001c\u0000\u0000"+
		"\u0f89\u0f8a\u0005\u025f\u0000\u0000\u0f8a\u0f8b\u0005\u0005\u0000\u0000"+
		"\u0f8b\u0f8d\u0005\u020f\u0000\u0000\u0f8c\u0f8e\u0003\u02f8\u017c\u0000"+
		"\u0f8d\u0f8c\u0001\u0000\u0000\u0000\u0f8d\u0f8e\u0001\u0000\u0000\u0000"+
		"\u0f8e\u0f8f\u0001\u0000\u0000\u0000\u0f8f\u0f90\u0003\u03d0\u01e8\u0000"+
		"\u0f90\u0f91\u0005\u028e\u0000\u0000\u0f91\u0f92\u0005\\\u0000\u0000\u0f92"+
		"\u0f93\u0005\u037c\u0000\u0000\u0f93\u0f94\u0003\u03f6\u01fb\u0000\u0f94"+
		"\u0fad\u0001\u0000\u0000\u0000\u0f95\u0f96\u0005\u001c\u0000\u0000\u0f96"+
		"\u0f97\u0005\u025f\u0000\u0000\u0f97\u0f98\u0005\u0005\u0000\u0000\u0f98"+
		"\u0f9a\u0005\u020f\u0000\u0000\u0f99\u0f9b\u0003\u02f8\u017c\u0000\u0f9a"+
		"\u0f99\u0001\u0000\u0000\u0000\u0f9a\u0f9b\u0001\u0000\u0000\u0000\u0f9b"+
		"\u0f9c\u0001\u0000\u0000\u0000\u0f9c\u0f9d\u0003\u03d0\u01e8\u0000\u0f9d"+
		"\u0f9e\u0005\u023c\u0000\u0000\u0f9e\u0f9f\u0005\u02f9\u0000\u0000\u0f9f"+
		"\u0fa0\u0003\u03d0\u01e8\u0000\u0fa0\u0fad\u0001\u0000\u0000\u0000\u0fa1"+
		"\u0fa2\u0005\u001c\u0000\u0000\u0fa2\u0fa3\u0005\u025f\u0000\u0000\u0fa3"+
		"\u0fa4\u0005\u0005\u0000\u0000\u0fa4\u0fa6\u0005\u020f\u0000\u0000\u0fa5"+
		"\u0fa7\u0003\u02f8\u017c\u0000\u0fa6\u0fa5\u0001\u0000\u0000\u0000\u0fa6"+
		"\u0fa7\u0001\u0000\u0000\u0000\u0fa7\u0fa8\u0001\u0000\u0000\u0000\u0fa8"+
		"\u0fa9\u0003\u03d0\u01e8\u0000\u0fa9\u0faa\u0005\u028e\u0000\u0000\u0faa"+
		"\u0fab\u0003\u02f2\u0179\u0000\u0fab\u0fad\u0001\u0000\u0000\u0000\u0fac"+
		"\u0f88\u0001\u0000\u0000\u0000\u0fac\u0f95\u0001\u0000\u0000\u0000\u0fac"+
		"\u0fa1\u0001\u0000\u0000\u0000\u0fad\u00dd\u0001\u0000\u0000\u0000\u0fae"+
		"\u0faf\u0005\u001c\u0000\u0000\u0faf\u0fb1\u0005\u027d\u0000\u0000\u0fb0"+
		"\u0fb2\u0003\u02f8\u017c\u0000\u0fb1\u0fb0\u0001\u0000\u0000\u0000\u0fb1"+
		"\u0fb2\u0001\u0000\u0000\u0000\u0fb2\u0fb3\u0001\u0000\u0000\u0000\u0fb3"+
		"\u0fb4\u0003\u03b8\u01dc\u0000\u0fb4\u0fb5\u0005\u023c\u0000\u0000\u0fb5"+
		"\u0fb6\u0005\u02f9\u0000\u0000\u0fb6\u0fb7\u0003\u03b8\u01dc\u0000\u0fb7"+
		"\u1003\u0001\u0000\u0000\u0000\u0fb8\u0fb9\u0005\u001c\u0000\u0000\u0fb9"+
		"\u0fbb\u0005\u027d\u0000\u0000\u0fba\u0fbc\u0003\u02f8\u017c\u0000\u0fbb"+
		"\u0fba\u0001\u0000\u0000\u0000\u0fbb\u0fbc\u0001\u0000\u0000\u0000\u0fbc"+
		"\u0fbd\u0001\u0000\u0000\u0000\u0fbd\u0fbe\u0003\u03b8\u01dc\u0000\u0fbe"+
		"\u0fbf\u0005\u02d0\u0000\u0000\u0fbf\u0fc0\u0005\u0336\u0000\u0000\u0fc0"+
		"\u0fc1\u0003\u03b8\u01dc\u0000\u0fc1\u1003\u0001\u0000\u0000\u0000\u0fc2"+
		"\u0fc3\u0005\u001c\u0000\u0000\u0fc3\u0fc5\u0005\u027d\u0000\u0000\u0fc4"+
		"\u0fc6\u0003\u02f8\u017c\u0000\u0fc5\u0fc4\u0001\u0000\u0000\u0000\u0fc5"+
		"\u0fc6\u0001\u0000\u0000\u0000\u0fc6\u0fc7\u0001\u0000\u0000\u0000\u0fc7"+
		"\u0fc8\u0003\u03b8\u01dc\u0000\u0fc8\u0fcc\u0005\u028e\u0000\u0000\u0fc9"+
		"\u0fca\u0005\u00a7\u0000\u0000\u0fca\u0fcb\u0005\u0380\u0000\u0000\u0fcb"+
		"\u0fcd\u0003\u03f0\u01f8\u0000\u0fcc\u0fc9\u0001\u0000\u0000\u0000\u0fcc"+
		"\u0fcd\u0001\u0000\u0000\u0000\u0fcd\u0fd1\u0001\u0000\u0000\u0000\u0fce"+
		"\u0fcf\u0005\u0193\u0000\u0000\u0fcf\u0fd0\u0005\u0380\u0000\u0000\u0fd0"+
		"\u0fd2\u0003\u03f0\u01f8\u0000\u0fd1\u0fce\u0001\u0000\u0000\u0000\u0fd1"+
		"\u0fd2\u0001\u0000\u0000\u0000\u0fd2\u0fd4\u0001\u0000\u0000\u0000\u0fd3"+
		"\u0fd5\u0003\u008cF\u0000\u0fd4\u0fd3\u0001\u0000\u0000\u0000\u0fd4\u0fd5"+
		"\u0001\u0000\u0000\u0000\u0fd5\u0fd7\u0001\u0000\u0000\u0000\u0fd6\u0fd8"+
		"\u0003\u02f2\u0179\u0000\u0fd7\u0fd6\u0001\u0000\u0000\u0000\u0fd7\u0fd8"+
		"\u0001\u0000\u0000\u0000\u0fd8\u1003\u0001\u0000\u0000\u0000\u0fd9\u0fda"+
		"\u0005\u001c\u0000\u0000\u0fda\u0fdc\u0005\u027d\u0000\u0000\u0fdb\u0fdd"+
		"\u0003\u02f8\u017c\u0000\u0fdc\u0fdb\u0001\u0000\u0000\u0000\u0fdc\u0fdd"+
		"\u0001\u0000\u0000\u0000\u0fdd\u0fde\u0001\u0000\u0000\u0000\u0fde\u0fdf"+
		"\u0003\u03b8\u01dc\u0000\u0fdf\u0fe0\u0003\u0148\u00a4\u0000\u0fe0\u1003"+
		"\u0001\u0000\u0000\u0000\u0fe1\u0fe2\u0005\u001c\u0000\u0000\u0fe2\u0fe4"+
		"\u0005\u027d\u0000\u0000\u0fe3\u0fe5\u0003\u02f8\u017c\u0000\u0fe4\u0fe3"+
		"\u0001\u0000\u0000\u0000\u0fe4\u0fe5\u0001\u0000\u0000\u0000\u0fe5\u0fe6"+
		"\u0001\u0000\u0000\u0000\u0fe6\u0fe7\u0003\u03b8\u01dc\u0000\u0fe7\u0fe8"+
		"\u0003\u014c\u00a6\u0000\u0fe8\u1003\u0001\u0000\u0000\u0000\u0fe9\u0fea"+
		"\u0005\u001c\u0000\u0000\u0fea\u0fec\u0005\u027d\u0000\u0000\u0feb\u0fed"+
		"\u0003\u02f8\u017c\u0000\u0fec\u0feb\u0001\u0000\u0000\u0000\u0fec\u0fed"+
		"\u0001\u0000\u0000\u0000\u0fed\u0fee\u0001\u0000\u0000\u0000\u0fee\u0fef"+
		"\u0003\u03b8\u01dc\u0000\u0fef\u0ff0\u0005\u0312\u0000\u0000\u0ff0\u0ff5"+
		"\u0003\u00e0p\u0000\u0ff1\u0ff2\u0005\u0390\u0000\u0000\u0ff2\u0ff4\u0003"+
		"\u00e0p\u0000\u0ff3\u0ff1\u0001\u0000\u0000\u0000\u0ff4\u0ff7\u0001\u0000"+
		"\u0000\u0000\u0ff5\u0ff3\u0001\u0000\u0000\u0000\u0ff5\u0ff6\u0001\u0000"+
		"\u0000\u0000\u0ff6\u1003\u0001\u0000\u0000\u0000\u0ff7\u0ff5\u0001\u0000"+
		"\u0000\u0000\u0ff8\u0ff9\u0005\u001c\u0000\u0000\u0ff9\u0ffb\u0005\u027d"+
		"\u0000\u0000\u0ffa\u0ffc\u0003\u02f8\u017c\u0000\u0ffb\u0ffa\u0001\u0000"+
		"\u0000\u0000\u0ffb\u0ffc\u0001\u0000\u0000\u0000\u0ffc\u0ffd\u0001\u0000"+
		"\u0000\u0000\u0ffd\u0ffe\u0003\u03b8\u01dc\u0000\u0ffe\u0fff\u0007\u0015"+
		"\u0000\u0000\u0fff\u1000\u0005\u0187\u0000\u0000\u1000\u1001\u0005\u0005"+
		"\u0000\u0000\u1001\u1003\u0001\u0000\u0000\u0000\u1002\u0fae\u0001\u0000"+
		"\u0000\u0000\u1002\u0fb8\u0001\u0000\u0000\u0000\u1002\u0fc2\u0001\u0000"+
		"\u0000\u0000\u1002\u0fd9\u0001\u0000\u0000\u0000\u1002\u0fe1\u0001\u0000"+
		"\u0000\u0000\u1002\u0fe9\u0001\u0000\u0000\u0000\u1002\u0ff8\u0001\u0000"+
		"\u0000\u0000\u1003\u00df\u0001\u0000\u0000\u0000\u1004\u1005\u0007\r\u0000"+
		"\u0000\u1005\u00e1\u0001\u0000\u0000\u0000\u1006\u1007\u0005\u001c\u0000"+
		"\u0000\u1007\u1009\u0005\u0288\u0000\u0000\u1008\u100a\u0003\u02f8\u017c"+
		"\u0000\u1009\u1008\u0001\u0000\u0000\u0000\u1009\u100a\u0001\u0000\u0000"+
		"\u0000\u100a\u100b\u0001\u0000\u0000\u0000\u100b\u100c\u0003\u03ea\u01f5"+
		"\u0000\u100c\u100d\u0005\u023c\u0000\u0000\u100d\u100e\u0005\u02f9\u0000"+
		"\u0000\u100e\u100f\u0003\u03ea\u01f5\u0000\u100f\u103b\u0001\u0000\u0000"+
		"\u0000\u1010\u1011\u0005\u001c\u0000\u0000\u1011\u1013\u0005\u0288\u0000"+
		"\u0000\u1012\u1014\u0003\u02f8\u017c\u0000\u1013\u1012\u0001\u0000\u0000"+
		"\u0000\u1013\u1014\u0001\u0000\u0000\u0000\u1014\u1015\u0001\u0000\u0000"+
		"\u0000\u1015\u1017\u0003\u03ea\u01f5\u0000\u1016\u1018\u0005\u028e\u0000"+
		"\u0000\u1017\u1016\u0001\u0000\u0000\u0000\u1017\u1018\u0001\u0000\u0000"+
		"\u0000\u1018\u1021\u0001\u0000\u0000\u0000\u1019\u101b\u0005\u014b\u0000"+
		"\u0000\u101a\u101c\u0005`\u0000\u0000\u101b\u101a\u0001\u0000\u0000\u0000"+
		"\u101b\u101c\u0001\u0000\u0000\u0000\u101c\u101e\u0001\u0000\u0000\u0000"+
		"\u101d\u101f\u0005\u0380\u0000\u0000\u101e\u101d\u0001\u0000\u0000\u0000"+
		"\u101e\u101f\u0001\u0000\u0000\u0000\u101f\u1020\u0001\u0000\u0000\u0000"+
		"\u1020\u1022\u0003\u03f0\u01f8\u0000\u1021\u1019\u0001\u0000\u0000\u0000"+
		"\u1021\u1022\u0001\u0000\u0000\u0000\u1022\u103b\u0001\u0000\u0000\u0000"+
		"\u1023\u1024\u0005\u001c\u0000\u0000\u1024\u1026\u0005\u0288\u0000\u0000"+
		"\u1025\u1027\u0003\u02f8\u017c\u0000\u1026\u1025\u0001\u0000\u0000\u0000"+
		"\u1026\u1027\u0001\u0000\u0000\u0000\u1027\u1028\u0001\u0000\u0000\u0000"+
		"\u1028\u1029\u0003\u03ea\u01f5\u0000\u1029\u102f\u0005\u028e\u0000\u0000"+
		"\u102a\u102c\u0003\u0244\u0122\u0000\u102b\u102a\u0001\u0000\u0000\u0000"+
		"\u102b\u102c\u0001\u0000\u0000\u0000\u102c\u102d\u0001\u0000\u0000\u0000"+
		"\u102d\u1030\u0003\u02f2\u0179\u0000\u102e\u1030\u0003\u0244\u0122\u0000"+
		"\u102f\u102b\u0001\u0000\u0000\u0000\u102f\u102e\u0001\u0000\u0000\u0000"+
		"\u1030\u103b\u0001\u0000\u0000\u0000\u1031\u1032\u0005\u001c\u0000\u0000"+
		"\u1032\u1034\u0005\u0288\u0000\u0000\u1033\u1035\u0003\u02f8\u017c\u0000"+
		"\u1034\u1033\u0001\u0000\u0000\u0000\u1034\u1035\u0001\u0000\u0000\u0000"+
		"\u1035\u1036\u0001\u0000\u0000\u0000\u1036\u1037\u0003\u03ea\u01f5\u0000"+
		"\u1037\u1038\u0005\u0312\u0000\u0000\u1038\u1039\u0005\u0086\u0000\u0000"+
		"\u1039\u103b\u0001\u0000\u0000\u0000\u103a\u1006\u0001\u0000\u0000\u0000"+
		"\u103a\u1010\u0001\u0000\u0000\u0000\u103a\u1023\u0001\u0000\u0000\u0000"+
		"\u103a\u1031\u0001\u0000\u0000\u0000\u103b\u00e3\u0001\u0000\u0000\u0000"+
		"\u103c\u103e\u0005\u001c\u0000\u0000\u103d\u103f\u0005\u0284\u0000\u0000"+
		"\u103e\u103d\u0001\u0000\u0000\u0000\u103e\u103f\u0001\u0000\u0000\u0000"+
		"\u103f\u1040\u0001\u0000\u0000\u0000\u1040\u1041\u0005\u0158\u0000\u0000"+
		"\u1041\u1042\u0003\u02f8\u017c\u0000\u1042\u1043\u0003\u03d0\u01e8\u0000"+
		"\u1043\u1047\u0005\u028e\u0000\u0000\u1044\u1045\u0005\u030c\u0000\u0000"+
		"\u1045\u1046\u0005\u0380\u0000\u0000\u1046\u1048\u0005\u00f4\u0000\u0000"+
		"\u1047\u1044\u0001\u0000\u0000\u0000\u1047\u1048\u0001\u0000\u0000\u0000"+
		"\u1048\u104c\u0001\u0000\u0000\u0000\u1049\u104a\u0005\u00d3\u0000\u0000"+
		"\u104a\u104b\u0005\u0380\u0000\u0000\u104b\u104d\u0003\u0208\u0104\u0000"+
		"\u104c\u1049\u0001\u0000\u0000\u0000\u104c\u104d\u0001\u0000\u0000\u0000"+
		"\u104d\u1051\u0001\u0000\u0000\u0000\u104e\u104f\u0005\u0101\u0000\u0000"+
		"\u104f\u1050\u0005\u0380\u0000\u0000\u1050\u1052\u0007\u0016\u0000\u0000"+
		"\u1051\u104e\u0001\u0000\u0000\u0000\u1051\u1052\u0001\u0000\u0000\u0000"+
		"\u1052\u1056\u0001\u0000\u0000\u0000\u1053\u1054\u0005\u00fa\u0000\u0000"+
		"\u1054\u1055\u0005\u0380\u0000\u0000\u1055\u1057\u0003\u03ca\u01e5\u0000"+
		"\u1056\u1053\u0001\u0000\u0000\u0000\u1056\u1057\u0001\u0000\u0000\u0000"+
		"\u1057\u1061\u0001\u0000\u0000\u0000\u1058\u1059\u0005\u0100\u0000\u0000"+
		"\u1059\u105f\u0005\u0380\u0000\u0000\u105a\u1060\u0003\u03ca\u01e5\u0000"+
		"\u105b\u105c\u0005\u038a\u0000\u0000\u105c\u105d\u0003\u03cc\u01e6\u0000"+
		"\u105d\u105e\u0005\u038b\u0000\u0000\u105e\u1060\u0001\u0000\u0000\u0000"+
		"\u105f\u105a\u0001\u0000\u0000\u0000\u105f\u105b\u0001\u0000\u0000\u0000"+
		"\u1060\u1062\u0001\u0000\u0000\u0000\u1061\u1058\u0001\u0000\u0000\u0000"+
		"\u1061\u1062\u0001\u0000\u0000\u0000\u1062\u1066\u0001\u0000\u0000\u0000"+
		"\u1063\u1064\u0005\u00ff\u0000\u0000\u1064\u1065\u0005\u0380\u0000\u0000"+
		"\u1065\u1067\u0003\u03ca\u01e5\u0000\u1066\u1063\u0001\u0000\u0000\u0000"+
		"\u1066\u1067\u0001\u0000\u0000\u0000\u1067\u106b\u0001\u0000\u0000\u0000"+
		"\u1068\u1069\u0005\u00fb\u0000\u0000\u1069\u106a\u0005\u0380\u0000\u0000"+
		"\u106a\u106c\u0003\u03ca\u01e5\u0000\u106b\u1068\u0001\u0000\u0000\u0000"+
		"\u106b\u106c\u0001\u0000\u0000\u0000\u106c\u1076\u0001\u0000\u0000\u0000"+
		"\u106d\u106e\u0005\u00fb\u0000\u0000\u106e\u1074\u0005\u0380\u0000\u0000"+
		"\u106f\u1075\u0003\u03ca\u01e5\u0000\u1070\u1071\u0005\u038a\u0000\u0000"+
		"\u1071\u1072\u0003\u03cc\u01e6\u0000\u1072\u1073\u0005\u038b\u0000\u0000"+
		"\u1073\u1075\u0001\u0000\u0000\u0000\u1074\u106f\u0001\u0000\u0000\u0000"+
		"\u1074\u1070\u0001\u0000\u0000\u0000\u1075\u1077\u0001\u0000\u0000\u0000"+
		"\u1076\u106d\u0001\u0000\u0000\u0000\u1076\u1077\u0001\u0000\u0000\u0000"+
		"\u1077\u107b\u0001\u0000\u0000\u0000\u1078\u1079\u0005\u00fc\u0000\u0000"+
		"\u1079\u107a\u0005\u0380\u0000\u0000\u107a\u107c\u0003\u03ca\u01e5\u0000"+
		"\u107b\u1078\u0001\u0000\u0000\u0000\u107b\u107c\u0001\u0000\u0000\u0000"+
		"\u107c\u1080\u0001\u0000\u0000\u0000\u107d\u107e\u0005\u00fd\u0000\u0000"+
		"\u107e\u107f\u0005\u0380\u0000\u0000\u107f\u1081\u0003\u03ca\u01e5\u0000"+
		"\u1080\u107d\u0001\u0000\u0000\u0000\u1080\u1081\u0001\u0000\u0000\u0000"+
		"\u1081\u1088\u0001\u0000\u0000\u0000\u1082\u1083\u0005\u00f9\u0000\u0000"+
		"\u1083\u1084\u0005\u0380\u0000\u0000\u1084\u1085\u0005\u038a\u0000\u0000"+
		"\u1085\u1086\u0003\u03cc\u01e6\u0000\u1086\u1087\u0005\u038b\u0000\u0000"+
		"\u1087\u1089\u0001\u0000\u0000\u0000\u1088\u1082\u0001\u0000\u0000\u0000"+
		"\u1088\u1089\u0001\u0000\u0000\u0000\u1089\u1090\u0001\u0000\u0000\u0000"+
		"\u108a\u108b\u0005\u00f6\u0000\u0000\u108b\u108c\u0005\u0380\u0000\u0000"+
		"\u108c\u108d\u0005\u038a\u0000\u0000\u108d\u108e\u0003\u03cc\u01e6\u0000"+
		"\u108e\u108f\u0005\u038b\u0000\u0000\u108f\u1091\u0001\u0000\u0000\u0000"+
		"\u1090\u108a\u0001\u0000\u0000\u0000\u1090\u1091\u0001\u0000\u0000\u0000"+
		"\u1091\u1098\u0001\u0000\u0000\u0000\u1092\u1093\u0005\u00f8\u0000\u0000"+
		"\u1093\u1094\u0005\u0380\u0000\u0000\u1094\u1095\u0005\u038a\u0000\u0000"+
		"\u1095\u1096\u0003\u03ca\u01e5\u0000\u1096\u1097\u0005\u038b\u0000\u0000"+
		"\u1097\u1099\u0001\u0000\u0000\u0000\u1098\u1092\u0001\u0000\u0000\u0000"+
		"\u1098\u1099\u0001\u0000\u0000\u0000\u1099\u109d\u0001\u0000\u0000\u0000"+
		"\u109a\u109b\u0005\u00f7\u0000\u0000\u109b\u109c\u0005\u0380\u0000\u0000"+
		"\u109c\u109e\u0007\u0017\u0000\u0000\u109d\u109a\u0001\u0000\u0000\u0000"+
		"\u109d\u109e\u0001\u0000\u0000\u0000\u109e\u10a2\u0001\u0000\u0000\u0000"+
		"\u109f\u10a0\u0005\u00f7\u0000\u0000\u10a0\u10a1\u0005\u0380\u0000\u0000"+
		"\u10a1\u10a3\u0003\u03ca\u01e5\u0000\u10a2\u109f\u0001\u0000\u0000\u0000"+
		"\u10a2\u10a3\u0001\u0000\u0000\u0000\u10a3\u10c7\u0001\u0000\u0000\u0000"+
		"\u10a4\u10a6\u0005\u001c\u0000\u0000\u10a5\u10a7\u0005\u0284\u0000\u0000"+
		"\u10a6\u10a5\u0001\u0000\u0000\u0000\u10a6\u10a7\u0001\u0000\u0000\u0000"+
		"\u10a7\u10a8\u0001\u0000\u0000\u0000\u10a8\u10aa\u0005\u0158\u0000\u0000"+
		"\u10a9\u10ab\u0003\u02f8\u017c\u0000\u10aa\u10a9\u0001\u0000\u0000\u0000"+
		"\u10aa\u10ab\u0001\u0000\u0000\u0000\u10ab\u10ac\u0001\u0000\u0000\u0000"+
		"\u10ac\u10ad\u0003\u03d0\u01e8\u0000\u10ad\u10ae\u0005\u0312\u0000\u0000"+
		"\u10ae\u10b3\u0003\u00e6s\u0000\u10af\u10b0\u0005\u0390\u0000\u0000\u10b0"+
		"\u10b2\u0003\u00e6s\u0000\u10b1\u10af\u0001\u0000\u0000\u0000\u10b2\u10b5"+
		"\u0001\u0000\u0000\u0000\u10b3\u10b1\u0001\u0000\u0000\u0000\u10b3\u10b4"+
		"\u0001\u0000\u0000\u0000\u10b4\u10c7\u0001\u0000\u0000\u0000\u10b5\u10b3"+
		"\u0001\u0000\u0000\u0000\u10b6\u10b8\u0005\u001c\u0000\u0000\u10b7\u10b9"+
		"\u0005\u0284\u0000\u0000\u10b8\u10b7\u0001\u0000\u0000\u0000\u10b8\u10b9"+
		"\u0001\u0000\u0000\u0000\u10b9\u10ba\u0001\u0000\u0000\u0000\u10ba\u10bb"+
		"\u0005\u0158\u0000\u0000\u10bb\u10bc\u0003\u03d0\u01e8\u0000\u10bc\u10bd"+
		"\u0003\u0148\u00a4\u0000\u10bd\u10c7\u0001\u0000\u0000\u0000\u10be\u10c0"+
		"\u0005\u001c\u0000\u0000\u10bf\u10c1\u0005\u0284\u0000\u0000\u10c0\u10bf"+
		"\u0001\u0000\u0000\u0000\u10c0\u10c1\u0001\u0000\u0000\u0000\u10c1\u10c2"+
		"\u0001\u0000\u0000\u0000\u10c2\u10c3\u0005\u0158\u0000\u0000\u10c3\u10c4"+
		"\u0003\u03d0\u01e8\u0000\u10c4\u10c5\u0003\u014c\u00a6\u0000\u10c5\u10c7"+
		"\u0001\u0000\u0000\u0000\u10c6\u103c\u0001\u0000\u0000\u0000\u10c6\u10a4"+
		"\u0001\u0000\u0000\u0000\u10c6\u10b6\u0001\u0000\u0000\u0000\u10c6\u10be"+
		"\u0001\u0000\u0000\u0000\u10c7\u00e5\u0001\u0000\u0000\u0000\u10c8\u10d1"+
		"\u0005\u00d3\u0000\u0000\u10c9\u10d1\u0005\u01ac\u0000\u0000\u10ca\u10d1"+
		"\u0005\u01c7\u0000\u0000\u10cb\u10d1\u0005\u01c8\u0000\u0000\u10cc\u10cd"+
		"\u0005\u01cd\u0000\u0000\u10cd\u10ce\u0005\u0380\u0000\u0000\u10ce\u10d1"+
		"\u0007\u0018\u0000\u0000\u10cf\u10d1\u0005\u0086\u0000\u0000\u10d0\u10c8"+
		"\u0001\u0000\u0000\u0000\u10d0\u10c9\u0001\u0000\u0000\u0000\u10d0\u10ca"+
		"\u0001\u0000\u0000\u0000\u10d0\u10cb\u0001\u0000\u0000\u0000\u10d0\u10cc"+
		"\u0001\u0000\u0000\u0000\u10d0\u10cf\u0001\u0000\u0000\u0000\u10d1\u00e7"+
		"\u0001\u0000\u0000\u0000\u10d2\u10d4\u0005\u001c\u0000\u0000\u10d3\u10d5"+
		"\u0005\u0284\u0000\u0000\u10d4\u10d3\u0001\u0000\u0000\u0000\u10d4\u10d5"+
		"\u0001\u0000\u0000\u0000\u10d5\u10d6\u0001\u0000\u0000\u0000\u10d6\u10d8"+
		"\u0005\u0158\u0000\u0000\u10d7\u10d9\u0003\u02f8\u017c\u0000\u10d8\u10d7"+
		"\u0001\u0000\u0000\u0000\u10d8\u10d9\u0001\u0000\u0000\u0000\u10d9\u10da"+
		"\u0001\u0000\u0000\u0000\u10da\u10db\u0003\u03d0\u01e8\u0000\u10db\u10df"+
		"\u0005\u028e\u0000\u0000\u10dc\u10dd\u0005\u030c\u0000\u0000\u10dd\u10de"+
		"\u0005\u0380\u0000\u0000\u10de\u10e0\u0005\u00f4\u0000\u0000\u10df\u10dc"+
		"\u0001\u0000\u0000\u0000\u10df\u10e0\u0001\u0000\u0000\u0000\u10e0\u10e2"+
		"\u0001\u0000\u0000\u0000\u10e1\u10e3\u0003\u0094J\u0000\u10e2\u10e1\u0001"+
		"\u0000\u0000\u0000\u10e2\u10e3\u0001\u0000\u0000\u0000\u10e3\u10e7\u0001"+
		"\u0000\u0000\u0000\u10e4\u10e5\u0005\u0101\u0000\u0000\u10e5\u10e6\u0005"+
		"\u0380\u0000\u0000\u10e6\u10e8\u0007\u0016\u0000\u0000\u10e7\u10e4\u0001"+
		"\u0000\u0000\u0000\u10e7\u10e8\u0001\u0000\u0000\u0000\u10e8\u10ec\u0001"+
		"\u0000\u0000\u0000\u10e9\u10ea\u0005\u00fa\u0000\u0000\u10ea\u10eb\u0005"+
		"\u0380\u0000\u0000\u10eb\u10ed\u0003\u03ca\u01e5\u0000\u10ec\u10e9\u0001"+
		"\u0000\u0000\u0000\u10ec\u10ed\u0001\u0000\u0000\u0000\u10ed\u10f7\u0001"+
		"\u0000\u0000\u0000\u10ee\u10ef\u0005\u0100\u0000\u0000\u10ef\u10f5\u0005"+
		"\u0380\u0000\u0000\u10f0\u10f6\u0003\u03ca\u01e5\u0000\u10f1\u10f2\u0005"+
		"\u038a\u0000\u0000\u10f2\u10f3\u0003\u03cc\u01e6\u0000\u10f3\u10f4\u0005"+
		"\u038b\u0000\u0000\u10f4\u10f6\u0001\u0000\u0000\u0000\u10f5\u10f0\u0001"+
		"\u0000\u0000\u0000\u10f5\u10f1\u0001\u0000\u0000\u0000\u10f6\u10f8\u0001"+
		"\u0000\u0000\u0000\u10f7\u10ee\u0001\u0000\u0000\u0000\u10f7\u10f8\u0001"+
		"\u0000\u0000\u0000\u10f8\u10fc\u0001\u0000\u0000\u0000\u10f9\u10fa\u0005"+
		"\u00ff\u0000\u0000\u10fa\u10fb\u0005\u0380\u0000\u0000\u10fb\u10fd\u0003"+
		"\u03ca\u01e5\u0000\u10fc\u10f9\u0001\u0000\u0000\u0000\u10fc\u10fd\u0001"+
		"\u0000\u0000\u0000\u10fd\u1101\u0001\u0000\u0000\u0000\u10fe\u10ff\u0005"+
		"\u00fb\u0000\u0000\u10ff\u1100\u0005\u0380\u0000\u0000\u1100\u1102\u0003"+
		"\u03ca\u01e5\u0000\u1101\u10fe\u0001\u0000\u0000\u0000\u1101\u1102\u0001"+
		"\u0000\u0000\u0000\u1102\u110c\u0001\u0000\u0000\u0000\u1103\u1104\u0005"+
		"\u00fb\u0000\u0000\u1104\u110a\u0005\u0380\u0000\u0000\u1105\u110b\u0003"+
		"\u03ca\u01e5\u0000\u1106\u1107\u0005\u038a\u0000\u0000\u1107\u1108\u0003"+
		"\u03cc\u01e6\u0000\u1108\u1109\u0005\u038b\u0000\u0000\u1109\u110b\u0001"+
		"\u0000\u0000\u0000\u110a\u1105\u0001\u0000\u0000\u0000\u110a\u1106\u0001"+
		"\u0000\u0000\u0000\u110b\u110d\u0001\u0000\u0000\u0000\u110c\u1103\u0001"+
		"\u0000\u0000\u0000\u110c\u110d\u0001\u0000\u0000\u0000\u110d\u1111\u0001"+
		"\u0000\u0000\u0000\u110e\u110f\u0005\u00fc\u0000\u0000\u110f\u1110\u0005"+
		"\u0380\u0000\u0000\u1110\u1112\u0003\u03ca\u01e5\u0000\u1111\u110e\u0001"+
		"\u0000\u0000\u0000\u1111\u1112\u0001\u0000\u0000\u0000\u1112\u1116\u0001"+
		"\u0000\u0000\u0000\u1113\u1114\u0005\u00fd\u0000\u0000\u1114\u1115\u0005"+
		"\u0380\u0000\u0000\u1115\u1117\u0003\u03ca\u01e5\u0000\u1116\u1113\u0001"+
		"\u0000\u0000\u0000\u1116\u1117\u0001\u0000\u0000\u0000\u1117\u111e\u0001"+
		"\u0000\u0000\u0000\u1118\u1119\u0005\u00f9\u0000\u0000\u1119\u111a\u0005"+
		"\u0380\u0000\u0000\u111a\u111b\u0005\u038a\u0000\u0000\u111b\u111c\u0003"+
		"\u03cc\u01e6\u0000\u111c\u111d\u0005\u038b\u0000\u0000\u111d\u111f\u0001"+
		"\u0000\u0000\u0000\u111e\u1118\u0001\u0000\u0000\u0000\u111e\u111f\u0001"+
		"\u0000\u0000\u0000\u111f\u1126\u0001\u0000\u0000\u0000\u1120\u1121\u0005"+
		"\u00f6\u0000\u0000\u1121\u1122\u0005\u0380\u0000\u0000\u1122\u1123\u0005"+
		"\u038a\u0000\u0000\u1123\u1124\u0003\u03cc\u01e6\u0000\u1124\u1125\u0005"+
		"\u038b\u0000\u0000\u1125\u1127\u0001\u0000\u0000\u0000\u1126\u1120\u0001"+
		"\u0000\u0000\u0000\u1126\u1127\u0001\u0000\u0000\u0000\u1127\u112e\u0001"+
		"\u0000\u0000\u0000\u1128\u1129\u0005\u00f8\u0000\u0000\u1129\u112a\u0005"+
		"\u0380\u0000\u0000\u112a\u112b\u0005\u038a\u0000\u0000\u112b\u112c\u0003"+
		"\u03ca\u01e5\u0000\u112c\u112d\u0005\u038b\u0000\u0000\u112d\u112f\u0001"+
		"\u0000\u0000\u0000\u112e\u1128\u0001\u0000\u0000\u0000\u112e\u112f\u0001"+
		"\u0000\u0000\u0000\u112f\u1135\u0001\u0000\u0000\u0000\u1130\u1131\u0005"+
		"\u00f7\u0000\u0000\u1131\u1132\u0005\u0380\u0000\u0000\u1132\u1136\u0005"+
		"\u00c2\u0000\u0000\u1133\u1136\u0005\u00d2\u0000\u0000\u1134\u1136\u0005"+
		"\u00d4\u0000\u0000\u1135\u1130\u0001\u0000\u0000\u0000\u1135\u1133\u0001"+
		"\u0000\u0000\u0000\u1135\u1134\u0001\u0000\u0000\u0000\u1135\u1136\u0001"+
		"\u0000\u0000\u0000\u1136\u1137\u0001\u0000\u0000\u0000\u1137\u1138\u0005"+
		"\u00fe\u0000\u0000\u1138\u1139\u0005\u0380\u0000\u0000\u1139\u113a\u0003"+
		"\u03ca\u01e5\u0000\u113a\u115e\u0001\u0000\u0000\u0000\u113b\u113d\u0005"+
		"\u001c\u0000\u0000\u113c\u113e\u0005\u0284\u0000\u0000\u113d\u113c\u0001"+
		"\u0000\u0000\u0000\u113d\u113e\u0001\u0000\u0000\u0000\u113e\u113f\u0001"+
		"\u0000\u0000\u0000\u113f\u1141\u0005\u0158\u0000\u0000\u1140\u1142\u0003"+
		"\u02f8\u017c\u0000\u1141\u1140\u0001\u0000\u0000\u0000\u1141\u1142\u0001"+
		"\u0000\u0000\u0000\u1142\u1143\u0001\u0000\u0000\u0000\u1143\u1144\u0003"+
		"\u03d0\u01e8\u0000\u1144\u1145\u0005\u0312\u0000\u0000\u1145\u114a\u0003"+
		"\u00eau\u0000\u1146\u1147\u0005\u0390\u0000\u0000\u1147\u1149\u0003\u00ea"+
		"u\u0000\u1148\u1146\u0001\u0000\u0000\u0000\u1149\u114c\u0001\u0000\u0000"+
		"\u0000\u114a\u1148\u0001\u0000\u0000\u0000\u114a\u114b\u0001\u0000\u0000"+
		"\u0000\u114b\u115e\u0001\u0000\u0000\u0000\u114c\u114a\u0001\u0000\u0000"+
		"\u0000\u114d\u114f\u0005\u001c\u0000\u0000\u114e\u1150\u0005\u0284\u0000"+
		"\u0000\u114f\u114e\u0001\u0000\u0000\u0000\u114f\u1150\u0001\u0000\u0000"+
		"\u0000\u1150\u1151\u0001\u0000\u0000\u0000\u1151\u1152\u0005\u0158\u0000"+
		"\u0000\u1152\u1153\u0003\u03d0\u01e8\u0000\u1153\u1154\u0003\u0148\u00a4"+
		"\u0000\u1154\u115e\u0001\u0000\u0000\u0000\u1155\u1157\u0005\u001c\u0000"+
		"\u0000\u1156\u1158\u0005\u0284\u0000\u0000\u1157\u1156\u0001\u0000\u0000"+
		"\u0000\u1157\u1158\u0001\u0000\u0000\u0000\u1158\u1159\u0001\u0000\u0000"+
		"\u0000\u1159\u115a\u0005\u0158\u0000\u0000\u115a\u115b\u0003\u03d0\u01e8"+
		"\u0000\u115b\u115c\u0003\u014c\u00a6\u0000\u115c\u115e\u0001\u0000\u0000"+
		"\u0000\u115d\u10d2\u0001\u0000\u0000\u0000\u115d\u113b\u0001\u0000\u0000"+
		"\u0000\u115d\u114d\u0001\u0000\u0000\u0000\u115d\u1155\u0001\u0000\u0000"+
		"\u0000\u115e\u00e9\u0001\u0000\u0000\u0000\u115f\u1160\u0007\u0019\u0000"+
		"\u0000\u1160\u00eb\u0001\u0000\u0000\u0000\u1161\u1163\u0005\u001c\u0000"+
		"\u0000\u1162\u1164\u0005\u0284\u0000\u0000\u1163\u1162\u0001\u0000\u0000"+
		"\u0000\u1163\u1164\u0001\u0000\u0000\u0000\u1164\u1165\u0001\u0000\u0000"+
		"\u0000\u1165\u1167\u0005\u0158\u0000\u0000\u1166\u1168\u0003\u02f8\u017c"+
		"\u0000\u1167\u1166\u0001\u0000\u0000\u0000\u1167\u1168\u0001\u0000\u0000"+
		"\u0000\u1168\u1169\u0001\u0000\u0000\u0000\u1169\u116a\u0003\u03d0\u01e8"+
		"\u0000\u116a\u116e\u0005\u028e\u0000\u0000\u116b\u116c\u0005\u030c\u0000"+
		"\u0000\u116c\u116d\u0005\u0380\u0000\u0000\u116d\u116f\u0005\u0269\u0000"+
		"\u0000\u116e\u116b\u0001\u0000\u0000\u0000\u116e\u116f\u0001\u0000\u0000"+
		"\u0000\u116f\u1171\u0001\u0000\u0000\u0000\u1170\u1172\u0003\u0094J\u0000"+
		"\u1171\u1170\u0001\u0000\u0000\u0000\u1171\u1172\u0001\u0000\u0000\u0000"+
		"\u1172\u1176\u0001\u0000\u0000\u0000\u1173\u1174\u0005\u026c\u0000\u0000"+
		"\u1174\u1175\u0005\u0380\u0000\u0000\u1175\u1177\u0003\u03ca\u01e5\u0000"+
		"\u1176\u1173\u0001\u0000\u0000\u0000\u1176\u1177\u0001\u0000\u0000\u0000"+
		"\u1177\u117b\u0001\u0000\u0000\u0000\u1178\u1179\u0005\u0275\u0000\u0000"+
		"\u1179\u117a\u0005\u0380\u0000\u0000\u117a\u117c\u0003\u03ca\u01e5\u0000"+
		"\u117b\u1178\u0001\u0000\u0000\u0000\u117b\u117c\u0001\u0000\u0000\u0000"+
		"\u117c\u1180\u0001\u0000\u0000\u0000\u117d\u117e\u0005\u026e\u0000\u0000"+
		"\u117e\u117f\u0005\u0380\u0000\u0000\u117f\u1181\u0003\u03ca\u01e5\u0000"+
		"\u1180\u117d\u0001\u0000\u0000\u0000\u1180\u1181\u0001\u0000\u0000\u0000"+
		"\u1181\u1185\u0001\u0000\u0000\u0000\u1182\u1183\u0005\u0276\u0000\u0000"+
		"\u1183\u1184\u0005\u0380\u0000\u0000\u1184\u1186\u0003\u03ca\u01e5\u0000"+
		"\u1185\u1182\u0001\u0000\u0000\u0000\u1185\u1186\u0001\u0000\u0000\u0000"+
		"\u1186\u118a\u0001\u0000\u0000\u0000\u1187\u1188\u0005\u0274\u0000\u0000"+
		"\u1188\u1189\u0005\u0380\u0000\u0000\u1189\u118b\u0003\u03ca\u01e5\u0000"+
		"\u118a\u1187\u0001\u0000\u0000\u0000\u118a\u118b\u0001\u0000\u0000\u0000"+
		"\u118b\u118f\u0001\u0000\u0000\u0000\u118c\u118d\u0005\u026a\u0000\u0000"+
		"\u118d\u118e\u0005\u0380\u0000\u0000\u118e\u1190\u0003\u0208\u0104\u0000"+
		"\u118f\u118c\u0001\u0000\u0000\u0000\u118f\u1190\u0001\u0000\u0000\u0000"+
		"\u1190\u1194\u0001\u0000\u0000\u0000\u1191\u1192\u0005\u0273\u0000\u0000"+
		"\u1192\u1193\u0005\u0380\u0000\u0000\u1193\u1195\u0003\u03ca\u01e5\u0000"+
		"\u1194\u1191\u0001\u0000\u0000\u0000\u1194\u1195\u0001\u0000\u0000\u0000"+
		"\u1195\u1199\u0001\u0000\u0000\u0000\u1196\u1197\u0005\u0270\u0000\u0000"+
		"\u1197\u1198\u0005\u0380\u0000\u0000\u1198\u119a\u0003\u0208\u0104\u0000"+
		"\u1199\u1196\u0001\u0000\u0000\u0000\u1199\u119a\u0001\u0000\u0000\u0000"+
		"\u119a\u119e\u0001\u0000\u0000\u0000\u119b\u119c\u0005\u026f\u0000\u0000"+
		"\u119c\u119d\u0005\u0380\u0000\u0000\u119d\u119f\u0003\u03ca\u01e5\u0000"+
		"\u119e\u119b\u0001\u0000\u0000\u0000\u119e\u119f\u0001\u0000\u0000\u0000"+
		"\u119f\u11a3\u0001\u0000\u0000\u0000\u11a0\u11a1\u0005\u026d\u0000\u0000"+
		"\u11a1\u11a2\u0005\u0380\u0000\u0000\u11a2\u11a4\u0003\u03ca\u01e5\u0000"+
		"\u11a3\u11a0\u0001\u0000\u0000\u0000\u11a3\u11a4\u0001\u0000\u0000\u0000"+
		"\u11a4\u11a8\u0001\u0000\u0000\u0000\u11a5\u11a6\u0005\u026b\u0000\u0000"+
		"\u11a6\u11a7\u0005\u0380\u0000\u0000\u11a7\u11a9\u0003\u0208\u0104\u0000"+
		"\u11a8\u11a5\u0001\u0000\u0000\u0000\u11a8\u11a9\u0001\u0000\u0000\u0000"+
		"\u11a9\u11ad\u0001\u0000\u0000\u0000\u11aa\u11ab\u0005\u0272\u0000\u0000"+
		"\u11ab\u11ac\u0005\u0380\u0000\u0000\u11ac\u11ae\u0003\u03ca\u01e5\u0000"+
		"\u11ad\u11aa\u0001\u0000\u0000\u0000\u11ad\u11ae\u0001\u0000\u0000\u0000"+
		"\u11ae\u11b2\u0001\u0000\u0000\u0000\u11af\u11b0\u0005\u0271\u0000\u0000"+
		"\u11b0\u11b1\u0005\u0380\u0000\u0000\u11b1\u11b3\u0003\u03ca\u01e5\u0000"+
		"\u11b2\u11af\u0001\u0000\u0000\u0000\u11b2\u11b3\u0001\u0000\u0000\u0000"+
		"\u11b3\u11d1\u0001\u0000\u0000\u0000\u11b4\u11b6\u0005\u001c\u0000\u0000"+
		"\u11b5\u11b7\u0005\u0284\u0000\u0000\u11b6\u11b5\u0001\u0000\u0000\u0000"+
		"\u11b6\u11b7\u0001\u0000\u0000\u0000\u11b7\u11b8\u0001\u0000\u0000\u0000"+
		"\u11b8\u11ba\u0005\u0158\u0000\u0000\u11b9\u11bb\u0003\u02f8\u017c\u0000"+
		"\u11ba\u11b9\u0001\u0000\u0000\u0000\u11ba\u11bb\u0001\u0000\u0000\u0000"+
		"\u11bb\u11bc\u0001\u0000\u0000\u0000\u11bc\u11bd\u0003\u03d0\u01e8\u0000"+
		"\u11bd\u11be\u0005\u0312\u0000\u0000\u11be\u11bf\u0005\u00d3\u0000\u0000"+
		"\u11bf\u11d1\u0001\u0000\u0000\u0000\u11c0\u11c2\u0005\u001c\u0000\u0000"+
		"\u11c1\u11c3\u0005\u0284\u0000\u0000\u11c2\u11c1\u0001\u0000\u0000\u0000"+
		"\u11c2\u11c3\u0001\u0000\u0000\u0000\u11c3\u11c4\u0001\u0000\u0000\u0000"+
		"\u11c4\u11c5\u0005\u0158\u0000\u0000\u11c5\u11c6\u0003\u03d0\u01e8\u0000"+
		"\u11c6\u11c7\u0003\u0148\u00a4\u0000\u11c7\u11d1\u0001\u0000\u0000\u0000"+
		"\u11c8\u11ca\u0005\u001c\u0000\u0000\u11c9\u11cb\u0005\u0284\u0000\u0000"+
		"\u11ca\u11c9\u0001\u0000\u0000\u0000\u11ca\u11cb\u0001\u0000\u0000\u0000"+
		"\u11cb\u11cc\u0001\u0000\u0000\u0000\u11cc\u11cd\u0005\u0158\u0000\u0000"+
		"\u11cd\u11ce\u0003\u03d0\u01e8\u0000\u11ce\u11cf\u0003\u014c\u00a6\u0000"+
		"\u11cf\u11d1\u0001\u0000\u0000\u0000\u11d0\u1161\u0001\u0000\u0000\u0000"+
		"\u11d0\u11b4\u0001\u0000\u0000\u0000\u11d0\u11c0\u0001\u0000\u0000\u0000"+
		"\u11d0\u11c8\u0001\u0000\u0000\u0000\u11d1\u00ed\u0001\u0000\u0000\u0000"+
		"\u11d2\u11d4\u0005\u001c\u0000\u0000\u11d3\u11d5\u0005\u0284\u0000\u0000"+
		"\u11d4\u11d3\u0001\u0000\u0000\u0000\u11d4\u11d5\u0001\u0000\u0000\u0000"+
		"\u11d5\u11d6\u0001\u0000\u0000\u0000\u11d6\u11d8\u0005\u0158\u0000\u0000"+
		"\u11d7\u11d9\u0003\u02f8\u017c\u0000\u11d8\u11d7\u0001\u0000\u0000\u0000"+
		"\u11d8\u11d9\u0001\u0000\u0000\u0000\u11d9\u11da\u0001\u0000\u0000\u0000"+
		"\u11da\u11db\u0003\u03d0\u01e8\u0000\u11db\u11df\u0005\u028e\u0000\u0000"+
		"\u11dc\u11dd\u0005\u01ac\u0000\u0000\u11dd\u11de\u0005\u0380\u0000\u0000"+
		"\u11de\u11e0\u0003\u03ca\u01e5\u0000\u11df\u11dc\u0001\u0000\u0000\u0000"+
		"\u11df\u11e0\u0001\u0000\u0000\u0000\u11e0\u11e4\u0001\u0000\u0000\u0000"+
		"\u11e1\u11e2\u0005\u02d1\u0000\u0000\u11e2\u11e3\u0005\u0380\u0000\u0000"+
		"\u11e3\u11e5\u0003\u0208\u0104\u0000\u11e4\u11e1\u0001\u0000\u0000\u0000"+
		"\u11e4\u11e5\u0001\u0000\u0000\u0000\u11e5\u11e7\u0001\u0000\u0000\u0000"+
		"\u11e6\u11e8\u0003\u02f2\u0179\u0000\u11e7\u11e6\u0001\u0000\u0000\u0000"+
		"\u11e7\u11e8\u0001\u0000\u0000\u0000\u11e8\u120c\u0001\u0000\u0000\u0000"+
		"\u11e9\u11eb\u0005\u001c\u0000\u0000\u11ea\u11ec\u0005\u0284\u0000\u0000"+
		"\u11eb\u11ea\u0001\u0000\u0000\u0000\u11eb\u11ec\u0001\u0000\u0000\u0000"+
		"\u11ec\u11ed\u0001\u0000\u0000\u0000\u11ed\u11ef\u0005\u0158\u0000\u0000"+
		"\u11ee\u11f0\u0003\u02f8\u017c\u0000\u11ef\u11ee\u0001\u0000\u0000\u0000"+
		"\u11ef\u11f0\u0001\u0000\u0000\u0000\u11f0\u11f1\u0001\u0000\u0000\u0000"+
		"\u11f1\u11f2\u0003\u03d0\u01e8\u0000\u11f2\u11f3\u0005\u0312\u0000\u0000"+
		"\u11f3\u11f8\u0003\u00f0x\u0000\u11f4\u11f5\u0005\u0390\u0000\u0000\u11f5"+
		"\u11f7\u0003\u00f0x\u0000\u11f6\u11f4\u0001\u0000\u0000\u0000\u11f7\u11fa"+
		"\u0001\u0000\u0000\u0000\u11f8\u11f6\u0001\u0000\u0000\u0000\u11f8\u11f9"+
		"\u0001\u0000\u0000\u0000\u11f9\u120c\u0001\u0000\u0000\u0000\u11fa\u11f8"+
		"\u0001\u0000\u0000\u0000\u11fb\u11fd\u0005\u001c\u0000\u0000\u11fc\u11fe"+
		"\u0005\u0284\u0000\u0000\u11fd\u11fc\u0001\u0000\u0000\u0000\u11fd\u11fe"+
		"\u0001\u0000\u0000\u0000\u11fe\u11ff\u0001\u0000\u0000\u0000\u11ff\u1200"+
		"\u0005\u0158\u0000\u0000\u1200\u1201\u0003\u03d0\u01e8\u0000\u1201\u1202"+
		"\u0003\u0148\u00a4\u0000\u1202\u120c\u0001\u0000\u0000\u0000\u1203\u1205"+
		"\u0005\u001c\u0000\u0000\u1204\u1206\u0005\u0284\u0000\u0000\u1205\u1204"+
		"\u0001\u0000\u0000\u0000\u1205\u1206\u0001\u0000\u0000\u0000\u1206\u1207"+
		"\u0001\u0000\u0000\u0000\u1207\u1208\u0005\u0158\u0000\u0000\u1208\u1209"+
		"\u0003\u03d0\u01e8\u0000\u1209\u120a\u0003\u014c\u00a6\u0000\u120a\u120c"+
		"\u0001\u0000\u0000\u0000\u120b\u11d2\u0001\u0000\u0000\u0000\u120b\u11e9"+
		"\u0001\u0000\u0000\u0000\u120b\u11fb\u0001\u0000\u0000\u0000\u120b\u1203"+
		"\u0001\u0000\u0000\u0000\u120c\u00ef\u0001\u0000\u0000\u0000\u120d\u120e"+
		"\u0007\u001a\u0000\u0000\u120e\u00f1\u0001\u0000\u0000\u0000\u120f\u1210"+
		"\u0005\u001c\u0000\u0000\u1210\u1211\u0005\u028a\u0000\u0000\u1211\u1212"+
		"\u0005\u028e\u0000\u0000\u1212\u121f\u0003\u0090H\u0000\u1213\u1214\u0005"+
		"\u001c\u0000\u0000\u1214\u1215\u0005\u028a\u0000\u0000\u1215\u1216\u0005"+
		"\u0312\u0000\u0000\u1216\u121b\u0003\u03c4\u01e2\u0000\u1217\u1218\u0005"+
		"\u0390\u0000\u0000\u1218\u121a\u0003\u03c4\u01e2\u0000\u1219\u1217\u0001"+
		"\u0000\u0000\u0000\u121a\u121d\u0001\u0000\u0000\u0000\u121b\u1219\u0001"+
		"\u0000\u0000\u0000\u121b\u121c\u0001\u0000\u0000\u0000\u121c\u121f\u0001"+
		"\u0000\u0000\u0000\u121d\u121b\u0001\u0000\u0000\u0000\u121e\u120f\u0001"+
		"\u0000\u0000\u0000\u121e\u1213\u0001\u0000\u0000\u0000\u121f\u00f3\u0001"+
		"\u0000\u0000\u0000\u1220\u1221\u0005\u001c\u0000\u0000\u1221\u1222\u0005"+
		"\u028a\u0000\u0000\u1222\u1224\u0005\u020f\u0000\u0000\u1223\u1225\u0003"+
		"\u02f8\u017c\u0000\u1224\u1223\u0001\u0000\u0000\u0000\u1224\u1225\u0001"+
		"\u0000\u0000\u0000\u1225\u1226\u0001\u0000\u0000\u0000\u1226\u1227\u0003"+
		"\u03ea\u01f5\u0000\u1227\u122b\u0005\u028e\u0000\u0000\u1228\u122a\u0003"+
		"\u01d4\u00ea\u0000\u1229\u1228\u0001\u0000\u0000\u0000\u122a\u122d\u0001"+
		"\u0000\u0000\u0000\u122b\u1229\u0001\u0000\u0000\u0000\u122b\u122c\u0001"+
		"\u0000\u0000\u0000\u122c\u1251\u0001\u0000\u0000\u0000\u122d\u122b\u0001"+
		"\u0000\u0000\u0000\u122e\u122f\u0005\u001c\u0000\u0000\u122f\u1230\u0005"+
		"\u028a\u0000\u0000\u1230\u1232\u0005\u020f\u0000\u0000\u1231\u1233\u0003"+
		"\u02f8\u017c\u0000\u1232\u1231\u0001\u0000\u0000\u0000\u1232\u1233\u0001"+
		"\u0000\u0000\u0000\u1233\u1234\u0001\u0000\u0000\u0000\u1234\u1235\u0003"+
		"\u03ea\u01f5\u0000\u1235\u1238\u0005\u0312\u0000\u0000\u1236\u1239\u0003"+
		"\u01d6\u00eb\u0000\u1237\u1239\u0005\u0086\u0000\u0000\u1238\u1236\u0001"+
		"\u0000\u0000\u0000\u1238\u1237\u0001\u0000\u0000\u0000\u1239\u1251\u0001"+
		"\u0000\u0000\u0000\u123a\u123b\u0005\u001c\u0000\u0000\u123b\u123c\u0005"+
		"\u028a\u0000\u0000\u123c\u123e\u0005\u020f\u0000\u0000\u123d\u123f\u0003"+
		"\u02f8\u017c\u0000\u123e\u123d\u0001\u0000\u0000\u0000\u123e\u123f\u0001"+
		"\u0000\u0000\u0000\u123f\u1240\u0001\u0000\u0000\u0000\u1240\u1241\u0003"+
		"\u03ea\u01f5\u0000\u1241\u1242\u0005\u023c\u0000\u0000\u1242\u1243\u0005"+
		"\u02f9\u0000\u0000\u1243\u1244\u0003\u03ea\u01f5\u0000\u1244\u1251\u0001"+
		"\u0000\u0000\u0000\u1245\u1246\u0005\u001c\u0000\u0000\u1246\u1247\u0005"+
		"\u028a\u0000\u0000\u1247\u1249\u0005\u020f\u0000\u0000\u1248\u124a\u0003"+
		"\u02f8\u017c\u0000\u1249\u1248\u0001\u0000\u0000\u0000\u1249\u124a\u0001"+
		"\u0000\u0000\u0000\u124a\u124b\u0001\u0000\u0000\u0000\u124b\u124e\u0003"+
		"\u03ea\u01f5\u0000\u124c\u124f\u0003\u0148\u00a4\u0000\u124d\u124f\u0003"+
		"\u014c\u00a6\u0000\u124e\u124c\u0001\u0000\u0000\u0000\u124e\u124d\u0001"+
		"\u0000\u0000\u0000\u124f\u1251\u0001\u0000\u0000\u0000\u1250\u1220\u0001"+
		"\u0000\u0000\u0000\u1250\u122e\u0001\u0000\u0000\u0000\u1250\u123a\u0001"+
		"\u0000\u0000\u0000\u1250\u1245\u0001\u0000\u0000\u0000\u1251\u00f5\u0001"+
		"\u0000\u0000\u0000\u1252\u1253\u0005\u001c\u0000\u0000\u1253\u1254\u0005"+
		"\u01f7\u0000\u0000\u1254\u1256\u0005\u020f\u0000\u0000\u1255\u1257\u0003"+
		"\u02f8\u017c\u0000\u1256\u1255\u0001\u0000\u0000\u0000\u1256\u1257\u0001"+
		"\u0000\u0000\u0000\u1257\u1258\u0001\u0000\u0000\u0000\u1258\u1259\u0003"+
		"\u03ea\u01f5\u0000\u1259\u125d\u0005\u028e\u0000\u0000\u125a\u125c\u0003"+
		"\u01da\u00ed\u0000\u125b\u125a\u0001\u0000\u0000\u0000\u125c\u125f\u0001"+
		"\u0000\u0000\u0000\u125d\u125b\u0001\u0000\u0000\u0000\u125d\u125e\u0001"+
		"\u0000\u0000\u0000\u125e\u1283\u0001\u0000\u0000\u0000\u125f\u125d\u0001"+
		"\u0000\u0000\u0000\u1260\u1261\u0005\u001c\u0000\u0000\u1261\u1262\u0005"+
		"\u01f7\u0000\u0000\u1262\u1264\u0005\u020f\u0000\u0000\u1263\u1265\u0003"+
		"\u02f8\u017c\u0000\u1264\u1263\u0001\u0000\u0000\u0000\u1264\u1265\u0001"+
		"\u0000\u0000\u0000\u1265\u1266\u0001\u0000\u0000\u0000\u1266\u1267\u0003"+
		"\u03ea\u01f5\u0000\u1267\u126a\u0005\u0312\u0000\u0000\u1268\u126b\u0003"+
		"\u01dc\u00ee\u0000\u1269\u126b\u0005\u0086\u0000\u0000\u126a\u1268\u0001"+
		"\u0000\u0000\u0000\u126a\u1269\u0001\u0000\u0000\u0000\u126b\u1283\u0001"+
		"\u0000\u0000\u0000\u126c\u126d\u0005\u001c\u0000\u0000\u126d\u126e\u0005"+
		"\u01f7\u0000\u0000\u126e\u1270\u0005\u020f\u0000\u0000\u126f\u1271\u0003"+
		"\u02f8\u017c\u0000\u1270\u126f\u0001\u0000\u0000\u0000\u1270\u1271\u0001"+
		"\u0000\u0000\u0000\u1271\u1272\u0001\u0000\u0000\u0000\u1272\u1273\u0003"+
		"\u03ea\u01f5\u0000\u1273\u1274\u0005\u023c\u0000\u0000\u1274\u1275\u0005"+
		"\u02f9\u0000\u0000\u1275\u1276\u0003\u03ea\u01f5\u0000\u1276\u1283\u0001"+
		"\u0000\u0000\u0000\u1277\u1278\u0005\u001c\u0000\u0000\u1278\u1279\u0005"+
		"\u01f7\u0000\u0000\u1279\u127b\u0005\u020f\u0000\u0000\u127a\u127c\u0003"+
		"\u02f8\u017c\u0000\u127b\u127a\u0001\u0000\u0000\u0000\u127b\u127c\u0001"+
		"\u0000\u0000\u0000\u127c\u127d\u0001\u0000\u0000\u0000\u127d\u1280\u0003"+
		"\u03ea\u01f5\u0000\u127e\u1281\u0003\u0148\u00a4\u0000\u127f\u1281\u0003"+
		"\u014c\u00a6\u0000\u1280\u127e\u0001\u0000\u0000\u0000\u1280\u127f\u0001"+
		"\u0000\u0000\u0000\u1281\u1283\u0001\u0000\u0000\u0000\u1282\u1252\u0001"+
		"\u0000\u0000\u0000\u1282\u1260\u0001\u0000\u0000\u0000\u1282\u126c\u0001"+
		"\u0000\u0000\u0000\u1282\u1277\u0001\u0000\u0000\u0000\u1283\u00f7\u0001"+
		"\u0000\u0000\u0000\u1284\u1285\u0005\u001c\u0000\u0000\u1285\u1287\u0005"+
		"\u0290\u0000\u0000\u1286\u1288\u0003\u02f8\u017c\u0000\u1287\u1286\u0001"+
		"\u0000\u0000\u0000\u1287\u1288\u0001\u0000\u0000\u0000\u1288\u1289\u0001"+
		"\u0000\u0000\u0000\u1289\u128a\u0003\u03d0\u01e8\u0000\u128a\u128b\u0007"+
		"\u001b\u0000\u0000\u128b\u128c\u0005\b\u0000\u0000\u128c\u128d\u0005\u0380"+
		"\u0000\u0000\u128d\u1292\u0003\u03d0\u01e8\u0000\u128e\u128f\u0005\u0390"+
		"\u0000\u0000\u128f\u1291\u0003\u03d0\u01e8\u0000\u1290\u128e\u0001\u0000"+
		"\u0000\u0000\u1291\u1294\u0001\u0000\u0000\u0000\u1292\u1290\u0001\u0000"+
		"\u0000\u0000\u1292\u1293\u0001\u0000\u0000\u0000\u1293\u1298\u0001\u0000"+
		"\u0000\u0000\u1294\u1292\u0001\u0000\u0000\u0000\u1295\u1296\u0005\u0292"+
		"\u0000\u0000\u1296\u1297\u0005\u0380\u0000\u0000\u1297\u1299\u0003\u0208"+
		"\u0104\u0000\u1298\u1295\u0001\u0000\u0000\u0000\u1298\u1299\u0001\u0000"+
		"\u0000\u0000\u1299\u12dd\u0001\u0000\u0000\u0000\u129a\u129b\u0005\u001c"+
		"\u0000\u0000\u129b\u129d\u0005\u0290\u0000\u0000\u129c\u129e\u0003\u02f8"+
		"\u017c\u0000\u129d\u129c\u0001\u0000\u0000\u0000\u129d\u129e\u0001\u0000"+
		"\u0000\u0000\u129e\u129f\u0001\u0000\u0000\u0000\u129f\u12a0\u0003\u03d0"+
		"\u01e8\u0000\u12a0\u12a1\u0005\n\u0000\u0000\u12a1\u12a2\u0005\b\u0000"+
		"\u0000\u12a2\u12a3\u0005\u0380\u0000\u0000\u12a3\u12a8\u0003\u03d0\u01e8"+
		"\u0000\u12a4\u12a5\u0005\u0390\u0000\u0000\u12a5\u12a7\u0003\u03d0\u01e8"+
		"\u0000\u12a6\u12a4\u0001\u0000\u0000\u0000\u12a7\u12aa\u0001\u0000\u0000"+
		"\u0000\u12a8\u12a6\u0001\u0000\u0000\u0000\u12a8\u12a9\u0001\u0000\u0000"+
		"\u0000\u12a9\u12ae\u0001\u0000\u0000\u0000\u12aa\u12a8\u0001\u0000\u0000"+
		"\u0000\u12ab\u12ac\u0005\u0292\u0000\u0000\u12ac\u12ad\u0005\u0380\u0000"+
		"\u0000\u12ad\u12af\u0003\u0208\u0104\u0000\u12ae\u12ab\u0001\u0000\u0000"+
		"\u0000\u12ae\u12af\u0001\u0000\u0000\u0000\u12af\u12dd\u0001\u0000\u0000"+
		"\u0000\u12b0\u12b1\u0005\u001c\u0000\u0000\u12b1\u12b3\u0005\u0290\u0000"+
		"\u0000\u12b2\u12b4\u0003\u02f8\u017c\u0000\u12b3\u12b2\u0001\u0000\u0000"+
		"\u0000\u12b3\u12b4\u0001\u0000\u0000\u0000\u12b4\u12b5\u0001\u0000\u0000"+
		"\u0000\u12b5\u12b6\u0003\u03d0\u01e8\u0000\u12b6\u12c1\u0005\u028e\u0000"+
		"\u0000\u12b7\u12b8\u0005\b\u0000\u0000\u12b8\u12b9\u0005\u0380\u0000\u0000"+
		"\u12b9\u12be\u0003\u03d0\u01e8\u0000\u12ba\u12bb\u0005\u0390\u0000\u0000"+
		"\u12bb\u12bd\u0003\u03d0\u01e8\u0000\u12bc\u12ba\u0001\u0000\u0000\u0000"+
		"\u12bd\u12c0\u0001\u0000\u0000\u0000\u12be\u12bc\u0001\u0000\u0000\u0000"+
		"\u12be\u12bf\u0001\u0000\u0000\u0000\u12bf\u12c2\u0001\u0000\u0000\u0000"+
		"\u12c0\u12be\u0001\u0000\u0000\u0000\u12c1\u12b7\u0001\u0000\u0000\u0000"+
		"\u12c1\u12c2\u0001\u0000\u0000\u0000\u12c2\u12c4\u0001\u0000\u0000\u0000"+
		"\u12c3\u12c5\u0003\u02f2\u0179\u0000\u12c4\u12c3\u0001\u0000\u0000\u0000"+
		"\u12c4\u12c5\u0001\u0000\u0000\u0000\u12c5\u12dd\u0001\u0000\u0000\u0000"+
		"\u12c6\u12c7\u0005\u001c\u0000\u0000\u12c7\u12c9\u0005\u0290\u0000\u0000"+
		"\u12c8\u12ca\u0003\u02f8\u017c\u0000\u12c9\u12c8\u0001\u0000\u0000\u0000"+
		"\u12c9\u12ca\u0001\u0000\u0000\u0000\u12ca\u12cb\u0001\u0000\u0000\u0000"+
		"\u12cb\u12cc\u0003\u03d0\u01e8\u0000\u12cc\u12cd\u0003\u0148\u00a4\u0000"+
		"\u12cd\u12dd\u0001\u0000\u0000\u0000\u12ce\u12cf\u0005\u001c\u0000\u0000"+
		"\u12cf\u12d0\u0005\u0290\u0000\u0000\u12d0\u12d1\u0003\u03d0\u01e8\u0000"+
		"\u12d1\u12d2\u0003\u014c\u00a6\u0000\u12d2\u12dd\u0001\u0000\u0000\u0000"+
		"\u12d3\u12d4\u0005\u001c\u0000\u0000\u12d4\u12d6\u0005\u0290\u0000\u0000"+
		"\u12d5\u12d7\u0003\u02f8\u017c\u0000\u12d6\u12d5\u0001\u0000\u0000\u0000"+
		"\u12d6\u12d7\u0001\u0000\u0000\u0000\u12d7\u12d8\u0001\u0000\u0000\u0000"+
		"\u12d8\u12d9\u0003\u03d0\u01e8\u0000\u12d9\u12da\u0005\u0312\u0000\u0000"+
		"\u12da\u12db\u0005\u0086\u0000\u0000\u12db\u12dd\u0001\u0000\u0000\u0000"+
		"\u12dc\u1284\u0001\u0000\u0000\u0000\u12dc\u129a\u0001\u0000\u0000\u0000"+
		"\u12dc\u12b0\u0001\u0000\u0000\u0000\u12dc\u12c6\u0001\u0000\u0000\u0000"+
		"\u12dc\u12ce\u0001\u0000\u0000\u0000\u12dc\u12d3\u0001\u0000\u0000\u0000"+
		"\u12dd\u00f9\u0001\u0000\u0000\u0000\u12de\u12e0\u0005\u001c\u0000\u0000"+
		"\u12df\u12e1\u0005\u02bb\u0000\u0000\u12e0\u12df\u0001\u0000\u0000\u0000"+
		"\u12e0\u12e1\u0001\u0000\u0000\u0000\u12e1\u12e2\u0001\u0000\u0000\u0000"+
		"\u12e2\u12e4\u0005\u0158\u0000\u0000\u12e3\u12e5\u0003\u02f8\u017c\u0000"+
		"\u12e4\u12e3\u0001\u0000\u0000\u0000\u12e4\u12e5\u0001\u0000\u0000\u0000"+
		"\u12e5\u12e6\u0001\u0000\u0000\u0000\u12e6\u12e7\u0003\u03d0\u01e8\u0000"+
		"\u12e7\u12e9\u0005\u028e\u0000\u0000\u12e8\u12ea\u0003\u0222\u0111\u0000"+
		"\u12e9\u12e8\u0001\u0000\u0000\u0000\u12e9\u12ea\u0001\u0000\u0000\u0000"+
		"\u12ea\u12ec\u0001\u0000\u0000\u0000\u12eb\u12ed\u0003\u0094J\u0000\u12ec"+
		"\u12eb\u0001\u0000\u0000\u0000\u12ec\u12ed\u0001\u0000\u0000\u0000\u12ed"+
		"\u12f4\u0001\u0000\u0000\u0000\u12ee\u12ef\u0005\u02bc\u0000\u0000\u12ef"+
		"\u12f0\u0005\u0380\u0000\u0000\u12f0\u12f1\u0005\u038a\u0000\u0000\u12f1"+
		"\u12f2\u0003\u03cc\u01e6\u0000\u12f2\u12f3\u0005\u038b\u0000\u0000\u12f3"+
		"\u12f5\u0001\u0000\u0000\u0000\u12f4\u12ee\u0001\u0000\u0000\u0000\u12f4"+
		"\u12f5\u0001\u0000\u0000\u0000\u12f5\u12fc\u0001\u0000\u0000\u0000\u12f6"+
		"\u12f7\u0005\u02bf\u0000\u0000\u12f7\u12f8\u0005\u0380\u0000\u0000\u12f8"+
		"\u12f9\u0005\u038a\u0000\u0000\u12f9\u12fa\u0003\u03cc\u01e6\u0000\u12fa"+
		"\u12fb\u0005\u038b\u0000\u0000\u12fb\u12fd\u0001\u0000\u0000\u0000\u12fc"+
		"\u12f6\u0001\u0000\u0000\u0000\u12fc\u12fd\u0001\u0000\u0000\u0000\u12fd"+
		"\u12ff\u0001\u0000\u0000\u0000\u12fe\u1300\u0003\u02f2\u0179\u0000\u12ff"+
		"\u12fe\u0001\u0000\u0000\u0000\u12ff\u1300\u0001\u0000\u0000\u0000\u1300"+
		"\u1321\u0001\u0000\u0000\u0000\u1301\u1303\u0005\u001c\u0000\u0000\u1302"+
		"\u1304\u0005\u02bb\u0000\u0000\u1303\u1302\u0001\u0000\u0000\u0000\u1303"+
		"\u1304\u0001\u0000\u0000\u0000\u1304\u1305\u0001\u0000\u0000\u0000\u1305"+
		"\u1307\u0005\u0158\u0000\u0000\u1306\u1308\u0003\u02f8\u017c\u0000\u1307"+
		"\u1306\u0001\u0000\u0000\u0000\u1307\u1308\u0001\u0000\u0000\u0000\u1308"+
		"\u1309\u0001\u0000\u0000\u0000\u1309\u130a\u0003\u03d0\u01e8\u0000\u130a"+
		"\u130b\u0003\u0148\u00a4\u0000\u130b\u1321\u0001\u0000\u0000\u0000\u130c"+
		"\u130e\u0005\u001c\u0000\u0000\u130d\u130f\u0005\u02bb\u0000\u0000\u130e"+
		"\u130d\u0001\u0000\u0000\u0000\u130e\u130f\u0001\u0000\u0000\u0000\u130f"+
		"\u1310\u0001\u0000\u0000\u0000\u1310\u1311\u0005\u0158\u0000\u0000\u1311"+
		"\u1312\u0003\u03d0\u01e8\u0000\u1312\u1313\u0003\u014c\u00a6\u0000\u1313"+
		"\u1321\u0001\u0000\u0000\u0000\u1314\u1316\u0005\u001c\u0000\u0000\u1315"+
		"\u1317\u0005\u02bb\u0000\u0000\u1316\u1315\u0001\u0000\u0000\u0000\u1316"+
		"\u1317\u0001\u0000\u0000\u0000\u1317\u1318\u0001\u0000\u0000\u0000\u1318"+
		"\u131a\u0005\u0158\u0000\u0000\u1319\u131b\u0003\u02f8\u017c\u0000\u131a"+
		"\u1319\u0001\u0000\u0000\u0000\u131a\u131b\u0001\u0000\u0000\u0000\u131b"+
		"\u131c\u0001\u0000\u0000\u0000\u131c\u131d\u0003\u03d0\u01e8\u0000\u131d"+
		"\u131e\u0005\u0312\u0000\u0000\u131e\u131f\u0007\u001c\u0000\u0000\u131f"+
		"\u1321\u0001\u0000\u0000\u0000\u1320\u12de\u0001\u0000\u0000\u0000\u1320"+
		"\u1301\u0001\u0000\u0000\u0000\u1320\u130c\u0001\u0000\u0000\u0000\u1320"+
		"\u1314\u0001\u0000\u0000\u0000\u1321\u00fb\u0001\u0000\u0000\u0000\u1322"+
		"\u1323\u0005\u001c\u0000\u0000\u1323\u1325\u0005\u02c2\u0000\u0000\u1324"+
		"\u1326\u0003\u02f8\u017c\u0000\u1325\u1324\u0001\u0000\u0000\u0000\u1325"+
		"\u1326\u0001\u0000\u0000\u0000\u1326\u1327\u0001\u0000\u0000\u0000\u1327"+
		"\u1328\u0003\u03d0\u01e8\u0000\u1328\u132a\u0005\u028e\u0000\u0000\u1329"+
		"\u132b\u0003\u014a\u00a5\u0000\u132a\u1329\u0001\u0000\u0000\u0000\u132a"+
		"\u132b\u0001\u0000\u0000\u0000\u132b\u132d\u0001\u0000\u0000\u0000\u132c"+
		"\u132e\u0003\u02f2\u0179\u0000\u132d\u132c\u0001\u0000\u0000\u0000\u132d"+
		"\u132e\u0001\u0000\u0000\u0000\u132e\u1346\u0001\u0000\u0000\u0000\u132f"+
		"\u1330\u0005\u001c\u0000\u0000\u1330\u1332\u0005\u02c2\u0000\u0000\u1331"+
		"\u1333\u0003\u02f8\u017c\u0000\u1332\u1331\u0001\u0000\u0000\u0000\u1332"+
		"\u1333\u0001\u0000\u0000\u0000\u1333\u1334\u0001\u0000\u0000\u0000\u1334"+
		"\u1335\u0003\u03d0\u01e8\u0000\u1335\u1336\u0003\u0148\u00a4\u0000\u1336"+
		"\u1346\u0001\u0000\u0000\u0000\u1337\u1338\u0005\u001c\u0000\u0000\u1338"+
		"\u1339\u0005\u02c2\u0000\u0000\u1339\u133a\u0003\u03d0\u01e8\u0000\u133a"+
		"\u133b\u0003\u014c\u00a6\u0000\u133b\u1346\u0001\u0000\u0000\u0000\u133c"+
		"\u133d\u0005\u001c\u0000\u0000\u133d\u133f\u0005\u02c2\u0000\u0000\u133e"+
		"\u1340\u0003\u02f8\u017c\u0000\u133f\u133e\u0001\u0000\u0000\u0000\u133f"+
		"\u1340\u0001\u0000\u0000\u0000\u1340\u1341\u0001\u0000\u0000\u0000\u1341"+
		"\u1342\u0003\u03d0\u01e8\u0000\u1342\u1343\u0005\u0312\u0000\u0000\u1343"+
		"\u1344\u0005\u0086\u0000\u0000\u1344\u1346\u0001\u0000\u0000\u0000\u1345"+
		"\u1322\u0001\u0000\u0000\u0000\u1345\u132f\u0001\u0000\u0000\u0000\u1345"+
		"\u1337\u0001\u0000\u0000\u0000\u1345\u133c\u0001\u0000\u0000\u0000\u1346"+
		"\u00fd\u0001\u0000\u0000\u0000\u1347\u1348\u0005\u001c\u0000\u0000\u1348"+
		"\u134a\u0005\u02d4\u0000\u0000\u1349\u134b\u0003\u02f8\u017c\u0000\u134a"+
		"\u1349\u0001\u0000\u0000\u0000\u134a\u134b\u0001\u0000\u0000\u0000\u134b"+
		"\u134c\u0001\u0000\u0000\u0000\u134c\u134d\u0003\u03ea\u01f5\u0000\u134d"+
		"\u134e\u0005\u023c\u0000\u0000\u134e\u134f\u0005\u02f9\u0000\u0000\u134f"+
		"\u1350\u0003\u03ea\u01f5\u0000\u1350\u13c5\u0001\u0000\u0000\u0000\u1351"+
		"\u1352\u0005\u001c\u0000\u0000\u1352\u1354\u0005\u02d4\u0000\u0000\u1353"+
		"\u1355\u0003\u02f8\u017c\u0000\u1354\u1353\u0001\u0000\u0000\u0000\u1354"+
		"\u1355\u0001\u0000\u0000\u0000\u1355\u1356\u0001\u0000\u0000\u0000\u1356"+
		"\u1357\u0003\u03ea\u01f5\u0000\u1357\u1358\u0005\u02d0\u0000\u0000\u1358"+
		"\u1359\u0005\u0336\u0000\u0000\u1359\u135a\u0003\u03ea\u01f5\u0000\u135a"+
		"\u13c5\u0001\u0000\u0000\u0000\u135b\u135c\u0005\u001c\u0000\u0000\u135c"+
		"\u135e\u0005\u02d4\u0000\u0000\u135d\u135f\u0003\u02f8\u017c\u0000\u135e"+
		"\u135d\u0001\u0000\u0000\u0000\u135e\u135f\u0001\u0000\u0000\u0000\u135f"+
		"\u1360\u0001\u0000\u0000\u0000\u1360\u1364\u0003\u03ea\u01f5\u0000\u1361"+
		"\u1365\u0003\u0102\u0081\u0000\u1362\u1365\u0003\u0104\u0082\u0000\u1363"+
		"\u1365\u0003\u011e\u008f\u0000\u1364\u1361\u0001\u0000\u0000\u0000\u1364"+
		"\u1362\u0001\u0000\u0000\u0000\u1364\u1363\u0001\u0000\u0000\u0000\u1365"+
		"\u13c5\u0001\u0000\u0000\u0000\u1366\u1367\u0005\u001c\u0000\u0000\u1367"+
		"\u1369\u0005\u02d4\u0000\u0000\u1368\u136a\u0003\u02f8\u017c\u0000\u1369"+
		"\u1368\u0001\u0000\u0000\u0000\u1369\u136a\u0001\u0000\u0000\u0000\u136a"+
		"\u136b\u0001\u0000\u0000\u0000\u136b\u136c\u0003\u03ea\u01f5\u0000\u136c"+
		"\u136d\u0003\u011c\u008e\u0000\u136d\u13c5\u0001\u0000\u0000\u0000\u136e"+
		"\u136f\u0005\u001c\u0000\u0000\u136f\u1371\u0005\u02d4\u0000\u0000\u1370"+
		"\u1372\u0003\u02f8\u017c\u0000\u1371\u1370\u0001\u0000\u0000\u0000\u1371"+
		"\u1372\u0001\u0000\u0000\u0000\u1372\u1373\u0001\u0000\u0000\u0000\u1373"+
		"\u1374\u0003\u03ea\u01f5\u0000\u1374\u1375\u0003\u0120\u0090\u0000\u1375"+
		"\u13c5\u0001\u0000\u0000\u0000\u1376\u1377\u0005\u001c\u0000\u0000\u1377"+
		"\u1379\u0005\u02d4\u0000\u0000\u1378\u137a\u0003\u02f8\u017c\u0000\u1379"+
		"\u1378\u0001\u0000\u0000\u0000\u1379\u137a\u0001\u0000\u0000\u0000\u137a"+
		"\u137b\u0001\u0000\u0000\u0000\u137b\u137c\u0003\u03ea\u01f5\u0000\u137c"+
		"\u137e\u0005\u028e\u0000\u0000\u137d\u137f\u00036\u001b\u0000\u137e\u137d"+
		"\u0001\u0000\u0000\u0000\u137e\u137f\u0001\u0000\u0000\u0000\u137f\u1386"+
		"\u0001\u0000\u0000\u0000\u1380\u1381\u0005\u02ae\u0000\u0000\u1381\u1382"+
		"\u0005\u0380\u0000\u0000\u1382\u1383\u0005\u038a\u0000\u0000\u1383\u1384"+
		"\u0003\u01e4\u00f2\u0000\u1384\u1385\u0005\u038b\u0000\u0000\u1385\u1387"+
		"\u0001\u0000\u0000\u0000\u1386\u1380\u0001\u0000\u0000\u0000\u1386\u1387"+
		"\u0001\u0000\u0000\u0000\u1387\u138b\u0001\u0000\u0000\u0000\u1388\u1389"+
		"\u0005\u00a7\u0000\u0000\u1389\u138a\u0005\u0380\u0000\u0000\u138a\u138c"+
		"\u0003\u03f0\u01f8\u0000\u138b\u1388\u0001\u0000\u0000\u0000\u138b\u138c"+
		"\u0001\u0000\u0000\u0000\u138c\u1390\u0001\u0000\u0000\u0000\u138d\u138e"+
		"\u0005\u0193\u0000\u0000\u138e\u138f\u0005\u0380\u0000\u0000\u138f\u1391"+
		"\u0003\u03f0\u01f8\u0000\u1390\u138d\u0001\u0000\u0000\u0000\u1390\u1391"+
		"\u0001\u0000\u0000\u0000\u1391\u1395\u0001\u0000\u0000\u0000\u1392\u1393"+
		"\u0005l\u0000\u0000\u1393\u1394\u0005\u0380\u0000\u0000\u1394\u1396\u0003"+
		"\u0208\u0104\u0000\u1395\u1392\u0001\u0000\u0000\u0000\u1395\u1396\u0001"+
		"\u0000\u0000\u0000\u1396\u1398\u0001\u0000\u0000\u0000\u1397\u1399\u0003"+
		"\u008cF\u0000\u1398\u1397\u0001\u0000\u0000\u0000\u1398\u1399\u0001\u0000"+
		"\u0000\u0000\u1399\u139b\u0001\u0000\u0000\u0000\u139a\u139c\u0003\u02f2"+
		"\u0179\u0000\u139b\u139a\u0001\u0000\u0000\u0000\u139b\u139c\u0001\u0000"+
		"\u0000\u0000\u139c\u13c5\u0001\u0000\u0000\u0000\u139d\u139e\u0005\u001c"+
		"\u0000\u0000\u139e\u13a0\u0005\u02d4\u0000\u0000\u139f\u13a1\u0003\u02f8"+
		"\u017c\u0000\u13a0\u139f\u0001\u0000\u0000\u0000\u13a0\u13a1\u0001\u0000"+
		"\u0000\u0000\u13a1\u13a2\u0001\u0000\u0000\u0000\u13a2\u13a3\u0003\u03ea"+
		"\u01f5\u0000\u13a3\u13a4\u0003\u0148\u00a4\u0000\u13a4\u13c5\u0001\u0000"+
		"\u0000\u0000\u13a5\u13a6\u0005\u001c\u0000\u0000\u13a6\u13a8\u0005\u02d4"+
		"\u0000\u0000\u13a7\u13a9\u0003\u02f8\u017c\u0000\u13a8\u13a7\u0001\u0000"+
		"\u0000\u0000\u13a8\u13a9\u0001\u0000\u0000\u0000\u13a9\u13aa\u0001\u0000"+
		"\u0000\u0000\u13aa\u13ab\u0003\u03ea\u01f5\u0000\u13ab\u13ac\u0003\u014c"+
		"\u00a6\u0000\u13ac\u13c5\u0001\u0000\u0000\u0000\u13ad\u13ae\u0005\u001c"+
		"\u0000\u0000\u13ae\u13b0\u0005\u02d4\u0000\u0000\u13af\u13b1\u0003\u02f8"+
		"\u017c\u0000\u13b0\u13af\u0001\u0000\u0000\u0000\u13b0\u13b1\u0001\u0000"+
		"\u0000\u0000\u13b1\u13b2\u0001\u0000\u0000\u0000\u13b2\u13b3\u0003\u03ea"+
		"\u01f5\u0000\u13b3\u13ba\u0005\u0312\u0000\u0000\u13b4\u13bb\u0005\u00a7"+
		"\u0000\u0000\u13b5\u13bb\u0005\u0193\u0000\u0000\u13b6\u13bb\u0005l\u0000"+
		"\u0000\u13b7\u13bb\u0005\u00b1\u0000\u0000\u13b8\u13bb\u0005\u0086\u0000"+
		"\u0000\u13b9\u13bb\u0001\u0000\u0000\u0000\u13ba\u13b4\u0001\u0000\u0000"+
		"\u0000\u13ba\u13b5\u0001\u0000\u0000\u0000\u13ba\u13b6\u0001\u0000\u0000"+
		"\u0000\u13ba\u13b7\u0001\u0000\u0000\u0000\u13ba\u13b8\u0001\u0000\u0000"+
		"\u0000\u13ba\u13b9\u0001\u0000\u0000\u0000\u13bb\u13c5\u0001\u0000\u0000"+
		"\u0000\u13bc\u13bd\u0005\u001c\u0000\u0000\u13bd\u13bf\u0005\u02d4\u0000"+
		"\u0000\u13be\u13c0\u0003\u02f8\u017c\u0000\u13bf\u13be\u0001\u0000\u0000"+
		"\u0000\u13bf\u13c0\u0001\u0000\u0000\u0000\u13c0\u13c1\u0001\u0000\u0000"+
		"\u0000\u13c1\u13c2\u0003\u03ea\u01f5\u0000\u13c2\u13c3\u0003\u0100\u0080"+
		"\u0000\u13c3\u13c5\u0001\u0000\u0000\u0000\u13c4\u1347\u0001\u0000\u0000"+
		"\u0000\u13c4\u1351\u0001\u0000\u0000\u0000\u13c4\u135b\u0001\u0000\u0000"+
		"\u0000\u13c4\u1366\u0001\u0000\u0000\u0000\u13c4\u136e\u0001\u0000\u0000"+
		"\u0000\u13c4\u1376\u0001\u0000\u0000\u0000\u13c4\u139d\u0001\u0000\u0000"+
		"\u0000\u13c4\u13a5\u0001\u0000\u0000\u0000\u13c4\u13ad\u0001\u0000\u0000"+
		"\u0000\u13c4\u13bc\u0001\u0000\u0000\u0000\u13c5\u00ff\u0001\u0000\u0000"+
		"\u0000\u13c6\u13c7\u0005\n\u0000\u0000\u13c7\u13c8\u0005\u025f\u0000\u0000"+
		"\u13c8\u13c9\u0005\u0005\u0000\u0000\u13c9\u13ca\u0005\u020f\u0000\u0000"+
		"\u13ca\u13cb\u0003\u03ea\u01f5\u0000\u13cb\u13cc\u0005\u01d9\u0000\u0000"+
		"\u13cc\u13cd\u0003\u019c\u00ce\u0000\u13cd\u13e4\u0001\u0000\u0000\u0000"+
		"\u13ce\u13cf\u0005\u00ca\u0000\u0000\u13cf\u13d0\u0005\u025f\u0000\u0000"+
		"\u13d0\u13d1\u0005\u0005\u0000\u0000\u13d1\u13d2\u0005\u020f\u0000\u0000"+
		"\u13d2\u13dc\u0003\u03ea\u01f5\u0000\u13d3\u13d4\u0005\u0390\u0000\u0000"+
		"\u13d4\u13d5\u0005\n\u0000\u0000\u13d5\u13d6\u0005\u025f\u0000\u0000\u13d6"+
		"\u13d7\u0005\u0005\u0000\u0000\u13d7\u13d8\u0005\u020f\u0000\u0000\u13d8"+
		"\u13d9\u0003\u03ea\u01f5\u0000\u13d9\u13da\u0005\u01d9\u0000\u0000\u13da"+
		"\u13db\u0003\u019c\u00ce\u0000\u13db\u13dd\u0001\u0000\u0000\u0000\u13dc"+
		"\u13d3\u0001\u0000\u0000\u0000\u13dc\u13dd\u0001\u0000\u0000\u0000\u13dd"+
		"\u13e4\u0001\u0000\u0000\u0000\u13de\u13df\u0005\u00ca\u0000\u0000\u13df"+
		"\u13e0\u0005\u0011\u0000\u0000\u13e0\u13e1\u0005\u025f\u0000\u0000\u13e1"+
		"\u13e2\u0005\u0005\u0000\u0000\u13e2\u13e4\u0005\u020e\u0000\u0000\u13e3"+
		"\u13c6\u0001\u0000\u0000\u0000\u13e3\u13ce\u0001\u0000\u0000\u0000\u13e3"+
		"\u13de\u0001\u0000\u0000\u0000\u13e4\u0101\u0001\u0000\u0000\u0000\u13e5"+
		"\u13e6\u0005\u007f\u0000\u0000\u13e6\u13e7\u0005`\u0000\u0000\u13e7\u13e8"+
		"\u0005\u038a\u0000\u0000\u13e8\u13e9\u0003\u03f2\u01f9\u0000\u13e9\u13ea"+
		"\u0005\u038b\u0000\u0000\u13ea\u13fc\u0001\u0000\u0000\u0000\u13eb\u13ef"+
		"\u0005\u022f\u0000\u0000\u13ec\u13ed\u0005\u0194\u0000\u0000\u13ed\u13ee"+
		"\u0005\u0380\u0000\u0000\u13ee\u13f0\u0003\u03f0\u01f8\u0000\u13ef\u13ec"+
		"\u0001\u0000\u0000\u0000\u13ef\u13f0\u0001\u0000\u0000\u0000\u13f0\u13f3"+
		"\u0001\u0000\u0000\u0000\u13f1\u13f2\u0005\u0335\u0000\u0000\u13f2\u13f4"+
		"\u0003\u03f6\u01fb\u0000\u13f3\u13f1\u0001\u0000\u0000\u0000\u13f3\u13f4"+
		"\u0001\u0000\u0000\u0000\u13f4\u13fc\u0001\u0000\u0000\u0000\u13f5\u13f6"+
		"\u0003\u0098L\u0000\u13f6\u13f7\u0005\u022f\u0000\u0000\u13f7\u13fc\u0001"+
		"\u0000\u0000\u0000\u13f8\u13f9\u0005\u00ca\u0000\u0000\u13f9\u13fa\u0005"+
		"\u0080\u0000\u0000\u13fa\u13fc\u0005\u0168\u0000\u0000\u13fb\u13e5\u0001"+
		"\u0000\u0000\u0000\u13fb\u13eb\u0001\u0000\u0000\u0000\u13fb\u13f5\u0001"+
		"\u0000\u0000\u0000\u13fb\u13f8\u0001\u0000\u0000\u0000\u13fc\u0103\u0001"+
		"\u0000\u0000\u0000\u13fd\u13ff\u0005\n\u0000\u0000\u13fe\u1400\u0005\u0084"+
		"\u0000\u0000\u13ff\u13fe\u0001\u0000\u0000\u0000\u13ff\u1400\u0001\u0000"+
		"\u0000\u0000\u1400\u1402\u0001\u0000\u0000\u0000\u1401\u1403\u0003\u02fa"+
		"\u017d\u0000\u1402\u1401\u0001\u0000\u0000\u0000\u1402\u1403\u0001\u0000"+
		"\u0000\u0000\u1403\u1404\u0001\u0000\u0000\u0000\u1404\u1409\u0003\u024e"+
		"\u0127\u0000\u1405\u1406\u0005\u0390\u0000\u0000\u1406\u1408\u0003\u024e"+
		"\u0127\u0000\u1407\u1405\u0001\u0000\u0000\u0000\u1408\u140b\u0001\u0000"+
		"\u0000\u0000\u1409\u1407\u0001\u0000\u0000\u0000\u1409\u140a\u0001\u0000"+
		"\u0000\u0000\u140a\u145d\u0001\u0000\u0000\u0000\u140b\u1409\u0001\u0000"+
		"\u0000\u0000\u140c\u140d\u0005\u023c\u0000\u0000\u140d\u140e\u0005\u0084"+
		"\u0000\u0000\u140e\u140f\u0003\u03e4\u01f2\u0000\u140f\u1410\u0005\u02f9"+
		"\u0000\u0000\u1410\u1411\u0003\u03e4\u01f2\u0000\u1411\u145d\u0001\u0000"+
		"\u0000\u0000\u1412\u1426\u0003\u0138\u009c\u0000\u1413\u1414\u0005\u038a"+
		"\u0000\u0000\u1414\u1419\u0003\u0106\u0083\u0000\u1415\u1416\u0005\u0390"+
		"\u0000\u0000\u1416\u1418\u0003\u0106\u0083\u0000\u1417\u1415\u0001\u0000"+
		"\u0000\u0000\u1418\u141b\u0001\u0000\u0000\u0000\u1419\u1417\u0001\u0000"+
		"\u0000\u0000\u1419\u141a\u0001\u0000\u0000\u0000\u141a\u141c\u0001\u0000"+
		"\u0000\u0000\u141b\u1419\u0001\u0000\u0000\u0000\u141c\u141d\u0005\u038b"+
		"\u0000\u0000\u141d\u1427\u0001\u0000\u0000\u0000\u141e\u1423\u0003\u0106"+
		"\u0083\u0000\u141f\u1420\u0005\u0390\u0000\u0000\u1420\u1422\u0003\u0106"+
		"\u0083\u0000\u1421\u141f\u0001\u0000\u0000\u0000\u1422\u1425\u0001\u0000"+
		"\u0000\u0000\u1423\u1421\u0001\u0000\u0000\u0000\u1423\u1424\u0001\u0000"+
		"\u0000\u0000\u1424\u1427\u0001\u0000\u0000\u0000\u1425\u1423\u0001\u0000"+
		"\u0000\u0000\u1426\u1413\u0001\u0000\u0000\u0000\u1426\u141e\u0001\u0000"+
		"\u0000\u0000\u1427\u145d\u0001\u0000\u0000\u0000\u1428\u1429\u0003\u0138"+
		"\u009c\u0000\u1429\u142a\u0005\u0084\u0000\u0000\u142a\u142b\u0003\u03e4"+
		"\u01f2\u0000\u142b\u142c\u0005\u028e\u0000\u0000\u142c\u142d\u0005\u0188"+
		"\u0000\u0000\u142d\u142e\u0005\u020f\u0000\u0000\u142e\u1436\u0003\u03d0"+
		"\u01e8\u0000\u142f\u1430\u0005\u0321\u0000\u0000\u1430\u1431\u0005\u038a"+
		"\u0000\u0000\u1431\u1432\u0003\u03e4\u01f2\u0000\u1432\u1433\u0005\u0390"+
		"\u0000\u0000\u1433\u1434\u0003\u03e6\u01f3\u0000\u1434\u1435\u0005\u038b"+
		"\u0000\u0000\u1435\u1437\u0001\u0000\u0000\u0000\u1436\u142f\u0001\u0000"+
		"\u0000\u0000\u1436\u1437\u0001\u0000\u0000\u0000\u1437\u1439\u0001\u0000"+
		"\u0000\u0000\u1438\u143a\u0005\u0111\u0000\u0000\u1439\u1438\u0001\u0000"+
		"\u0000\u0000\u1439\u143a\u0001\u0000\u0000\u0000\u143a\u145d\u0001\u0000"+
		"\u0000\u0000\u143b\u143c\u0003\u0138\u009c\u0000\u143c\u143d\u0005\u0084"+
		"\u0000\u0000\u143d\u143e\u0003\u03e4\u01f2\u0000\u143e\u143f\u0005\u0312"+
		"\u0000\u0000\u143f\u1440\u0005\u0188\u0000\u0000\u1440\u1441\u0005\u020f"+
		"\u0000\u0000\u1441\u145d\u0001\u0000\u0000\u0000\u1442\u1443\u0003\u0138"+
		"\u009c\u0000\u1443\u1448\u0003\u012c\u0096\u0000\u1444\u1445\u0005\u0390"+
		"\u0000\u0000\u1445\u1447\u0003\u012c\u0096\u0000\u1446\u1444\u0001\u0000"+
		"\u0000\u0000\u1447\u144a\u0001\u0000\u0000\u0000\u1448\u1446\u0001\u0000"+
		"\u0000\u0000\u1448\u1449\u0001\u0000\u0000\u0000\u1449\u145d\u0001\u0000"+
		"\u0000\u0000\u144a\u1448\u0001\u0000\u0000\u0000\u144b\u144c\u0003\u0138"+
		"\u009c\u0000\u144c\u1451\u0003\u012e\u0097\u0000\u144d\u144e\u0005\u0390"+
		"\u0000\u0000\u144e\u1450\u0003\u012e\u0097\u0000\u144f\u144d\u0001\u0000"+
		"\u0000\u0000\u1450\u1453\u0001\u0000\u0000\u0000\u1451\u144f\u0001\u0000"+
		"\u0000\u0000\u1451\u1452\u0001\u0000\u0000\u0000\u1452\u145d\u0001\u0000"+
		"\u0000\u0000\u1453\u1451\u0001\u0000\u0000\u0000\u1454\u1456\u0005\u00ca"+
		"\u0000\u0000\u1455\u1457\u0005\u0084\u0000\u0000\u1456\u1455\u0001\u0000"+
		"\u0000\u0000\u1456\u1457\u0001\u0000\u0000\u0000\u1457\u1459\u0001\u0000"+
		"\u0000\u0000\u1458\u145a\u0003\u02f8\u017c\u0000\u1459\u1458\u0001\u0000"+
		"\u0000\u0000\u1459\u145a\u0001\u0000\u0000\u0000\u145a\u145b\u0001\u0000"+
		"\u0000\u0000\u145b\u145d\u0003\u03e6\u01f3\u0000\u145c\u13fd\u0001\u0000"+
		"\u0000\u0000\u145c\u140c\u0001\u0000\u0000\u0000\u145c\u1412\u0001\u0000"+
		"\u0000\u0000\u145c\u1428\u0001\u0000\u0000\u0000\u145c\u143b\u0001\u0000"+
		"\u0000\u0000\u145c\u1442\u0001\u0000\u0000\u0000\u145c\u144b\u0001\u0000"+
		"\u0000\u0000\u145c\u1454\u0001\u0000\u0000\u0000\u145d\u0105\u0001\u0000"+
		"\u0000\u0000\u145e\u1460\u0005\u0084\u0000\u0000\u145f\u145e\u0001\u0000"+
		"\u0000\u0000\u145f\u1460\u0001\u0000\u0000\u0000\u1460\u1461\u0001\u0000"+
		"\u0000\u0000\u1461\u1480\u0003\u03e4\u01f2\u0000\u1462\u1463\u0005\u00ca"+
		"\u0000\u0000\u1463\u1481\u0005\u00b0\u0000\u0000\u1464\u1465\u0005\u028e"+
		"\u0000\u0000\u1465\u1466\u0005\u00b0\u0000\u0000\u1466\u1467\u0003\u03ea"+
		"\u01f5\u0000\u1467\u1468\u0005\u0386\u0000\u0000\u1468\u1469\u0005\u01af"+
		"\u0000\u0000\u1469\u1481\u0001\u0000\u0000\u0000\u146a\u146c\u0005\u028e"+
		"\u0000\u0000\u146b\u146a\u0001\u0000\u0000\u0000\u146b\u146c\u0001\u0000"+
		"\u0000\u0000\u146c\u146d\u0001\u0000\u0000\u0000\u146d\u146e\u0005\u01b5"+
		"\u0000\u0000\u146e\u1473\u0005\u01bf\u0000\u0000\u146f\u1470\u0005\u00ca"+
		"\u0000\u0000\u1470\u1471\u0005\u01b5\u0000\u0000\u1471\u1473\u0005\u01bf"+
		"\u0000\u0000\u1472\u146b\u0001\u0000\u0000\u0000\u1472\u146f\u0001\u0000"+
		"\u0000\u0000\u1473\u1481\u0001\u0000\u0000\u0000\u1474\u1475\u0005\u028e"+
		"\u0000\u0000\u1475\u1477\u0005\u00a4\u0000\u0000\u1476\u1474\u0001\u0000"+
		"\u0000\u0000\u1476\u1477\u0001\u0000\u0000\u0000\u1477\u1478\u0001\u0000"+
		"\u0000\u0000\u1478\u147a\u0005\u030c\u0000\u0000\u1479\u1476\u0001\u0000"+
		"\u0000\u0000\u1479\u147a\u0001\u0000\u0000\u0000\u147a\u147b\u0001\u0000"+
		"\u0000\u0000\u147b\u1481\u0003\u040a\u0205\u0000\u147c\u147d\u0005\u0086"+
		"\u0000\u0000\u147d\u1481\u0003\u03ca\u01e5\u0000\u147e\u147f\u0005\u0312"+
		"\u0000\u0000\u147f\u1481\u0005\u0086\u0000\u0000\u1480\u1462\u0001\u0000"+
		"\u0000\u0000\u1480\u1464\u0001\u0000\u0000\u0000\u1480\u1472\u0001\u0000"+
		"\u0000\u0000\u1480\u1479\u0001\u0000\u0000\u0000\u1480\u147c\u0001\u0000"+
		"\u0000\u0000\u1480\u147e\u0001\u0000\u0000\u0000\u1481\u0107\u0001\u0000"+
		"\u0000\u0000\u1482\u1483\u0005\u0090\u0000\u0000\u1483\u1485\u0003\u03d0"+
		"\u01e8\u0000\u1484\u1482\u0001\u0000\u0000\u0000\u1484\u1485\u0001\u0000"+
		"\u0000\u0000\u1485\u149b\u0001\u0000\u0000\u0000\u1486\u1489\u0005\u030f"+
		"\u0000\u0000\u1487\u1489\u0003\u024a\u0125\u0000\u1488\u1486\u0001\u0000"+
		"\u0000\u0000\u1488\u1487\u0001\u0000\u0000\u0000\u1489\u148d\u0001\u0000"+
		"\u0000\u0000\u148a\u148c\u0003\u0110\u0088\u0000\u148b\u148a\u0001\u0000"+
		"\u0000\u0000\u148c\u148f\u0001\u0000\u0000\u0000\u148d\u148b\u0001\u0000"+
		"\u0000\u0000\u148d\u148e\u0001\u0000\u0000\u0000\u148e\u149c\u0001\u0000"+
		"\u0000\u0000\u148f\u148d\u0001\u0000\u0000\u0000\u1490\u1491\u0003\u0248"+
		"\u0124\u0000\u1491\u1492\u0005\u0232\u0000\u0000\u1492\u1497\u0003\u03ea"+
		"\u01f5\u0000\u1493\u1494\u0005\u038a\u0000\u0000\u1494\u1495\u0003\u03e4"+
		"\u01f2\u0000\u1495\u1496\u0005\u038b\u0000\u0000\u1496\u1498\u0001\u0000"+
		"\u0000\u0000\u1497\u1493\u0001\u0000\u0000\u0000\u1497\u1498\u0001\u0000"+
		"\u0000\u0000\u1498\u1499\u0001\u0000\u0000\u0000\u1499\u149a\u0003\u011a"+
		"\u008d\u0000\u149a\u149c\u0001\u0000\u0000\u0000\u149b\u1488\u0001\u0000"+
		"\u0000\u0000\u149b\u1490\u0001\u0000\u0000\u0000\u149c\u0109\u0001\u0000"+
		"\u0000\u0000\u149d\u149f\u0005\u01b5\u0000\u0000\u149e\u149d\u0001\u0000"+
		"\u0000\u0000\u149e\u149f\u0001\u0000\u0000\u0000\u149f\u14a0\u0001\u0000"+
		"\u0000\u0000\u14a0\u14a1\u0005\u00dd\u0000\u0000\u14a1\u010b\u0001\u0000"+
		"\u0000\u0000\u14a2\u14a4\u0005\u01b5\u0000\u0000\u14a3\u14a2\u0001\u0000"+
		"\u0000\u0000\u14a3\u14a4\u0001\u0000\u0000\u0000\u14a4\u14a5\u0001\u0000"+
		"\u0000\u0000\u14a5\u14a6\u0005\u00b5\u0000\u0000\u14a6\u010d\u0001\u0000"+
		"\u0000\u0000\u14a7\u14a8\u0005\u0150\u0000\u0000\u14a8\u14a9\u0007\u001d"+
		"\u0000\u0000\u14a9\u010f\u0001\u0000\u0000\u0000\u14aa\u14ac\u0003\u010a"+
		"\u0085\u0000\u14ab\u14ad\u0007\u001e\u0000\u0000\u14ac\u14ab\u0001\u0000"+
		"\u0000\u0000\u14ac\u14ad\u0001\u0000\u0000\u0000\u14ad\u14b7\u0001\u0000"+
		"\u0000\u0000\u14ae\u14b7\u0003\u010c\u0086\u0000\u14af\u14b7\u0003\u010e"+
		"\u0087\u0000\u14b0\u14b2\u0007\u0015\u0000\u0000\u14b1\u14b3\u0007\u001e"+
		"\u0000\u0000\u14b2\u14b1\u0001\u0000\u0000\u0000\u14b2\u14b3\u0001\u0000"+
		"\u0000\u0000\u14b3\u14b7\u0001\u0000\u0000\u0000\u14b4\u14b7\u0005\u023a"+
		"\u0000\u0000\u14b5\u14b7\u0005\u01b4\u0000\u0000\u14b6\u14aa\u0001\u0000"+
		"\u0000\u0000\u14b6\u14ae\u0001\u0000\u0000\u0000\u14b6\u14af\u0001\u0000"+
		"\u0000\u0000\u14b6\u14b0\u0001\u0000\u0000\u0000\u14b6\u14b4\u0001\u0000"+
		"\u0000\u0000\u14b6\u14b5\u0001\u0000\u0000\u0000\u14b7\u0111\u0001\u0000"+
		"\u0000\u0000\u14b8\u14b9\u0005\u01d9\u0000\u0000\u14b9\u14ba\u0005\u0314"+
		"\u0000\u0000\u14ba\u14bb\u0003\u0118\u008c\u0000\u14bb\u0113\u0001\u0000"+
		"\u0000\u0000\u14bc\u14bd\u0005\u01d9\u0000\u0000\u14bd\u14be\u0005\u00bb"+
		"\u0000\u0000\u14be\u14bf\u0003\u0118\u008c\u0000\u14bf\u0115\u0001\u0000"+
		"\u0000\u0000\u14c0\u14c1\u0005\u018a\u0000\u0000\u14c1\u14c2\u0007\u001f"+
		"\u0000\u0000\u14c2\u0117\u0001\u0000\u0000\u0000\u14c3\u14ca\u0005e\u0000"+
		"\u0000\u14c4\u14c5\u0005\u028e\u0000\u0000\u14c5\u14ca\u0007 \u0000\u0000"+
		"\u14c6\u14ca\u0005\u024c\u0000\u0000\u14c7\u14c8\u0005\u01b0\u0000\u0000"+
		"\u14c8\u14ca\u0005\t\u0000\u0000\u14c9\u14c3\u0001\u0000\u0000\u0000\u14c9"+
		"\u14c4\u0001\u0000\u0000\u0000\u14c9\u14c6\u0001\u0000\u0000\u0000\u14c9"+
		"\u14c7\u0001\u0000\u0000\u0000\u14ca\u0119\u0001\u0000\u0000\u0000\u14cb"+
		"\u14cd\u0003\u0110\u0088\u0000\u14cc\u14cb\u0001\u0000\u0000\u0000\u14cd"+
		"\u14d0\u0001\u0000\u0000\u0000\u14ce\u14cc\u0001\u0000\u0000\u0000\u14ce"+
		"\u14cf\u0001\u0000\u0000\u0000\u14cf\u14e0\u0001\u0000\u0000\u0000\u14d0"+
		"\u14ce\u0001\u0000\u0000\u0000\u14d1\u14e0\u0003\u0116\u008b\u0000\u14d2"+
		"\u14d4\u0003\u0116\u008b\u0000\u14d3\u14d2\u0001\u0000\u0000\u0000\u14d3"+
		"\u14d4\u0001\u0000\u0000\u0000\u14d4\u14dd\u0001\u0000\u0000\u0000\u14d5"+
		"\u14d7\u0003\u0112\u0089\u0000\u14d6\u14d8\u0003\u0114\u008a\u0000\u14d7"+
		"\u14d6\u0001\u0000\u0000\u0000\u14d7\u14d8\u0001\u0000\u0000\u0000\u14d8"+
		"\u14de\u0001\u0000\u0000\u0000\u14d9\u14db\u0003\u0114\u008a\u0000\u14da"+
		"\u14dc\u0003\u0112\u0089\u0000\u14db\u14da\u0001\u0000\u0000\u0000\u14db"+
		"\u14dc\u0001\u0000\u0000\u0000\u14dc\u14de\u0001\u0000\u0000\u0000\u14dd"+
		"\u14d5\u0001\u0000\u0000\u0000\u14dd\u14d9\u0001\u0000\u0000\u0000\u14de"+
		"\u14e0\u0001\u0000\u0000\u0000\u14df\u14ce\u0001\u0000\u0000\u0000\u14df"+
		"\u14d1\u0001\u0000\u0000\u0000\u14df\u14d3\u0001\u0000\u0000\u0000\u14e0"+
		"\u011b\u0001\u0000\u0000\u0000\u14e1\u14e3\u0005\n\u0000\u0000\u14e2\u14e4"+
		"\u0005\u0084\u0000\u0000\u14e3\u14e2\u0001\u0000\u0000\u0000\u14e3\u14e4"+
		"\u0001\u0000\u0000\u0000\u14e4\u14e5\u0001\u0000\u0000\u0000\u14e5\u14e6"+
		"\u0003\u03e4\u01f2\u0000\u14e6\u14e7\u0003\u040a\u0205\u0000\u14e7\u14e8"+
		"\u0005+\u0000\u0000\u14e8\u14e9\u0005\u038a\u0000\u0000\u14e9\u14ea\u0003"+
		"\u03f6\u01fb\u0000\u14ea\u14eb\u0005\u038b\u0000\u0000\u14eb\u14f8\u0001"+
		"\u0000\u0000\u0000\u14ec\u14ed\u0005\u023c\u0000\u0000\u14ed\u14ee\u0005"+
		"\u0084\u0000\u0000\u14ee\u14ef\u0003\u03e4\u01f2\u0000\u14ef\u14f0\u0005"+
		"\u02f9\u0000\u0000\u14f0\u14f1\u0003\u03e4\u01f2\u0000\u14f1\u14f8\u0001"+
		"\u0000\u0000\u0000\u14f2\u14f4\u0005\u00ca\u0000\u0000\u14f3\u14f5\u0005"+
		"\u0084\u0000\u0000\u14f4\u14f3\u0001\u0000\u0000\u0000\u14f4\u14f5\u0001"+
		"\u0000\u0000\u0000\u14f5\u14f6\u0001\u0000\u0000\u0000\u14f6\u14f8\u0003"+
		"\u03e6\u01f3\u0000\u14f7\u14e1\u0001\u0000\u0000\u0000\u14f7\u14ec\u0001"+
		"\u0000\u0000\u0000\u14f7\u14f2\u0001\u0000\u0000\u0000\u14f8\u011d\u0001"+
		"\u0000\u0000\u0000\u14f9\u14fa\u0005\n\u0000\u0000\u14fa\u1522\u0003\u024c"+
		"\u0126\u0000\u14fb\u14fc\u0005\u023c\u0000\u0000\u14fc\u14fd\u0005\u0090"+
		"\u0000\u0000\u14fd\u14fe\u0003\u03d0\u01e8\u0000\u14fe\u14ff\u0005\u02f9"+
		"\u0000\u0000\u14ff\u1500\u0003\u03d0\u01e8\u0000\u1500\u1522\u0001\u0000"+
		"\u0000\u0000\u1501\u1507\u0003\u0138\u009c\u0000\u1502\u1503\u0005\u0090"+
		"\u0000\u0000\u1503\u1508\u0003\u03d0\u01e8\u0000\u1504\u1508\u0003\u024a"+
		"\u0125\u0000\u1505\u1508\u0005\u030f\u0000\u0000\u1506\u1508\u0003\u0248"+
		"\u0124\u0000\u1507\u1502\u0001\u0000\u0000\u0000\u1507\u1504\u0001\u0000"+
		"\u0000\u0000\u1507\u1505\u0001\u0000\u0000\u0000\u1507\u1506\u0001\u0000"+
		"\u0000\u0000\u1508\u1509\u0001\u0000\u0000\u0000\u1509\u150b\u0003\u019c"+
		"\u00ce\u0000\u150a\u150c\u0003\u010a\u0085\u0000\u150b\u150a\u0001\u0000"+
		"\u0000\u0000\u150b\u150c\u0001\u0000\u0000\u0000\u150c\u150d\u0001\u0000"+
		"\u0000\u0000\u150d\u150e\u0007\u001e\u0000\u0000\u150e\u150f\u0007!\u0000"+
		"\u0000\u150f\u1522\u0001\u0000\u0000\u0000\u1510\u1516\u0005\u00ca\u0000"+
		"\u0000\u1511\u1512\u0005\u0090\u0000\u0000\u1512\u1517\u0003\u03d0\u01e8"+
		"\u0000\u1513\u1517\u0003\u024a\u0125\u0000\u1514\u1517\u0005\u030f\u0000"+
		"\u0000\u1515\u1517\u0003\u0248\u0124\u0000\u1516\u1511\u0001\u0000\u0000"+
		"\u0000\u1516\u1513\u0001\u0000\u0000\u0000\u1516\u1514\u0001\u0000\u0000"+
		"\u0000\u1516\u1515\u0001\u0000\u0000\u0000\u1517\u1519\u0001\u0000\u0000"+
		"\u0000\u1518\u151a\u0003\u019c\u00ce\u0000\u1519\u1518\u0001\u0000\u0000"+
		"\u0000\u1519\u151a\u0001\u0000\u0000\u0000\u151a\u151c\u0001\u0000\u0000"+
		"\u0000\u151b\u151d\u0003\u02d8\u016c\u0000\u151c\u151b\u0001\u0000\u0000"+
		"\u0000\u151c\u151d\u0001\u0000\u0000\u0000\u151d\u1522\u0001\u0000\u0000"+
		"\u0000\u151e\u151f\u0005\u00ca\u0000\u0000\u151f\u1520\u0005\u0216\u0000"+
		"\u0000\u1520\u1522\u0005\u0168\u0000\u0000\u1521\u14f9\u0001\u0000\u0000"+
		"\u0000\u1521\u14fb\u0001\u0000\u0000\u0000\u1521\u1501\u0001\u0000\u0000"+
		"\u0000\u1521\u1510\u0001\u0000\u0000\u0000\u1521\u151e\u0001\u0000\u0000"+
		"\u0000\u1522\u011f\u0001\u0000\u0000\u0000\u1523\u1524\u0005\n\u0000\u0000"+
		"\u1524\u1525\u0005\u0281\u0000\u0000\u1525\u152f\u0005\u01e0\u0000\u0000"+
		"\u1526\u1527\u0005\u01d9\u0000\u0000\u1527\u152c\u0003\u0122\u0091\u0000"+
		"\u1528\u1529\u0005\u0390\u0000\u0000\u1529\u152b\u0003\u0122\u0091\u0000"+
		"\u152a\u1528\u0001\u0000\u0000\u0000\u152b\u152e\u0001\u0000\u0000\u0000"+
		"\u152c\u152a\u0001\u0000\u0000\u0000\u152c\u152d\u0001\u0000\u0000\u0000"+
		"\u152d\u1530\u0001\u0000\u0000\u0000\u152e\u152c\u0001\u0000\u0000\u0000"+
		"\u152f\u1526\u0001\u0000\u0000\u0000\u152f\u1530\u0001\u0000\u0000\u0000"+
		"\u1530\u1540\u0001\u0000\u0000\u0000\u1531\u1532\u0005\u00ca\u0000\u0000"+
		"\u1532\u1533\u0005\u0281\u0000\u0000\u1533\u153d\u0005\u01e0\u0000\u0000"+
		"\u1534\u1535\u0005\u01d9\u0000\u0000\u1535\u153a\u0003\u0122\u0091\u0000"+
		"\u1536\u1537\u0005\u0390\u0000\u0000\u1537\u1539\u0003\u0122\u0091\u0000"+
		"\u1538\u1536\u0001\u0000\u0000\u0000\u1539\u153c\u0001\u0000\u0000\u0000"+
		"\u153a\u1538\u0001\u0000\u0000\u0000\u153a\u153b\u0001\u0000\u0000\u0000"+
		"\u153b\u153e\u0001\u0000\u0000\u0000\u153c\u153a\u0001\u0000\u0000\u0000"+
		"\u153d\u1534\u0001\u0000\u0000\u0000\u153d\u153e\u0001\u0000\u0000\u0000"+
		"\u153e\u1540\u0001\u0000\u0000\u0000\u153f\u1523\u0001\u0000\u0000\u0000"+
		"\u153f\u1531\u0001\u0000\u0000\u0000\u1540\u0121\u0001\u0000\u0000\u0000"+
		"\u1541\u1542\u0007\"\u0000\u0000\u1542\u1545\u0005\u038a\u0000\u0000\u1543"+
		"\u1546\u0005\u0394\u0000\u0000\u1544\u1546\u0003\u03f6\u01fb\u0000\u1545"+
		"\u1543\u0001\u0000\u0000\u0000\u1545\u1544\u0001\u0000\u0000\u0000\u1546"+
		"\u1547\u0001\u0000\u0000\u0000\u1547\u1548\u0005\u038b\u0000\u0000\u1548"+
		"\u0123\u0001\u0000\u0000\u0000\u1549\u154a\u0005\u001c\u0000\u0000\u154a"+
		"\u154b\u0005\u02d4\u0000\u0000\u154b\u154c\u0003\u03ea\u01f5\u0000\u154c"+
		"\u1552\u0003\u0138\u009c\u0000\u154d\u154e\u0005\u038a\u0000\u0000\u154e"+
		"\u154f\u0003\u0126\u0093\u0000\u154f\u1550\u0005\u038b\u0000\u0000\u1550"+
		"\u1553\u0001\u0000\u0000\u0000\u1551\u1553\u0003\u0126\u0093\u0000\u1552"+
		"\u154d\u0001\u0000\u0000\u0000\u1552\u1551\u0001\u0000\u0000\u0000\u1553"+
		"\u158d\u0001\u0000\u0000\u0000\u1554\u1555\u0005\u001c\u0000\u0000\u1555"+
		"\u1556\u0005\u02d4\u0000\u0000\u1556\u1557\u0003\u03ea\u01f5\u0000\u1557"+
		"\u1558\u0003\u0138\u009c\u0000\u1558\u1559\u0005\u0084\u0000\u0000\u1559"+
		"\u155a\u0003\u03e4\u01f2\u0000\u155a\u155b\u0005\u028e\u0000\u0000\u155b"+
		"\u155c\u0005\u0188\u0000\u0000\u155c\u155d\u0005\u020f\u0000\u0000\u155d"+
		"\u1565\u0003\u03d0\u01e8\u0000\u155e\u155f\u0005\u0321\u0000\u0000\u155f"+
		"\u1560\u0005\u038a\u0000\u0000\u1560\u1561\u0003\u03e4\u01f2\u0000\u1561"+
		"\u1562\u0005\u0390\u0000\u0000\u1562\u1563\u0003\u03e6\u01f3\u0000\u1563"+
		"\u1564\u0005\u038b\u0000\u0000\u1564\u1566\u0001\u0000\u0000\u0000\u1565"+
		"\u155e\u0001\u0000\u0000\u0000\u1565\u1566\u0001\u0000\u0000\u0000\u1566"+
		"\u1568\u0001\u0000\u0000\u0000\u1567\u1569\u0005\u0111\u0000\u0000\u1568"+
		"\u1567\u0001\u0000\u0000\u0000\u1568\u1569\u0001\u0000\u0000\u0000\u1569"+
		"\u158d\u0001\u0000\u0000\u0000\u156a\u156b\u0005\u001c\u0000\u0000\u156b"+
		"\u156c\u0005\u02d4\u0000\u0000\u156c\u156d\u0003\u03ea\u01f5\u0000\u156d"+
		"\u156e\u0003\u0138\u009c\u0000\u156e\u156f\u0005\u0084\u0000\u0000\u156f"+
		"\u1570\u0003\u03e4\u01f2\u0000\u1570\u1571\u0005\u0312\u0000\u0000\u1571"+
		"\u1572\u0005\u0188\u0000\u0000\u1572\u1573\u0005\u020f\u0000\u0000\u1573"+
		"\u158d\u0001\u0000\u0000\u0000\u1574\u1575\u0005\u001c\u0000\u0000\u1575"+
		"\u1576\u0005\u02d4\u0000\u0000\u1576\u1577\u0003\u03ea\u01f5\u0000\u1577"+
		"\u1578\u0003\u0138\u009c\u0000\u1578\u157d\u0003\u012c\u0096\u0000\u1579"+
		"\u157a\u0005\u0390\u0000\u0000\u157a\u157c\u0003\u012c\u0096\u0000\u157b"+
		"\u1579\u0001\u0000\u0000\u0000\u157c\u157f\u0001\u0000\u0000\u0000\u157d"+
		"\u157b\u0001\u0000\u0000\u0000\u157d\u157e\u0001\u0000\u0000\u0000\u157e"+
		"\u158d\u0001\u0000\u0000\u0000\u157f\u157d\u0001\u0000\u0000\u0000\u1580"+
		"\u1581\u0005\u001c\u0000\u0000\u1581\u1582\u0005\u02d4\u0000\u0000\u1582"+
		"\u1583\u0003\u03ea\u01f5\u0000\u1583\u1584\u0003\u0138\u009c\u0000\u1584"+
		"\u1589\u0003\u012e\u0097\u0000\u1585\u1586\u0005\u0390\u0000\u0000\u1586"+
		"\u1588\u0003\u012e\u0097\u0000\u1587\u1585\u0001\u0000\u0000\u0000\u1588"+
		"\u158b\u0001\u0000\u0000\u0000\u1589\u1587\u0001\u0000\u0000\u0000\u1589"+
		"\u158a\u0001\u0000\u0000\u0000\u158a\u158d\u0001\u0000\u0000\u0000\u158b"+
		"\u1589\u0001\u0000\u0000\u0000\u158c\u1549\u0001\u0000\u0000\u0000\u158c"+
		"\u1554\u0001\u0000\u0000\u0000\u158c\u156a\u0001\u0000\u0000\u0000\u158c"+
		"\u1574\u0001\u0000\u0000\u0000\u158c\u1580\u0001\u0000\u0000\u0000\u158d"+
		"\u0125\u0001\u0000\u0000\u0000\u158e\u1593\u0003\u0128\u0094\u0000\u158f"+
		"\u1590\u0005\u0390\u0000\u0000\u1590\u1592\u0003\u0128\u0094\u0000\u1591"+
		"\u158f\u0001\u0000\u0000\u0000\u1592\u1595\u0001\u0000\u0000\u0000\u1593"+
		"\u1591\u0001\u0000\u0000\u0000\u1593\u1594\u0001\u0000\u0000\u0000\u1594"+
		"\u0127\u0001\u0000\u0000\u0000\u1595\u1593\u0001\u0000\u0000\u0000\u1596"+
		"\u1598\u0005\u0084\u0000\u0000\u1597\u1596\u0001\u0000\u0000\u0000\u1597"+
		"\u1598\u0001\u0000\u0000\u0000\u1598\u1599\u0001\u0000\u0000\u0000\u1599"+
		"\u159a\u0003\u03e4\u01f2\u0000\u159a\u159b\u0003\u012a\u0095\u0000\u159b"+
		"\u0129\u0001\u0000\u0000\u0000\u159c\u159d\u0005\u00ca\u0000\u0000\u159d"+
		"\u15ba\u0005\u00b0\u0000\u0000\u159e\u159f\u0005\u028e\u0000\u0000\u159f"+
		"\u15a0\u0005\u00b0\u0000\u0000\u15a0\u15a1\u0003\u03ea\u01f5\u0000\u15a1"+
		"\u15a2\u0005\u0386\u0000\u0000\u15a2\u15a3\u0005\u01af\u0000\u0000\u15a3"+
		"\u15ba\u0001\u0000\u0000\u0000\u15a4\u15a6\u0005\u028e\u0000\u0000\u15a5"+
		"\u15a4\u0001\u0000\u0000\u0000\u15a5\u15a6\u0001\u0000\u0000\u0000\u15a6"+
		"\u15a7\u0001\u0000\u0000\u0000\u15a7\u15a8\u0005\u01b5\u0000\u0000\u15a8"+
		"\u15ad\u0005\u01bf\u0000\u0000\u15a9\u15aa\u0005\u00ca\u0000\u0000\u15aa"+
		"\u15ab\u0005\u01b5\u0000\u0000\u15ab\u15ad\u0005\u01bf\u0000\u0000\u15ac"+
		"\u15a5\u0001\u0000\u0000\u0000\u15ac\u15a9\u0001\u0000\u0000\u0000\u15ad"+
		"\u15ba\u0001\u0000\u0000\u0000\u15ae\u15af\u0005\u028e\u0000\u0000\u15af"+
		"\u15b1\u0005\u00a4\u0000\u0000\u15b0\u15ae\u0001\u0000\u0000\u0000\u15b0"+
		"\u15b1\u0001\u0000\u0000\u0000\u15b1\u15b2\u0001\u0000\u0000\u0000\u15b2"+
		"\u15b4\u0005\u030c\u0000\u0000\u15b3\u15b0\u0001\u0000\u0000\u0000\u15b3"+
		"\u15b4\u0001\u0000\u0000\u0000\u15b4\u15b5\u0001\u0000\u0000\u0000\u15b5"+
		"\u15ba\u0003\u040a\u0205\u0000\u15b6\u15ba\u0003\u02f2\u0179\u0000\u15b7"+
		"\u15b8\u0005\u0312\u0000\u0000\u15b8\u15ba\u0005\u0086\u0000\u0000\u15b9"+
		"\u159c\u0001\u0000\u0000\u0000\u15b9\u159e\u0001\u0000\u0000\u0000\u15b9"+
		"\u15ac\u0001\u0000\u0000\u0000\u15b9\u15b3\u0001\u0000\u0000\u0000\u15b9"+
		"\u15b6\u0001\u0000\u0000\u0000\u15b9\u15b7\u0001\u0000\u0000\u0000\u15ba"+
		"\u012b\u0001\u0000\u0000\u0000\u15bb\u15bd\u0005\u0084\u0000\u0000\u15bc"+
		"\u15bb\u0001\u0000\u0000\u0000\u15bc\u15bd\u0001\u0000\u0000\u0000\u15bd"+
		"\u15be\u0001\u0000\u0000\u0000\u15be\u15bf\u0003\u03e4\u01f2\u0000\u15bf"+
		"\u15c0\u0003\u0148\u00a4\u0000\u15c0\u012d\u0001\u0000\u0000\u0000\u15c1"+
		"\u15c2\u0005\u0084\u0000\u0000\u15c2\u15c3\u0003\u03e4\u01f2\u0000\u15c3"+
		"\u15c4\u0003\u014c\u00a6\u0000\u15c4\u012f\u0001\u0000\u0000\u0000\u15c5"+
		"\u15c6\u0005\u001c\u0000\u0000\u15c6\u15c8\u0005\u02db\u0000\u0000\u15c7"+
		"\u15c9\u0003\u02f8\u017c\u0000\u15c8\u15c7\u0001\u0000\u0000\u0000\u15c8"+
		"\u15c9\u0001\u0000\u0000\u0000\u15c9\u15ca\u0001\u0000\u0000\u0000\u15ca"+
		"\u15cb\u0003\u03ea\u01f5\u0000\u15cb\u15cc\u0003\u0140\u00a0\u0000\u15cc"+
		"\u0131\u0001\u0000\u0000\u0000\u15cd\u15ce\u0005\u001c\u0000\u0000\u15ce"+
		"\u15d0\u0005\u02de\u0000\u0000\u15cf\u15d1\u0003\u02f8\u017c\u0000\u15d0"+
		"\u15cf\u0001\u0000\u0000\u0000\u15d0\u15d1\u0001\u0000\u0000\u0000\u15d1"+
		"\u15d2\u0001\u0000\u0000\u0000\u15d2\u15d3\u0003\u03ea\u01f5\u0000\u15d3"+
		"\u15d4\u0003\u0098L\u0000\u15d4\u163e\u0001\u0000\u0000\u0000\u15d5\u15d6"+
		"\u0005\u001c\u0000\u0000\u15d6\u15d8\u0005\u02de\u0000\u0000\u15d7\u15d9"+
		"\u0003\u02f8\u017c\u0000\u15d8\u15d7\u0001\u0000\u0000\u0000\u15d8\u15d9"+
		"\u0001\u0000\u0000\u0000\u15d9\u15da\u0001\u0000\u0000\u0000\u15da\u15db"+
		"\u0003\u03ea\u01f5\u0000\u15db\u15dc\u0007\u001b\u0000\u0000\u15dc\u15dd"+
		"\u0005\u000e\u0000\u0000\u15dd\u15de\u0003\u03cc\u01e6\u0000\u15de\u163e"+
		"\u0001\u0000\u0000\u0000\u15df\u15e0\u0005\u001c\u0000\u0000\u15e0\u15e2"+
		"\u0005\u02de\u0000\u0000\u15e1\u15e3\u0003\u02f8\u017c\u0000\u15e2\u15e1"+
		"\u0001\u0000\u0000\u0000\u15e2\u15e3\u0001\u0000\u0000\u0000\u15e3\u15e4"+
		"\u0001\u0000\u0000\u0000\u15e4\u15e5\u0003\u03ea\u01f5\u0000\u15e5\u15e9"+
		"\u0005\u028e\u0000\u0000\u15e6\u15e7\u0005\u032d\u0000\u0000\u15e7\u15e8"+
		"\u0005\u0380\u0000\u0000\u15e8\u15ea\u0003\u03d0\u01e8\u0000\u15e9\u15e6"+
		"\u0001\u0000\u0000\u0000\u15e9\u15ea\u0001\u0000\u0000\u0000\u15ea\u15ec"+
		"\u0001\u0000\u0000\u0000\u15eb\u15ed\u0003\u0272\u0139\u0000\u15ec\u15eb"+
		"\u0001\u0000\u0000\u0000\u15ec\u15ed\u0001\u0000\u0000\u0000\u15ed\u15ef"+
		"\u0001\u0000\u0000\u0000\u15ee\u15f0\u0003\u027a\u013d\u0000\u15ef\u15ee"+
		"\u0001\u0000\u0000\u0000\u15ef\u15f0\u0001\u0000\u0000\u0000\u15f0\u15f2"+
		"\u0001\u0000\u0000\u0000\u15f1\u15f3\u0003\u0274\u013a\u0000\u15f2\u15f1"+
		"\u0001\u0000\u0000\u0000\u15f2\u15f3\u0001\u0000\u0000\u0000\u15f3\u15f5"+
		"\u0001\u0000\u0000\u0000\u15f4\u15f6\u0003\u0276\u013b\u0000\u15f5\u15f4"+
		"\u0001\u0000\u0000\u0000\u15f5\u15f6\u0001\u0000\u0000\u0000\u15f6\u15f8"+
		"\u0001\u0000\u0000\u0000\u15f7\u15f9\u0003\u02f2\u0179\u0000\u15f8\u15f7"+
		"\u0001\u0000\u0000\u0000\u15f8\u15f9\u0001\u0000\u0000\u0000\u15f9\u15fb"+
		"\u0001\u0000\u0000\u0000\u15fa\u15fc\u0003\u026a\u0135\u0000\u15fb\u15fa"+
		"\u0001\u0000\u0000\u0000\u15fb\u15fc\u0001\u0000\u0000\u0000\u15fc\u163e"+
		"\u0001\u0000\u0000\u0000\u15fd\u15fe\u0005\u001c\u0000\u0000\u15fe\u1600"+
		"\u0005\u02de\u0000\u0000\u15ff\u1601\u0003\u02f8\u017c\u0000\u1600\u15ff"+
		"\u0001\u0000\u0000\u0000\u1600\u1601\u0001\u0000\u0000\u0000\u1601\u1602"+
		"\u0001\u0000\u0000\u0000\u1602\u1603\u0003\u03ea\u01f5\u0000\u1603\u1605"+
		"\u0005\u0312\u0000\u0000\u1604\u1606\u0005\u032d\u0000\u0000\u1605\u1604"+
		"\u0001\u0000\u0000\u0000\u1605\u1606\u0001\u0000\u0000\u0000\u1606\u1608"+
		"\u0001\u0000\u0000\u0000\u1607\u1609\u0005\u027c\u0000\u0000\u1608\u1607"+
		"\u0001\u0000\u0000\u0000\u1608\u1609\u0001\u0000\u0000\u0000\u1609\u160b"+
		"\u0001\u0000\u0000\u0000\u160a\u160c\u0005\u001b\u0000\u0000\u160b\u160a"+
		"\u0001\u0000\u0000\u0000\u160b\u160c\u0001\u0000\u0000\u0000\u160c\u160e"+
		"\u0001\u0000\u0000\u0000\u160d\u160f\u0005\u031e\u0000\u0000\u160e\u160d"+
		"\u0001\u0000\u0000\u0000\u160e\u160f\u0001\u0000\u0000\u0000\u160f\u1611"+
		"\u0001\u0000\u0000\u0000\u1610\u1612\u0005\u02cf\u0000\u0000\u1611\u1610"+
		"\u0001\u0000\u0000\u0000\u1611\u1612\u0001\u0000\u0000\u0000\u1612\u1614"+
		"\u0001\u0000\u0000\u0000\u1613\u1615\u0005\u0086\u0000\u0000\u1614\u1613"+
		"\u0001\u0000\u0000\u0000\u1614\u1615\u0001\u0000\u0000\u0000\u1615\u1617"+
		"\u0001\u0000\u0000\u0000\u1616\u1618\u0003\u0268\u0134\u0000\u1617\u1616"+
		"\u0001\u0000\u0000\u0000\u1617\u1618\u0001\u0000\u0000\u0000\u1618\u163e"+
		"\u0001\u0000\u0000\u0000\u1619\u161a\u0005\u001c\u0000\u0000\u161a\u161c"+
		"\u0005\u02de\u0000\u0000\u161b\u161d\u0003\u02f8\u017c\u0000\u161c\u161b"+
		"\u0001\u0000\u0000\u0000\u161c\u161d\u0001\u0000\u0000\u0000\u161d\u161e"+
		"\u0001\u0000\u0000\u0000\u161e\u161f\u0003\u03ea\u01f5\u0000\u161f\u1620"+
		"\u0003\u0148\u00a4\u0000\u1620\u163e\u0001\u0000\u0000\u0000\u1621\u1622"+
		"\u0005\u001c\u0000\u0000\u1622\u1624\u0005\u02de\u0000\u0000\u1623\u1625"+
		"\u0003\u02f8\u017c\u0000\u1624\u1623\u0001\u0000\u0000\u0000\u1624\u1625"+
		"\u0001\u0000\u0000\u0000\u1625\u1626\u0001\u0000\u0000\u0000\u1626\u1627"+
		"\u0003\u03ea\u01f5\u0000\u1627\u1628\u0003\u014c\u00a6\u0000\u1628\u163e"+
		"\u0001\u0000\u0000\u0000\u1629\u162a\u0005\u001c\u0000\u0000\u162a\u162c"+
		"\u0005\u02de\u0000\u0000\u162b\u162d\u0003\u02f8\u017c\u0000\u162c\u162b"+
		"\u0001\u0000\u0000\u0000\u162c\u162d\u0001\u0000\u0000\u0000\u162d\u162e"+
		"\u0001\u0000\u0000\u0000\u162e\u162f\u0003\u03ea\u01f5\u0000\u162f\u1630"+
		"\u0005\u01a2\u0000\u0000\u1630\u1631\u0005+\u0000\u0000\u1631\u1632\u0003";
	private static final String _serializedATNSegment3 =
		"\u027c\u013e\u0000\u1632\u163e\u0001\u0000\u0000\u0000\u1633\u1634\u0005"+
		"\u001c\u0000\u0000\u1634\u1636\u0005\u02de\u0000\u0000\u1635\u1637\u0003"+
		"\u02f8\u017c\u0000\u1636\u1635\u0001\u0000\u0000\u0000\u1636\u1637\u0001"+
		"\u0000\u0000\u0000\u1637\u1638\u0001\u0000\u0000\u0000\u1638\u1639\u0003"+
		"\u03ea\u01f5\u0000\u1639\u163a\u0005\u01a2\u0000\u0000\u163a\u163b\u0005"+
		"\u0334\u0000\u0000\u163b\u163c\u0003\u03f6\u01fb\u0000\u163c\u163e\u0001"+
		"\u0000\u0000\u0000\u163d\u15cd\u0001\u0000\u0000\u0000\u163d\u15d5\u0001"+
		"\u0000\u0000\u0000\u163d\u15df\u0001\u0000\u0000\u0000\u163d\u15fd\u0001"+
		"\u0000\u0000\u0000\u163d\u1619\u0001\u0000\u0000\u0000\u163d\u1621\u0001"+
		"\u0000\u0000\u0000\u163d\u1629\u0001\u0000\u0000\u0000\u163d\u1633\u0001"+
		"\u0000\u0000\u0000\u163e\u0133\u0001\u0000\u0000\u0000\u163f\u1640\u0005"+
		"\u001c\u0000\u0000\u1640\u1642\u0005\u0319\u0000\u0000\u1641\u1643\u0003"+
		"\u02f8\u017c\u0000\u1642\u1641\u0001\u0000\u0000\u0000\u1642\u1643\u0001"+
		"\u0000\u0000\u0000\u1643\u1644\u0001\u0000\u0000\u0000\u1644\u1645\u0003"+
		"\u03d0\u01e8\u0000\u1645\u1646\u0003\u013e\u009f\u0000\u1646\u0135\u0001"+
		"\u0000\u0000\u0000\u1647\u1648\u0005\u001c\u0000\u0000\u1648\u164a\u0005"+
		"\u0329\u0000\u0000\u1649\u164b\u0003\u02f8\u017c\u0000\u164a\u1649\u0001"+
		"\u0000\u0000\u0000\u164a\u164b\u0001\u0000\u0000\u0000\u164b\u164c\u0001"+
		"\u0000\u0000\u0000\u164c\u164d\u0003\u03ea\u01f5\u0000\u164d\u164e\u0005"+
		"\u023c\u0000\u0000\u164e\u164f\u0005\u02f9\u0000\u0000\u164f\u1650\u0003"+
		"\u03ea\u01f5\u0000\u1650\u16f0\u0001\u0000\u0000\u0000\u1651\u1652\u0005"+
		"\u001c\u0000\u0000\u1652\u1654\u0005\u0329\u0000\u0000\u1653\u1655\u0003"+
		"\u02f8\u017c\u0000\u1654\u1653\u0001\u0000\u0000\u0000\u1654\u1655\u0001"+
		"\u0000\u0000\u0000\u1655\u1656\u0001\u0000\u0000\u0000\u1656\u1657\u0003"+
		"\u03ea\u01f5\u0000\u1657\u1658\u0005\u028e\u0000\u0000\u1658\u1659\u0003"+
		"\u02f2\u0179\u0000\u1659\u16f0\u0001\u0000\u0000\u0000\u165a\u165b\u0005"+
		"\u001c\u0000\u0000\u165b\u165d\u0005\u0329\u0000\u0000\u165c\u165e\u0003"+
		"\u02f8\u017c\u0000\u165d\u165c\u0001\u0000\u0000\u0000\u165d\u165e\u0001"+
		"\u0000\u0000\u0000\u165e\u165f\u0001\u0000\u0000\u0000\u165f\u1660\u0003"+
		"\u03ea\u01f5\u0000\u1660\u1661\u0005\u0312\u0000\u0000\u1661\u1662\u0005"+
		"\u0086\u0000\u0000\u1662\u16f0\u0001\u0000\u0000\u0000\u1663\u1664\u0005"+
		"\u001c\u0000\u0000\u1664\u1665\u0005\u0329\u0000\u0000\u1665\u1666\u0003"+
		"\u03ea\u01f5\u0000\u1666\u1667\u0005\u028e\u0000\u0000\u1667\u1668\u0005"+
		"\u0283\u0000\u0000\u1668\u16f0\u0001\u0000\u0000\u0000\u1669\u166a\u0005"+
		"\u001c\u0000\u0000\u166a\u166b\u0005\u0329\u0000\u0000\u166b\u166c\u0003"+
		"\u03ea\u01f5\u0000\u166c\u166d\u0005\u0312\u0000\u0000\u166d\u166e\u0005"+
		"\u0283\u0000\u0000\u166e\u16f0\u0001\u0000\u0000\u0000\u166f\u1670\u0005"+
		"\u001c\u0000\u0000\u1670\u1672\u0005\u0329\u0000\u0000\u1671\u1673\u0003"+
		"\u02f8\u017c\u0000\u1672\u1671\u0001\u0000\u0000\u0000\u1672\u1673\u0001"+
		"\u0000\u0000\u0000\u1673\u1674\u0001\u0000\u0000\u0000\u1674\u1675\u0003"+
		"\u03ea\u01f5\u0000\u1675\u1676\u0003\u0148\u00a4\u0000\u1676\u16f0\u0001"+
		"\u0000\u0000\u0000\u1677\u1678\u0005\u001c\u0000\u0000\u1678\u167a\u0005"+
		"\u0329\u0000\u0000\u1679\u167b\u0003\u02f8\u017c\u0000\u167a\u1679\u0001"+
		"\u0000\u0000\u0000\u167a\u167b\u0001\u0000\u0000\u0000\u167b\u167c\u0001"+
		"\u0000\u0000\u0000\u167c\u167d\u0003\u03ea\u01f5\u0000\u167d\u167e\u0003"+
		"\u014c\u00a6\u0000\u167e\u16f0\u0001\u0000\u0000\u0000\u167f\u1680\u0005"+
		"\u001c\u0000\u0000\u1680\u1682\u0005\u0329\u0000\u0000\u1681\u1683\u0003"+
		"\u02f8\u017c\u0000\u1682\u1681\u0001\u0000\u0000\u0000\u1682\u1683\u0001"+
		"\u0000\u0000\u0000\u1683\u1684\u0001\u0000\u0000\u0000\u1684\u1685\u0003"+
		"\u03ea\u01f5\u0000\u1685\u1686\u0005\n\u0000\u0000\u1686\u1687\u0005\u025f"+
		"\u0000\u0000\u1687\u1688\u0005\u0005\u0000\u0000\u1688\u1689\u0005\u020f"+
		"\u0000\u0000\u1689\u168a\u0003\u03d0\u01e8\u0000\u168a\u168b\u0005\u01d9"+
		"\u0000\u0000\u168b\u168c\u0003\u019c\u00ce\u0000\u168c\u16f0\u0001\u0000"+
		"\u0000\u0000\u168d\u168e\u0005\u001c\u0000\u0000\u168e\u1690\u0005\u0329"+
		"\u0000\u0000\u168f\u1691\u0003\u02f8\u017c\u0000\u1690\u168f\u0001\u0000"+
		"\u0000\u0000\u1690\u1691\u0001\u0000\u0000\u0000\u1691\u1692\u0001\u0000"+
		"\u0000\u0000\u1692\u1693\u0003\u03ea\u01f5\u0000\u1693\u1694\u0005\u00ca"+
		"\u0000\u0000\u1694\u1695\u0005\u025f\u0000\u0000\u1695\u1696\u0005\u0005"+
		"\u0000\u0000\u1696\u1697\u0005\u020f\u0000\u0000\u1697\u1698\u0003\u03d0"+
		"\u01e8\u0000\u1698\u16f0\u0001\u0000\u0000\u0000\u1699\u169a\u0005\u001c"+
		"\u0000\u0000\u169a\u169c\u0005\u0329\u0000\u0000\u169b\u169d\u0003\u02f8"+
		"\u017c\u0000\u169c\u169b\u0001\u0000\u0000\u0000\u169c\u169d\u0001\u0000"+
		"\u0000\u0000\u169d\u169e\u0001\u0000\u0000\u0000\u169e\u169f\u0003\u03ea"+
		"\u01f5\u0000\u169f\u16a0\u0005\n\u0000\u0000\u16a0\u16a1\u0005\u025f\u0000"+
		"\u0000\u16a1\u16a2\u0005\u0005\u0000\u0000\u16a2\u16a3\u0005\u020f\u0000"+
		"\u0000\u16a3\u16a4\u0003\u03d0\u01e8\u0000\u16a4\u16a5\u0005\u01d9\u0000"+
		"\u0000\u16a5\u16a6\u0003\u019c\u00ce\u0000\u16a6\u16a7\u0005\u0390\u0000"+
		"\u0000\u16a7\u16a8\u0005\u00ca\u0000\u0000\u16a8\u16a9\u0005\u025f\u0000"+
		"\u0000\u16a9\u16aa\u0005\u0005\u0000\u0000\u16aa\u16ab\u0005\u020f\u0000"+
		"\u0000\u16ab\u16ac\u0003\u03d0\u01e8\u0000\u16ac\u16f0\u0001\u0000\u0000"+
		"\u0000\u16ad\u16ae\u0005\u001c\u0000\u0000\u16ae\u16b0\u0005\u0329\u0000"+
		"\u0000\u16af\u16b1\u0003\u02f8\u017c\u0000\u16b0\u16af\u0001\u0000\u0000"+
		"\u0000\u16b0\u16b1\u0001\u0000\u0000\u0000\u16b1\u16b2\u0001\u0000\u0000"+
		"\u0000\u16b2\u16b3\u0003\u03ea\u01f5\u0000\u16b3\u16b4\u0005\u00ca\u0000"+
		"\u0000\u16b4\u16b5\u0005\u0011\u0000\u0000\u16b5\u16b6\u0005\u025f\u0000"+
		"\u0000\u16b6\u16b7\u0005\u0005\u0000\u0000\u16b7\u16b8\u0005\u020e\u0000"+
		"\u0000\u16b8\u16f0\u0001\u0000\u0000\u0000\u16b9\u16ba\u0005\u001c\u0000"+
		"\u0000\u16ba\u16bb\u0005\u0329\u0000\u0000\u16bb\u16bc\u0003\u03ea\u01f5"+
		"\u0000\u16bc\u16be\u0003\u0138\u009c\u0000\u16bd\u16bf\u0005\u0084\u0000"+
		"\u0000\u16be\u16bd\u0001\u0000\u0000\u0000\u16be\u16bf\u0001\u0000\u0000"+
		"\u0000\u16bf\u16c0\u0001\u0000\u0000\u0000\u16c0\u16c1\u0003\u03d0\u01e8"+
		"\u0000\u16c1\u16c2\u0005\u028e\u0000\u0000\u16c2\u16c3\u0005\u0188\u0000"+
		"\u0000\u16c3\u16c4\u0005\u020f\u0000\u0000\u16c4\u16cc\u0003\u03d0\u01e8"+
		"\u0000\u16c5\u16c6\u0005\u0321\u0000\u0000\u16c6\u16c7\u0005\u038a\u0000"+
		"\u0000\u16c7\u16c8\u0003\u03e4\u01f2\u0000\u16c8\u16c9\u0005\u0390\u0000"+
		"\u0000\u16c9\u16ca\u0003\u03e6\u01f3\u0000\u16ca\u16cb\u0005\u038b\u0000"+
		"\u0000\u16cb\u16cd\u0001\u0000\u0000\u0000\u16cc\u16c5\u0001\u0000\u0000"+
		"\u0000\u16cc\u16cd\u0001\u0000\u0000\u0000\u16cd\u16cf\u0001\u0000\u0000"+
		"\u0000\u16ce\u16d0\u0005\u0111\u0000\u0000\u16cf\u16ce\u0001\u0000\u0000"+
		"\u0000\u16cf\u16d0\u0001\u0000\u0000\u0000\u16d0\u16f0\u0001\u0000\u0000"+
		"\u0000\u16d1\u16d2\u0005\u001c\u0000\u0000\u16d2\u16d3\u0005\u0329\u0000"+
		"\u0000\u16d3\u16d4\u0003\u03ea\u01f5\u0000\u16d4\u16d6\u0003\u0138\u009c"+
		"\u0000\u16d5\u16d7\u0005\u0084\u0000\u0000\u16d6\u16d5\u0001\u0000\u0000"+
		"\u0000\u16d6\u16d7\u0001\u0000\u0000\u0000\u16d7\u16d8\u0001\u0000\u0000"+
		"\u0000\u16d8\u16d9\u0003\u03d0\u01e8\u0000\u16d9\u16da\u0005\u0312\u0000"+
		"\u0000\u16da\u16db\u0005\u0188\u0000\u0000\u16db\u16dc\u0005\u020f\u0000"+
		"\u0000\u16dc\u16f0\u0001\u0000\u0000\u0000\u16dd\u16de\u0005\u001c\u0000"+
		"\u0000\u16de\u16df\u0005\u0329\u0000\u0000\u16df\u16e0\u0003\u03ea\u01f5"+
		"\u0000\u16e0\u16e2\u0003\u0138\u009c\u0000\u16e1\u16e3\u0005\u0084\u0000"+
		"\u0000\u16e2\u16e1\u0001\u0000\u0000\u0000\u16e2\u16e3\u0001\u0000\u0000"+
		"\u0000\u16e3\u16e4\u0001\u0000\u0000\u0000\u16e4\u16e5\u0003\u03d0\u01e8"+
		"\u0000\u16e5\u16e6\u0003\u0148\u00a4\u0000\u16e6\u16f0\u0001\u0000\u0000"+
		"\u0000\u16e7\u16e8\u0005\u001c\u0000\u0000\u16e8\u16e9\u0005\u0329\u0000"+
		"\u0000\u16e9\u16ea\u0003\u03ea\u01f5\u0000\u16ea\u16eb\u0003\u0138\u009c"+
		"\u0000\u16eb\u16ec\u0005\u0084\u0000\u0000\u16ec\u16ed\u0003\u03d0\u01e8"+
		"\u0000\u16ed\u16ee\u0003\u014c\u00a6\u0000\u16ee\u16f0\u0001\u0000\u0000"+
		"\u0000\u16ef\u1647\u0001\u0000\u0000\u0000\u16ef\u1651\u0001\u0000\u0000"+
		"\u0000\u16ef\u165a\u0001\u0000\u0000\u0000\u16ef\u1663\u0001\u0000\u0000"+
		"\u0000\u16ef\u1669\u0001\u0000\u0000\u0000\u16ef\u166f\u0001\u0000\u0000"+
		"\u0000\u16ef\u1677\u0001\u0000\u0000\u0000\u16ef\u167f\u0001\u0000\u0000"+
		"\u0000\u16ef\u168d\u0001\u0000\u0000\u0000\u16ef\u1699\u0001\u0000\u0000"+
		"\u0000\u16ef\u16ad\u0001\u0000\u0000\u0000\u16ef\u16b9\u0001\u0000\u0000"+
		"\u0000\u16ef\u16d1\u0001\u0000\u0000\u0000\u16ef\u16dd\u0001\u0000\u0000"+
		"\u0000\u16ef\u16e7\u0001\u0000\u0000\u0000\u16f0\u0137\u0001\u0000\u0000"+
		"\u0000\u16f1\u16f2\u0007#\u0000\u0000\u16f2\u0139\u0001\u0000\u0000\u0000"+
		"\u16f3\u16f4\u0005\u001c\u0000\u0000\u16f4\u16f6\u0005\u032d\u0000\u0000"+
		"\u16f5\u16f7\u0003\u02f8\u017c\u0000\u16f6\u16f5\u0001\u0000\u0000\u0000"+
		"\u16f6\u16f7\u0001\u0000\u0000\u0000\u16f7\u16f8\u0001\u0000\u0000\u0000"+
		"\u16f8\u16f9\u0003\u0144\u00a2\u0000\u16f9\u013b\u0001\u0000\u0000\u0000"+
		"\u16fa\u16fb\u0003\u03d0\u01e8\u0000\u16fb\u16fc\u0005\u00d2\u0000\u0000"+
		"\u16fc\u16fd\u0005\u0103\u0000\u0000\u16fd\u16fe\u0005\u02f9\u0000\u0000"+
		"\u16fe\u16ff\u0005\b\u0000\u0000\u16ff\u1700\u0003\u03d0\u01e8\u0000\u1700"+
		"\u1701\u0005\u0386\u0000\u0000\u1701\u1709\u0003\u03d0\u01e8\u0000\u1702"+
		"\u1703\u0005\u0390\u0000\u0000\u1703\u1704\u0003\u03d0\u01e8\u0000\u1704"+
		"\u1705\u0005\u0386\u0000\u0000\u1705\u1706\u0003\u03d0\u01e8\u0000\u1706"+
		"\u1708\u0001\u0000\u0000\u0000\u1707\u1702\u0001\u0000\u0000\u0000\u1708"+
		"\u170b\u0001\u0000\u0000\u0000\u1709\u1707\u0001\u0000\u0000\u0000\u1709"+
		"\u170a\u0001\u0000\u0000\u0000\u170a\u170d\u0001\u0000\u0000\u0000\u170b"+
		"\u1709\u0001\u0000\u0000\u0000\u170c\u170e\u0003\u00aeW\u0000\u170d\u170c"+
		"\u0001\u0000\u0000\u0000\u170d\u170e\u0001\u0000\u0000\u0000\u170e\u1730"+
		"\u0001\u0000\u0000\u0000\u170f\u1710\u0003\u03d0\u01e8\u0000\u1710\u1711"+
		"\u0005\u00c2\u0000\u0000\u1711\u171c\u0005\u0103\u0000\u0000\u1712\u1713"+
		"\u0005\u02f9\u0000\u0000\u1713\u1714\u0005\b\u0000\u0000\u1714\u1715\u0003"+
		"\u03d0\u01e8\u0000\u1715\u1716\u0005\u0386\u0000\u0000\u1716\u1717\u0003"+
		"\u03d0\u01e8\u0000\u1717\u1718\u0005\u0390\u0000\u0000\u1718\u1719\u0003"+
		"\u03d0\u01e8\u0000\u1719\u171a\u0005\u0386\u0000\u0000\u171a\u171b\u0003"+
		"\u03d0\u01e8\u0000\u171b\u171d\u0001\u0000\u0000\u0000\u171c\u1712\u0001"+
		"\u0000\u0000\u0000\u171c\u171d\u0001\u0000\u0000\u0000\u171d\u1730\u0001"+
		"\u0000\u0000\u0000\u171e\u171f\u0003\u03d0\u01e8\u0000\u171f\u1720\u0005"+
		"\u0216\u0000\u0000\u1720\u1730\u0001\u0000\u0000\u0000\u1721\u1723\u0003"+
		"\u02f8\u017c\u0000\u1722\u1721\u0001\u0000\u0000\u0000\u1722\u1723\u0001"+
		"\u0000\u0000\u0000\u1723\u1724\u0001\u0000\u0000\u0000\u1724\u1725\u0003"+
		"\u03d0\u01e8\u0000\u1725\u1726\u0005\u028e\u0000\u0000\u1726\u1727\u0003"+
		"\u02f2\u0179\u0000\u1727\u1730\u0001\u0000\u0000\u0000\u1728\u172a\u0003"+
		"\u02f8\u017c\u0000\u1729\u1728\u0001\u0000\u0000\u0000\u1729\u172a\u0001"+
		"\u0000\u0000\u0000\u172a\u172b\u0001\u0000\u0000\u0000\u172b\u172c\u0003"+
		"\u03d0\u01e8\u0000\u172c\u172d\u0005\u0312\u0000\u0000\u172d\u172e\u0005"+
		"\u0086\u0000\u0000\u172e\u1730\u0001\u0000\u0000\u0000\u172f\u16fa\u0001"+
		"\u0000\u0000\u0000\u172f\u170f\u0001\u0000\u0000\u0000\u172f\u171e\u0001"+
		"\u0000\u0000\u0000\u172f\u1722\u0001\u0000\u0000\u0000\u172f\u1729\u0001"+
		"\u0000\u0000\u0000\u1730\u013d\u0001\u0000\u0000\u0000\u1731\u1732\u0005"+
		"\u023c\u0000\u0000\u1732\u1733\u0005\u02f9\u0000\u0000\u1733\u1754\u0003"+
		"\u03d0\u01e8\u0000\u1734\u1735\u0005\u0246\u0000\u0000\u1735\u1754\u0005"+
		"\u01f7\u0000\u0000\u1736\u1737\u0005\u0002\u0000\u0000\u1737\u1738\u0005"+
		"\u0011\u0000\u0000\u1738\u1754\u0005\u0225\u0000\u0000\u1739\u173a\u0005"+
		"\n\u0000\u0000\u173a\u173b\u0005\u00ba\u0000\u0000\u173b\u173c\u0005/"+
		"\u0000\u0000\u173c\u173d\u0005\u01d2\u0000\u0000\u173d\u173e\u0005\u0259"+
		"\u0000\u0000\u173e\u173f\u0003\u03d0\u01e8\u0000\u173f\u1740\u0005\u02f9"+
		"\u0000\u0000\u1740\u1741\u0005\u0284\u0000\u0000\u1741\u1742\u0005\u0158"+
		"\u0000\u0000\u1742\u1743\u0003\u03d0\u01e8\u0000\u1743\u1754\u0001\u0000"+
		"\u0000\u0000\u1744\u1745\u0005\u023b\u0000\u0000\u1745\u174b\u0005\u00ba"+
		"\u0000\u0000\u1746\u1747\u0005/\u0000\u0000\u1747\u1748\u0005\u01d2\u0000"+
		"\u0000\u1748\u1749\u0005\u0259\u0000\u0000\u1749\u174c\u0003\u03d0\u01e8"+
		"\u0000\u174a\u174c\u00050\u0000\u0000\u174b\u1746\u0001\u0000\u0000\u0000"+
		"\u174b\u174a\u0001\u0000\u0000\u0000\u174c\u174d\u0001\u0000\u0000\u0000"+
		"\u174d\u174e\u0005\u0117\u0000\u0000\u174e\u174f\u0005\u0284\u0000\u0000"+
		"\u174f\u1750\u0005\u0158\u0000\u0000\u1750\u1754\u0003\u03d0\u01e8\u0000"+
		"\u1751\u1754\u0003\u0148\u00a4\u0000\u1752\u1754\u0003\u014c\u00a6\u0000"+
		"\u1753\u1731\u0001\u0000\u0000\u0000\u1753\u1734\u0001\u0000\u0000\u0000"+
		"\u1753\u1736\u0001\u0000\u0000\u0000\u1753\u1739\u0001\u0000\u0000\u0000"+
		"\u1753\u1744\u0001\u0000\u0000\u0000\u1753\u1751\u0001\u0000\u0000\u0000"+
		"\u1753\u1752\u0001\u0000\u0000\u0000\u1754\u013f\u0001\u0000\u0000\u0000"+
		"\u1755\u1756\u0005\u023c\u0000\u0000\u1756\u1757\u0005\u02f9\u0000\u0000"+
		"\u1757\u177b\u0003\u03ea\u01f5\u0000\u1758\u1759\u0007$\u0000\u0000\u1759"+
		"\u177b\u0003\u0264\u0132\u0000\u175a\u175b\u0005\u0312\u0000\u0000\u175b"+
		"\u177b\u0005\u0017\u0000\u0000\u175c\u175d\u0005\u028e\u0000\u0000\u175d"+
		"\u175e\u0005\u0188\u0000\u0000\u175e\u175f\u0005\u020f\u0000\u0000\u175f"+
		"\u1766\u0003\u03d0\u01e8\u0000\u1760\u1761\u0005\u0390\u0000\u0000\u1761"+
		"\u1762\u0005\u0188\u0000\u0000\u1762\u1763\u0005\u020f\u0000\u0000\u1763"+
		"\u1765\u0003\u03d0\u01e8\u0000\u1764\u1760\u0001\u0000\u0000\u0000\u1765"+
		"\u1768\u0001\u0000\u0000\u0000\u1766\u1764\u0001\u0000\u0000\u0000\u1766"+
		"\u1767\u0001\u0000\u0000\u0000\u1767\u177b\u0001\u0000\u0000\u0000\u1768"+
		"\u1766\u0001\u0000\u0000\u0000\u1769\u176a\u0005\u0312\u0000\u0000\u176a"+
		"\u176b\u0005\u0188\u0000\u0000\u176b\u176c\u0005\u020f\u0000\u0000\u176c"+
		"\u1773\u0003\u03d0\u01e8\u0000\u176d\u176e\u0005\u0390\u0000\u0000\u176e"+
		"\u176f\u0005\u0188\u0000\u0000\u176f\u1770\u0005\u020f\u0000\u0000\u1770"+
		"\u1772\u0003\u03d0\u01e8\u0000\u1771\u176d\u0001\u0000\u0000\u0000\u1772"+
		"\u1775\u0001\u0000\u0000\u0000\u1773\u1771\u0001\u0000\u0000\u0000\u1773"+
		"\u1774\u0001\u0000\u0000\u0000\u1774\u177b\u0001\u0000\u0000\u0000\u1775"+
		"\u1773\u0001\u0000\u0000\u0000\u1776\u1777\u0005\u028e\u0000\u0000\u1777"+
		"\u177b\u0003\u02f2\u0179\u0000\u1778\u1779\u0005\u0312\u0000\u0000\u1779"+
		"\u177b\u0005\u0086\u0000\u0000\u177a\u1755\u0001\u0000\u0000\u0000\u177a"+
		"\u1758\u0001\u0000\u0000\u0000\u177a\u175a\u0001\u0000\u0000\u0000\u177a"+
		"\u175c\u0001\u0000\u0000\u0000\u177a\u1769\u0001\u0000\u0000\u0000\u177a"+
		"\u1776\u0001\u0000\u0000\u0000\u177a\u1778\u0001\u0000\u0000\u0000\u177b"+
		"\u0141\u0001\u0000\u0000\u0000\u177c\u177e\u0003\u02f8\u017c\u0000\u177d"+
		"\u177c\u0001\u0000\u0000\u0000\u177d\u177e\u0001\u0000\u0000\u0000\u177e"+
		"\u177f\u0001\u0000\u0000\u0000\u177f\u1780\u0003\u03d0\u01e8\u0000\u1780"+
		"\u1787\u0005\u028e\u0000\u0000\u1781\u1782\u0005\u0015\u0000\u0000\u1782"+
		"\u1783\u0005\u0380\u0000\u0000\u1783\u1784\u0005\u038a\u0000\u0000\u1784"+
		"\u1785\u0003\u03cc\u01e6\u0000\u1785\u1786\u0005\u038b\u0000\u0000\u1786"+
		"\u1788\u0001\u0000\u0000\u0000\u1787\u1781\u0001\u0000\u0000\u0000\u1787"+
		"\u1788\u0001\u0000\u0000\u0000\u1788\u178f\u0001\u0000\u0000\u0000\u1789"+
		"\u178a\u0005Z\u0000\u0000\u178a\u178b\u0005\u0380\u0000\u0000\u178b\u178c"+
		"\u0005\u038a\u0000\u0000\u178c\u178d\u0003\u03cc\u01e6\u0000\u178d\u178e"+
		"\u0005\u038b\u0000\u0000\u178e\u1790\u0001\u0000\u0000\u0000\u178f\u1789"+
		"\u0001\u0000\u0000\u0000\u178f\u1790\u0001\u0000\u0000\u0000\u1790\u1792"+
		"\u0001\u0000\u0000\u0000\u1791\u1793\u0003\u02f2\u0179\u0000\u1792\u1791"+
		"\u0001\u0000\u0000\u0000\u1792\u1793\u0001\u0000\u0000\u0000\u1793\u17a1"+
		"\u0001\u0000\u0000\u0000\u1794\u1796\u0003\u02f8\u017c\u0000\u1795\u1794"+
		"\u0001\u0000\u0000\u0000\u1795\u1796\u0001\u0000\u0000\u0000\u1796\u1797"+
		"\u0001\u0000\u0000\u0000\u1797\u1798\u0003\u03d0\u01e8\u0000\u1798\u1799"+
		"\u0005\u0312\u0000\u0000\u1799\u179a\u0005\u0086\u0000\u0000\u179a\u17a1"+
		"\u0001\u0000\u0000\u0000\u179b\u179c\u0003\u03d0\u01e8\u0000\u179c\u179d"+
		"\u0005\u023c\u0000\u0000\u179d\u179e\u0005\u02f9\u0000\u0000\u179e\u179f"+
		"\u0003\u03d0\u01e8\u0000\u179f\u17a1\u0001\u0000\u0000\u0000\u17a0\u177d"+
		"\u0001\u0000\u0000\u0000\u17a0\u1795\u0001\u0000\u0000\u0000\u17a0\u179b"+
		"\u0001\u0000\u0000\u0000\u17a1\u0143\u0001\u0000\u0000\u0000\u17a2\u17a4"+
		"\u0003\u03ce\u01e7\u0000\u17a3\u17a2\u0001\u0000\u0000\u0000\u17a3\u17a4"+
		"\u0001\u0000\u0000\u0000\u17a4\u17aa\u0001\u0000\u0000\u0000\u17a5\u17ab"+
		"\u0005\u02cc\u0000\u0000\u17a6\u17a8\u0005\u024f\u0000\u0000\u17a7\u17a9"+
		"\u0003\u02f6\u017b\u0000\u17a8\u17a7\u0001\u0000\u0000\u0000\u17a8\u17a9"+
		"\u0001\u0000\u0000\u0000\u17a9\u17ab\u0001\u0000\u0000\u0000\u17aa\u17a5"+
		"\u0001\u0000\u0000\u0000\u17aa\u17a6\u0001\u0000\u0000\u0000\u17ab\u17d2"+
		"\u0001\u0000\u0000\u0000\u17ac\u17ae\u0003\u03ce\u01e7\u0000\u17ad\u17ac"+
		"\u0001\u0000\u0000\u0000\u17ad\u17ae\u0001\u0000\u0000\u0000\u17ae\u17af"+
		"\u0001\u0000\u0000\u0000\u17af\u17b0\u0005\u0002\u0000\u0000\u17b0\u17b1"+
		"\u0005\u0011\u0000\u0000\u17b1\u17d2\u0005\u0225\u0000\u0000\u17b2\u17b3"+
		"\u0003\u03ce\u01e7\u0000\u17b3\u17b4\u0005\u023c\u0000\u0000\u17b4\u17b5"+
		"\u0005\u02f9\u0000\u0000\u17b5\u17b6\u0003\u03d0\u01e8\u0000\u17b6\u17d2"+
		"\u0001\u0000\u0000\u0000\u17b7\u17b8\u0003\u03ce\u01e7\u0000\u17b8\u17b9"+
		"\u0003\u0148\u00a4\u0000\u17b9\u17d2\u0001\u0000\u0000\u0000\u17ba\u17bb"+
		"\u0003\u03ce\u01e7\u0000\u17bb\u17bc\u0003\u014c\u00a6\u0000\u17bc\u17d2"+
		"\u0001\u0000\u0000\u0000\u17bd\u17be\u0003\u03ce\u01e7\u0000\u17be\u17bf"+
		"\u0005\u0312\u0000\u0000\u17bf\u17c4\u0003\u03d0\u01e8\u0000\u17c0\u17c1"+
		"\u0005\u0390\u0000\u0000\u17c1\u17c3\u0003\u03d0\u01e8\u0000\u17c2\u17c0"+
		"\u0001\u0000\u0000\u0000\u17c3\u17c6\u0001\u0000\u0000\u0000\u17c4\u17c2"+
		"\u0001\u0000\u0000\u0000\u17c4\u17c5\u0001\u0000\u0000\u0000\u17c5\u17d2"+
		"\u0001\u0000\u0000\u0000\u17c6\u17c4\u0001\u0000\u0000\u0000\u17c7\u17c8"+
		"\u0003\u03d0\u01e8\u0000\u17c8\u17c9\u0005\u028e\u0000\u0000\u17c9\u17ce"+
		"\u0003\u028c\u0146\u0000\u17ca\u17cb\u0005\u0390\u0000\u0000\u17cb\u17cd"+
		"\u0003\u028c\u0146\u0000\u17cc\u17ca\u0001\u0000\u0000\u0000\u17cd\u17d0"+
		"\u0001\u0000\u0000\u0000\u17ce\u17cc\u0001\u0000\u0000\u0000\u17ce\u17cf"+
		"\u0001\u0000\u0000\u0000\u17cf\u17d2\u0001\u0000\u0000\u0000\u17d0\u17ce"+
		"\u0001\u0000\u0000\u0000\u17d1\u17a3\u0001\u0000\u0000\u0000\u17d1\u17ad"+
		"\u0001\u0000\u0000\u0000\u17d1\u17b2\u0001\u0000\u0000\u0000\u17d1\u17b7"+
		"\u0001\u0000\u0000\u0000\u17d1\u17ba\u0001\u0000\u0000\u0000\u17d1\u17bd"+
		"\u0001\u0000\u0000\u0000\u17d1\u17c7\u0001\u0000\u0000\u0000\u17d2\u0145"+
		"\u0001\u0000\u0000\u0000\u17d3\u17d5\u0005\u028e\u0000\u0000\u17d4\u17d6"+
		"\u0003\u0088D\u0000\u17d5\u17d4\u0001\u0000\u0000\u0000\u17d5\u17d6\u0001"+
		"\u0000\u0000\u0000\u17d6\u17d8\u0001\u0000\u0000\u0000\u17d7\u17d9\u0003"+
		"\u008aE\u0000\u17d8\u17d7\u0001\u0000\u0000\u0000\u17d8\u17d9\u0001\u0000"+
		"\u0000\u0000\u17d9\u17db\u0001\u0000\u0000\u0000\u17da\u17dc\u0003\u0090"+
		"H\u0000\u17db\u17da\u0001\u0000\u0000\u0000\u17db\u17dc\u0001\u0000\u0000"+
		"\u0000\u17dc\u17f8\u0001\u0000\u0000\u0000\u17dd\u17de\u0005\u0312\u0000"+
		"\u0000\u17de\u17e1\u0003\u03c4\u01e2\u0000\u17df\u17e0\u0005\u0390\u0000"+
		"\u0000\u17e0\u17e2\u0003\u03c4\u01e2\u0000\u17e1\u17df\u0001\u0000\u0000"+
		"\u0000\u17e1\u17e2\u0001\u0000\u0000\u0000\u17e2\u17f8\u0001\u0000\u0000"+
		"\u0000\u17e3\u17e4\u0005\u028e\u0000\u0000\u17e4\u17e5\u0005\u0249\u0000"+
		"\u0000\u17e5\u17e6\u0005\u0380\u0000\u0000\u17e6\u17f8\u0003\u03d0\u01e8"+
		"\u0000\u17e7\u17f8\u0003\u0148\u00a4\u0000\u17e8\u17f8\u0003\u014c\u00a6"+
		"\u0000\u17e9\u17ea\u0003\u03d0\u01e8\u0000\u17ea\u17eb\u0005\u023c\u0000"+
		"\u0000\u17eb\u17ec\u0005\u02f9\u0000\u0000\u17ec\u17f0\u0003\u03d0\u01e8"+
		"\u0000\u17ed\u17ee\u0005\u0279\u0000\u0000\u17ee\u17ef\u0005\u0380\u0000"+
		"\u0000\u17ef\u17f1\u0003\u0208\u0104\u0000\u17f0\u17ed\u0001\u0000\u0000"+
		"\u0000\u17f0\u17f1\u0001\u0000\u0000\u0000\u17f1\u17f8\u0001\u0000\u0000"+
		"\u0000\u17f2\u17f3\u0003\u03d0\u01e8\u0000\u17f3\u17f4\u0005\u00ca\u0000"+
		"\u0000\u17f4\u17f5\u0005\u01d7\u0000\u0000\u17f5\u17f6\u0005\u0316\u0000"+
		"\u0000\u17f6\u17f8\u0001\u0000\u0000\u0000\u17f7\u17d3\u0001\u0000\u0000"+
		"\u0000\u17f7\u17dd\u0001\u0000\u0000\u0000\u17f7\u17e3\u0001\u0000\u0000"+
		"\u0000\u17f7\u17e7\u0001\u0000\u0000\u0000\u17f7\u17e8\u0001\u0000\u0000"+
		"\u0000\u17f7\u17e9\u0001\u0000\u0000\u0000\u17f7\u17f2\u0001\u0000\u0000"+
		"\u0000\u17f8\u0147\u0001\u0000\u0000\u0000\u17f9\u17fa\u0005\u028e\u0000"+
		"\u0000\u17fa\u17fb\u0003\u014a\u00a5\u0000\u17fb\u0149\u0001\u0000\u0000"+
		"\u0000\u17fc\u17fd\u0005\u02db\u0000\u0000\u17fd\u17fe\u0003\u03ea\u01f5"+
		"\u0000\u17fe\u17ff\u0005\u0380\u0000\u0000\u17ff\u1807\u0003\u03be\u01df"+
		"\u0000\u1800\u1801\u0005\u0390\u0000\u0000\u1801\u1802\u0003\u03ea\u01f5"+
		"\u0000\u1802\u1803\u0005\u0380\u0000\u0000\u1803\u1804\u0003\u03be\u01df"+
		"\u0000\u1804\u1806\u0001\u0000\u0000\u0000\u1805\u1800\u0001\u0000\u0000"+
		"\u0000\u1806\u1809\u0001\u0000\u0000\u0000\u1807\u1805\u0001\u0000\u0000"+
		"\u0000\u1807\u1808\u0001\u0000\u0000\u0000\u1808\u014b\u0001\u0000\u0000"+
		"\u0000\u1809\u1807\u0001\u0000\u0000\u0000\u180a\u180b\u0005\u0312\u0000"+
		"\u0000\u180b\u180c\u0005\u02db\u0000\u0000\u180c\u1811\u0003\u03ea\u01f5"+
		"\u0000\u180d\u180e\u0005\u0390\u0000\u0000\u180e\u1810\u0003\u03ea\u01f5"+
		"\u0000\u180f\u180d\u0001\u0000\u0000\u0000\u1810\u1813\u0001\u0000\u0000"+
		"\u0000\u1811\u180f\u0001\u0000\u0000\u0000\u1811\u1812\u0001\u0000\u0000"+
		"\u0000\u1812\u014d\u0001\u0000\u0000\u0000\u1813\u1811\u0001\u0000\u0000"+
		"\u0000\u1814\u1841\u0003\u0150\u00a8\u0000\u1815\u1841\u0003\u0152\u00a9"+
		"\u0000\u1816\u1841\u0003\u0158\u00ac\u0000\u1817\u1841\u0003\u015a\u00ad"+
		"\u0000\u1818\u1841\u0003\u015c\u00ae\u0000\u1819\u1841\u0003\u015e\u00af"+
		"\u0000\u181a\u1841\u0003\u016a\u00b5\u0000\u181b\u1841\u0003\u0176\u00bb"+
		"\u0000\u181c\u1841\u0003\u0178\u00bc\u0000\u181d\u1841\u0003\u017a\u00bd"+
		"\u0000\u181e\u1841\u0003\u0184\u00c2\u0000\u181f\u1841\u0003\u0188\u00c4"+
		"\u0000\u1820\u1841\u0003\u0194\u00ca\u0000\u1821\u1841\u0003\u0196\u00cb"+
		"\u0000\u1822\u1841\u0003\u0198\u00cc\u0000\u1823\u1841\u0003\u019e\u00cf"+
		"\u0000\u1824\u1841\u0003\u01a0\u00d0\u0000\u1825\u1841\u0003\u01a6\u00d3"+
		"\u0000\u1826\u1841\u0003\u01d8\u00ec\u0000\u1827\u1841\u0003\u01a8\u00d4"+
		"\u0000\u1828\u1841\u0003\u01b2\u00d9\u0000\u1829\u1841\u0003\u01b4\u00da"+
		"\u0000\u182a\u1841\u0003\u01b6\u00db\u0000\u182b\u1841\u0003\u01b8\u00dc"+
		"\u0000\u182c\u1841\u0003\u01ba\u00dd\u0000\u182d\u1841\u0003\u01bc\u00de"+
		"\u0000\u182e\u1841\u0003\u01be\u00df\u0000\u182f\u1841\u0003\u01c2\u00e1"+
		"\u0000\u1830\u1841\u0003\u01c4\u00e2\u0000\u1831\u1841\u0003\u01c6\u00e3"+
		"\u0000\u1832\u1841\u0003\u01d0\u00e8\u0000\u1833\u1841\u0003\u01d2\u00e9"+
		"\u0000\u1834\u1841\u0003\u01de\u00ef\u0000\u1835\u1841\u0003\u0216\u010b"+
		"\u0000\u1836\u1841\u0003\u0226\u0113\u0000\u1837\u1841\u0003\u0232\u0119"+
		"\u0000\u1838\u1841\u0003\u0258\u012c\u0000\u1839\u1841\u0003\u025e\u012f"+
		"\u0000\u183a\u1841\u0003\u0260\u0130\u0000\u183b\u1841\u0003\u0262\u0131"+
		"\u0000\u183c\u1841\u0003\u026c\u0136\u0000\u183d\u1841\u0003\u0280\u0140"+
		"\u0000\u183e\u1841\u0003\u0284\u0142\u0000\u183f\u1841\u0003\u0286\u0143"+
		"\u0000\u1840\u1814\u0001\u0000\u0000\u0000\u1840\u1815\u0001\u0000\u0000"+
		"\u0000\u1840\u1816\u0001\u0000\u0000\u0000\u1840\u1817\u0001\u0000\u0000"+
		"\u0000\u1840\u1818\u0001\u0000\u0000\u0000\u1840\u1819\u0001\u0000\u0000"+
		"\u0000\u1840\u181a\u0001\u0000\u0000\u0000\u1840\u181b\u0001\u0000\u0000"+
		"\u0000\u1840\u181c\u0001\u0000\u0000\u0000\u1840\u181d\u0001\u0000\u0000"+
		"\u0000\u1840\u181e\u0001\u0000\u0000\u0000\u1840\u181f\u0001\u0000\u0000"+
		"\u0000\u1840\u1820\u0001\u0000\u0000\u0000\u1840\u1821\u0001\u0000\u0000"+
		"\u0000\u1840\u1822\u0001\u0000\u0000\u0000\u1840\u1823\u0001\u0000\u0000"+
		"\u0000\u1840\u1824\u0001\u0000\u0000\u0000\u1840\u1825\u0001\u0000\u0000"+
		"\u0000\u1840\u1826\u0001\u0000\u0000\u0000\u1840\u1827\u0001\u0000\u0000"+
		"\u0000\u1840\u1828\u0001\u0000\u0000\u0000\u1840\u1829\u0001\u0000\u0000"+
		"\u0000\u1840\u182a\u0001\u0000\u0000\u0000\u1840\u182b\u0001\u0000\u0000"+
		"\u0000\u1840\u182c\u0001\u0000\u0000\u0000\u1840\u182d\u0001\u0000\u0000"+
		"\u0000\u1840\u182e\u0001\u0000\u0000\u0000\u1840\u182f\u0001\u0000\u0000"+
		"\u0000\u1840\u1830\u0001\u0000\u0000\u0000\u1840\u1831\u0001\u0000\u0000"+
		"\u0000\u1840\u1832\u0001\u0000\u0000\u0000\u1840\u1833\u0001\u0000\u0000"+
		"\u0000\u1840\u1834\u0001\u0000\u0000\u0000\u1840\u1835\u0001\u0000\u0000"+
		"\u0000\u1840\u1836\u0001\u0000\u0000\u0000\u1840\u1837\u0001\u0000\u0000"+
		"\u0000\u1840\u1838\u0001\u0000\u0000\u0000\u1840\u1839\u0001\u0000\u0000"+
		"\u0000\u1840\u183a\u0001\u0000\u0000\u0000\u1840\u183b\u0001\u0000\u0000"+
		"\u0000\u1840\u183c\u0001\u0000\u0000\u0000\u1840\u183d\u0001\u0000\u0000"+
		"\u0000\u1840\u183e\u0001\u0000\u0000\u0000\u1840\u183f\u0001\u0000\u0000"+
		"\u0000\u1841\u014f\u0001\u0000\u0000\u0000\u1842\u1843\u0005\u0097\u0000"+
		"\u0000\u1843\u1844\u0005\u0006\u0000\u0000\u1844\u1845\u0003\u03d0\u01e8"+
		"\u0000\u1845\u1846\u0005\u000b\u0000\u0000\u1846\u1847\u0005\u0380\u0000"+
		"\u0000\u1847\u1848\u0003\u03d0\u01e8\u0000\u1848\u1849\u0005\f\u0000\u0000"+
		"\u1849\u184a\u0005\u0380\u0000\u0000\u184a\u184e\u0003\u03ca\u01e5\u0000"+
		"\u184b\u184c\u0005\u010d\u0000\u0000\u184c\u184d\u0005\u0380\u0000\u0000"+
		"\u184d\u184f\u0003\u03d0\u01e8\u0000\u184e\u184b\u0001\u0000\u0000\u0000"+
		"\u184e\u184f\u0001\u0000\u0000\u0000\u184f\u1853\u0001\u0000\u0000\u0000"+
		"\u1850\u1851\u0005\u016f\u0000\u0000\u1851\u1852\u0005\u0380\u0000\u0000"+
		"\u1852\u1854\u0003\u03d0\u01e8\u0000\u1853\u1850\u0001\u0000\u0000\u0000"+
		"\u1853\u1854\u0001\u0000\u0000\u0000\u1854\u1855\u0001\u0000\u0000\u0000"+
		"\u1855\u1856\u0005\u00cf\u0000\u0000\u1856\u1857\u0005\u0380\u0000\u0000"+
		"\u1857\u185b\u0003\u03ca\u01e5\u0000\u1858\u1859\u0005\u01a8\u0000\u0000"+
		"\u1859\u185a\u0005\u0380\u0000\u0000\u185a\u185c\u0003\u0208\u0104\u0000"+
		"\u185b\u1858\u0001\u0000\u0000\u0000\u185b\u185c\u0001\u0000\u0000\u0000"+
		"\u185c\u185d\u0001\u0000\u0000\u0000\u185d\u185e\u0005\u00cd\u0000\u0000"+
		"\u185e\u185f\u0005\u0380\u0000\u0000\u185f\u1863\u0007%\u0000\u0000\u1860"+
		"\u1861\u0005\u0239\u0000\u0000\u1861\u1862\u0005\u0380\u0000\u0000\u1862"+
		"\u1864\u0003\u03c6\u01e3\u0000\u1863\u1860\u0001\u0000\u0000\u0000\u1863"+
		"\u1864\u0001\u0000\u0000\u0000\u1864\u1868\u0001\u0000\u0000\u0000\u1865"+
		"\u1866\u0005\u0237\u0000\u0000\u1866\u1867\u0005\u0380\u0000\u0000\u1867"+
		"\u1869\u0003\u03c8\u01e4\u0000\u1868\u1865\u0001\u0000\u0000\u0000\u1868"+
		"\u1869\u0001\u0000\u0000\u0000\u1869\u186b\u0001\u0000\u0000\u0000\u186a"+
		"\u186c\u0003\u02f2\u0179\u0000\u186b\u186a\u0001\u0000\u0000\u0000\u186b"+
		"\u186c\u0001\u0000\u0000\u0000\u186c\u0151\u0001\u0000\u0000\u0000\u186d"+
		"\u186f\u0005\u0097\u0000\u0000\u186e\u1870\u0003\u02fc\u017e\u0000\u186f"+
		"\u186e\u0001\u0000\u0000\u0000\u186f\u1870\u0001\u0000\u0000\u0000\u1870"+
		"\u1871\u0001\u0000\u0000\u0000\u1871\u1873\u0005\u000f\u0000\u0000\u1872"+
		"\u1874\u0003\u02fa\u017d\u0000\u1873\u1872\u0001\u0000\u0000\u0000\u1873"+
		"\u1874\u0001\u0000\u0000\u0000\u1874\u1875\u0001\u0000\u0000\u0000\u1875"+
		"\u1876\u0003\u03d0\u01e8\u0000\u1876\u1877\u0005\u032d\u0000\u0000\u1877"+
		"\u1878\u0005\u0380\u0000\u0000\u1878\u1879\u0003\u03d0\u01e8\u0000\u1879"+
		"\u187a\u0005\u027c\u0000\u0000\u187a\u187b\u0005\u0380\u0000\u0000\u187b"+
		"\u187c\u0003\u03ca\u01e5\u0000\u187c\u187d\u0005\u013d\u0000\u0000\u187d"+
		"\u187e\u0005\u038a\u0000\u0000\u187e\u187f\u0005\u00ef\u0000\u0000\u187f"+
		"\u1880\u0005\u038a\u0000\u0000\u1880\u1881\u0003\u0154\u00aa\u0000\u1881"+
		"\u1882\u0005\u038b\u0000\u0000\u1882\u1883\u0005\u038b\u0000\u0000\u1883"+
		"\u1884\u0005\u02e3\u0000\u0000\u1884\u1885\u0003\u0156\u00ab\u0000\u1885"+
		"\u0153\u0001\u0000\u0000\u0000\u1886\u188a\u0003\u0434\u021a\u0000\u1887"+
		"\u188a\u0003\u033c\u019e\u0000\u1888\u188a\u0003\u027e\u013f\u0000\u1889"+
		"\u1886\u0001\u0000\u0000\u0000\u1889\u1887\u0001\u0000\u0000\u0000\u1889"+
		"\u1888\u0001\u0000\u0000\u0000\u188a\u0155\u0001\u0000\u0000\u0000\u188b"+
		"\u188c\u0003\u0004\u0002\u0000\u188c\u0157\u0001\u0000\u0000\u0000\u188d"+
		"\u188f\u0005\u0097\u0000\u0000\u188e\u1890\u0003\u02fc\u017e\u0000\u188f"+
		"\u188e\u0001\u0000\u0000\u0000\u188f\u1890\u0001\u0000\u0000\u0000\u1890"+
		"\u1891\u0001\u0000\u0000\u0000\u1891\u1892\u0005 \u0000\u0000\u1892\u1894"+
		"\u0005\u0158\u0000\u0000\u1893\u1895\u0003\u02fa\u017d\u0000\u1894\u1893"+
		"\u0001\u0000\u0000\u0000\u1894\u1895\u0001\u0000\u0000\u0000\u1895\u1896"+
		"\u0001\u0000\u0000\u0000\u1896\u1897\u0003\u03d0\u01e8\u0000\u1897\u1898"+
		"\u0005&\u0000\u0000\u1898\u1899\u0005\u0380\u0000\u0000\u1899\u189a\u0003"+
		"\u03d0\u01e8\u0000\u189a\u189b\u0005\"\u0000\u0000\u189b\u189c\u0005\u0380"+
		"\u0000\u0000\u189c\u18a0\u0003\u03ca\u01e5\u0000\u189d\u189e\u0005%\u0000"+
		"\u0000\u189e\u189f\u0005\u0380\u0000\u0000\u189f\u18a1\u0003\u03ca\u01e5"+
		"\u0000\u18a0\u189d\u0001\u0000\u0000\u0000\u18a0\u18a1\u0001\u0000\u0000"+
		"\u0000\u18a1\u18a2\u0001\u0000\u0000\u0000\u18a2\u18a3\u0005!\u0000\u0000"+
		"\u18a3\u18a4\u0005\u0380\u0000\u0000\u18a4\u18a5\u0005\u038a\u0000\u0000"+
		"\u18a5\u18a6\u0003\u03ca\u01e5\u0000\u18a6\u18ad\u0005\u038b\u0000\u0000"+
		"\u18a7\u18a8\u0005#\u0000\u0000\u18a8\u18a9\u0005\u0380\u0000\u0000\u18a9"+
		"\u18aa\u0005\u038a\u0000\u0000\u18aa\u18ab\u0003\u03ca\u01e5\u0000\u18ab"+
		"\u18ac\u0005\u038b\u0000\u0000\u18ac\u18ae\u0001\u0000\u0000\u0000\u18ad"+
		"\u18a7\u0001\u0000\u0000\u0000\u18ad\u18ae\u0001\u0000\u0000\u0000\u18ae"+
		"\u18af\u0001\u0000\u0000\u0000\u18af\u18b0\u0005\u00d3\u0000\u0000\u18b0"+
		"\u18b1\u0005\u0380\u0000\u0000\u18b1\u18b3\u0003\u0208\u0104\u0000\u18b2"+
		"\u18b4\u0003\u02f2\u0179\u0000\u18b3\u18b2\u0001\u0000\u0000\u0000\u18b3"+
		"\u18b4\u0001\u0000\u0000\u0000\u18b4\u1900\u0001\u0000\u0000\u0000\u18b5"+
		"\u18b7\u0005\u0097\u0000\u0000\u18b6\u18b8\u0003\u02fc\u017e\u0000\u18b7"+
		"\u18b6\u0001\u0000\u0000\u0000\u18b7\u18b8\u0001\u0000\u0000\u0000\u18b8"+
		"\u18b9\u0001\u0000\u0000\u0000\u18b9\u18ba\u0005 \u0000\u0000\u18ba\u18bc"+
		"\u0005\u0158\u0000\u0000\u18bb\u18bd\u0003\u02fa\u017d\u0000\u18bc\u18bb"+
		"\u0001\u0000\u0000\u0000\u18bc\u18bd\u0001\u0000\u0000\u0000\u18bd\u18be"+
		"\u0001\u0000\u0000\u0000\u18be\u18bf\u0003\u03d0\u01e8\u0000\u18bf\u18c0"+
		"\u0005&\u0000\u0000\u18c0\u18c1\u0005\u0380\u0000\u0000\u18c1\u18c2\u0003"+
		"\u03d0\u01e8\u0000\u18c2\u18c3\u0005O\u0000\u0000\u18c3\u18c4\u0005\u0380"+
		"\u0000\u0000\u18c4\u18c5\u0003\u03ca\u01e5\u0000\u18c5\u18c6\u0005H\u0000"+
		"\u0000\u18c6\u18c7\u0005\u0380\u0000\u0000\u18c7\u18cb\u0003\u03ca\u01e5"+
		"\u0000\u18c8\u18c9\u0005%\u0000\u0000\u18c9\u18ca\u0005\u0380\u0000\u0000"+
		"\u18ca\u18cc\u0003\u03ca\u01e5\u0000\u18cb\u18c8\u0001\u0000\u0000\u0000"+
		"\u18cb\u18cc\u0001\u0000\u0000\u0000\u18cc\u18cd\u0001\u0000\u0000\u0000"+
		"\u18cd\u18ce\u0005!\u0000\u0000\u18ce\u18cf\u0005\u0380\u0000\u0000\u18cf"+
		"\u18d0\u0005\u038a\u0000\u0000\u18d0\u18d1\u0003\u03ca\u01e5\u0000\u18d1"+
		"\u18d8\u0005\u038b\u0000\u0000\u18d2\u18d3\u0005#\u0000\u0000\u18d3\u18d4"+
		"\u0005\u0380\u0000\u0000\u18d4\u18d5\u0005\u038a\u0000\u0000\u18d5\u18d6"+
		"\u0003\u03ca\u01e5\u0000\u18d6\u18d7\u0005\u038b\u0000\u0000\u18d7\u18d9"+
		"\u0001\u0000\u0000\u0000\u18d8\u18d2\u0001\u0000\u0000\u0000\u18d8\u18d9"+
		"\u0001\u0000\u0000\u0000\u18d9\u18da\u0001\u0000\u0000\u0000\u18da\u18db"+
		"\u0005\u00d3\u0000\u0000\u18db\u18dc\u0005\u0380\u0000\u0000\u18dc\u18de"+
		"\u0003\u0208\u0104\u0000\u18dd\u18df\u0003\u02f2\u0179\u0000\u18de\u18dd"+
		"\u0001\u0000\u0000\u0000\u18de\u18df\u0001\u0000\u0000\u0000\u18df\u1900"+
		"\u0001\u0000\u0000\u0000\u18e0\u18e1\u0005\u0097\u0000\u0000\u18e1\u18e2"+
		"\u0003\u02fc\u017e\u0000\u18e2\u18e3\u0005 \u0000\u0000\u18e3\u18e4\u0005"+
		"\u0158\u0000\u0000\u18e4\u18e5\u0003\u02fa\u017d\u0000\u18e5\u18e6\u0003"+
		"\u03d0\u01e8\u0000\u18e6\u18e7\u0005&\u0000\u0000\u18e7\u18e8\u0005\u0380"+
		"\u0000\u0000\u18e8\u18e9\u0003\u03d0\u01e8\u0000\u18e9\u18ea\u0005\u0129"+
		"\u0000\u0000\u18ea\u18eb\u0005\u0380\u0000\u0000\u18eb\u18ec\u0003\u03ca"+
		"\u01e5\u0000\u18ec\u18ed\u0005!\u0000\u0000\u18ed\u18ee\u0005\u0380\u0000"+
		"\u0000\u18ee\u18ef\u0005\u038a\u0000\u0000\u18ef\u18f0\u0003\u03ca\u01e5"+
		"\u0000\u18f0\u18f7\u0005\u038b\u0000\u0000\u18f1\u18f2\u0005#\u0000\u0000"+
		"\u18f2\u18f3\u0005\u0380\u0000\u0000\u18f3\u18f4\u0005\u038a\u0000\u0000"+
		"\u18f4\u18f5\u0003\u03ca\u01e5\u0000\u18f5\u18f6\u0005\u038b\u0000\u0000"+
		"\u18f6\u18f8\u0001\u0000\u0000\u0000\u18f7\u18f1\u0001\u0000\u0000\u0000"+
		"\u18f7\u18f8\u0001\u0000\u0000\u0000\u18f8\u18f9\u0001\u0000\u0000\u0000"+
		"\u18f9\u18fa\u0005\u00d3\u0000\u0000\u18fa\u18fb\u0005\u0380\u0000\u0000"+
		"\u18fb\u18fd\u0003\u0208\u0104\u0000\u18fc\u18fe\u0003\u02f2\u0179\u0000"+
		"\u18fd\u18fc\u0001\u0000\u0000\u0000\u18fd\u18fe\u0001\u0000\u0000\u0000"+
		"\u18fe\u1900\u0001\u0000\u0000\u0000\u18ff\u188d\u0001\u0000\u0000\u0000"+
		"\u18ff\u18b5\u0001\u0000\u0000\u0000\u18ff\u18e0\u0001\u0000\u0000\u0000"+
		"\u1900\u0159\u0001\u0000\u0000\u0000\u1901\u1903\u0005\u0097\u0000\u0000"+
		"\u1902\u1904\u0003\u02fc\u017e\u0000\u1903\u1902\u0001\u0000\u0000\u0000"+
		"\u1903\u1904\u0001\u0000\u0000\u0000\u1904\u1905\u0001\u0000\u0000\u0000"+
		"\u1905\u1907\u0007&\u0000\u0000\u1906\u1908\u0003\u02fa\u017d\u0000\u1907"+
		"\u1906\u0001\u0000\u0000\u0000\u1907\u1908\u0001\u0000\u0000\u0000\u1908"+
		"\u1909\u0001\u0000\u0000\u0000\u1909\u190a\u0003\u03d0\u01e8\u0000\u190a"+
		"\u190b\u0005~\u0000\u0000\u190b\u191b\u0003\u03ea\u01f5\u0000\u190c\u190d"+
		"\u0003\u0162\u00b1\u0000\u190d\u1917\u0005\u038a\u0000\u0000\u190e\u190f"+
		"\u0005\u02e7\u0000\u0000\u190f\u1910\u0005\u037d\u0000\u0000\u1910\u1918"+
		"\u0003\u03ca\u01e5\u0000\u1911\u1912\u0005\u01d3\u0000\u0000\u1912\u1913"+
		"\u0005\u037d\u0000\u0000\u1913\u1918\u0003\u03ca\u01e5\u0000\u1914\u1915"+
		"\u0005\u02b6\u0000\u0000\u1915\u1916\u0005\u037d\u0000\u0000\u1916\u1918"+
		"\u0003\u03d0\u01e8\u0000\u1917\u190e\u0001\u0000\u0000\u0000\u1917\u1911"+
		"\u0001\u0000\u0000\u0000\u1917\u1914\u0001\u0000\u0000\u0000\u1918\u1919"+
		"\u0001\u0000\u0000\u0000\u1919\u191a\u0005\u038b\u0000\u0000\u191a\u191c"+
		"\u0001\u0000\u0000\u0000\u191b\u190c\u0001\u0000\u0000\u0000\u191b\u191c"+
		"\u0001\u0000\u0000\u0000\u191c\u1931\u0001\u0000\u0000\u0000\u191d\u191f"+
		"\u0005\u0097\u0000\u0000\u191e\u1920\u0003\u02fc\u017e\u0000\u191f\u191e"+
		"\u0001\u0000\u0000\u0000\u191f\u1920\u0001\u0000\u0000\u0000\u1920\u1927"+
		"\u0001\u0000\u0000\u0000\u1921\u1928\u0005\u02ac\u0000\u0000\u1922\u1923"+
		"\u0005\u0108\u0000\u0000\u1923\u1928\u0005\u0113\u0000\u0000\u1924\u1928"+
		"\u0005\u0288\u0000\u0000\u1925\u1928\u0005\u02c2\u0000\u0000\u1926\u1928"+
		"\u0005\u02de\u0000\u0000\u1927\u1921\u0001\u0000\u0000\u0000\u1927\u1922"+
		"\u0001\u0000\u0000\u0000\u1927\u1924\u0001\u0000\u0000\u0000\u1927\u1925"+
		"\u0001\u0000\u0000\u0000\u1927\u1926\u0001\u0000\u0000\u0000\u1928\u192a"+
		"\u0001\u0000\u0000\u0000\u1929\u192b\u0003\u02fa\u017d\u0000\u192a\u1929"+
		"\u0001\u0000\u0000\u0000\u192a\u192b\u0001\u0000\u0000\u0000\u192b\u192c"+
		"\u0001\u0000\u0000\u0000\u192c\u192d\u0003\u03ea\u01f5\u0000\u192d\u192e"+
		"\u0005~\u0000\u0000\u192e\u192f\u0003\u03ea\u01f5\u0000\u192f\u1931\u0001"+
		"\u0000\u0000\u0000\u1930\u1901\u0001\u0000\u0000\u0000\u1930\u191d\u0001"+
		"\u0000\u0000\u0000\u1931\u015b\u0001\u0000\u0000\u0000\u1932\u1933\u0005"+
		"\u0097\u0000\u0000\u1933\u1935\u0005\u008e\u0000\u0000\u1934\u1936\u0003"+
		"\u02fa\u017d\u0000\u1935\u1934\u0001\u0000\u0000\u0000\u1935\u1936\u0001"+
		"\u0000\u0000\u0000\u1936\u1937\u0001\u0000\u0000\u0000\u1937\u1946\u0003"+
		"\u03d0\u01e8\u0000\u1938\u193a\u0003\u02f2\u0179\u0000\u1939\u1938\u0001"+
		"\u0000\u0000\u0000\u1939\u193a\u0001\u0000\u0000\u0000\u193a\u1947\u0001"+
		"\u0000\u0000\u0000\u193b\u193c\u0005+\u0000\u0000\u193c\u193d\u0005\u0240"+
		"\u0000\u0000\u193d\u193e\u0005\u01d2\u0000\u0000\u193e\u193f\u0003\u03d0"+
		"\u01e8\u0000\u193f\u1940\u0005\u0386\u0000\u0000\u1940\u1941\u0003\u03d0"+
		"\u01e8\u0000\u1941\u1942\u0005\u0386\u0000\u0000\u1942\u1944\u0003\u03d0"+
		"\u01e8\u0000\u1943\u1945\u0003\u02f2\u0179\u0000\u1944\u1943\u0001\u0000"+
		"\u0000\u0000\u1944\u1945\u0001\u0000\u0000\u0000\u1945\u1947\u0001\u0000"+
		"\u0000\u0000\u1946\u1939\u0001\u0000\u0000\u0000\u1946\u193b\u0001\u0000"+
		"\u0000\u0000\u1947\u015d\u0001\u0000\u0000\u0000\u1948\u194a\u0005\u0097"+
		"\u0000\u0000\u1949\u194b\u0003\u02fc\u017e\u0000\u194a\u1949\u0001\u0000"+
		"\u0000\u0000\u194a\u194b\u0001\u0000\u0000\u0000\u194b\u194d\u0001\u0000"+
		"\u0000\u0000\u194c\u194e\u0005\u0302\u0000\u0000\u194d\u194c\u0001\u0000"+
		"\u0000\u0000\u194d\u194e\u0001\u0000\u0000\u0000\u194e\u194f\u0001\u0000"+
		"\u0000\u0000\u194f\u1951\u0005\u00a5\u0000\u0000\u1950\u1952\u0003\u02fa"+
		"\u017d\u0000\u1951\u1950\u0001\u0000\u0000\u0000\u1951\u1952\u0001\u0000"+
		"\u0000\u0000\u1952\u1953\u0001\u0000\u0000\u0000\u1953\u1955\u0003\u03d0"+
		"\u01e8\u0000\u1954\u1956\u0003\u0160\u00b0\u0000\u1955\u1954\u0001\u0000"+
		"\u0000\u0000\u1955\u1956\u0001\u0000\u0000\u0000\u1956\u195a\u0001\u0000"+
		"\u0000\u0000\u1957\u1958\u0005\u00a7\u0000\u0000\u1958\u1959\u0005\u0380"+
		"\u0000\u0000\u1959\u195b\u0003\u03f0\u01f8\u0000\u195a\u1957\u0001\u0000"+
		"\u0000\u0000\u195a\u195b\u0001\u0000\u0000\u0000\u195b\u195f\u0001\u0000"+
		"\u0000\u0000\u195c\u195d\u0005\u0193\u0000\u0000\u195d\u195e\u0005\u0380"+
		"\u0000\u0000\u195e\u1960\u0003\u03f0\u01f8\u0000\u195f\u195c\u0001\u0000"+
		"\u0000\u0000\u195f\u1960\u0001\u0000\u0000\u0000\u1960\u1962\u0001\u0000"+
		"\u0000\u0000\u1961\u1963\u0003\u008cF\u0000\u1962\u1961\u0001\u0000\u0000"+
		"\u0000\u1962\u1963\u0001\u0000\u0000\u0000\u1963\u1965\u0001\u0000\u0000"+
		"\u0000\u1964\u1966\u0003\u0238\u011c\u0000\u1965\u1964\u0001\u0000\u0000"+
		"\u0000\u1965\u1966\u0001\u0000\u0000\u0000\u1966\u1968\u0001\u0000\u0000"+
		"\u0000\u1967\u1969\u0003\u02f2\u0179\u0000\u1968\u1967\u0001\u0000\u0000"+
		"\u0000\u1968\u1969\u0001\u0000\u0000\u0000\u1969\u015f\u0001\u0000\u0000"+
		"\u0000\u196a\u196b\u0005~\u0000\u0000\u196b\u197b\u0003\u03d0\u01e8\u0000"+
		"\u196c\u196d\u0003\u0162\u00b1\u0000\u196d\u1977\u0005\u038a\u0000\u0000"+
		"\u196e\u196f\u0005\u02e7\u0000\u0000\u196f\u1970\u0005\u037d\u0000\u0000"+
		"\u1970\u1978\u0003\u03ca\u01e5\u0000\u1971\u1972\u0005\u01d3\u0000\u0000"+
		"\u1972\u1973\u0005\u037d\u0000\u0000\u1973\u1978\u0003\u03ca\u01e5\u0000"+
		"\u1974\u1975\u0005\u02b6\u0000\u0000\u1975\u1976\u0005\u037d\u0000\u0000"+
		"\u1976\u1978\u0003\u03d0\u01e8\u0000\u1977\u196e\u0001\u0000\u0000\u0000"+
		"\u1977\u1971\u0001\u0000\u0000\u0000\u1977\u1974\u0001\u0000\u0000\u0000"+
		"\u1978\u1979\u0001\u0000\u0000\u0000\u1979\u197a\u0005\u038b\u0000\u0000"+
		"\u197a\u197c\u0001\u0000\u0000\u0000\u197b\u196c\u0001\u0000\u0000\u0000"+
		"\u197b\u197c\u0001\u0000\u0000\u0000\u197c\u0161\u0001\u0000\u0000\u0000"+
		"\u197d\u197e\u0007\'\u0000\u0000\u197e\u0163\u0001\u0000\u0000\u0000\u197f"+
		"\u1980\u0003\u03ca\u01e5\u0000\u1980\u1981\u0005\u0380\u0000\u0000\u1981"+
		"\u1982\u0003\u03ca\u01e5\u0000\u1982\u0165\u0001\u0000\u0000\u0000\u1983"+
		"\u1984\u0007(\u0000\u0000\u1984\u0167\u0001\u0000\u0000\u0000\u1985\u1986"+
		"\u0005\u0088\u0000\u0000\u1986\u1987\u0005\u0380\u0000\u0000\u1987\u1988"+
		"\u0003\u0166\u00b3\u0000\u1988\u0169\u0001\u0000\u0000\u0000\u1989\u198b"+
		"\u0005\u0097\u0000\u0000\u198a\u198c\u0003\u02fc\u017e\u0000\u198b\u198a"+
		"\u0001\u0000\u0000\u0000\u198b\u198c\u0001\u0000\u0000\u0000\u198c\u198e"+
		"\u0001\u0000\u0000\u0000\u198d\u198f\u0005\u0302\u0000\u0000\u198e\u198d"+
		"\u0001\u0000\u0000\u0000\u198e\u198f\u0001\u0000\u0000\u0000\u198f\u1990"+
		"\u0001\u0000\u0000\u0000\u1990\u1991\u0005\u00cb\u0000\u0000\u1991\u1993"+
		"\u0005\u02d4\u0000\u0000\u1992\u1994\u0003\u02fa\u017d\u0000\u1993\u1992"+
		"\u0001\u0000\u0000\u0000\u1993\u1994\u0001\u0000\u0000\u0000\u1994\u1995"+
		"\u0001\u0000\u0000\u0000\u1995\u199a\u0003\u03ea\u01f5\u0000\u1996\u1997"+
		"\u0005\u038a\u0000\u0000\u1997\u1998\u0003\u0252\u0129\u0000\u1998\u1999"+
		"\u0005\u038b\u0000\u0000\u1999\u199b\u0001\u0000\u0000\u0000\u199a\u1996"+
		"\u0001\u0000\u0000\u0000\u199a\u199b\u0001\u0000\u0000\u0000\u199b\u199d"+
		"\u0001\u0000\u0000\u0000\u199c\u199e\u0003\u016c\u00b6\u0000\u199d\u199c"+
		"\u0001\u0000\u0000\u0000\u199e\u199f\u0001\u0000\u0000\u0000\u199f\u199d"+
		"\u0001\u0000\u0000\u0000\u199f\u19a0\u0001\u0000\u0000\u0000\u19a0\u19a1"+
		"\u0001\u0000\u0000\u0000\u19a1\u19a2\u0005+\u0000\u0000\u19a2\u19a3\u0003"+
		"\u042e\u0217\u0000\u19a3\u016b\u0001\u0000\u0000\u0000\u19a4\u19af\u0003"+
		"\u016e\u00b7\u0000\u19a5\u19a6\u0005\u0235\u0000\u0000\u19a6\u19a7\u0005"+
		"\u0380\u0000\u0000\u19a7\u19af\u0007)\u0000\u0000\u19a8\u19a9\u0005\u014f"+
		"\u0000\u0000\u19a9\u19aa\u0005\u0380\u0000\u0000\u19aa\u19af\u0007*\u0000"+
		"\u0000\u19ab\u19af\u0003\u023c\u011e\u0000\u19ac\u19af\u0003\u023a\u011d"+
		"\u0000\u19ad\u19af\u0003\u0238\u011c\u0000\u19ae\u19a4\u0001\u0000\u0000"+
		"\u0000\u19ae\u19a5\u0001\u0000\u0000\u0000\u19ae\u19a8\u0001\u0000\u0000"+
		"\u0000\u19ae\u19ab\u0001\u0000\u0000\u0000\u19ae\u19ac\u0001\u0000\u0000"+
		"\u0000\u19ae\u19ad\u0001\u0000\u0000\u0000\u19af\u016d\u0001\u0000\u0000"+
		"\u0000\u19b0\u19b1\u0005\u02dd\u0000\u0000\u19b1\u19b4\u0005\u0380\u0000"+
		"\u0000\u19b2\u19b5\u0003\u03ca\u01e5\u0000\u19b3\u19b5\u0005\u00c9\u0000"+
		"\u0000\u19b4\u19b2\u0001\u0000\u0000\u0000\u19b4\u19b3\u0001\u0000\u0000"+
		"\u0000\u19b5\u19c5\u0001\u0000\u0000\u0000\u19b6\u19b7\u0005\u016b\u0000"+
		"\u0000\u19b7\u19ba\u0005\u0380\u0000\u0000\u19b8\u19bb\u0003\u03ca\u01e5"+
		"\u0000\u19b9\u19bb\u0005\u00c9\u0000\u0000\u19ba\u19b8\u0001\u0000\u0000"+
		"\u0000\u19ba\u19b9\u0001\u0000\u0000\u0000\u19bb\u19c5\u0001\u0000\u0000"+
		"\u0000\u19bc\u19bd\u0005\u032d\u0000\u0000\u19bd\u19be\u0005\u0380\u0000"+
		"\u0000\u19be\u19c5\u0003\u03d0\u01e8\u0000\u19bf\u19c5\u0003\u0174\u00ba"+
		"\u0000\u19c0\u19c1\u0005\u00b1\u0000\u0000\u19c1\u19c2\u0005\u0380\u0000"+
		"\u0000\u19c2\u19c5\u0005\u0377\u0000\u0000\u19c3\u19c5\u0003\u02f2\u0179"+
		"\u0000\u19c4\u19b0\u0001\u0000\u0000\u0000\u19c4\u19b6\u0001\u0000\u0000"+
		"\u0000\u19c4\u19bc\u0001\u0000\u0000\u0000\u19c4\u19bf\u0001\u0000\u0000"+
		"\u0000\u19c4\u19c0\u0001\u0000\u0000\u0000\u19c4\u19c3\u0001\u0000\u0000"+
		"\u0000\u19c5\u016f\u0001\u0000\u0000\u0000\u19c6\u19ca\u0003\u0172\u00b9"+
		"\u0000\u19c7\u19ca\u0005\u00b1\u0000\u0000\u19c8\u19ca\u0005\u0086\u0000"+
		"\u0000\u19c9\u19c6\u0001\u0000\u0000\u0000\u19c9\u19c7\u0001\u0000\u0000"+
		"\u0000\u19c9\u19c8\u0001\u0000\u0000\u0000\u19ca\u0171\u0001\u0000\u0000"+
		"\u0000\u19cb\u19cc\u0007+\u0000\u0000\u19cc\u0173\u0001\u0000\u0000\u0000"+
		"\u19cd\u19ce\u0003\u0172\u00b9\u0000\u19ce\u19cf\u0005\u0380\u0000\u0000"+
		"\u19cf\u19d0\u0003\u03f0\u01f8\u0000\u19d0\u0175\u0001\u0000\u0000\u0000"+
		"\u19d1\u19d3\u0005\u0097\u0000\u0000\u19d2\u19d4\u0003\u02fc\u017e\u0000"+
		"\u19d3\u19d2\u0001\u0000\u0000\u0000\u19d3\u19d4\u0001\u0000\u0000\u0000"+
		"\u19d4\u19d5\u0001\u0000\u0000\u0000\u19d5\u19d6\u0005\u00e9\u0000\u0000"+
		"\u19d6\u19d8\u0005\u02d4\u0000\u0000\u19d7\u19d9\u0003\u02fa\u017d\u0000"+
		"\u19d8\u19d7\u0001\u0000\u0000\u0000\u19d8\u19d9\u0001\u0000\u0000\u0000"+
		"\u19d9\u19da\u0001\u0000\u0000\u0000\u19da\u19dc\u0003\u03d0\u01e8\u0000"+
		"\u19db\u19dd\u0003\u023c\u011e\u0000\u19dc\u19db\u0001\u0000\u0000\u0000"+
		"\u19dc\u19dd\u0001\u0000\u0000\u0000\u19dd\u19e1\u0001\u0000\u0000\u0000"+
		"\u19de\u19e0\u0003\u0172\u00b9\u0000\u19df\u19de\u0001\u0000\u0000\u0000"+
		"\u19e0\u19e3\u0001\u0000\u0000\u0000\u19e1\u19df\u0001\u0000\u0000\u0000"+
		"\u19e1\u19e2\u0001\u0000\u0000\u0000\u19e2\u19e5\u0001\u0000\u0000\u0000"+
		"\u19e3\u19e1\u0001\u0000\u0000\u0000\u19e4\u19e6\u0003\u023e\u011f\u0000"+
		"\u19e5\u19e4\u0001\u0000\u0000\u0000\u19e5\u19e6\u0001\u0000\u0000\u0000"+
		"\u19e6\u19ea\u0001\u0000\u0000\u0000\u19e7\u19e8\u0005\u00b1\u0000\u0000"+
		"\u19e8\u19e9\u0005\u0380\u0000\u0000\u19e9\u19eb\u0003\u03ca\u01e5\u0000"+
		"\u19ea\u19e7\u0001\u0000\u0000\u0000\u19ea\u19eb\u0001\u0000\u0000\u0000"+
		"\u19eb\u19ed\u0001\u0000\u0000\u0000\u19ec\u19ee\u0003\u0228\u0114\u0000"+
		"\u19ed\u19ec\u0001\u0000\u0000\u0000\u19ed\u19ee\u0001\u0000\u0000\u0000"+
		"\u19ee\u19f0\u0001\u0000\u0000\u0000\u19ef\u19f1\u0003\u023a\u011d\u0000"+
		"\u19f0\u19ef\u0001\u0000\u0000\u0000\u19f0\u19f1\u0001\u0000\u0000\u0000"+
		"\u19f1\u19f3\u0001\u0000\u0000\u0000\u19f2\u19f4\u0003\u0238\u011c\u0000"+
		"\u19f3\u19f2\u0001\u0000\u0000\u0000\u19f3\u19f4\u0001\u0000\u0000\u0000"+
		"\u19f4\u19f9\u0001\u0000\u0000\u0000\u19f5\u19f7\u0005\u0336\u0000\u0000"+
		"\u19f6\u19f5\u0001\u0000\u0000\u0000\u19f6\u19f7\u0001\u0000\u0000\u0000"+
		"\u19f7\u19f8\u0001\u0000\u0000\u0000\u19f8\u19fa\u0003\u02f2\u0179\u0000"+
		"\u19f9\u19f6\u0001\u0000\u0000\u0000\u19f9\u19fa\u0001\u0000\u0000\u0000"+
		"\u19fa\u0177\u0001\u0000\u0000\u0000\u19fb\u19fd\u0005\u0097\u0000\u0000"+
		"\u19fc\u19fe\u0003\u02fc\u017e\u0000\u19fd\u19fc\u0001\u0000\u0000\u0000"+
		"\u19fd\u19fe\u0001\u0000\u0000\u0000\u19fe\u1a00\u0001\u0000\u0000\u0000"+
		"\u19ff\u1a01\u0005\u0283\u0000\u0000\u1a00\u19ff\u0001\u0000\u0000\u0000"+
		"\u1a00\u1a01\u0001\u0000\u0000\u0000\u1a01\u1a02\u0001\u0000\u0000\u0000"+
		"\u1a02\u1a03\u0005\u00f3\u0000\u0000\u1a03\u1a04\u0005\u0119\u0000\u0000"+
		"\u1a04\u1a05\u0003\u03ea\u01f5\u0000\u1a05\u1a11\u0005\u038a\u0000\u0000"+
		"\u1a06\u1a07\u0003\u03c2\u01e1\u0000\u1a07\u1a0e\u0003\u03c0\u01e0\u0000"+
		"\u1a08\u1a09\u0005\u0390\u0000\u0000\u1a09\u1a0a\u0003\u03c2\u01e1\u0000"+
		"\u1a0a\u1a0b\u0003\u03c0\u01e0\u0000\u1a0b\u1a0d\u0001\u0000\u0000\u0000"+
		"\u1a0c\u1a08\u0001\u0000\u0000\u0000\u1a0d\u1a10\u0001\u0000\u0000\u0000"+
		"\u1a0e\u1a0c\u0001\u0000\u0000\u0000\u1a0e\u1a0f\u0001\u0000\u0000\u0000"+
		"\u1a0f\u1a12\u0001\u0000\u0000\u0000\u1a10\u1a0e\u0001\u0000\u0000\u0000"+
		"\u1a11\u1a06\u0001\u0000\u0000\u0000\u1a11\u1a12\u0001\u0000\u0000\u0000"+
		"\u1a12\u1a13\u0001\u0000\u0000\u0000\u1a13\u1a14\u0005\u038b\u0000\u0000"+
		"\u1a14\u1a15\u0005\u0250\u0000\u0000\u1a15\u1a17\u0003\u040a\u0205\u0000"+
		"\u1a16\u1a18\u0003\u04b0\u0258\u0000\u1a17\u1a16\u0001\u0000\u0000\u0000"+
		"\u1a17\u1a18\u0001\u0000\u0000\u0000\u1a18\u1a25\u0001\u0000\u0000\u0000"+
		"\u1a19\u1a1a\u0005c\u0000\u0000\u1a1a\u1a1b\u0005\u01d9\u0000\u0000\u1a1b"+
		"\u1a1c\u0005\u01bf\u0000\u0000\u1a1c\u1a26\u0005\u0154\u0000\u0000\u1a1d"+
		"\u1a1e\u0005\u0250\u0000\u0000\u1a1e\u1a1f\u0005\u01bf\u0000\u0000\u1a1f"+
		"\u1a20\u0005\u01d9\u0000\u0000\u1a20\u1a21\u0005\u01bf\u0000\u0000\u1a21"+
		"\u1a24\u0005\u0154\u0000\u0000\u1a22\u1a24\u0005\u02c4\u0000\u0000\u1a23"+
		"\u1a1d\u0001\u0000\u0000\u0000\u1a23\u1a22\u0001\u0000\u0000\u0000\u1a24"+
		"\u1a26\u0001\u0000\u0000\u0000\u1a25\u1a19\u0001\u0000\u0000\u0000\u1a25"+
		"\u1a23\u0001\u0000\u0000\u0000\u1a25\u1a26\u0001\u0000\u0000\u0000\u1a26"+
		"\u1a28\u0001\u0000\u0000\u0000\u1a27\u1a29\u0007,\u0000\u0000\u1a28\u1a27"+
		"\u0001\u0000\u0000\u0000\u1a28\u1a29\u0001\u0000\u0000\u0000\u1a29\u1a2b"+
		"\u0001\u0000\u0000\u0000\u1a2a\u1a2c\u0003\u02f2\u0179\u0000\u1a2b\u1a2a"+
		"\u0001\u0000\u0000\u0000\u1a2b\u1a2c\u0001\u0000\u0000\u0000\u1a2c\u1a2d"+
		"\u0001\u0000\u0000\u0000\u1a2d\u1a2e\u0005$\u0000\u0000\u1a2e\u1a2f\u0005"+
		"\u0380\u0000\u0000\u1a2f\u1a3d\u0003\u03d0\u01e8\u0000\u1a30\u1a31\u0005"+
		"\u0136\u0000\u0000\u1a31\u1a32\u0005\u0380\u0000\u0000\u1a32\u1a33\u0005"+
		"\u038a\u0000\u0000\u1a33\u1a38\u0003\u0164\u00b2\u0000\u1a34\u1a35\u0005"+
		"\u0390\u0000\u0000\u1a35\u1a37\u0003\u0164\u00b2\u0000\u1a36\u1a34\u0001"+
		"\u0000\u0000\u0000\u1a37\u1a3a\u0001\u0000\u0000\u0000\u1a38\u1a36\u0001"+
		"\u0000\u0000\u0000\u1a38\u1a39\u0001\u0000\u0000\u0000\u1a39\u1a3b\u0001"+
		"\u0000\u0000\u0000\u1a3a\u1a38\u0001\u0000\u0000\u0000\u1a3b\u1a3c\u0005"+
		"\u038b\u0000\u0000\u1a3c\u1a3e\u0001\u0000\u0000\u0000\u1a3d\u1a30\u0001"+
		"\u0000\u0000\u0000\u1a3d\u1a3e\u0001\u0000\u0000\u0000\u1a3e\u1a4c\u0001"+
		"\u0000\u0000\u0000\u1a3f\u1a40\u0005\u0092\u0000\u0000\u1a40\u1a41\u0005"+
		"\u0380\u0000\u0000\u1a41\u1a42\u0005\u038a\u0000\u0000\u1a42\u1a47\u0003"+
		"\u03d0\u01e8\u0000\u1a43\u1a44\u0005\u0390\u0000\u0000\u1a44\u1a46\u0003"+
		"\u03d0\u01e8\u0000\u1a45\u1a43\u0001\u0000\u0000\u0000\u1a46\u1a49\u0001"+
		"\u0000\u0000\u0000\u1a47\u1a45\u0001\u0000\u0000\u0000\u1a47\u1a48\u0001"+
		"\u0000\u0000\u0000\u1a48\u1a4a\u0001\u0000\u0000\u0000\u1a49\u1a47\u0001"+
		"\u0000\u0000\u0000\u1a4a\u1a4b\u0005\u038b\u0000\u0000\u1a4b\u1a4d\u0001"+
		"\u0000\u0000\u0000\u1a4c\u1a3f\u0001\u0000\u0000\u0000\u1a4c\u1a4d\u0001"+
		"\u0000\u0000\u0000\u1a4d\u1a51\u0001\u0000\u0000\u0000\u1a4e\u1a4f\u0005"+
		"\u0190\u0000\u0000\u1a4f\u1a50\u0005\u0380\u0000\u0000\u1a50\u1a52\u0003"+
		"\u03f0\u01f8\u0000\u1a51\u1a4e\u0001\u0000\u0000\u0000\u1a51\u1a52\u0001"+
		"\u0000\u0000\u0000\u1a52\u1a54\u0001\u0000\u0000\u0000\u1a53\u1a55\u0003"+
		"\u0168\u00b4\u0000\u1a54\u1a53\u0001\u0000\u0000\u0000\u1a54\u1a55\u0001"+
		"\u0000\u0000\u0000\u1a55\u1a59\u0001\u0000\u0000\u0000\u1a56\u1a57\u0005"+
		"\u0243\u0000\u0000\u1a57\u1a58\u0005\u0380\u0000\u0000\u1a58\u1a5a\u0003"+
		"\u03d0\u01e8\u0000\u1a59\u1a56\u0001\u0000\u0000\u0000\u1a59\u1a5a\u0001"+
		"\u0000\u0000\u0000\u1a5a\u1a5e\u0001\u0000\u0000\u0000\u1a5b\u1a5c\u0005"+
		"\u024b\u0000\u0000\u1a5c\u1a5d\u0005\u0380\u0000\u0000\u1a5d\u1a5f\u0003"+
		"\u03d0\u01e8\u0000\u1a5e\u1a5b\u0001\u0000\u0000\u0000\u1a5e\u1a5f\u0001"+
		"\u0000\u0000\u0000\u1a5f\u1a60\u0001\u0000\u0000\u0000\u1a60\u1a61\u0005"+
		"+\u0000\u0000\u1a61\u1a62\u0003\u03ca\u01e5\u0000\u1a62\u0179\u0001\u0000"+
		"\u0000\u0000\u1a63\u1a65\u0005\u0097\u0000\u0000\u1a64\u1a66\u0003\u02fc"+
		"\u017e\u0000\u1a65\u1a64\u0001\u0000\u0000\u0000\u1a65\u1a66\u0001\u0000"+
		"\u0000\u0000\u1a66\u1a67\u0001\u0000\u0000\u0000\u1a67\u1a68\u0005\u00f3"+
		"\u0000\u0000\u1a68\u1a6a\u0005\u02d4\u0000\u0000\u1a69\u1a6b\u0003\u02fa"+
		"\u017d\u0000\u1a6a\u1a69\u0001\u0000\u0000\u0000\u1a6a\u1a6b\u0001\u0000"+
		"\u0000\u0000\u1a6b\u1a6c\u0001\u0000\u0000\u0000\u1a6c\u1a6d\u0003\u03ea"+
		"\u01f5\u0000\u1a6d\u1a6e\u0005\u038a\u0000\u0000\u1a6e\u1a6f\u0003\u017e"+
		"\u00bf\u0000\u1a6f\u1a71\u0005\u038b\u0000\u0000\u1a70\u1a72\u0003\u0224"+
		"\u0112\u0000\u1a71\u1a70\u0001\u0000\u0000\u0000\u1a71\u1a72\u0001\u0000"+
		"\u0000\u0000\u1a72\u1a74\u0001\u0000\u0000\u0000\u1a73\u1a75\u0003\u0482"+
		"\u0241\u0000\u1a74\u1a73\u0001\u0000\u0000\u0000\u1a74\u1a75\u0001\u0000"+
		"\u0000\u0000\u1a75\u1a77\u0001\u0000\u0000\u0000\u1a76\u1a78\u0005\u0336"+
		"\u0000\u0000\u1a77\u1a76\u0001\u0000\u0000\u0000\u1a77\u1a78\u0001\u0000"+
		"\u0000\u0000\u1a78\u1a79\u0001\u0000\u0000\u0000\u1a79\u1a7a\u0005\u017d"+
		"\u0000\u0000\u1a7a\u1a7b\u0005\u0380\u0000\u0000\u1a7b\u1a7f\u0003n7\u0000"+
		"\u1a7c\u1a7d\u0005\u0236\u0000\u0000\u1a7d\u1a7e\u0005\u0380\u0000\u0000"+
		"\u1a7e\u1a80\u0003\u0208\u0104\u0000\u1a7f\u1a7c\u0001\u0000\u0000\u0000"+
		"\u1a7f\u1a80\u0001\u0000\u0000\u0000\u1a80\u1a84\u0001\u0000\u0000\u0000"+
		"\u1a81\u1a82\u00059\u0000\u0000\u1a82\u1a83\u0005\u0380\u0000\u0000\u1a83"+
		"\u1a85\u0003\u0208\u0104\u0000\u1a84\u1a81\u0001\u0000\u0000\u0000\u1a84"+
		"\u1a85\u0001\u0000\u0000\u0000\u1a85\u1a87\u0001\u0000\u0000\u0000\u1a86"+
		"\u1a88\u0003\u03e2\u01f1\u0000\u1a87\u1a86\u0001\u0000\u0000\u0000\u1a87"+
		"\u1a88\u0001\u0000\u0000\u0000\u1a88\u1a89\u0001\u0000\u0000\u0000\u1a89"+
		"\u1a8d\u00030\u0018\u0000\u1a8a\u1a8b\u0005D\u0000\u0000\u1a8b\u1a8c\u0005"+
		"\u0380\u0000\u0000\u1a8c\u1a8e\u0003\u03ca\u01e5\u0000\u1a8d\u1a8a\u0001"+
		"\u0000\u0000\u0000\u1a8d\u1a8e\u0001\u0000\u0000\u0000\u1a8e\u1a90\u0001"+
		"\u0000\u0000\u0000\u1a8f\u1a91\u0003\u0228\u0114\u0000\u1a90\u1a8f\u0001"+
		"\u0000\u0000\u0000\u1a90\u1a91\u0001\u0000\u0000\u0000\u1a91\u1a93\u0001"+
		"\u0000\u0000\u0000\u1a92\u1a94\u0003\u023a\u011d\u0000\u1a93\u1a92\u0001"+
		"\u0000\u0000\u0000\u1a93\u1a94\u0001\u0000\u0000\u0000\u1a94\u1a96\u0001"+
		"\u0000\u0000\u0000\u1a95\u1a97\u0003\u0238\u011c\u0000\u1a96\u1a95\u0001"+
		"\u0000\u0000\u0000\u1a96\u1a97\u0001\u0000\u0000\u0000\u1a97\u1a99\u0001"+
		"\u0000\u0000\u0000\u1a98\u1a9a\u0003\u02f2\u0179\u0000\u1a99\u1a98\u0001"+
		"\u0000\u0000\u0000\u1a99\u1a9a\u0001\u0000\u0000\u0000\u1a9a\u1af3\u0001"+
		"\u0000\u0000\u0000\u1a9b\u1a9d\u0005\u0097\u0000\u0000\u1a9c\u1a9e\u0003"+
		"\u02fc\u017e\u0000\u1a9d\u1a9c\u0001\u0000\u0000\u0000\u1a9d\u1a9e\u0001"+
		"\u0000\u0000\u0000\u1a9e\u1a9f\u0001\u0000\u0000\u0000\u1a9f\u1aa0\u0005"+
		"\u00f3\u0000\u0000\u1aa0\u1aa2\u0005\u02d4\u0000\u0000\u1aa1\u1aa3\u0003"+
		"\u02fa\u017d\u0000\u1aa2\u1aa1\u0001\u0000\u0000\u0000\u1aa2\u1aa3\u0001"+
		"\u0000\u0000\u0000\u1aa3\u1aa4\u0001\u0000\u0000\u0000\u1aa4\u1aa5\u0003"+
		"\u03ea\u01f5\u0000\u1aa5\u1aa6\u0005\u038a\u0000\u0000\u1aa6\u1aa7\u0003"+
		"\u017e\u00bf\u0000\u1aa7\u1aa9\u0005\u038b\u0000\u0000\u1aa8\u1aaa\u0003"+
		"\u0224\u0112\u0000\u1aa9\u1aa8\u0001\u0000\u0000\u0000\u1aa9\u1aaa\u0001"+
		"\u0000\u0000\u0000\u1aaa\u1aac\u0001\u0000\u0000\u0000\u1aab\u1aad\u0003"+
		"\u0482\u0241\u0000\u1aac\u1aab\u0001\u0000\u0000\u0000\u1aac\u1aad\u0001"+
		"\u0000\u0000\u0000\u1aad\u1aaf\u0001\u0000\u0000\u0000\u1aae\u1ab0\u0005"+
		"\u0336\u0000\u0000\u1aaf\u1aae\u0001\u0000\u0000\u0000\u1aaf\u1ab0\u0001"+
		"\u0000\u0000\u0000\u1ab0\u1ab1\u0001\u0000\u0000\u0000\u1ab1\u1ab2\u0005"+
		"\u017d\u0000\u0000\u1ab2\u1ab3\u0005\u0380\u0000\u0000\u1ab3\u1ab4\u0003"+
		"n7\u0000\u1ab4\u1ab5\u0005\u01f6\u0000\u0000\u1ab5\u1ab6\u0005\u0380\u0000"+
		"\u0000\u1ab6\u1ab7\u0005\u031c\u0000\u0000\u1ab7\u1ab9\u00030\u0018\u0000"+
		"\u1ab8\u1aba\u0003\u0228\u0114\u0000\u1ab9\u1ab8\u0001\u0000\u0000\u0000"+
		"\u1ab9\u1aba\u0001\u0000\u0000\u0000\u1aba\u1abc\u0001\u0000\u0000\u0000"+
		"\u1abb\u1abd\u0003\u023a\u011d\u0000\u1abc\u1abb\u0001\u0000\u0000\u0000"+
		"\u1abc\u1abd\u0001\u0000\u0000\u0000\u1abd\u1abf\u0001\u0000\u0000\u0000"+
		"\u1abe\u1ac0\u0003\u0238\u011c\u0000\u1abf\u1abe\u0001\u0000\u0000\u0000"+
		"\u1abf\u1ac0\u0001\u0000\u0000\u0000\u1ac0\u1ac2\u0001\u0000\u0000\u0000"+
		"\u1ac1\u1ac3\u0003\u02f2\u0179\u0000\u1ac2\u1ac1\u0001\u0000\u0000\u0000"+
		"\u1ac2\u1ac3\u0001\u0000\u0000\u0000\u1ac3\u1af3\u0001\u0000\u0000\u0000"+
		"\u1ac4\u1ac6\u0005\u0097\u0000\u0000\u1ac5\u1ac7\u0003\u02fc\u017e\u0000"+
		"\u1ac6\u1ac5\u0001\u0000\u0000\u0000\u1ac6\u1ac7\u0001\u0000\u0000\u0000"+
		"\u1ac7\u1ac8\u0001\u0000\u0000\u0000\u1ac8\u1ac9\u0005\u00f3\u0000\u0000"+
		"\u1ac9\u1acb\u0005\u02d4\u0000\u0000\u1aca\u1acc\u0003\u02fa\u017d\u0000"+
		"\u1acb\u1aca\u0001\u0000\u0000\u0000\u1acb\u1acc\u0001\u0000\u0000\u0000"+
		"\u1acc\u1acd\u0001\u0000\u0000\u0000\u1acd\u1ace\u0003\u03ea\u01f5\u0000"+
		"\u1ace\u1acf\u0005\u038a\u0000\u0000\u1acf\u1ad0\u0003\u017e\u00bf\u0000"+
		"\u1ad0\u1ad2\u0005\u038b\u0000\u0000\u1ad1\u1ad3\u0003\u0224\u0112\u0000"+
		"\u1ad2\u1ad1\u0001\u0000\u0000\u0000\u1ad2\u1ad3\u0001\u0000\u0000\u0000"+
		"\u1ad3\u1ad5\u0001\u0000\u0000\u0000\u1ad4\u1ad6\u0003\u0482\u0241\u0000"+
		"\u1ad5\u1ad4\u0001\u0000\u0000\u0000\u1ad5\u1ad6\u0001\u0000\u0000\u0000"+
		"\u1ad6\u1ad8\u0001\u0000\u0000\u0000\u1ad7\u1ad9\u0005\u0336\u0000\u0000"+
		"\u1ad8\u1ad7\u0001\u0000\u0000\u0000\u1ad8\u1ad9\u0001\u0000\u0000\u0000"+
		"\u1ad9\u1ada\u0001\u0000\u0000\u0000\u1ada\u1adb\u0005\u017d\u0000\u0000"+
		"\u1adb\u1adc\u0005\u0380\u0000\u0000\u1adc\u1add\u0003n7\u0000\u1add\u1ade"+
		"\u0005\u01f6\u0000\u0000\u1ade\u1adf\u0005\u0380\u0000\u0000\u1adf\u1ae0"+
		"\u0005\u031c\u0000\u0000\u1ae0\u1ae4\u00030\u0018\u0000\u1ae1\u1ae2\u0005"+
		"\u02d9\u0000\u0000\u1ae2\u1ae3\u0005\u0380\u0000\u0000\u1ae3\u1ae5\u0005"+
		"\u00bc\u0000\u0000\u1ae4\u1ae1\u0001\u0000\u0000\u0000\u1ae4\u1ae5\u0001"+
		"\u0000\u0000\u0000\u1ae5\u1ae7\u0001\u0000\u0000\u0000\u1ae6\u1ae8\u0003"+
		"\u0228\u0114\u0000\u1ae7\u1ae6\u0001\u0000\u0000\u0000\u1ae7\u1ae8\u0001"+
		"\u0000\u0000\u0000\u1ae8\u1aea\u0001\u0000\u0000\u0000\u1ae9\u1aeb\u0003"+
		"\u023a\u011d\u0000\u1aea\u1ae9\u0001\u0000\u0000\u0000\u1aea\u1aeb\u0001"+
		"\u0000\u0000\u0000\u1aeb\u1aed\u0001\u0000\u0000\u0000\u1aec\u1aee\u0003"+
		"\u0238\u011c\u0000\u1aed\u1aec\u0001\u0000\u0000\u0000\u1aed\u1aee\u0001"+
		"\u0000\u0000\u0000\u1aee\u1af0\u0001\u0000\u0000\u0000\u1aef\u1af1\u0003"+
		"\u02f2\u0179\u0000\u1af0\u1aef\u0001\u0000\u0000\u0000\u1af0\u1af1\u0001"+
		"\u0000\u0000\u0000\u1af1\u1af3\u0001\u0000\u0000\u0000\u1af2\u1a63\u0001"+
		"\u0000\u0000\u0000\u1af2\u1a9b\u0001\u0000\u0000\u0000\u1af2\u1ac4\u0001"+
		"\u0000\u0000\u0000\u1af3\u017b\u0001\u0000\u0000\u0000\u1af4\u1af5\u0003"+
		"\u03e4\u01f2\u0000\u1af5\u1af6\u0003\u040a\u0205\u0000\u1af6\u1af9\u0005"+
		"+\u0000\u0000\u1af7\u1afa\u0003\u03f6\u01fb\u0000\u1af8\u1afa\u0003\u03d0"+
		"\u01e8\u0000\u1af9\u1af7\u0001\u0000\u0000\u0000\u1af9\u1af8\u0001\u0000"+
		"\u0000\u0000\u1afa\u1afc\u0001\u0000\u0000\u0000\u1afb\u1afd\u0003\u0108"+
		"\u0084\u0000\u1afc\u1afb\u0001\u0000\u0000\u0000\u1afc\u1afd\u0001\u0000"+
		"\u0000\u0000\u1afd\u017d\u0001\u0000\u0000\u0000\u1afe\u1b03\u0003\u017c"+
		"\u00be\u0000\u1aff\u1b00\u0005\u0390\u0000\u0000\u1b00\u1b02\u0003\u017c"+
		"\u00be\u0000\u1b01\u1aff\u0001\u0000\u0000\u0000\u1b02\u1b05\u0001\u0000"+
		"\u0000\u0000\u1b03\u1b01\u0001\u0000\u0000\u0000\u1b03\u1b04\u0001\u0000"+
		"\u0000\u0000\u1b04\u017f\u0001\u0000\u0000\u0000\u1b05\u1b03\u0001\u0000"+
		"\u0000\u0000\u1b06\u1b07\u0003\u03d0\u01e8\u0000\u1b07\u1b08\u0005\u0386"+
		"\u0000\u0000\u1b08\u1b09\u0003\u03d0\u01e8\u0000\u1b09\u0181\u0001\u0000"+
		"\u0000\u0000\u1b0a\u1b0b\u0005\u0284\u0000\u0000\u1b0b\u1b0f\u0005\u0159"+
		"\u0000\u0000\u1b0c\u1b0d\u0005 \u0000\u0000\u1b0d\u1b0f\u0005\u0159\u0000"+
		"\u0000\u1b0e\u1b0a\u0001\u0000\u0000\u0000\u1b0e\u1b0c\u0001\u0000\u0000"+
		"\u0000\u1b0f\u0183\u0001\u0000\u0000\u0000\u1b10\u1b11\u0005\u0097\u0000"+
		"\u0000\u1b11\u1b12\u0005\u0103\u0000\u0000\u1b12\u1b14\u0005\u012c\u0000"+
		"\u0000\u1b13\u1b15\u0003\u02fa\u017d\u0000\u1b14\u1b13\u0001\u0000\u0000"+
		"\u0000\u1b14\u1b15\u0001\u0000\u0000\u0000\u1b15\u1b16\u0001\u0000\u0000"+
		"\u0000\u1b16\u1b17\u0003\u03d0\u01e8\u0000\u1b17\u1b18\u0005\u01d1\u0000"+
		"\u0000\u1b18\u1b19\u0005\u0380\u0000\u0000\u1b19\u1b1e\u0003\u03ba\u01dd"+
		"\u0000\u1b1a\u1b1b\u0005\u0390\u0000\u0000\u1b1b\u1b1d\u0003\u03ba\u01dd"+
		"\u0000\u1b1c\u1b1a\u0001\u0000\u0000\u0000\u1b1d\u1b20\u0001\u0000\u0000"+
		"\u0000\u1b1e\u1b1c\u0001\u0000\u0000\u0000\u1b1e\u1b1f\u0001\u0000\u0000"+
		"\u0000\u1b1f\u1b2b\u0001\u0000\u0000\u0000\u1b20\u1b1e\u0001\u0000\u0000"+
		"\u0000\u1b21\u1b22\u0005\u0013\u0000\u0000\u1b22\u1b23\u0005\u0380\u0000"+
		"\u0000\u1b23\u1b28\u0003\u03d0\u01e8\u0000\u1b24\u1b25\u0005\u0390\u0000"+
		"\u0000\u1b25\u1b27\u0003\u03d0\u01e8\u0000\u1b26\u1b24\u0001\u0000\u0000"+
		"\u0000\u1b27\u1b2a\u0001\u0000\u0000\u0000\u1b28\u1b26\u0001\u0000\u0000"+
		"\u0000\u1b28\u1b29\u0001\u0000\u0000\u0000\u1b29\u1b2c\u0001\u0000\u0000"+
		"\u0000\u1b2a\u1b28\u0001\u0000\u0000\u0000\u1b2b\u1b21\u0001\u0000\u0000"+
		"\u0000\u1b2b\u1b2c\u0001\u0000\u0000\u0000\u1b2c\u1b37\u0001\u0000\u0000"+
		"\u0000\u1b2d\u1b2e\u0005\u0016\u0000\u0000\u1b2e\u1b2f\u0005\u0380\u0000"+
		"\u0000\u1b2f\u1b34\u0003\u03d0\u01e8\u0000\u1b30\u1b31\u0005\u0390\u0000"+
		"\u0000\u1b31\u1b33\u0003\u03d0\u01e8\u0000\u1b32\u1b30\u0001\u0000\u0000"+
		"\u0000\u1b33\u1b36\u0001\u0000\u0000\u0000\u1b34\u1b32\u0001\u0000\u0000"+
		"\u0000\u1b34\u1b35\u0001\u0000\u0000\u0000\u1b35\u1b38\u0001\u0000\u0000"+
		"\u0000\u1b36\u1b34\u0001\u0000\u0000\u0000\u1b37\u1b2d\u0001\u0000\u0000"+
		"\u0000\u1b37\u1b38\u0001\u0000\u0000\u0000\u1b38\u1b43\u0001\u0000\u0000"+
		"\u0000\u1b39\u1b3a\u0005\u0014\u0000\u0000\u1b3a\u1b3b\u0005\u0380\u0000"+
		"\u0000\u1b3b\u1b40\u0003\u0182\u00c1\u0000\u1b3c\u1b3d\u0005\u0390\u0000"+
		"\u0000\u1b3d\u1b3f\u0003\u0182\u00c1\u0000\u1b3e\u1b3c\u0001\u0000\u0000"+
		"\u0000\u1b3f\u1b42\u0001\u0000\u0000\u0000\u1b40\u1b3e\u0001\u0000\u0000"+
		"\u0000\u1b40\u1b41\u0001\u0000\u0000\u0000\u1b41\u1b44\u0001\u0000\u0000"+
		"\u0000\u1b42\u1b40\u0001\u0000\u0000\u0000\u1b43\u1b39\u0001\u0000\u0000"+
		"\u0000\u1b43\u1b44\u0001\u0000\u0000\u0000\u1b44\u1b45\u0001\u0000\u0000"+
		"\u0000\u1b45\u1b46\u0005\u0012\u0000\u0000\u1b46\u1b47\u0005\u0380\u0000"+
		"\u0000\u1b47\u1b4c\u0003\u0180\u00c0\u0000\u1b48\u1b49\u0005\u0390\u0000"+
		"\u0000\u1b49\u1b4b\u0003\u0180\u00c0\u0000\u1b4a\u1b48\u0001\u0000\u0000"+
		"\u0000\u1b4b\u1b4e\u0001\u0000\u0000\u0000\u1b4c\u1b4a\u0001\u0000\u0000"+
		"\u0000\u1b4c\u1b4d\u0001\u0000\u0000\u0000\u1b4d\u1b52\u0001\u0000\u0000"+
		"\u0000\u1b4e\u1b4c\u0001\u0000\u0000\u0000\u1b4f\u1b50\u0005\u0140\u0000"+
		"\u0000\u1b50\u1b51\u0005\u00cd\u0000\u0000\u1b51\u1b53\u0005q\u0000\u0000"+
		"\u1b52\u1b4f\u0001\u0000\u0000\u0000\u1b52\u1b53\u0001\u0000\u0000\u0000"+
		"\u1b53\u1b57\u0001\u0000\u0000\u0000\u1b54\u1b55\u0005\u0242\u0000\u0000"+
		"\u1b55\u1b56\u0005\u0380\u0000\u0000\u1b56\u1b58\u0003\u03ca\u01e5\u0000"+
		"\u1b57\u1b54\u0001\u0000\u0000\u0000\u1b57\u1b58\u0001\u0000\u0000\u0000"+
		"\u1b58\u1b6a\u0001\u0000\u0000\u0000\u1b59\u1b5a\u0005\u0097\u0000\u0000"+
		"\u1b5a\u1b5b\u0005\u0103\u0000\u0000\u1b5b\u1b5d\u0005\u012c\u0000\u0000"+
		"\u1b5c\u1b5e\u0003\u02fa\u017d\u0000\u1b5d\u1b5c\u0001\u0000\u0000\u0000"+
		"\u1b5d\u1b5e\u0001\u0000\u0000\u0000\u1b5e\u1b5f\u0001\u0000\u0000\u0000"+
		"\u1b5f\u1b60\u0003\u03d0\u01e8\u0000\u1b60\u1b61\u0005+\u0000\u0000\u1b61"+
		"\u1b62\u0005\u0240\u0000\u0000\u1b62\u1b63\u0005\u01d2\u0000\u0000\u1b63"+
		"\u1b64\u0003\u03d0\u01e8\u0000\u1b64\u1b65\u0005\u0386\u0000\u0000\u1b65"+
		"\u1b66\u0003\u03d0\u01e8\u0000\u1b66\u1b67\u0005\u0386\u0000\u0000\u1b67"+
		"\u1b68\u0003\u03d0\u01e8\u0000\u1b68\u1b6a\u0001\u0000\u0000\u0000\u1b69"+
		"\u1b10\u0001\u0000\u0000\u0000\u1b69\u1b59\u0001\u0000\u0000\u0000\u1b6a"+
		"\u0185\u0001\u0000\u0000\u0000\u1b6b\u1b6c\u0007-\u0000\u0000\u1b6c\u0187"+
		"\u0001\u0000\u0000\u0000\u1b6d\u1b6f\u0005\u0097\u0000\u0000\u1b6e\u1b70"+
		"\u0003\u02fc\u017e\u0000\u1b6f\u1b6e\u0001\u0000\u0000\u0000\u1b6f\u1b70"+
		"\u0001\u0000\u0000\u0000\u1b70\u1b71\u0001\u0000\u0000\u0000\u1b71\u1b72"+
		"\u0005\u0108\u0000\u0000\u1b72\u1b74\u0005\u0113\u0000\u0000\u1b73\u1b75"+
		"\u0003\u02fa\u017d\u0000\u1b74\u1b73\u0001\u0000\u0000\u0000\u1b74\u1b75"+
		"\u0001\u0000\u0000\u0000\u1b75\u1b76\u0001\u0000\u0000\u0000\u1b76\u1b7a"+
		"\u0003\u03ea\u01f5\u0000\u1b77\u1b78\u0005\u030c\u0000\u0000\u1b78\u1b79"+
		"\u0005\u0380\u0000\u0000\u1b79\u1b7b\u0003\u0186\u00c3\u0000\u1b7a\u1b77"+
		"\u0001\u0000\u0000\u0000\u1b7a\u1b7b\u0001\u0000\u0000\u0000\u1b7b\u1b7f"+
		"\u0001\u0000\u0000\u0000\u1b7c\u1b7e\u0003\u01e2\u00f1\u0000\u1b7d\u1b7c"+
		"\u0001\u0000\u0000\u0000\u1b7e\u1b81\u0001\u0000\u0000\u0000\u1b7f\u1b7d"+
		"\u0001\u0000\u0000\u0000\u1b7f\u1b80\u0001\u0000\u0000\u0000\u1b80\u1b83"+
		"\u0001\u0000\u0000\u0000\u1b81\u1b7f\u0001\u0000\u0000\u0000\u1b82\u1b84"+
		"\u0003\u02f2\u0179\u0000\u1b83\u1b82\u0001\u0000\u0000\u0000\u1b83\u1b84"+
		"\u0001\u0000\u0000\u0000\u1b84\u0189\u0001\u0000\u0000\u0000\u1b85\u1b86"+
		"\u0003\u03c2\u01e1\u0000\u1b86\u1b88\u0003\u03c0\u01e0\u0000\u1b87\u1b89"+
		"\u0003\u018c\u00c6\u0000\u1b88\u1b87\u0001\u0000\u0000\u0000\u1b88\u1b89"+
		"\u0001\u0000\u0000\u0000\u1b89\u018b\u0001\u0000\u0000\u0000\u1b8a\u1b8b"+
		"\u0005\u00b0\u0000\u0000\u1b8b\u1b8c\u0003\u03f6\u01fb\u0000\u1b8c\u018d"+
		"\u0001\u0000\u0000\u0000\u1b8d\u1b8e\u0003\u03e4\u01f2\u0000\u1b8e\u1b90"+
		"\u0003\u040a\u0205\u0000\u1b8f\u1b91\u0003\u0190\u00c8\u0000\u1b90\u1b8f"+
		"\u0001\u0000\u0000\u0000\u1b90\u1b91\u0001\u0000\u0000\u0000\u1b91\u018f"+
		"\u0001\u0000\u0000\u0000\u1b92\u1b93\u0005+\u0000\u0000\u1b93\u1b94\u0005"+
		"\u038a\u0000\u0000\u1b94\u1b95\u0003\u0414\u020a\u0000\u1b95\u1b96\u0005"+
		"\u038b\u0000\u0000\u1b96\u1b9a\u0001\u0000\u0000\u0000\u1b97\u1b98\u0005"+
		"+\u0000\u0000\u1b98\u1b9a\u0003\u0414\u020a\u0000\u1b99\u1b92\u0001\u0000"+
		"\u0000\u0000\u1b99\u1b97\u0001\u0000\u0000\u0000\u1b9a\u0191\u0001\u0000"+
		"\u0000\u0000\u1b9b\u1b9e\u0003\u03ca\u01e5\u0000\u1b9c\u1b9e\u0005\u0376"+
		"\u0000\u0000\u1b9d\u1b9b\u0001\u0000\u0000\u0000\u1b9d\u1b9c\u0001\u0000"+
		"\u0000\u0000\u1b9e\u0193\u0001\u0000\u0000\u0000\u1b9f\u1ba1\u0005\u0097"+
		"\u0000\u0000\u1ba0\u1ba2\u0003\u02fc\u017e\u0000\u1ba1\u1ba0\u0001\u0000"+
		"\u0000\u0000\u1ba1\u1ba2\u0001\u0000\u0000\u0000\u1ba2\u1ba4\u0001\u0000"+
		"\u0000\u0000\u1ba3\u1ba5\u0005\u0283\u0000\u0000\u1ba4\u1ba3\u0001\u0000"+
		"\u0000\u0000\u1ba4\u1ba5\u0001\u0000\u0000\u0000\u1ba5\u1ba6\u0001\u0000"+
		"\u0000\u0000\u1ba6\u1ba8\u0005\u0119\u0000\u0000\u1ba7\u1ba9\u0003\u02fa"+
		"\u017d\u0000\u1ba8\u1ba7\u0001\u0000\u0000\u0000\u1ba8\u1ba9\u0001\u0000"+
		"\u0000\u0000\u1ba9\u1baa\u0001\u0000\u0000\u0000\u1baa\u1bab\u0003\u03ea"+
		"\u01f5\u0000\u1bab\u1bb4\u0005\u038a\u0000\u0000\u1bac\u1bb1\u0003\u018a"+
		"\u00c5\u0000\u1bad\u1bae\u0005\u0390\u0000\u0000\u1bae\u1bb0\u0003\u018a"+
		"\u00c5\u0000\u1baf\u1bad\u0001\u0000\u0000\u0000\u1bb0\u1bb3\u0001\u0000"+
		"\u0000\u0000\u1bb1\u1baf\u0001\u0000\u0000\u0000\u1bb1\u1bb2\u0001\u0000"+
		"\u0000\u0000\u1bb2\u1bb5\u0001\u0000\u0000\u0000\u1bb3\u1bb1\u0001\u0000"+
		"\u0000\u0000\u1bb4\u1bac\u0001\u0000\u0000\u0000\u1bb4\u1bb5\u0001\u0000"+
		"\u0000\u0000\u1bb5\u1bb6\u0001\u0000\u0000\u0000\u1bb6\u1bb7\u0005\u038b"+
		"\u0000\u0000\u1bb7\u1bc6\u0005\u0250\u0000\u0000\u1bb8\u1bc7\u0003\u040a"+
		"\u0205\u0000\u1bb9\u1bba\u0005\u02d4\u0000\u0000\u1bba\u1bc3\u0005\u038a"+
		"\u0000\u0000\u1bbb\u1bc0\u0003\u018e\u00c7\u0000\u1bbc\u1bbd\u0005\u0390"+
		"\u0000\u0000\u1bbd\u1bbf\u0003\u018e\u00c7\u0000\u1bbe\u1bbc\u0001\u0000"+
		"\u0000\u0000\u1bbf\u1bc2\u0001\u0000\u0000\u0000\u1bc0\u1bbe\u0001\u0000"+
		"\u0000\u0000\u1bc0\u1bc1\u0001\u0000\u0000\u0000\u1bc1\u1bc4\u0001\u0000"+
		"\u0000\u0000\u1bc2\u1bc0\u0001\u0000\u0000\u0000\u1bc3\u1bbb\u0001\u0000"+
		"\u0000\u0000\u1bc3\u1bc4\u0001\u0000\u0000\u0000\u1bc4\u1bc5\u0001\u0000"+
		"\u0000\u0000\u1bc5\u1bc7\u0005\u038b\u0000\u0000\u1bc6\u1bb8\u0001\u0000"+
		"\u0000\u0000\u1bc6\u1bb9\u0001\u0000\u0000\u0000\u1bc7\u1bc9\u0001\u0000"+
		"\u0000\u0000\u1bc8\u1bca\u0003\u04b0\u0258\u0000\u1bc9\u1bc8\u0001\u0000"+
		"\u0000\u0000\u1bc9\u1bca\u0001\u0000\u0000\u0000\u1bca\u1bcd\u0001\u0000"+
		"\u0000\u0000\u1bcb\u1bcc\u0005\u016c\u0000\u0000\u1bcc\u1bce\u0007.\u0000"+
		"\u0000\u1bcd\u1bcb\u0001\u0000\u0000\u0000\u1bcd\u1bce\u0001\u0000\u0000"+
		"\u0000\u1bce\u1bd9\u0001\u0000\u0000\u0000\u1bcf\u1bd0\u0005c\u0000\u0000"+
		"\u1bd0\u1bd1\u0005\u01d9\u0000\u0000\u1bd1\u1bd2\u0005\u01bf\u0000\u0000"+
		"\u1bd2\u1bda\u0005\u0154\u0000\u0000\u1bd3\u1bd4\u0005\u0250\u0000\u0000"+
		"\u1bd4\u1bd5\u0005\u01bf\u0000\u0000\u1bd5\u1bd6\u0005\u01d9\u0000\u0000"+
		"\u1bd6\u1bd7\u0005\u01bf\u0000\u0000\u1bd7\u1bda\u0005\u0154\u0000\u0000"+
		"\u1bd8\u1bda\u0005\u02c4\u0000\u0000\u1bd9\u1bcf\u0001\u0000\u0000\u0000"+
		"\u1bd9\u1bd3\u0001\u0000\u0000\u0000\u1bd9\u1bd8\u0001\u0000\u0000\u0000"+
		"\u1bd9\u1bda\u0001\u0000\u0000\u0000\u1bda\u1bdc\u0001\u0000\u0000\u0000"+
		"\u1bdb\u1bdd\u0007,\u0000\u0000\u1bdc\u1bdb\u0001\u0000\u0000\u0000\u1bdc"+
		"\u1bdd\u0001\u0000\u0000\u0000\u1bdd\u1be4\u0001\u0000\u0000\u0000\u1bde"+
		"\u1bdf\u0005\u01ef\u0000\u0000\u1bdf\u1be0\u0005\u0380\u0000\u0000\u1be0"+
		"\u1be1\u0005\u038a\u0000\u0000\u1be1\u1be2\u0003\u03cc\u01e6\u0000\u1be2"+
		"\u1be3\u0005\u038b\u0000\u0000\u1be3\u1be5\u0001\u0000\u0000\u0000\u1be4"+
		"\u1bde\u0001\u0000\u0000\u0000\u1be4\u1be5\u0001\u0000\u0000\u0000\u1be5"+
		"\u1bec\u0001\u0000\u0000\u0000\u1be6\u1be7\u0005\u0267\u0000\u0000\u1be7"+
		"\u1bea\u0005\u0380\u0000\u0000\u1be8\u1beb\u0003\u03ca\u01e5\u0000\u1be9"+
		"\u1beb\u0005\u0379\u0000\u0000\u1bea\u1be8\u0001\u0000\u0000\u0000\u1bea"+
		"\u1be9\u0001\u0000\u0000\u0000\u1beb\u1bed\u0001\u0000\u0000\u0000\u1bec"+
		"\u1be6\u0001\u0000\u0000\u0000\u1bec\u1bed\u0001\u0000\u0000\u0000\u1bed"+
		"\u1bf4\u0001\u0000\u0000\u0000\u1bee\u1bef\u0005\u0148\u0000\u0000\u1bef"+
		"\u1bf0\u0005\u0380\u0000\u0000\u1bf0\u1bf1\u0005\u038a\u0000\u0000\u1bf1"+
		"\u1bf2\u0003\u03cc\u01e6\u0000\u1bf2\u1bf3\u0005\u038b\u0000\u0000\u1bf3"+
		"\u1bf5\u0001\u0000\u0000\u0000\u1bf4\u1bee\u0001\u0000\u0000\u0000\u1bf4"+
		"\u1bf5\u0001\u0000\u0000\u0000\u1bf5\u1bfc\u0001\u0000\u0000\u0000\u1bf6"+
		"\u1bf7\u0005\u01ef\u0000\u0000\u1bf7\u1bf8\u0005\u0380\u0000\u0000\u1bf8"+
		"\u1bf9\u0005\u038a\u0000\u0000\u1bf9\u1bfa\u0003\u03cc\u01e6\u0000\u1bfa"+
		"\u1bfb\u0005\u038b\u0000\u0000\u1bfb\u1bfd\u0001\u0000\u0000\u0000\u1bfc"+
		"\u1bf6\u0001\u0000\u0000\u0000\u1bfc\u1bfd\u0001\u0000\u0000\u0000\u1bfd"+
		"\u1c01\u0001\u0000\u0000\u0000\u1bfe\u1bff\u0005\u0132\u0000\u0000\u1bff"+
		"\u1c00\u0005\u0380\u0000\u0000\u1c00\u1c02\u0003\u03ca\u01e5\u0000\u1c01"+
		"\u1bfe\u0001\u0000\u0000\u0000\u1c01\u1c02\u0001\u0000\u0000\u0000\u1c02"+
		"\u1c04\u0001\u0000\u0000\u0000\u1c03\u1c05\u0003\u02f2\u0179\u0000\u1c04"+
		"\u1c03\u0001\u0000\u0000\u0000\u1c04\u1c05\u0001\u0000\u0000\u0000\u1c05"+
		"\u1c06\u0001\u0000\u0000\u0000\u1c06\u1c07\u0005+\u0000\u0000\u1c07\u1c08"+
		"\u0003\u0192\u00c9\u0000\u1c08\u1c4b\u0001\u0000\u0000\u0000\u1c09\u1c0b"+
		"\u0005\u0097\u0000\u0000\u1c0a\u1c0c\u0003\u02fc\u017e\u0000\u1c0b\u1c0a"+
		"\u0001\u0000\u0000\u0000\u1c0b\u1c0c\u0001\u0000\u0000\u0000\u1c0c\u1c0e"+
		"\u0001\u0000\u0000\u0000\u1c0d\u1c0f\u0005\u0283\u0000\u0000\u1c0e\u1c0d"+
		"\u0001\u0000\u0000\u0000\u1c0e\u1c0f\u0001\u0000\u0000\u0000\u1c0f\u1c10"+
		"\u0001\u0000\u0000\u0000\u1c10\u1c11\u0005\u0119\u0000\u0000\u1c11\u1c12"+
		"\u0003\u03ea\u01f5\u0000\u1c12\u1c1b\u0005\u038a\u0000\u0000\u1c13\u1c18"+
		"\u0003\u018a\u00c5\u0000\u1c14\u1c15\u0005\u0390\u0000\u0000\u1c15\u1c17"+
		"\u0003\u018a\u00c5\u0000\u1c16\u1c14\u0001\u0000\u0000\u0000\u1c17\u1c1a"+
		"\u0001\u0000\u0000\u0000\u1c18\u1c16\u0001\u0000\u0000\u0000\u1c18\u1c19"+
		"\u0001\u0000\u0000\u0000\u1c19\u1c1c\u0001\u0000\u0000\u0000\u1c1a\u1c18"+
		"\u0001\u0000\u0000\u0000\u1c1b\u1c13\u0001\u0000\u0000\u0000\u1c1b\u1c1c"+
		"\u0001\u0000\u0000\u0000\u1c1c\u1c1d\u0001\u0000\u0000\u0000\u1c1d\u1c1e"+
		"\u0005\u038b\u0000\u0000\u1c1e\u1c2d\u0005\u0250\u0000\u0000\u1c1f\u1c2e"+
		"\u0003\u040a\u0205\u0000\u1c20\u1c21\u0005\u02d4\u0000\u0000\u1c21\u1c2a"+
		"\u0005\u038a\u0000\u0000\u1c22\u1c27\u0003\u018e\u00c7\u0000\u1c23\u1c24"+
		"\u0005\u0390\u0000\u0000\u1c24\u1c26\u0003\u018e\u00c7\u0000\u1c25\u1c23"+
		"\u0001\u0000\u0000\u0000\u1c26\u1c29\u0001\u0000\u0000\u0000\u1c27\u1c25"+
		"\u0001\u0000\u0000\u0000\u1c27\u1c28\u0001\u0000\u0000\u0000\u1c28\u1c2b"+
		"\u0001\u0000\u0000\u0000\u1c29\u1c27\u0001\u0000\u0000\u0000\u1c2a\u1c22"+
		"\u0001\u0000\u0000\u0000\u1c2a\u1c2b\u0001\u0000\u0000\u0000\u1c2b\u1c2c"+
		"\u0001\u0000\u0000\u0000\u1c2c\u1c2e\u0005\u038b\u0000\u0000\u1c2d\u1c1f"+
		"\u0001\u0000\u0000\u0000\u1c2d\u1c20\u0001\u0000\u0000\u0000\u1c2e\u1c30"+
		"\u0001\u0000\u0000\u0000\u1c2f\u1c31\u0003\u04b0\u0258\u0000\u1c30\u1c2f"+
		"\u0001\u0000\u0000\u0000\u1c30\u1c31\u0001\u0000\u0000\u0000\u1c31\u1c3c"+
		"\u0001\u0000\u0000\u0000\u1c32\u1c33\u0005c\u0000\u0000\u1c33\u1c34\u0005"+
		"\u01d9\u0000\u0000\u1c34\u1c35\u0005\u01bf\u0000\u0000\u1c35\u1c3d\u0005"+
		"\u0154\u0000\u0000\u1c36\u1c37\u0005\u0250\u0000\u0000\u1c37\u1c38\u0005"+
		"\u01bf\u0000\u0000\u1c38\u1c39\u0005\u01d9\u0000\u0000\u1c39\u1c3a\u0005"+
		"\u01bf\u0000\u0000\u1c3a\u1c3d\u0005\u0154\u0000\u0000\u1c3b\u1c3d\u0005"+
		"\u02c4\u0000\u0000\u1c3c\u1c32\u0001\u0000\u0000\u0000\u1c3c\u1c36\u0001"+
		"\u0000\u0000\u0000\u1c3c\u1c3b\u0001\u0000\u0000\u0000\u1c3c\u1c3d\u0001"+
		"\u0000\u0000\u0000\u1c3d\u1c3f\u0001\u0000\u0000\u0000\u1c3e\u1c40\u0007"+
		",\u0000\u0000\u1c3f\u1c3e\u0001\u0000\u0000\u0000\u1c3f\u1c40\u0001\u0000"+
		"\u0000\u0000\u1c40\u1c42\u0001\u0000\u0000\u0000\u1c41\u1c43\u0005\u0197"+
		"\u0000\u0000\u1c42\u1c41\u0001\u0000\u0000\u0000\u1c42\u1c43\u0001\u0000"+
		"\u0000\u0000\u1c43\u1c45\u0001\u0000\u0000\u0000\u1c44\u1c46\u0003\u02f2"+
		"\u0179\u0000\u1c45\u1c44\u0001\u0000\u0000\u0000\u1c45\u1c46\u0001\u0000"+
		"\u0000\u0000\u1c46\u1c47\u0001\u0000\u0000\u0000\u1c47\u1c48\u0005+\u0000"+
		"\u0000\u1c48\u1c49\u0003\u0192\u00c9\u0000\u1c49\u1c4b\u0001\u0000\u0000"+
		"\u0000\u1c4a\u1b9f\u0001\u0000\u0000\u0000\u1c4a\u1c09\u0001\u0000\u0000"+
		"\u0000\u1c4b\u0195\u0001\u0000\u0000\u0000\u1c4c\u1c4d\u0005\u0097\u0000"+
		"\u0000\u1c4d\u1c4e\u0005\u0187\u0000\u0000\u1c4e\u1c4f\u0005\u0006\u0000"+
		"\u0000\u1c4f\u1c50\u0003\u03d0\u01e8\u0000\u1c50\u1c51\u0005\u000b\u0000"+
		"\u0000\u1c51\u1c52\u0005\u0380\u0000\u0000\u1c52\u1c53\u0003\u03d0\u01e8"+
		"\u0000\u1c53\u1c54\u0005\u0390\u0000\u0000\u1c54\u1c55\u0005\f\u0000\u0000"+
		"\u1c55\u1c56\u0005\u0380\u0000\u0000\u1c56\u1c57\u0003\u03ca\u01e5\u0000"+
		"\u1c57\u1c58\u0005\u0390\u0000\u0000\u1c58\u1c59\u0005\u030c\u0000\u0000"+
		"\u1c59\u1c5a\u0005\u0380\u0000\u0000\u1c5a\u1c5d\u0005\u022e\u0000\u0000"+
		"\u1c5b\u1c5c\u0005\u0390\u0000\u0000\u1c5c\u1c5e\u0003\u02f2\u0179\u0000"+
		"\u1c5d\u1c5b\u0001\u0000\u0000\u0000\u1c5d\u1c5e\u0001\u0000\u0000\u0000"+
		"\u1c5e\u0197\u0001\u0000\u0000\u0000\u1c5f\u1c61\u0005\u0097\u0000\u0000"+
		"\u1c60\u1c62\u0003\u02fc\u017e\u0000\u1c61\u1c60\u0001\u0000\u0000\u0000"+
		"\u1c61\u1c62\u0001\u0000\u0000\u0000\u1c62\u1c63\u0001\u0000\u0000\u0000"+
		"\u1c63\u1c64\u0005\u0188\u0000\u0000\u1c64\u1c66\u0005\u020f\u0000\u0000"+
		"\u1c65\u1c67\u0003\u02fa\u017d\u0000\u1c66\u1c65\u0001\u0000\u0000\u0000"+
		"\u1c66\u1c67\u0001\u0000\u0000\u0000\u1c67\u1c68\u0001\u0000\u0000\u0000"+
		"\u1c68\u1c69\u0003\u03ea\u01f5\u0000\u1c69\u1c6a\u0005+\u0000\u0000\u1c6a"+
		"\u1c6b\u0005\u038a\u0000\u0000\u1c6b\u1c6c\u0003\u03c2\u01e1\u0000\u1c6c"+
		"\u1c71\u0003\u03c0\u01e0\u0000\u1c6d\u1c6e\u0005\u0390\u0000\u0000\u1c6e"+
		"\u1c6f\u0003\u03c2\u01e1\u0000\u1c6f\u1c70\u0003\u03c0\u01e0\u0000\u1c70"+
		"\u1c72\u0001\u0000\u0000\u0000\u1c71\u1c6d\u0001\u0000\u0000\u0000\u1c71"+
		"\u1c72\u0001\u0000\u0000\u0000\u1c72\u1c73\u0001\u0000\u0000\u0000\u1c73"+
		"\u1c74\u0005\u038b\u0000\u0000\u1c74\u1c75\u0005\u0250\u0000\u0000\u1c75"+
		"\u1c76\u0003\u03c0\u01e0\u0000\u1c76\u1c77\u0005\u037c\u0000\u0000\u1c77"+
		"\u1c79\u0003\u03f6\u01fb\u0000\u1c78\u1c7a\u0003\u02f2\u0179\u0000\u1c79"+
		"\u1c78\u0001\u0000\u0000\u0000\u1c79\u1c7a\u0001\u0000\u0000\u0000\u1c7a"+
		"\u0199\u0001\u0000\u0000\u0000\u1c7b\u1c7c\u0003\u03ea\u01f5\u0000\u1c7c"+
		"\u1c7d\u0005\u0380\u0000\u0000\u1c7d\u1c7e\u0003\u03ca\u01e5\u0000\u1c7e"+
		"\u019b\u0001\u0000\u0000\u0000\u1c7f\u1c80\u0005\u038a\u0000\u0000\u1c80"+
		"\u1c81\u0003\u03e6\u01f3\u0000\u1c81\u1c82\u0005\u038b\u0000\u0000\u1c82"+
		"\u019d\u0001\u0000\u0000\u0000\u1c83\u1c85\u0005\u0097\u0000\u0000\u1c84"+
		"\u1c86\u0003\u02fc\u017e\u0000\u1c85\u1c84\u0001\u0000\u0000\u0000\u1c85"+
		"\u1c86\u0001\u0000\u0000\u0000\u1c86\u1c88\u0001\u0000\u0000\u0000\u1c87"+
		"\u1c89\u0005\u0283\u0000\u0000\u1c88\u1c87\u0001\u0000\u0000\u0000\u1c88"+
		"\u1c89\u0001\u0000\u0000\u0000\u1c89\u1c8a\u0001\u0000\u0000\u0000\u1c8a"+
		"\u1c8b\u0005\u018f\u0000\u0000\u1c8b\u1c8d\u0005\u0329\u0000\u0000\u1c8c"+
		"\u1c8e\u0003\u02fa\u017d\u0000\u1c8d\u1c8c\u0001\u0000\u0000\u0000\u1c8d"+
		"\u1c8e\u0001\u0000\u0000\u0000\u1c8e\u1c8f\u0001\u0000\u0000\u0000\u1c8f"+
		"\u1c94\u0003\u03ea\u01f5\u0000\u1c90\u1c91\u0005\u038a\u0000\u0000\u1c91"+
		"\u1c92\u0003\u03e8\u01f4\u0000\u1c92\u1c93\u0005\u038b\u0000\u0000\u1c93"+
		"\u1c95\u0001\u0000\u0000\u0000\u1c94\u1c90\u0001\u0000\u0000\u0000\u1c94"+
		"\u1c95\u0001\u0000\u0000\u0000\u1c95\u1c99\u0001\u0000\u0000\u0000\u1c96"+
		"\u1c98\u0003\u0282\u0141\u0000\u1c97\u1c96\u0001\u0000\u0000\u0000\u1c98"+
		"\u1c9b\u0001\u0000\u0000\u0000\u1c99\u1c97\u0001\u0000\u0000\u0000\u1c99"+
		"\u1c9a\u0001\u0000\u0000\u0000\u1c9a\u1c9d\u0001\u0000\u0000\u0000\u1c9b"+
		"\u1c99\u0001\u0000\u0000\u0000\u1c9c\u1c9e\u0003\u023a\u011d\u0000\u1c9d"+
		"\u1c9c\u0001\u0000\u0000\u0000\u1c9d\u1c9e\u0001\u0000\u0000\u0000\u1c9e"+
		"\u1ca0\u0001\u0000\u0000\u0000\u1c9f\u1ca1\u0003\u0238\u011c\u0000\u1ca0"+
		"\u1c9f\u0001\u0000\u0000\u0000\u1ca0\u1ca1\u0001\u0000\u0000\u0000\u1ca1"+
		"\u1ca3\u0001\u0000\u0000\u0000\u1ca2\u1ca4\u0003\u0228\u0114\u0000\u1ca3"+
		"\u1ca2\u0001\u0000\u0000\u0000\u1ca3\u1ca4\u0001\u0000\u0000\u0000\u1ca4"+
		"\u1ca6\u0001\u0000\u0000\u0000\u1ca5\u1ca7\u0003\u02f2\u0179\u0000\u1ca6"+
		"\u1ca5\u0001\u0000\u0000\u0000\u1ca6\u1ca7\u0001\u0000\u0000\u0000\u1ca7"+
		"\u1ca9\u0001\u0000\u0000\u0000\u1ca8\u1caa\u0003\u023c\u011e\u0000\u1ca9"+
		"\u1ca8\u0001\u0000\u0000\u0000\u1ca9\u1caa\u0001\u0000\u0000\u0000\u1caa"+
		"\u1cab\u0001\u0000\u0000\u0000\u1cab\u1cac\u0005+\u0000\u0000\u1cac\u1cad"+
		"\u0003\u0434\u021a\u0000\u1cad\u019f\u0001\u0000\u0000\u0000\u1cae\u1cb0"+
		"\u0005\u0097\u0000\u0000\u1caf\u1cb1\u0003\u02fc\u017e\u0000\u1cb0\u1caf"+
		"\u0001\u0000\u0000\u0000\u1cb0\u1cb1\u0001\u0000\u0000\u0000\u1cb1\u1cb2"+
		"\u0001\u0000\u0000\u0000\u1cb2\u1cb3\u0005\u01ab\u0000\u0000\u1cb3\u1cb4"+
		"\u0005\u020f\u0000\u0000\u1cb4\u1cb5\u0003\u03d0\u01e8\u0000\u1cb5\u1cb6"+
		"\u0005\u0015\u0000\u0000\u1cb6\u1cb7\u0005\u0380\u0000\u0000\u1cb7\u1cb9"+
		"\u0005\u038a\u0000\u0000\u1cb8\u1cba\u0003\u03cc\u01e6\u0000\u1cb9\u1cb8"+
		"\u0001\u0000\u0000\u0000\u1cb9\u1cba\u0001\u0000\u0000\u0000\u1cba\u1cbb"+
		"\u0001\u0000\u0000\u0000\u1cbb\u1cc3\u0005\u038b\u0000\u0000\u1cbc\u1cbd"+
		"\u0005Z\u0000\u0000\u1cbd\u1cbe\u0005\u0380\u0000\u0000\u1cbe\u1cc0\u0005"+
		"\u038a\u0000\u0000\u1cbf\u1cc1\u0003\u03cc\u01e6\u0000\u1cc0\u1cbf\u0001"+
		"\u0000\u0000\u0000\u1cc0\u1cc1\u0001\u0000\u0000\u0000\u1cc1\u1cc2\u0001"+
		"\u0000\u0000\u0000\u1cc2\u1cc4\u0005\u038b\u0000\u0000\u1cc3\u1cbc\u0001"+
		"\u0000\u0000\u0000\u1cc3\u1cc4\u0001\u0000\u0000\u0000\u1cc4\u1cc6\u0001"+
		"\u0000\u0000\u0000\u1cc5\u1cc7\u0003\u02f2\u0179\u0000\u1cc6\u1cc5\u0001"+
		"\u0000\u0000\u0000\u1cc6\u1cc7\u0001\u0000\u0000\u0000\u1cc7\u01a1\u0001"+
		"\u0000\u0000\u0000\u1cc8\u1cc9\u0005\u01b8\u0000\u0000\u1cc9\u1cca\u0005"+
		"\u0380\u0000\u0000\u1cca\u1ccb\u0005\u011c\u0000\u0000\u1ccb\u1ccc\u0005"+
		"\u011d\u0000\u0000\u1ccc\u1ccd\u0005\u0380\u0000\u0000\u1ccd\u1cd9\u0003"+
		"\u03ca\u01e5\u0000\u1cce\u1ccf\u0005\u01b8\u0000\u0000\u1ccf\u1cd0\u0005"+
		"\u0380\u0000\u0000\u1cd0\u1cd1\u0005J\u0000\u0000\u1cd1\u1cd2\u0005N\u0000"+
		"\u0000\u1cd2\u1cd3\u0005\u0380\u0000\u0000\u1cd3\u1cd4\u0003\u03ca\u01e5"+
		"\u0000\u1cd4\u1cd5\u0005O\u0000\u0000\u1cd5\u1cd6\u0005\u0380\u0000\u0000"+
		"\u1cd6\u1cd7\u0003\u03ca\u01e5\u0000\u1cd7\u1cd9\u0001\u0000\u0000\u0000"+
		"\u1cd8\u1cc8\u0001\u0000\u0000\u0000\u1cd8\u1cce\u0001\u0000\u0000\u0000"+
		"\u1cd9\u01a3\u0001\u0000\u0000\u0000\u1cda\u1cdb\u0005\u01b8\u0000\u0000"+
		"\u1cdb\u1cdc\u0005\u0380\u0000\u0000\u1cdc\u1cdd\u0005B\u0000\u0000\u1cdd"+
		"\u1cde\u0005E\u0000\u0000\u1cde\u1cdf\u0005\u0380\u0000\u0000\u1cdf\u1ce0"+
		"\u0003\u03ca\u01e5\u0000\u1ce0\u1ce1\u0005C\u0000\u0000\u1ce1\u1ce2\u0005"+
		"\u0380\u0000\u0000\u1ce2\u1ce3\u0003\u03ca\u01e5\u0000\u1ce3\u1cf5\u0001"+
		"\u0000\u0000\u0000\u1ce4\u1ce5\u0005\u01b8\u0000\u0000\u1ce5\u1ce6\u0005"+
		"\u0380\u0000\u0000\u1ce6\u1ce7\u0005\u011c\u0000\u0000\u1ce7\u1ce8\u0005"+
		"\u011e\u0000\u0000\u1ce8\u1ce9\u0005\u0380\u0000\u0000\u1ce9\u1cf5\u0003"+
		"\u03ca\u01e5\u0000\u1cea\u1ceb\u0005\u01b8\u0000\u0000\u1ceb\u1cec\u0005"+
		"\u0380\u0000\u0000\u1cec\u1ced\u0005J\u0000\u0000\u1ced\u1cee\u0005K\u0000"+
		"\u0000\u1cee\u1cef\u0005\u0380\u0000\u0000\u1cef\u1cf0\u0003\u03ca\u01e5"+
		"\u0000\u1cf0\u1cf1\u0005O\u0000\u0000\u1cf1\u1cf2\u0005\u0380\u0000\u0000"+
		"\u1cf2\u1cf3\u0003\u03ca\u01e5\u0000\u1cf3\u1cf5\u0001\u0000\u0000\u0000"+
		"\u1cf4\u1cda\u0001\u0000\u0000\u0000\u1cf4\u1ce4\u0001\u0000\u0000\u0000"+
		"\u1cf4\u1cea\u0001\u0000\u0000\u0000\u1cf5\u01a5\u0001\u0000\u0000\u0000"+
		"\u1cf6\u1cf8\u0005\u0097\u0000\u0000\u1cf7\u1cf9\u0003\u02fc\u017e\u0000"+
		"\u1cf8\u1cf7\u0001\u0000\u0000\u0000\u1cf8\u1cf9\u0001\u0000\u0000\u0000"+
		"\u1cf9\u1cfa\u0001\u0000\u0000\u0000\u1cfa\u1cfb\u0005\u01b6\u0000\u0000"+
		"\u1cfb\u1cfd\u0005\u0158\u0000\u0000\u1cfc\u1cfe\u0003\u02fa\u017d\u0000"+
		"\u1cfd\u1cfc\u0001\u0000\u0000\u0000\u1cfd\u1cfe\u0001\u0000\u0000\u0000"+
		"\u1cfe\u1cff\u0001\u0000\u0000\u0000\u1cff\u1d00\u0003\u03d0\u01e8\u0000"+
		"\u1d00\u1d01\u0005\u00d3\u0000\u0000\u1d01\u1d02\u0005\u0380\u0000\u0000"+
		"\u1d02\u1d03\u0003\u0208\u0104\u0000\u1d03\u1d04\u0005\u030c\u0000\u0000"+
		"\u1d04\u1d05\u0005\u0380\u0000\u0000\u1d05\u1d06\u0005\u0229\u0000\u0000"+
		"\u1d06\u1d08\u0003\u01a2\u00d1\u0000\u1d07\u1d09\u0003\u02f2\u0179\u0000"+
		"\u1d08\u1d07\u0001\u0000\u0000\u0000\u1d08\u1d09\u0001\u0000\u0000\u0000"+
		"\u1d09\u1d22\u0001\u0000\u0000\u0000\u1d0a\u1d0c\u0005\u0097\u0000\u0000"+
		"\u1d0b\u1d0d\u0003\u02fc\u017e\u0000\u1d0c\u1d0b\u0001\u0000\u0000\u0000"+
		"\u1d0c\u1d0d\u0001\u0000\u0000\u0000\u1d0d\u1d0e\u0001\u0000\u0000\u0000"+
		"\u1d0e\u1d0f\u0005\u01b6\u0000\u0000\u1d0f\u1d11\u0005\u0158\u0000\u0000"+
		"\u1d10\u1d12\u0003\u02fa\u017d\u0000\u1d11\u1d10\u0001\u0000\u0000\u0000"+
		"\u1d11\u1d12\u0001\u0000\u0000\u0000\u1d12\u1d13\u0001\u0000\u0000\u0000"+
		"\u1d13\u1d14\u0003\u03d0\u01e8\u0000\u1d14\u1d15\u0005\u00d3\u0000\u0000"+
		"\u1d15\u1d16\u0005\u0380\u0000\u0000\u1d16\u1d17\u0003\u0208\u0104\u0000"+
		"\u1d17\u1d18\u0005\u00c0\u0000\u0000\u1d18\u1d19\u0005\u0380\u0000\u0000"+
		"\u1d19\u1d1a\u0005\u01e8\u0000\u0000\u1d1a\u1d1b\u0005\u030c\u0000\u0000"+
		"\u1d1b\u1d1c\u0005\u0380\u0000\u0000\u1d1c\u1d1d\u0005\u0229\u0000\u0000"+
		"\u1d1d\u1d1f\u0003\u01a4\u00d2\u0000\u1d1e\u1d20\u0003\u02f2\u0179\u0000"+
		"\u1d1f\u1d1e\u0001\u0000\u0000\u0000\u1d1f\u1d20\u0001\u0000\u0000\u0000"+
		"\u1d20\u1d22\u0001\u0000\u0000\u0000\u1d21\u1cf6\u0001\u0000\u0000\u0000"+
		"\u1d21\u1d0a\u0001\u0000\u0000\u0000\u1d22\u01a7\u0001\u0000\u0000\u0000"+
		"\u1d23\u1d25\u0005\u0097\u0000\u0000\u1d24\u1d26\u0003\u02fc\u017e\u0000"+
		"\u1d25\u1d24\u0001\u0000\u0000\u0000\u1d25\u1d26\u0001\u0000\u0000\u0000"+
		"\u1d26\u1d27\u0001\u0000\u0000\u0000\u1d27\u1d29\u0005\u020a\u0000\u0000"+
		"\u1d28\u1d2a\u0003\u02fa\u017d\u0000\u1d29\u1d28\u0001\u0000\u0000\u0000"+
		"\u1d29\u1d2a\u0001\u0000\u0000\u0000\u1d2a\u1d2b\u0001\u0000\u0000\u0000"+
		"\u1d2b\u1d2f\u0003\u03ea\u01f5\u0000\u1d2c\u1d2d\u00058\u0000\u0000\u1d2d"+
		"\u1d2e\u0005\u0380\u0000\u0000\u1d2e\u1d30\u0003\u0208\u0104\u0000\u1d2f"+
		"\u1d2c\u0001\u0000\u0000\u0000\u1d2f\u1d30\u0001\u0000\u0000\u0000\u1d30"+
		"\u1d34\u0001\u0000\u0000\u0000\u1d31\u1d32\u0005\u00e3\u0000\u0000\u1d32"+
		"\u1d33\u0005\u0380\u0000\u0000\u1d33\u1d35\u0003\u03d0\u01e8\u0000\u1d34"+
		"\u1d31\u0001\u0000\u0000\u0000\u1d34\u1d35\u0001\u0000\u0000\u0000\u1d35"+
		"\u1d39\u0001\u0000\u0000\u0000\u1d36\u1d37\u0005D\u0000\u0000\u1d37\u1d38"+
		"\u0005\u0380\u0000\u0000\u1d38\u1d3a\u0003\u03ca\u01e5\u0000\u1d39\u1d36"+
		"\u0001\u0000\u0000\u0000\u1d39\u1d3a\u0001\u0000\u0000\u0000\u1d3a\u1d3e"+
		"\u0001\u0000\u0000\u0000\u1d3b\u1d3c\u0005\u0158\u0000\u0000\u1d3c\u1d3d"+
		"\u0005\u0380\u0000\u0000\u1d3d\u1d3f\u0003\u03ca\u01e5\u0000\u1d3e\u1d3b"+
		"\u0001\u0000\u0000\u0000\u1d3e\u1d3f\u0001\u0000\u0000\u0000\u1d3f\u1d41"+
		"\u0001\u0000\u0000\u0000\u1d40\u1d42\u0003\u02f2\u0179\u0000\u1d41\u1d40"+
		"\u0001\u0000\u0000\u0000\u1d41\u1d42\u0001\u0000\u0000\u0000\u1d42\u1d43"+
		"\u0001\u0000\u0000\u0000\u1d43\u1d44\u0005+\u0000\u0000\u1d44\u1d45\u0003"+
		"*\u0015\u0000\u1d45\u01a9\u0001\u0000\u0000\u0000\u1d46\u1d47\u0007/\u0000"+
		"\u0000\u1d47\u01ab\u0001\u0000\u0000\u0000\u1d48\u1d49\u0005\u00ed\u0000"+
		"\u0000\u1d49\u1d4a\u0005+\u0000\u0000\u1d4a\u1d4b\u0003\u01aa\u00d5\u0000"+
		"\u1d4b\u01ad\u0001\u0000\u0000\u0000\u1d4c\u1d4f\u0003\u03ca\u01e5\u0000"+
		"\u1d4d\u1d4f\u0005\u0376\u0000\u0000\u1d4e\u1d4c\u0001\u0000\u0000\u0000"+
		"\u1d4e\u1d4d\u0001\u0000\u0000\u0000\u1d4f\u01af\u0001\u0000\u0000\u0000"+
		"\u1d50\u1d51\u0005\u01b5\u0000\u0000\u1d51\u1d52\u0005\u01bf\u0000\u0000"+
		"\u1d52\u01b1\u0001\u0000\u0000\u0000\u1d53\u1d55\u0005\u0097\u0000\u0000"+
		"\u1d54\u1d56\u0003\u02fc\u017e\u0000\u1d55\u1d54\u0001\u0000\u0000\u0000"+
		"\u1d55\u1d56\u0001\u0000\u0000\u0000\u1d56\u1d57\u0001\u0000\u0000\u0000"+
		"\u1d57\u1d58\u0005\u021a\u0000\u0000\u1d58\u1d59\u0003\u03ea\u01f5\u0000"+
		"\u1d59\u1d62\u0005\u038a\u0000\u0000\u1d5a\u1d5f\u0003\u018a\u00c5\u0000"+
		"\u1d5b\u1d5c\u0005\u0390\u0000\u0000\u1d5c\u1d5e\u0003\u018a\u00c5\u0000"+
		"\u1d5d\u1d5b\u0001\u0000\u0000\u0000\u1d5e\u1d61\u0001\u0000\u0000\u0000"+
		"\u1d5f\u1d5d\u0001\u0000\u0000\u0000\u1d5f\u1d60\u0001\u0000\u0000\u0000"+
		"\u1d60\u1d63\u0001\u0000\u0000\u0000\u1d61\u1d5f\u0001\u0000\u0000\u0000"+
		"\u1d62\u1d5a\u0001\u0000\u0000\u0000\u1d62\u1d63\u0001\u0000\u0000\u0000"+
		"\u1d63\u1d64\u0001\u0000\u0000\u0000\u1d64\u1d65\u0005\u038b\u0000\u0000"+
		"\u1d65\u1d74\u0005\u0250\u0000\u0000\u1d66\u1d75\u0003\u040a\u0205\u0000"+
		"\u1d67\u1d68\u0005\u02d4\u0000\u0000\u1d68\u1d71\u0005\u038a\u0000\u0000"+
		"\u1d69\u1d6e\u0003\u018e\u00c7\u0000\u1d6a\u1d6b\u0005\u0390\u0000\u0000"+
		"\u1d6b\u1d6d\u0003\u018e\u00c7\u0000\u1d6c\u1d6a\u0001\u0000\u0000\u0000"+
		"\u1d6d\u1d70\u0001\u0000\u0000\u0000\u1d6e\u1d6c\u0001\u0000\u0000\u0000"+
		"\u1d6e\u1d6f\u0001\u0000\u0000\u0000\u1d6f\u1d72\u0001\u0000\u0000\u0000"+
		"\u1d70\u1d6e\u0001\u0000\u0000\u0000\u1d71\u1d69\u0001\u0000\u0000\u0000"+
		"\u1d71\u1d72\u0001\u0000\u0000\u0000\u1d72\u1d73\u0001\u0000\u0000\u0000"+
		"\u1d73\u1d75\u0005\u038b\u0000\u0000\u1d74\u1d66\u0001\u0000\u0000\u0000"+
		"\u1d74\u1d67\u0001\u0000\u0000\u0000\u1d75\u1d77\u0001\u0000\u0000\u0000"+
		"\u1d76\u1d78\u0003\u01b0\u00d8\u0000\u1d77\u1d76\u0001\u0000\u0000\u0000"+
		"\u1d77\u1d78\u0001\u0000\u0000\u0000\u1d78\u1d79\u0001\u0000\u0000\u0000"+
		"\u1d79\u1d7a\u0005\u016c\u0000\u0000\u1d7a\u1d85\u0005\u02aa\u0000\u0000"+
		"\u1d7b\u1d7c\u0005c\u0000\u0000\u1d7c\u1d7d\u0005\u01d9\u0000\u0000\u1d7d"+
		"\u1d7e\u0005\u01bf\u0000\u0000\u1d7e\u1d86\u0005\u0154\u0000\u0000\u1d7f"+
		"\u1d80\u0005\u0250\u0000\u0000\u1d80\u1d81\u0005\u01bf\u0000\u0000\u1d81"+
		"\u1d82\u0005\u01d9\u0000\u0000\u1d82\u1d83\u0005\u01bf\u0000\u0000\u1d83"+
		"\u1d86\u0005\u0154\u0000\u0000\u1d84\u1d86\u0005\u02c4\u0000\u0000\u1d85"+
		"\u1d7b\u0001\u0000\u0000\u0000\u1d85\u1d7f\u0001\u0000\u0000\u0000\u1d85"+
		"\u1d84\u0001\u0000\u0000\u0000\u1d85\u1d86\u0001\u0000\u0000\u0000\u1d86"+
		"\u1d88\u0001\u0000\u0000\u0000\u1d87\u1d89\u0007,\u0000\u0000\u1d88\u1d87"+
		"\u0001\u0000\u0000\u0000\u1d88\u1d89\u0001\u0000\u0000\u0000\u1d89\u1d8b"+
		"\u0001\u0000\u0000\u0000\u1d8a\u1d8c\u0003\u02f2\u0179\u0000\u1d8b\u1d8a"+
		"\u0001\u0000\u0000\u0000\u1d8b\u1d8c\u0001\u0000\u0000\u0000\u1d8c\u1d8e"+
		"\u0001\u0000\u0000\u0000\u1d8d\u1d8f\u0003\u01ac\u00d6\u0000\u1d8e\u1d8d"+
		"\u0001\u0000\u0000\u0000\u1d8e\u1d8f\u0001\u0000\u0000\u0000\u1d8f\u1d90"+
		"\u0001\u0000\u0000\u0000\u1d90\u1d91\u0005+\u0000\u0000\u1d91\u1d92\u0003"+
		"\u01ae\u00d7\u0000\u1d92\u1e0f\u0001\u0000\u0000\u0000\u1d93\u1d95\u0005"+
		"\u0097\u0000\u0000\u1d94\u1d96\u0003\u02fc\u017e\u0000\u1d95\u1d94\u0001"+
		"\u0000\u0000\u0000\u1d95\u1d96\u0001\u0000\u0000\u0000\u1d96\u1d98\u0001"+
		"\u0000\u0000\u0000\u1d97\u1d99\u0005\u0283\u0000\u0000\u1d98\u1d97\u0001"+
		"\u0000\u0000\u0000\u1d98\u1d99\u0001\u0000\u0000\u0000\u1d99\u1d9a\u0001"+
		"\u0000\u0000\u0000\u1d9a\u1d9b\u0005\u021a\u0000\u0000\u1d9b\u1d9c\u0003"+
		"\u03ea\u01f5\u0000\u1d9c\u1da5\u0005\u038a\u0000\u0000\u1d9d\u1da2\u0003"+
		"\u018a\u00c5\u0000\u1d9e\u1d9f\u0005\u0390\u0000\u0000\u1d9f\u1da1\u0003"+
		"\u018a\u00c5\u0000\u1da0\u1d9e\u0001\u0000\u0000\u0000\u1da1\u1da4\u0001"+
		"\u0000\u0000\u0000\u1da2\u1da0\u0001\u0000\u0000\u0000\u1da2\u1da3\u0001"+
		"\u0000\u0000\u0000\u1da3\u1da6\u0001\u0000\u0000\u0000\u1da4\u1da2\u0001"+
		"\u0000\u0000\u0000\u1da5\u1d9d\u0001\u0000\u0000\u0000\u1da5\u1da6\u0001"+
		"\u0000\u0000\u0000\u1da6\u1da7\u0001\u0000\u0000\u0000\u1da7\u1da8\u0005"+
		"\u038b\u0000\u0000\u1da8\u1da9\u0005\u0250\u0000\u0000\u1da9\u1dab\u0003"+
		"\u040a\u0205\u0000\u1daa\u1dac\u0003\u01b0\u00d8\u0000\u1dab\u1daa\u0001"+
		"\u0000\u0000\u0000\u1dab\u1dac\u0001\u0000\u0000\u0000\u1dac\u1dad\u0001"+
		"\u0000\u0000\u0000\u1dad\u1dae\u0005\u016c\u0000\u0000\u1dae\u1db9\u0005"+
		"\u015f\u0000\u0000\u1daf\u1db0\u0005c\u0000\u0000\u1db0\u1db1\u0005\u01d9"+
		"\u0000\u0000\u1db1\u1db2\u0005\u01bf\u0000\u0000\u1db2\u1dba\u0005\u0154"+
		"\u0000\u0000\u1db3\u1db4\u0005\u0250\u0000\u0000\u1db4\u1db5\u0005\u01bf"+
		"\u0000\u0000\u1db5\u1db6\u0005\u01d9\u0000\u0000\u1db6\u1db7\u0005\u01bf"+
		"\u0000\u0000\u1db7\u1dba\u0005\u0154\u0000\u0000\u1db8\u1dba\u0005\u02c4"+
		"\u0000\u0000\u1db9\u1daf\u0001\u0000\u0000\u0000\u1db9\u1db3\u0001\u0000"+
		"\u0000\u0000\u1db9\u1db8\u0001\u0000\u0000\u0000\u1db9\u1dba\u0001\u0000"+
		"\u0000\u0000\u1dba\u1dbc\u0001\u0000\u0000\u0000\u1dbb\u1dbd\u0007,\u0000"+
		"\u0000\u1dbc\u1dbb\u0001\u0000\u0000\u0000\u1dbc\u1dbd\u0001\u0000\u0000"+
		"\u0000\u1dbd\u1dbf\u0001\u0000\u0000\u0000\u1dbe\u1dc0\u0003\u02f2\u0179"+
		"\u0000\u1dbf\u1dbe\u0001\u0000\u0000\u0000\u1dbf\u1dc0\u0001\u0000\u0000"+
		"\u0000\u1dc0\u1dc2\u0001\u0000\u0000\u0000\u1dc1\u1dc3\u0003\u01ac\u00d6"+
		"\u0000\u1dc2\u1dc1\u0001\u0000\u0000\u0000\u1dc2\u1dc3\u0001\u0000\u0000"+
		"\u0000\u1dc3\u1dc4\u0001\u0000\u0000\u0000\u1dc4\u1dc5\u0005+\u0000\u0000"+
		"\u1dc5\u1dc6\u0003\u01ae\u00d7\u0000\u1dc6\u1e0f\u0001\u0000\u0000\u0000"+
		"\u1dc7\u1dc9\u0005\u0097\u0000\u0000\u1dc8\u1dca\u0003\u02fc\u017e\u0000"+
		"\u1dc9\u1dc8\u0001\u0000\u0000\u0000\u1dc9\u1dca\u0001\u0000\u0000\u0000"+
		"\u1dca\u1dcc\u0001\u0000\u0000\u0000\u1dcb\u1dcd\u0005\u0283\u0000\u0000"+
		"\u1dcc\u1dcb\u0001\u0000\u0000\u0000\u1dcc\u1dcd\u0001\u0000\u0000\u0000"+
		"\u1dcd\u1dce\u0001\u0000\u0000\u0000\u1dce\u1dcf\u0005\u021a\u0000\u0000"+
		"\u1dcf\u1dd0\u0003\u03ea\u01f5\u0000\u1dd0\u1dd9\u0005\u038a\u0000\u0000"+
		"\u1dd1\u1dd6\u0003\u018a\u00c5\u0000\u1dd2\u1dd3\u0005\u0390\u0000\u0000"+
		"\u1dd3\u1dd5\u0003\u018a\u00c5\u0000\u1dd4\u1dd2\u0001\u0000\u0000\u0000"+
		"\u1dd5\u1dd8\u0001\u0000\u0000\u0000\u1dd6\u1dd4\u0001\u0000\u0000\u0000"+
		"\u1dd6\u1dd7\u0001\u0000\u0000\u0000\u1dd7\u1dda\u0001\u0000\u0000\u0000"+
		"\u1dd8\u1dd6\u0001\u0000\u0000\u0000\u1dd9\u1dd1\u0001\u0000\u0000\u0000"+
		"\u1dd9\u1dda\u0001\u0000\u0000\u0000\u1dda\u1ddb\u0001\u0000\u0000\u0000"+
		"\u1ddb\u1ddc\u0005\u038b\u0000\u0000\u1ddc\u1dee\u0005\u0250\u0000\u0000"+
		"\u1ddd\u1ddf\u0003\u040a\u0205\u0000\u1dde\u1de0\u0003\u01b0\u00d8\u0000"+
		"\u1ddf\u1dde\u0001\u0000\u0000\u0000\u1ddf\u1de0\u0001\u0000\u0000\u0000"+
		"\u1de0\u1def\u0001\u0000\u0000\u0000\u1de1\u1de2\u0005\u02d4\u0000\u0000"+
		"\u1de2\u1deb\u0005\u038a\u0000\u0000\u1de3\u1de8\u0003\u018e\u00c7\u0000"+
		"\u1de4\u1de5\u0005\u0390\u0000\u0000\u1de5\u1de7\u0003\u018e\u00c7\u0000"+
		"\u1de6\u1de4\u0001\u0000\u0000\u0000\u1de7\u1dea\u0001\u0000\u0000\u0000"+
		"\u1de8\u1de6\u0001\u0000\u0000\u0000\u1de8\u1de9\u0001\u0000\u0000\u0000"+
		"\u1de9\u1dec\u0001\u0000\u0000\u0000\u1dea\u1de8\u0001\u0000\u0000\u0000"+
		"\u1deb\u1de3\u0001\u0000\u0000\u0000\u1deb\u1dec\u0001\u0000\u0000\u0000"+
		"\u1dec\u1ded\u0001\u0000\u0000\u0000\u1ded\u1def\u0005\u038b\u0000\u0000"+
		"\u1dee\u1ddd\u0001\u0000\u0000\u0000\u1dee\u1de1\u0001\u0000\u0000\u0000"+
		"\u1def\u1df0\u0001\u0000\u0000\u0000\u1df0\u1df1\u0005\u016c\u0000\u0000"+
		"\u1df1\u1df2\u0005\u0222\u0000\u0000\u1df2\u1df3\u0005\u0267\u0000\u0000"+
		"\u1df3\u1df4\u0005\u0380\u0000\u0000\u1df4\u1dfb\u0003\u03ca\u01e5\u0000"+
		"\u1df5\u1df6\u0005\u0148\u0000\u0000\u1df6\u1df7\u0005\u0380\u0000\u0000"+
		"\u1df7\u1df8\u0005\u038a\u0000\u0000\u1df8\u1df9\u0003\u03cc\u01e6\u0000"+
		"\u1df9\u1dfa\u0005\u038b\u0000\u0000\u1dfa\u1dfc\u0001\u0000\u0000\u0000"+
		"\u1dfb\u1df5\u0001\u0000\u0000\u0000\u1dfb\u1dfc\u0001\u0000\u0000\u0000"+
		"\u1dfc\u1dfd\u0001\u0000\u0000\u0000\u1dfd\u1dfe\u0005\u01ef\u0000\u0000"+
		"\u1dfe\u1dff\u0005\u0380\u0000\u0000\u1dff\u1e00\u0005\u038a\u0000\u0000"+
		"\u1e00\u1e01\u0003\u03cc\u01e6\u0000\u1e01\u1e02\u0005\u038b\u0000\u0000"+
		"\u1e02\u1e03\u0005\u0132\u0000\u0000\u1e03\u1e04\u0005\u0380\u0000\u0000"+
		"\u1e04\u1e06\u0003\u03ca\u01e5\u0000\u1e05\u1e07\u0003\u02f2\u0179\u0000"+
		"\u1e06\u1e05\u0001\u0000\u0000\u0000\u1e06\u1e07\u0001\u0000\u0000\u0000"+
		"\u1e07\u1e09\u0001\u0000\u0000\u0000\u1e08\u1e0a\u0003\u01ac\u00d6\u0000"+
		"\u1e09\u1e08\u0001\u0000\u0000\u0000\u1e09\u1e0a\u0001\u0000\u0000\u0000"+
		"\u1e0a\u1e0b\u0001\u0000\u0000\u0000\u1e0b\u1e0c\u0005+\u0000\u0000\u1e0c"+
		"\u1e0d\u0003\u01ae\u00d7\u0000\u1e0d\u1e0f\u0001\u0000\u0000\u0000\u1e0e"+
		"\u1d53\u0001\u0000\u0000\u0000\u1e0e\u1d93\u0001\u0000\u0000\u0000\u1e0e"+
		"\u1dc7\u0001\u0000\u0000\u0000\u1e0f\u01b3\u0001\u0000\u0000\u0000\u1e10"+
		"\u1e11\u0005\u0097\u0000\u0000\u1e11\u1e12\u0005\u0241\u0000\u0000\u1e12"+
		"\u1e14\u0005\u012c\u0000\u0000\u1e13\u1e15\u0003\u02fa\u017d\u0000\u1e14"+
		"\u1e13\u0001\u0000\u0000\u0000\u1e14\u1e15\u0001\u0000\u0000\u0000\u1e15"+
		"\u1e16\u0001\u0000\u0000\u0000\u1e16\u1e17\u0003\u03d0\u01e8\u0000\u1e17"+
		"\u1e18\u0005\u01d1\u0000\u0000\u1e18\u1e19\u0005\u0380\u0000\u0000\u1e19"+
		"\u1e1e\u0003\u03ba\u01dd\u0000\u1e1a\u1e1b\u0005\u0390\u0000\u0000\u1e1b"+
		"\u1e1d\u0003\u03ba\u01dd\u0000\u1e1c\u1e1a\u0001\u0000\u0000\u0000\u1e1d"+
		"\u1e20\u0001\u0000\u0000\u0000\u1e1e\u1e1c\u0001\u0000\u0000\u0000\u1e1e"+
		"\u1e1f\u0001\u0000\u0000\u0000\u1e1f\u1e2b\u0001\u0000\u0000\u0000\u1e20"+
		"\u1e1e\u0001\u0000\u0000\u0000\u1e21\u1e22\u0005\u0013\u0000\u0000\u1e22"+
		"\u1e23\u0005\u0380\u0000\u0000\u1e23\u1e28\u0003\u03d0\u01e8\u0000\u1e24"+
		"\u1e25\u0005\u0390\u0000\u0000\u1e25\u1e27\u0003\u03d0\u01e8\u0000\u1e26"+
		"\u1e24\u0001\u0000\u0000\u0000\u1e27\u1e2a\u0001\u0000\u0000\u0000\u1e28"+
		"\u1e26\u0001\u0000\u0000\u0000\u1e28\u1e29\u0001\u0000\u0000\u0000\u1e29"+
		"\u1e2c\u0001\u0000\u0000\u0000\u1e2a\u1e28\u0001\u0000\u0000\u0000\u1e2b"+
		"\u1e21\u0001\u0000\u0000\u0000\u1e2b\u1e2c\u0001\u0000\u0000\u0000\u1e2c"+
		"\u1e37\u0001\u0000\u0000\u0000\u1e2d\u1e2e\u0005\u0016\u0000\u0000\u1e2e"+
		"\u1e2f\u0005\u0380\u0000\u0000\u1e2f\u1e34\u0003\u03d0\u01e8\u0000\u1e30"+
		"\u1e31\u0005\u0390\u0000\u0000\u1e31\u1e33\u0003\u03d0\u01e8\u0000\u1e32"+
		"\u1e30\u0001\u0000\u0000\u0000\u1e33\u1e36\u0001\u0000\u0000\u0000\u1e34"+
		"\u1e32\u0001\u0000\u0000\u0000\u1e34\u1e35\u0001\u0000\u0000\u0000\u1e35"+
		"\u1e38\u0001\u0000\u0000\u0000\u1e36\u1e34\u0001\u0000\u0000\u0000\u1e37"+
		"\u1e2d\u0001\u0000\u0000\u0000\u1e37\u1e38\u0001\u0000\u0000\u0000\u1e38"+
		"\u1e43\u0001\u0000\u0000\u0000\u1e39\u1e3a\u0005\u0014\u0000\u0000\u1e3a"+
		"\u1e3b\u0005\u0380\u0000\u0000\u1e3b\u1e40\u0003\u0182\u00c1\u0000\u1e3c"+
		"\u1e3d\u0005\u0390\u0000\u0000\u1e3d\u1e3f\u0003\u0182\u00c1\u0000\u1e3e"+
		"\u1e3c\u0001\u0000\u0000\u0000\u1e3f\u1e42\u0001\u0000\u0000\u0000\u1e40"+
		"\u1e3e\u0001\u0000\u0000\u0000\u1e40\u1e41\u0001\u0000\u0000\u0000\u1e41"+
		"\u1e44\u0001\u0000\u0000\u0000\u1e42\u1e40\u0001\u0000\u0000\u0000\u1e43"+
		"\u1e39\u0001\u0000\u0000\u0000\u1e43\u1e44\u0001\u0000\u0000\u0000\u1e44"+
		"\u1e45\u0001\u0000\u0000\u0000\u1e45\u1e46\u0005\u0012\u0000\u0000\u1e46"+
		"\u1e47\u0005\u0380\u0000\u0000\u1e47\u1e4c\u0003\u0180\u00c0\u0000\u1e48"+
		"\u1e49\u0005\u0390\u0000\u0000\u1e49\u1e4b\u0003\u0180\u00c0\u0000\u1e4a"+
		"\u1e48\u0001\u0000\u0000\u0000\u1e4b\u1e4e\u0001\u0000\u0000\u0000\u1e4c"+
		"\u1e4a\u0001\u0000\u0000\u0000\u1e4c\u1e4d\u0001\u0000\u0000\u0000\u1e4d"+
		"\u1e52\u0001\u0000\u0000\u0000\u1e4e\u1e4c\u0001\u0000\u0000\u0000\u1e4f"+
		"\u1e50\u0005\u0140\u0000\u0000\u1e50\u1e51\u0005\u00cd\u0000\u0000\u1e51"+
		"\u1e53\u0005q\u0000\u0000\u1e52\u1e4f\u0001\u0000\u0000\u0000\u1e52\u1e53"+
		"\u0001\u0000\u0000\u0000\u1e53\u1e57\u0001\u0000\u0000\u0000\u1e54\u1e55"+
		"\u0005\u0242\u0000\u0000\u1e55\u1e56\u0005\u0380\u0000\u0000\u1e56\u1e58"+
		"\u0003\u03ca\u01e5\u0000\u1e57\u1e54\u0001\u0000\u0000\u0000\u1e57\u1e58"+
		"\u0001\u0000\u0000\u0000\u1e58\u1e6a\u0001\u0000\u0000\u0000\u1e59\u1e5a"+
		"\u0005\u0097\u0000\u0000\u1e5a\u1e5b\u0005\u0241\u0000\u0000\u1e5b\u1e5d"+
		"\u0005\u012c\u0000\u0000\u1e5c\u1e5e\u0003\u02fa\u017d\u0000\u1e5d\u1e5c"+
		"\u0001\u0000\u0000\u0000\u1e5d\u1e5e\u0001\u0000\u0000\u0000\u1e5e\u1e5f"+
		"\u0001\u0000\u0000\u0000\u1e5f\u1e60\u0003\u03d0\u01e8\u0000\u1e60\u1e61"+
		"\u0005+\u0000\u0000\u1e61\u1e62\u0005\u0240\u0000\u0000\u1e62\u1e63\u0005"+
		"\u01d2\u0000\u0000\u1e63\u1e64\u0003\u03d0\u01e8\u0000\u1e64\u1e65\u0005"+
		"\u0386\u0000\u0000\u1e65\u1e66\u0003\u03d0\u01e8\u0000\u1e66\u1e67\u0005"+
		"\u0386\u0000\u0000\u1e67\u1e68\u0003\u03d0\u01e8\u0000\u1e68\u1e6a\u0001"+
		"\u0000\u0000\u0000\u1e69\u1e10\u0001\u0000\u0000\u0000\u1e69\u1e59\u0001"+
		"\u0000\u0000\u0000\u1e6a\u01b5\u0001\u0000\u0000\u0000\u1e6b\u1e6d\u0005"+
		"\u0097\u0000\u0000\u1e6c\u1e6e\u0003\u02fc\u017e\u0000\u1e6d\u1e6c\u0001"+
		"\u0000\u0000\u0000\u1e6d\u1e6e\u0001\u0000\u0000\u0000\u1e6e\u1e6f\u0001"+
		"\u0000\u0000\u0000\u1e6f\u1e70\u0005\u0247\u0000\u0000\u1e70\u1e71\u0005"+
		"\u01a3\u0000\u0000\u1e71\u1e72\u0003\u03d0\u01e8\u0000\u1e72\u1e74\u0005"+
		"\u0336\u0000\u0000\u1e73\u1e75\u0003\u00d0h\u0000\u1e74\u1e73\u0001\u0000"+
		"\u0000\u0000\u1e74\u1e75\u0001\u0000\u0000\u0000\u1e75\u1e77\u0001\u0000"+
		"\u0000\u0000\u1e76\u1e78\u0003\u00d2i\u0000\u1e77\u1e76\u0001\u0000\u0000"+
		"\u0000\u1e77\u1e78\u0001\u0000\u0000\u0000\u1e78\u1e7f\u0001\u0000\u0000"+
		"\u0000\u1e79\u1e7a\u0005\u02b4\u0000\u0000\u1e7a\u1e7d\u0005\u0380\u0000"+
		"\u0000\u1e7b\u1e7e\u0003\u03ca\u01e5\u0000\u1e7c\u1e7e\u0005\u0144\u0000"+
		"\u0000\u1e7d\u1e7b\u0001\u0000\u0000\u0000\u1e7d\u1e7c\u0001\u0000\u0000"+
		"\u0000\u1e7e\u1e80\u0001\u0000\u0000\u0000\u1e7f\u1e79\u0001\u0000\u0000"+
		"\u0000\u1e7f\u1e80\u0001\u0000\u0000\u0000\u1e80\u1e84\u0001\u0000\u0000"+
		"\u0000\u1e81\u1e82\u0005\u00dc\u0000\u0000\u1e82\u1e83\u0005\u0380\u0000"+
		"\u0000\u1e83\u1e85\u0003\u03ca\u01e5\u0000\u1e84\u1e81\u0001\u0000\u0000"+
		"\u0000\u1e84\u1e85\u0001\u0000\u0000\u0000\u1e85\u1e87\u0001\u0000\u0000"+
		"\u0000\u1e86\u1e88\u0003\u00d4j\u0000\u1e87\u1e86\u0001\u0000\u0000\u0000"+
		"\u1e87\u1e88\u0001\u0000\u0000\u0000\u1e88\u1e8f\u0001\u0000\u0000\u0000"+
		"\u1e89\u1e8b\u0005\u0303\u0000\u0000\u1e8a\u1e8c\u0003\u0290\u0148\u0000"+
		"\u1e8b\u1e8a\u0001\u0000\u0000\u0000\u1e8c\u1e8d\u0001\u0000\u0000\u0000"+
		"\u1e8d\u1e8b\u0001\u0000\u0000\u0000\u1e8d\u1e8e\u0001\u0000\u0000\u0000"+
		"\u1e8e\u1e90\u0001\u0000\u0000\u0000\u1e8f\u1e89\u0001\u0000\u0000\u0000"+
		"\u1e8f\u1e90\u0001\u0000\u0000\u0000\u1e90\u01b7\u0001\u0000\u0000\u0000"+
		"\u1e91\u1e93\u0005\u0097\u0000\u0000\u1e92\u1e94\u0003\u02fc\u017e\u0000"+
		"\u1e93\u1e92\u0001\u0000\u0000\u0000\u1e93\u1e94\u0001\u0000\u0000\u0000"+
		"\u1e94\u1e95\u0001\u0000\u0000\u0000\u1e95\u1e97\u0005\u0259\u0000\u0000"+
		"\u1e96\u1e98\u0003\u02fa\u017d\u0000\u1e97\u1e96\u0001\u0000\u0000\u0000"+
		"\u1e97\u1e98\u0001\u0000\u0000\u0000\u1e98\u1e99\u0001\u0000\u0000\u0000"+
		"\u1e99\u1e9b\u0003\u03d0\u01e8\u0000\u1e9a\u1e9c\u0003\u0238\u011c\u0000"+
		"\u1e9b\u1e9a\u0001\u0000\u0000\u0000\u1e9b\u1e9c\u0001\u0000\u0000\u0000"+
		"\u1e9c\u1e9e\u0001\u0000\u0000\u0000\u1e9d\u1e9f\u0003\u02f2\u0179\u0000"+
		"\u1e9e\u1e9d\u0001\u0000\u0000\u0000\u1e9e\u1e9f\u0001\u0000\u0000\u0000"+
		"\u1e9f\u01b9\u0001\u0000\u0000\u0000\u1ea0\u1ea2\u0005\u0097\u0000\u0000"+
		"\u1ea1\u1ea3\u0003\u02fc\u017e\u0000\u1ea2\u1ea1\u0001\u0000\u0000\u0000"+
		"\u1ea2\u1ea3\u0001\u0000\u0000\u0000\u1ea3\u1ea4\u0001\u0000\u0000\u0000"+
		"\u1ea4\u1ea5\u0005\u025f\u0000\u0000\u1ea5\u1ea6\u0005\u0005\u0000\u0000"+
		"\u1ea6\u1ea8\u0005\u020f\u0000\u0000\u1ea7\u1ea9\u0003\u02fa\u017d\u0000"+
		"\u1ea8\u1ea7\u0001\u0000\u0000\u0000\u1ea8\u1ea9\u0001\u0000\u0000\u0000"+
		"\u1ea9\u1eaa\u0001\u0000\u0000\u0000\u1eaa\u1eab\u0003\u03d0\u01e8\u0000"+
		"\u1eab\u1eac\u0005+\u0000\u0000\u1eac\u1ead\u0005\u038a\u0000\u0000\u1ead"+
		"\u1eb2\u0003\u018a\u00c5\u0000\u1eae\u1eaf\u0005\u0390\u0000\u0000\u1eaf"+
		"\u1eb1\u0003\u018a\u00c5\u0000\u1eb0\u1eae\u0001\u0000\u0000\u0000\u1eb1"+
		"\u1eb4\u0001\u0000\u0000\u0000\u1eb2\u1eb0\u0001\u0000\u0000\u0000\u1eb2"+
		"\u1eb3\u0001\u0000\u0000\u0000\u1eb3\u1eb5\u0001\u0000\u0000\u0000\u1eb4"+
		"\u1eb2\u0001\u0000\u0000\u0000\u1eb5\u1eb6\u0005\u038b\u0000\u0000\u1eb6"+
		"\u1eb7\u0005\u0250\u0000\u0000\u1eb7\u1eb8\u0005\u034a\u0000\u0000\u1eb8"+
		"\u1eb9\u0005\u037c\u0000\u0000\u1eb9\u1ebb\u0003\u03f6\u01fb\u0000\u1eba"+
		"\u1ebc\u0003\u02f2\u0179\u0000\u1ebb\u1eba\u0001\u0000\u0000\u0000\u1ebb"+
		"\u1ebc\u0001\u0000\u0000\u0000\u1ebc\u01bb\u0001\u0000\u0000\u0000\u1ebd"+
		"\u1ebf\u0005\u0097\u0000\u0000\u1ebe\u1ec0\u0003\u02fc\u017e\u0000\u1ebf"+
		"\u1ebe\u0001\u0000\u0000\u0000\u1ebf\u1ec0\u0001\u0000\u0000\u0000\u1ec0"+
		"\u1ec2\u0001\u0000\u0000\u0000\u1ec1\u1ec3\u0005\u0302\u0000\u0000\u1ec2"+
		"\u1ec1\u0001\u0000\u0000\u0000\u1ec2\u1ec3\u0001\u0000\u0000\u0000\u1ec3"+
		"\u1ec4\u0001\u0000\u0000\u0000\u1ec4\u1ec6\u0005\u027d\u0000\u0000\u1ec5"+
		"\u1ec7\u0003\u02fa\u017d\u0000\u1ec6\u1ec5\u0001\u0000\u0000\u0000\u1ec6"+
		"\u1ec7\u0001\u0000\u0000\u0000\u1ec7\u1ec8\u0001\u0000\u0000\u0000\u1ec8"+
		"\u1eca\u0003\u03b8\u01dc\u0000\u1ec9\u1ecb\u0003\u0160\u00b0\u0000\u1eca"+
		"\u1ec9\u0001\u0000\u0000\u0000\u1eca\u1ecb\u0001\u0000\u0000\u0000\u1ecb"+
		"\u1ecf\u0001\u0000\u0000\u0000\u1ecc\u1ecd\u0005\u0336\u0000\u0000\u1ecd"+
		"\u1ece\u0005\u0187\u0000\u0000\u1ece\u1ed0\u0005\u0005\u0000\u0000\u1ecf"+
		"\u1ecc\u0001\u0000\u0000\u0000\u1ecf\u1ed0\u0001\u0000\u0000\u0000\u1ed0"+
		"\u1ed4\u0001\u0000\u0000\u0000\u1ed1\u1ed2\u0005\u00a7\u0000\u0000\u1ed2"+
		"\u1ed3\u0005\u0380\u0000\u0000\u1ed3\u1ed5\u0003\u03f0\u01f8\u0000\u1ed4"+
		"\u1ed1\u0001\u0000\u0000\u0000\u1ed4\u1ed5\u0001\u0000\u0000\u0000\u1ed5"+
		"\u1ed9\u0001\u0000\u0000\u0000\u1ed6\u1ed7\u0005\u0193\u0000\u0000\u1ed7"+
		"\u1ed8\u0005\u0380\u0000\u0000\u1ed8\u1eda\u0003\u03f0\u01f8\u0000\u1ed9"+
		"\u1ed6\u0001\u0000\u0000\u0000\u1ed9\u1eda\u0001\u0000\u0000\u0000\u1eda"+
		"\u1edc\u0001\u0000\u0000\u0000\u1edb\u1edd\u0003\u008cF\u0000\u1edc\u1edb"+
		"\u0001\u0000\u0000\u0000\u1edc\u1edd\u0001\u0000\u0000\u0000\u1edd\u1edf"+
		"\u0001\u0000\u0000\u0000\u1ede\u1ee0\u0003\u0238\u011c\u0000\u1edf\u1ede"+
		"\u0001\u0000\u0000\u0000\u1edf\u1ee0\u0001\u0000\u0000\u0000\u1ee0\u1ee2"+
		"\u0001\u0000\u0000\u0000\u1ee1\u1ee3\u0003\u02f2\u0179\u0000\u1ee2\u1ee1"+
		"\u0001\u0000\u0000\u0000\u1ee2\u1ee3\u0001\u0000\u0000\u0000\u1ee3\u01bd"+
		"\u0001\u0000\u0000\u0000\u1ee4\u1ee6\u0005\u0097\u0000\u0000\u1ee5\u1ee7"+
		"\u0003\u02fc\u017e\u0000\u1ee6\u1ee5\u0001\u0000\u0000\u0000\u1ee6\u1ee7"+
		"\u0001\u0000\u0000\u0000\u1ee7\u1ee8\u0001\u0000\u0000\u0000\u1ee8\u1ee9"+
		"\u0005\u0284\u0000\u0000\u1ee9\u1eeb\u0005\u0158\u0000\u0000\u1eea\u1eec"+
		"\u0003\u02fa\u017d\u0000\u1eeb\u1eea\u0001\u0000\u0000\u0000\u1eeb\u1eec"+
		"\u0001\u0000\u0000\u0000\u1eec\u1eed\u0001\u0000\u0000\u0000\u1eed\u1eee"+
		"\u0003\u03d0\u01e8\u0000\u1eee\u1eef\u0005\u030c\u0000\u0000\u1eef\u1ef0"+
		"\u0005\u0380\u0000\u0000\u1ef0\u1ef1\u0005\u00f4\u0000\u0000\u1ef1\u1ef2"+
		"\u0005\u00d3\u0000\u0000\u1ef2\u1ef3\u0005\u0380\u0000\u0000\u1ef3\u1ef4"+
		"\u0003\u0208\u0104\u0000\u1ef4\u1ef5\u0005\u0101\u0000\u0000\u1ef5\u1ef6"+
		"\u0005\u0380\u0000\u0000\u1ef6\u1ef7\u0007\u0016\u0000\u0000\u1ef7\u1ef8"+
		"\u0005\u00fa\u0000\u0000\u1ef8\u1ef9\u0005\u0380\u0000\u0000\u1ef9\u1efa"+
		"\u0003\u03ca\u01e5\u0000\u1efa\u1efb\u0005\u0100\u0000\u0000\u1efb\u1f01"+
		"\u0005\u0380\u0000\u0000\u1efc\u1f02\u0003\u03ca\u01e5\u0000\u1efd\u1efe"+
		"\u0005\u038a\u0000\u0000\u1efe\u1eff\u0003\u03cc\u01e6\u0000\u1eff\u1f00"+
		"\u0005\u038b\u0000\u0000\u1f00\u1f02\u0001\u0000\u0000\u0000\u1f01\u1efc"+
		"\u0001\u0000\u0000\u0000\u1f01\u1efd\u0001\u0000\u0000\u0000\u1f02\u1f03"+
		"\u0001\u0000\u0000\u0000\u1f03\u1f04\u0005\u00ff\u0000\u0000\u1f04\u1f05"+
		"\u0005\u0380\u0000\u0000\u1f05\u1f09\u0003\u03ca\u01e5\u0000\u1f06\u1f07"+
		"\u0005\u00fb\u0000\u0000\u1f07\u1f08\u0005\u0380\u0000\u0000\u1f08\u1f0a"+
		"\u0003\u03ca\u01e5\u0000\u1f09\u1f06\u0001\u0000\u0000\u0000\u1f09\u1f0a"+
		"\u0001\u0000\u0000\u0000\u1f0a\u1f14\u0001\u0000\u0000\u0000\u1f0b\u1f0c"+
		"\u0005\u00fb\u0000\u0000\u1f0c\u1f12\u0005\u0380\u0000\u0000\u1f0d\u1f13"+
		"\u0003\u03ca\u01e5\u0000\u1f0e\u1f0f\u0005\u038a\u0000\u0000\u1f0f\u1f10"+
		"\u0003\u03cc\u01e6\u0000\u1f10\u1f11\u0005\u038b\u0000\u0000\u1f11\u1f13"+
		"\u0001\u0000\u0000\u0000\u1f12\u1f0d\u0001\u0000\u0000\u0000\u1f12\u1f0e"+
		"\u0001\u0000\u0000\u0000\u1f13\u1f15\u0001\u0000\u0000\u0000\u1f14\u1f0b"+
		"\u0001\u0000\u0000\u0000\u1f14\u1f15\u0001\u0000\u0000\u0000\u1f15\u1f1c"+
		"\u0001\u0000\u0000\u0000\u1f16\u1f17\u0005\u00f9\u0000\u0000\u1f17\u1f18"+
		"\u0005\u0380\u0000\u0000\u1f18\u1f19\u0005\u038a\u0000\u0000\u1f19\u1f1a"+
		"\u0003\u03cc\u01e6\u0000\u1f1a\u1f1b\u0005\u038b\u0000\u0000\u1f1b\u1f1d"+
		"\u0001\u0000\u0000\u0000\u1f1c\u1f16\u0001\u0000\u0000\u0000\u1f1c\u1f1d"+
		"\u0001\u0000\u0000\u0000\u1f1d\u1f24\u0001\u0000\u0000\u0000\u1f1e\u1f1f"+
		"\u0005\u00f6\u0000\u0000\u1f1f\u1f20\u0005\u0380\u0000\u0000\u1f20\u1f21"+
		"\u0005\u038a\u0000\u0000\u1f21\u1f22\u0003\u03cc\u01e6\u0000\u1f22\u1f23"+
		"\u0005\u038b\u0000\u0000\u1f23\u1f25\u0001\u0000\u0000\u0000\u1f24\u1f1e"+
		"\u0001\u0000\u0000\u0000\u1f24\u1f25\u0001\u0000\u0000\u0000\u1f25\u1f29"+
		"\u0001\u0000\u0000\u0000\u1f26\u1f27\u0005\u00fc\u0000\u0000\u1f27\u1f28"+
		"\u0005\u0380\u0000\u0000\u1f28\u1f2a\u0003\u03ca\u01e5\u0000\u1f29\u1f26"+
		"\u0001\u0000\u0000\u0000\u1f29\u1f2a\u0001\u0000\u0000\u0000\u1f2a\u1f2e"+
		"\u0001\u0000\u0000\u0000\u1f2b\u1f2c\u0005\u00fd\u0000\u0000\u1f2c\u1f2d"+
		"\u0005\u0380\u0000\u0000\u1f2d\u1f2f\u0003\u03ca\u01e5\u0000\u1f2e\u1f2b"+
		"\u0001\u0000\u0000\u0000\u1f2e\u1f2f\u0001\u0000\u0000\u0000\u1f2f\u1f36"+
		"\u0001\u0000\u0000\u0000\u1f30\u1f31\u0005\u00f8\u0000\u0000\u1f31\u1f32"+
		"\u0005\u0380\u0000\u0000\u1f32\u1f33\u0005\u038a\u0000\u0000\u1f33\u1f34"+
		"\u0003\u03ca\u01e5\u0000\u1f34\u1f35\u0005\u038b\u0000\u0000\u1f35\u1f37"+
		"\u0001\u0000\u0000\u0000\u1f36\u1f30\u0001\u0000\u0000\u0000\u1f36\u1f37"+
		"\u0001\u0000\u0000\u0000\u1f37\u1f3b\u0001\u0000\u0000\u0000\u1f38\u1f39"+
		"\u0005\u00f7\u0000\u0000\u1f39\u1f3a\u0005\u0380\u0000\u0000\u1f3a\u1f3c"+
		"\u0007\u0017\u0000\u0000\u1f3b\u1f38\u0001\u0000\u0000\u0000\u1f3b\u1f3c"+
		"\u0001\u0000\u0000\u0000\u1f3c\u1f40\u0001\u0000\u0000\u0000\u1f3d\u1f3e"+
		"\u0005\u00fe\u0000\u0000\u1f3e\u1f3f\u0005\u0380\u0000\u0000\u1f3f\u1f41"+
		"\u0003\u03ca\u01e5\u0000\u1f40\u1f3d\u0001\u0000\u0000\u0000\u1f40\u1f41"+
		"\u0001\u0000\u0000\u0000\u1f41\u01bf\u0001\u0000\u0000\u0000\u1f42\u1f43"+
		"\u0007\u0018\u0000\u0000\u1f43\u01c1\u0001\u0000\u0000\u0000\u1f44\u1f46"+
		"\u0005\u0097\u0000\u0000\u1f45\u1f47\u0003\u02fc\u017e\u0000\u1f46\u1f45"+
		"\u0001\u0000\u0000\u0000\u1f46\u1f47\u0001\u0000\u0000\u0000\u1f47\u1f48"+
		"\u0001\u0000\u0000\u0000\u1f48\u1f49\u0005\u0284\u0000\u0000\u1f49\u1f4b"+
		"\u0005\u0158\u0000\u0000\u1f4a\u1f4c\u0003\u02fa\u017d\u0000\u1f4b\u1f4a"+
		"\u0001\u0000\u0000\u0000\u1f4b\u1f4c\u0001\u0000\u0000\u0000\u1f4c\u1f4d"+
		"\u0001\u0000\u0000\u0000\u1f4d\u1f4e\u0003\u03d0\u01e8\u0000\u1f4e\u1f4f"+
		"\u0005\u030c\u0000\u0000\u1f4f\u1f50\u0005\u0380\u0000\u0000\u1f50\u1f51"+
		"\u0005\u01c4\u0000\u0000\u1f51\u1f52\u0005\u01c6\u0000\u0000\u1f52\u1f53"+
		"\u0005\u0380\u0000\u0000\u1f53\u1f54\u0003\u01ca\u00e5\u0000\u1f54\u1f55"+
		"\u0005\u01cb\u0000\u0000\u1f55\u1f56\u0005\u0380\u0000\u0000\u1f56\u1f58"+
		"\u0003\u03ca\u01e5\u0000\u1f57\u1f59\u0003\u0094J\u0000\u1f58\u1f57\u0001"+
		"\u0000\u0000\u0000\u1f58\u1f59\u0001\u0000\u0000\u0000\u1f59\u1f5d\u0001"+
		"\u0000\u0000\u0000\u1f5a\u1f5b\u0005\u01ca\u0000\u0000\u1f5b\u1f5c\u0005"+
		"\u0380\u0000\u0000\u1f5c\u1f5e\u0003\u0208\u0104\u0000\u1f5d\u1f5a\u0001"+
		"\u0000\u0000\u0000\u1f5d\u1f5e\u0001\u0000\u0000\u0000\u1f5e\u1f62\u0001"+
		"\u0000\u0000\u0000\u1f5f\u1f60\u0005\u01cc\u0000\u0000\u1f60\u1f61\u0005"+
		"\u0380\u0000\u0000\u1f61\u1f63\u0003\u03f0\u01f8\u0000\u1f62\u1f5f\u0001"+
		"\u0000\u0000\u0000\u1f62\u1f63\u0001\u0000\u0000\u0000\u1f63\u1f67\u0001"+
		"\u0000\u0000\u0000\u1f64\u1f65\u0005\u01cd\u0000\u0000\u1f65\u1f66\u0005"+
		"\u0380\u0000\u0000\u1f66\u1f68\u0003\u01c0\u00e0\u0000\u1f67\u1f64\u0001"+
		"\u0000\u0000\u0000\u1f67\u1f68\u0001\u0000\u0000\u0000\u1f68\u1f6f\u0001"+
		"\u0000\u0000\u0000\u1f69\u1f6a\u0005[\u0000\u0000\u1f6a\u1f6b\u0005\u0380"+
		"\u0000\u0000\u1f6b\u1f6c\u0005\u038a\u0000\u0000\u1f6c\u1f6d\u0003\u03cc"+
		"\u01e6\u0000\u1f6d\u1f6e\u0005\u038b\u0000\u0000\u1f6e\u1f70\u0001\u0000"+
		"\u0000\u0000\u1f6f\u1f69\u0001\u0000\u0000\u0000\u1f6f\u1f70\u0001\u0000"+
		"\u0000\u0000\u1f70\u1f72\u0001\u0000\u0000\u0000\u1f71\u1f73\u0003\u02f2"+
		"\u0179\u0000\u1f72\u1f71\u0001\u0000\u0000\u0000\u1f72\u1f73\u0001\u0000"+
		"\u0000\u0000\u1f73\u1fc4\u0001\u0000\u0000\u0000\u1f74\u1f76\u0005\u0097"+
		"\u0000\u0000\u1f75\u1f77\u0003\u02fc\u017e\u0000\u1f76\u1f75\u0001\u0000"+
		"\u0000\u0000\u1f76\u1f77\u0001\u0000\u0000\u0000\u1f77\u1f78\u0001\u0000"+
		"\u0000\u0000\u1f78\u1f79\u0005\u0284\u0000\u0000\u1f79\u1f7b\u0005\u0158"+
		"\u0000\u0000\u1f7a\u1f7c\u0003\u02fa\u017d\u0000\u1f7b\u1f7a\u0001\u0000"+
		"\u0000\u0000\u1f7b\u1f7c\u0001\u0000\u0000\u0000\u1f7c\u1f7d\u0001\u0000"+
		"\u0000\u0000\u1f7d\u1f7e\u0003\u03d0\u01e8\u0000\u1f7e\u1f7f\u0005\u030c"+
		"\u0000\u0000\u1f7f\u1f80\u0005\u0380\u0000\u0000\u1f80\u1f81\u0005\u01c4"+
		"\u0000\u0000\u1f81\u1f82\u0005\u01c6\u0000\u0000\u1f82\u1f83\u0005\u0380"+
		"\u0000\u0000\u1f83\u1f84\u0005\u00a2\u0000\u0000\u1f84\u1f85\u0005\u01cb"+
		"\u0000\u0000\u1f85\u1f86\u0005\u0380\u0000\u0000\u1f86\u1f88\u0003\u03ca"+
		"\u01e5\u0000\u1f87\u1f89\u0003\u0094J\u0000\u1f88\u1f87\u0001\u0000\u0000"+
		"\u0000\u1f88\u1f89\u0001\u0000\u0000\u0000\u1f89\u1f8d\u0001\u0000\u0000"+
		"\u0000\u1f8a\u1f8b\u0005\u01c5\u0000\u0000\u1f8b\u1f8c\u0005\u0380\u0000"+
		"\u0000\u1f8c\u1f8e\u0003\u0208\u0104\u0000\u1f8d\u1f8a\u0001\u0000\u0000"+
		"\u0000\u1f8d\u1f8e\u0001\u0000\u0000\u0000\u1f8e\u1f92\u0001\u0000\u0000"+
		"\u0000\u1f8f\u1f90\u0005\u01c9\u0000\u0000\u1f90\u1f91\u0005\u0380\u0000"+
		"\u0000\u1f91\u1f93\u0003\u0208\u0104\u0000\u1f92\u1f8f\u0001\u0000\u0000"+
		"\u0000\u1f92\u1f93\u0001\u0000\u0000\u0000\u1f93\u1f97\u0001\u0000\u0000"+
		"\u0000\u1f94\u1f95\u0005\u01cd\u0000\u0000\u1f95\u1f96\u0005\u0380\u0000"+
		"\u0000\u1f96\u1f98\u0003\u01c0\u00e0\u0000\u1f97\u1f94\u0001\u0000\u0000"+
		"\u0000\u1f97\u1f98\u0001\u0000\u0000\u0000\u1f98\u1f9f\u0001\u0000\u0000"+
		"\u0000\u1f99\u1f9a\u0005\u0215\u0000\u0000\u1f9a\u1f9b\u0005\u0380\u0000"+
		"\u0000\u1f9b\u1f9c\u0005\u038a\u0000\u0000\u1f9c\u1f9d\u0003\u03cc\u01e6"+
		"\u0000\u1f9d\u1f9e\u0005\u038b\u0000\u0000\u1f9e\u1fa0\u0001\u0000\u0000"+
		"\u0000\u1f9f\u1f99\u0001\u0000\u0000\u0000\u1f9f\u1fa0\u0001\u0000\u0000"+
		"\u0000\u1fa0\u1fa7\u0001\u0000\u0000\u0000\u1fa1\u1fa2\u0005[\u0000\u0000"+
		"\u1fa2\u1fa3\u0005\u0380\u0000\u0000\u1fa3\u1fa4\u0005\u038a\u0000\u0000"+
		"\u1fa4\u1fa5\u0003\u03cc\u01e6\u0000\u1fa5\u1fa6\u0005\u038b\u0000\u0000"+
		"\u1fa6\u1fa8\u0001\u0000\u0000\u0000\u1fa7\u1fa1\u0001\u0000\u0000\u0000"+
		"\u1fa7\u1fa8\u0001\u0000\u0000\u0000\u1fa8\u1fac\u0001\u0000\u0000\u0000"+
		"\u1fa9\u1faa\u0005\u01ca\u0000\u0000\u1faa\u1fab\u0005\u0380\u0000\u0000"+
		"\u1fab\u1fad\u0003\u0208\u0104\u0000\u1fac\u1fa9\u0001\u0000\u0000\u0000"+
		"\u1fac\u1fad\u0001\u0000\u0000\u0000\u1fad\u1fb1\u0001\u0000\u0000\u0000"+
		"\u1fae\u1faf\u0005\u01cc\u0000\u0000\u1faf\u1fb0\u0005\u0380\u0000\u0000"+
		"\u1fb0\u1fb2\u0003\u03f0\u01f8\u0000\u1fb1\u1fae\u0001\u0000\u0000\u0000"+
		"\u1fb1\u1fb2\u0001\u0000\u0000\u0000\u1fb2\u1fb4\u0001\u0000\u0000\u0000"+
		"\u1fb3\u1fb5\u0003\u01c8\u00e4\u0000\u1fb4\u1fb3\u0001\u0000\u0000\u0000"+
		"\u1fb4\u1fb5\u0001\u0000\u0000\u0000\u1fb5\u1fb9\u0001\u0000\u0000\u0000"+
		"\u1fb6\u1fb7\u0005\u01c7\u0000\u0000\u1fb7\u1fb8\u0005\u0380\u0000\u0000"+
		"\u1fb8\u1fba\u0003\u03ca\u01e5\u0000\u1fb9\u1fb6\u0001\u0000\u0000\u0000"+
		"\u1fb9\u1fba\u0001\u0000\u0000\u0000\u1fba\u1fbe\u0001\u0000\u0000\u0000"+
		"\u1fbb\u1fbc\u0005\u01c8\u0000\u0000\u1fbc\u1fbd\u0005\u0380\u0000\u0000"+
		"\u1fbd\u1fbf\u0003\u03ca\u01e5\u0000\u1fbe\u1fbb\u0001\u0000\u0000\u0000"+
		"\u1fbe\u1fbf\u0001\u0000\u0000\u0000\u1fbf\u1fc1\u0001\u0000\u0000\u0000"+
		"\u1fc0\u1fc2\u0003\u02f2\u0179\u0000\u1fc1\u1fc0\u0001\u0000\u0000\u0000"+
		"\u1fc1\u1fc2\u0001\u0000\u0000\u0000\u1fc2\u1fc4\u0001\u0000\u0000\u0000"+
		"\u1fc3\u1f44\u0001\u0000\u0000\u0000\u1fc3\u1f74\u0001\u0000\u0000\u0000"+
		"\u1fc4\u01c3\u0001\u0000\u0000\u0000\u1fc5\u1fc7\u0005\u0097\u0000\u0000"+
		"\u1fc6\u1fc8\u0003\u02fc\u017e\u0000\u1fc7\u1fc6\u0001\u0000\u0000\u0000"+
		"\u1fc7\u1fc8\u0001\u0000\u0000\u0000\u1fc8\u1fc9\u0001\u0000\u0000\u0000"+
		"\u1fc9\u1fca\u0005\u0284\u0000\u0000\u1fca\u1fcc\u0005\u0158\u0000\u0000"+
		"\u1fcb\u1fcd\u0003\u02fa\u017d\u0000\u1fcc\u1fcb\u0001\u0000\u0000\u0000"+
		"\u1fcc\u1fcd\u0001\u0000\u0000\u0000\u1fcd\u1fce\u0001\u0000\u0000\u0000"+
		"\u1fce\u1fcf\u0005\u030c\u0000\u0000\u1fcf\u1fd0\u0005\u0380\u0000\u0000"+
		"\u1fd0\u1fd1\u0005\u0269\u0000\u0000\u1fd1\u1fd2\u0003\u0094J\u0000\u1fd2"+
		"\u1fd3\u0005\u026c\u0000\u0000\u1fd3\u1fd4\u0005\u0380\u0000\u0000\u1fd4"+
		"\u1fd5\u0003\u03ca\u01e5\u0000\u1fd5\u1fd6\u0005\u0275\u0000\u0000\u1fd6"+
		"\u1fd7\u0005\u0380\u0000\u0000\u1fd7\u1fd8\u0003\u03ca\u01e5\u0000\u1fd8"+
		"\u1fd9\u0005\u026e\u0000\u0000\u1fd9\u1fda\u0005\u0380\u0000\u0000\u1fda"+
		"\u1fdb\u0003\u03ca\u01e5\u0000\u1fdb\u1fdc\u0005\u0276\u0000\u0000\u1fdc"+
		"\u1fdd\u0005\u0380\u0000\u0000\u1fdd\u1fe1\u0003\u03ca\u01e5\u0000\u1fde"+
		"\u1fdf\u0005\u0274\u0000\u0000\u1fdf\u1fe0\u0005\u0380\u0000\u0000\u1fe0"+
		"\u1fe2\u0003\u03ca\u01e5\u0000\u1fe1\u1fde\u0001\u0000\u0000\u0000\u1fe1"+
		"\u1fe2\u0001\u0000\u0000\u0000\u1fe2\u1fe6\u0001\u0000\u0000\u0000\u1fe3"+
		"\u1fe4\u0005\u026a\u0000\u0000\u1fe4\u1fe5\u0005\u0380\u0000\u0000\u1fe5"+
		"\u1fe7\u0003\u0208\u0104\u0000\u1fe6\u1fe3\u0001\u0000\u0000\u0000\u1fe6"+
		"\u1fe7\u0001\u0000\u0000\u0000\u1fe7\u1feb\u0001\u0000\u0000\u0000\u1fe8"+
		"\u1fe9\u0005\u0273\u0000\u0000\u1fe9\u1fea\u0005\u0380\u0000\u0000\u1fea"+
		"\u1fec\u0003\u03ca\u01e5\u0000\u1feb\u1fe8\u0001\u0000\u0000\u0000\u1feb"+
		"\u1fec\u0001\u0000\u0000\u0000\u1fec\u1ff0\u0001\u0000\u0000\u0000\u1fed"+
		"\u1fee\u0005\u0270\u0000\u0000\u1fee\u1fef\u0005\u0380\u0000\u0000\u1fef"+
		"\u1ff1\u0003\u0208\u0104\u0000\u1ff0\u1fed\u0001\u0000\u0000\u0000\u1ff0"+
		"\u1ff1\u0001\u0000\u0000\u0000\u1ff1\u1ff5\u0001\u0000\u0000\u0000\u1ff2"+
		"\u1ff3\u0005\u026f\u0000\u0000\u1ff3\u1ff4\u0005\u0380\u0000\u0000\u1ff4"+
		"\u1ff6\u0003\u03ca\u01e5\u0000\u1ff5\u1ff2\u0001\u0000\u0000\u0000\u1ff5"+
		"\u1ff6\u0001\u0000\u0000\u0000\u1ff6\u1ffa\u0001\u0000\u0000\u0000\u1ff7"+
		"\u1ff8\u0005\u026d\u0000\u0000\u1ff8\u1ff9\u0005\u0380\u0000\u0000\u1ff9"+
		"\u1ffb\u0003\u03ca\u01e5\u0000\u1ffa\u1ff7\u0001\u0000\u0000\u0000\u1ffa"+
		"\u1ffb\u0001\u0000\u0000\u0000\u1ffb\u1fff\u0001\u0000\u0000\u0000\u1ffc"+
		"\u1ffd\u0005\u026b\u0000\u0000\u1ffd\u1ffe\u0005\u0380\u0000\u0000\u1ffe"+
		"\u2000\u0003\u0208\u0104\u0000\u1fff\u1ffc\u0001\u0000\u0000\u0000\u1fff"+
		"\u2000\u0001\u0000\u0000\u0000\u2000\u2004\u0001\u0000\u0000\u0000\u2001"+
		"\u2002\u0005\u0272\u0000\u0000\u2002\u2003\u0005\u0380\u0000\u0000\u2003"+
		"\u2005\u0003\u03ca\u01e5\u0000\u2004\u2001\u0001\u0000\u0000\u0000\u2004"+
		"\u2005\u0001\u0000\u0000\u0000\u2005\u2009\u0001\u0000\u0000\u0000\u2006"+
		"\u2007\u0005\u0271\u0000\u0000\u2007\u2008\u0005\u0380\u0000\u0000\u2008"+
		"\u200a\u0003\u03ca\u01e5\u0000\u2009\u2006\u0001\u0000\u0000\u0000\u2009"+
		"\u200a\u0001\u0000\u0000\u0000\u200a\u01c5\u0001\u0000\u0000\u0000\u200b"+
		"\u200d\u0005\u0097\u0000\u0000\u200c\u200e\u0003\u02fc\u017e\u0000\u200d"+
		"\u200c\u0001\u0000\u0000\u0000\u200d\u200e\u0001\u0000\u0000\u0000\u200e"+
		"\u200f\u0001\u0000\u0000\u0000\u200f\u2010\u0005\u0284\u0000\u0000\u2010"+
		"\u2012\u0005\u0158\u0000\u0000\u2011\u2013\u0003\u02fa\u017d\u0000\u2012"+
		"\u2011\u0001\u0000\u0000\u0000\u2012\u2013\u0001\u0000\u0000\u0000\u2013"+
		"\u2014\u0001\u0000\u0000\u0000\u2014\u2015\u0003\u03d0\u01e8\u0000\u2015"+
		"\u2016\u0005\u030c\u0000\u0000\u2016\u2017\u0005\u0380\u0000\u0000\u2017"+
		"\u2018\u0005\u027f\u0000\u0000\u2018\u2019\u0005\u0280\u0000\u0000\u2019"+
		"\u201a\u0005\u0380\u0000\u0000\u201a\u201b\u00070\u0000\u0000\u201b\u201c"+
		"\u0005\u0266\u0000\u0000\u201c\u201d\u0005\u0380\u0000\u0000\u201d\u201f"+
		"\u00071\u0000\u0000\u201e\u2020\u0003\u01c8\u00e4\u0000\u201f\u201e\u0001"+
		"\u0000\u0000\u0000\u201f\u2020\u0001\u0000\u0000\u0000\u2020\u2024\u0001"+
		"\u0000\u0000\u0000\u2021\u2022\u0005\u02d1\u0000\u0000\u2022\u2023\u0005"+
		"\u0380\u0000\u0000\u2023\u2025\u0003\u0208\u0104\u0000\u2024\u2021\u0001"+
		"\u0000\u0000\u0000\u2024\u2025\u0001\u0000\u0000\u0000\u2025\u2027\u0001"+
		"\u0000\u0000\u0000\u2026\u2028\u0003\u02f2\u0179\u0000\u2027\u2026\u0001"+
		"\u0000\u0000\u0000\u2027\u2028\u0001\u0000\u0000\u0000\u2028\u01c7\u0001"+
		"\u0000\u0000\u0000\u2029\u202a\u0005\u01ac\u0000\u0000\u202a\u202b\u0005"+
		"\u0380\u0000\u0000\u202b\u202c\u0003\u03ca\u01e5\u0000\u202c\u01c9\u0001"+
		"\u0000\u0000\u0000\u202d\u202e\u00072\u0000\u0000\u202e\u01cb\u0001\u0000"+
		"\u0000\u0000\u202f\u2031\u0005\u02b1\u0000\u0000\u2030\u2032\u0005\u0336"+
		"\u0000\u0000\u2031\u2030\u0001\u0000\u0000\u0000\u2031\u2032\u0001\u0000"+
		"\u0000\u0000\u2032\u2034\u0001\u0000\u0000\u0000\u2033\u2035\u0005\u0380"+
		"\u0000\u0000\u2034\u2033\u0001\u0000\u0000\u0000\u2034\u2035\u0001\u0000"+
		"\u0000\u0000\u2035\u2036\u0001\u0000\u0000\u0000\u2036\u2037\u0003\u03f0"+
		"\u01f8\u0000\u2037\u01cd\u0001\u0000\u0000\u0000\u2038\u203a\u0005\u014b"+
		"\u0000\u0000\u2039\u203b\u0005`\u0000\u0000\u203a\u2039\u0001\u0000\u0000"+
		"\u0000\u203a\u203b\u0001\u0000\u0000\u0000\u203b\u203d\u0001\u0000\u0000"+
		"\u0000\u203c\u203e\u0005\u0380\u0000\u0000\u203d\u203c\u0001\u0000\u0000"+
		"\u0000\u203d\u203e\u0001\u0000\u0000\u0000\u203e\u203f\u0001\u0000\u0000"+
		"\u0000\u203f\u2040\u0003\u03f0\u01f8\u0000\u2040\u01cf\u0001\u0000\u0000"+
		"\u0000\u2041\u2043\u0005\u0097\u0000\u0000\u2042\u2044\u0003\u02fc\u017e"+
		"\u0000\u2043\u2042\u0001\u0000\u0000\u0000\u2043\u2044\u0001\u0000\u0000"+
		"\u0000\u2044\u2045\u0001\u0000\u0000\u0000\u2045\u2047\u0005\u0288\u0000"+
		"\u0000\u2046\u2048\u0003\u02fa\u017d\u0000\u2047\u2046\u0001\u0000\u0000"+
		"\u0000\u2047\u2048\u0001\u0000\u0000\u0000\u2048\u2049\u0001\u0000\u0000"+
		"\u0000\u2049\u204b\u0003\u03ea\u01f5\u0000\u204a\u204c\u0005\u0336\u0000"+
		"\u0000\u204b\u204a\u0001\u0000\u0000\u0000\u204b\u204c\u0001\u0000\u0000"+
		"\u0000\u204c\u204e\u0001\u0000\u0000\u0000\u204d\u204f\u0003\u01cc\u00e6"+
		"\u0000\u204e\u204d\u0001\u0000\u0000\u0000\u204e\u204f\u0001\u0000\u0000"+
		"\u0000\u204f\u2051\u0001\u0000\u0000\u0000\u2050\u2052\u0003\u01ce\u00e7"+
		"\u0000\u2051\u2050\u0001\u0000\u0000\u0000\u2051\u2052\u0001\u0000\u0000"+
		"\u0000\u2052\u2054\u0001\u0000\u0000\u0000\u2053\u2055\u0003\u0244\u0122"+
		"\u0000\u2054\u2053\u0001\u0000\u0000\u0000\u2054\u2055\u0001\u0000\u0000"+
		"\u0000\u2055\u2057\u0001\u0000\u0000\u0000\u2056\u2058\u0003\u02f2\u0179"+
		"\u0000\u2057\u2056\u0001\u0000\u0000\u0000\u2057\u2058\u0001\u0000\u0000"+
		"\u0000\u2058\u01d1\u0001\u0000\u0000\u0000\u2059\u205b\u0005\u0097\u0000"+
		"\u0000\u205a\u205c\u0003\u02fc\u017e\u0000\u205b\u205a\u0001\u0000\u0000"+
		"\u0000\u205b\u205c\u0001\u0000\u0000\u0000\u205c\u205d\u0001\u0000\u0000"+
		"\u0000\u205d\u205e\u0005\u028a\u0000\u0000\u205e\u2060\u0005\u020f\u0000"+
		"\u0000\u205f\u2061\u0003\u02fa\u017d\u0000\u2060\u205f\u0001\u0000\u0000"+
		"\u0000\u2060\u2061\u0001\u0000\u0000\u0000\u2061\u2062\u0001\u0000\u0000"+
		"\u0000\u2062\u2066\u0003\u03ea\u01f5\u0000\u2063\u2065\u0003\u01d4\u00ea"+
		"\u0000\u2064\u2063\u0001\u0000\u0000\u0000\u2065\u2068\u0001\u0000\u0000"+
		"\u0000\u2066\u2064\u0001\u0000\u0000\u0000\u2066\u2067\u0001\u0000\u0000"+
		"\u0000\u2067\u01d3\u0001\u0000\u0000\u0000\u2068\u2066\u0001\u0000\u0000"+
		"\u0000\u2069\u206a\u0003\u01d6\u00eb\u0000\u206a\u206b\u0005\u0380\u0000"+
		"\u0000\u206b\u206c\u0003\u03f0\u01f8\u0000\u206c\u206f\u0001\u0000\u0000"+
		"\u0000\u206d\u206f\u0003\u02f2\u0179\u0000\u206e\u2069\u0001\u0000\u0000"+
		"\u0000\u206e\u206d\u0001\u0000\u0000\u0000\u206f\u01d5\u0001\u0000\u0000"+
		"\u0000\u2070\u2071\u00073\u0000\u0000\u2071\u01d7\u0001\u0000\u0000\u0000"+
		"\u2072\u2074\u0005\u0097\u0000\u0000\u2073\u2075\u0003\u02fc\u017e\u0000"+
		"\u2074\u2073\u0001\u0000\u0000\u0000\u2074\u2075\u0001\u0000\u0000\u0000"+
		"\u2075\u2076\u0001\u0000\u0000\u0000\u2076\u2077\u0005\u01f7\u0000\u0000"+
		"\u2077\u2079\u0005\u020f\u0000\u0000\u2078\u207a\u0003\u02fa\u017d\u0000"+
		"\u2079\u2078\u0001\u0000\u0000\u0000\u2079\u207a\u0001\u0000\u0000\u0000"+
		"\u207a\u207b\u0001\u0000\u0000\u0000\u207b\u207f\u0003\u03ea\u01f5\u0000"+
		"\u207c\u207e\u0003\u01da\u00ed\u0000\u207d\u207c\u0001\u0000\u0000\u0000"+
		"\u207e\u2081\u0001\u0000\u0000\u0000\u207f\u207d\u0001\u0000\u0000\u0000"+
		"\u207f\u2080\u0001\u0000\u0000\u0000\u2080\u01d9\u0001\u0000\u0000\u0000"+
		"\u2081\u207f\u0001\u0000\u0000\u0000\u2082\u2083\u0003\u01dc\u00ee\u0000"+
		"\u2083\u2084\u0005\u0380\u0000\u0000\u2084\u2085\u0003\u03f0\u01f8\u0000"+
		"\u2085\u2088\u0001\u0000\u0000\u0000\u2086\u2088\u0003\u02f2\u0179\u0000"+
		"\u2087\u2082\u0001\u0000\u0000\u0000\u2087\u2086\u0001\u0000\u0000\u0000"+
		"\u2088\u01db\u0001\u0000\u0000\u0000\u2089\u208a\u00074\u0000\u0000\u208a"+
		"\u01dd\u0001\u0000\u0000\u0000\u208b\u208d\u0005\u0097\u0000\u0000\u208c"+
		"\u208e\u0003\u02fc\u017e\u0000\u208d\u208c\u0001\u0000\u0000\u0000\u208d"+
		"\u208e\u0001\u0000\u0000\u0000\u208e\u208f\u0001\u0000\u0000\u0000\u208f"+
		"\u2090\u0005\u0290\u0000\u0000\u2090\u2092\u0003\u03d0\u01e8\u0000\u2091"+
		"\u2093\u0003\u02f2\u0179\u0000\u2092\u2091\u0001\u0000\u0000\u0000\u2092"+
		"\u2093\u0001\u0000\u0000\u0000\u2093\u01df\u0001\u0000\u0000\u0000\u2094"+
		"\u2095\u00075\u0000\u0000\u2095\u01e1\u0001\u0000\u0000\u0000\u2096\u2097"+
		"\u0005\u0088\u0000\u0000\u2097\u2098\u0005\u0380\u0000\u0000\u2098\u212a"+
		"\u00076\u0000\u0000\u2099\u209a\u0005\u0230\u0000\u0000\u209a\u209d\u0005"+
		"\u0380\u0000\u0000\u209b\u209e\u0003\u03ca\u01e5\u0000\u209c\u209e\u0005"+
		"\u01b1\u0000\u0000\u209d\u209b\u0001\u0000\u0000\u0000\u209d\u209c\u0001"+
		"\u0000\u0000\u0000\u209e\u212a\u0001\u0000\u0000\u0000\u209f\u20a0\u0005"+
		"\u0106\u0000\u0000\u20a0\u20a3\u0005\u0380\u0000\u0000\u20a1\u20a4\u0003"+
		"\u03ca\u01e5\u0000\u20a2\u20a4\u0005\u01b1\u0000\u0000\u20a3\u20a1\u0001"+
		"\u0000\u0000\u0000\u20a3\u20a2\u0001\u0000\u0000\u0000\u20a4\u212a\u0001"+
		"\u0000\u0000\u0000\u20a5\u20a6\u0005\u010a\u0000\u0000\u20a6\u20a7\u0005"+
		"\u0380\u0000\u0000\u20a7\u212a\u0003\u03ca\u01e5\u0000\u20a8\u20a9\u0005"+
		"\u029d\u0000\u0000\u20a9\u20aa\u0005\u0380\u0000\u0000\u20aa\u212a\u0003"+
		"\u03f0\u01f8\u0000\u20ab\u20ac\u0005\u0299\u0000\u0000\u20ac\u20ad\u0005"+
		"\u0380\u0000\u0000\u20ad\u212a\u0003\u0208\u0104\u0000\u20ae\u20af\u0005"+
		"\u00aa\u0000\u0000\u20af\u20b2\u0005\u0380\u0000\u0000\u20b0\u20b3\u0003"+
		"\u03ca\u01e5\u0000\u20b1\u20b3\u00051\u0000\u0000\u20b2\u20b0\u0001\u0000"+
		"\u0000\u0000\u20b2\u20b1\u0001\u0000\u0000\u0000\u20b3\u212a\u0001\u0000"+
		"\u0000\u0000\u20b4\u20b5\u0005\u02f6\u0000\u0000\u20b5\u20b8\u0005\u0380"+
		"\u0000\u0000\u20b6\u20b9\u0003\u03ca\u01e5\u0000\u20b7\u20b9\u00051\u0000"+
		"\u0000\u20b8\u20b6\u0001\u0000\u0000\u0000\u20b8\u20b7\u0001\u0000\u0000"+
		"\u0000\u20b9\u212a\u0001\u0000\u0000\u0000\u20ba\u20bb\u0005\u02e9\u0000"+
		"\u0000\u20bb\u20be\u0005\u0380\u0000\u0000\u20bc\u20bf\u0003\u03ca\u01e5"+
		"\u0000\u20bd\u20bf\u00051\u0000\u0000\u20be\u20bc\u0001\u0000\u0000\u0000"+
		"\u20be\u20bd\u0001\u0000\u0000\u0000\u20bf\u212a\u0001\u0000\u0000\u0000"+
		"\u20c0\u20c1\u0005V\u0000\u0000\u20c1\u20c2\u0005\u0380\u0000\u0000\u20c2"+
		"\u212a\u00077\u0000\u0000\u20c3\u20c4\u0005\u00e7\u0000\u0000\u20c4\u20c8"+
		"\u0005\u0380\u0000\u0000\u20c5\u20c9\u0003\u01e0\u00f0\u0000\u20c6\u20c9"+
		"\u0005\u01b1\u0000\u0000\u20c7\u20c9\u0005\u01b2\u0000\u0000\u20c8\u20c5"+
		"\u0001\u0000\u0000\u0000\u20c8\u20c6\u0001\u0000\u0000\u0000\u20c8\u20c7"+
		"\u0001\u0000\u0000\u0000\u20c9\u212a\u0001\u0000\u0000\u0000\u20ca\u20cb"+
		"\u0005\u00e8\u0000\u0000\u20cb\u20cf\u0005\u0380\u0000\u0000\u20cc\u20d0"+
		"\u0003\u03ca\u01e5\u0000\u20cd\u20d0\u0005\u01b1\u0000\u0000\u20ce\u20d0"+
		"\u0005\u01b2\u0000\u0000\u20cf\u20cc\u0001\u0000\u0000\u0000\u20cf\u20cd"+
		"\u0001\u0000\u0000\u0000\u20cf\u20ce\u0001\u0000\u0000\u0000\u20d0\u212a"+
		"\u0001\u0000\u0000\u0000\u20d1\u20d2\u0005\u0305\u0000\u0000\u20d2\u20d3"+
		"\u0005\u0380\u0000\u0000\u20d3\u212a\u0003\u0208\u0104\u0000\u20d4\u20d5"+
		"\u0005\u0107\u0000\u0000\u20d5\u20da\u0005\u0380\u0000\u0000\u20d6\u20db"+
		"\u0003\u03ca\u01e5\u0000\u20d7\u20db\u0005\u01b1\u0000\u0000\u20d8\u20db"+
		"\u0005\u01b2\u0000\u0000\u20d9\u20db\u0005\u036e\u0000\u0000\u20da\u20d6"+
		"\u0001\u0000\u0000\u0000\u20da\u20d7\u0001\u0000\u0000\u0000\u20da\u20d8"+
		"\u0001\u0000\u0000\u0000\u20da\u20d9\u0001\u0000\u0000\u0000\u20db\u212a"+
		"\u0001\u0000\u0000\u0000\u20dc\u20dd\u0005\u01c0\u0000\u0000\u20dd\u20de"+
		"\u0005\u0380\u0000\u0000\u20de\u20e2\u0005\u038a\u0000\u0000\u20df\u20e1"+
		"\u0003\u03cc\u01e6\u0000\u20e0\u20df\u0001\u0000\u0000\u0000\u20e1\u20e4"+
		"\u0001\u0000\u0000\u0000\u20e2\u20e0\u0001\u0000\u0000\u0000\u20e2\u20e3"+
		"\u0001\u0000\u0000\u0000\u20e3\u20e5\u0001\u0000\u0000\u0000\u20e4\u20e2"+
		"\u0001\u0000\u0000\u0000\u20e5\u212a\u0005\u038b\u0000\u0000\u20e6\u20e7"+
		"\u0005\u00e4\u0000\u0000\u20e7\u20e8\u0005\u0380\u0000\u0000\u20e8\u212a"+
		"\u0003\u0208\u0104\u0000\u20e9\u20ea\u0005\u023f\u0000\u0000\u20ea\u20eb"+
		"\u0005\u0380\u0000\u0000\u20eb\u212a\u0003\u0208\u0104\u0000\u20ec\u20ed"+
		"\u0005\u00d1\u0000\u0000\u20ed\u20ee\u0005\u0380\u0000\u0000\u20ee\u212a"+
		"\u0003\u0208\u0104\u0000\u20ef\u20f0\u0005\u029a\u0000\u0000\u20f0\u20f1"+
		"\u0005\u0380\u0000\u0000\u20f1\u212a\u0003\u0208\u0104\u0000\u20f2\u20f3"+
		"\u0005\u00d9\u0000\u0000\u20f3\u20f6\u0005\u0380\u0000\u0000\u20f4\u20f7"+
		"\u0003\u03ca\u01e5\u0000\u20f5\u20f7\u0005\u0322\u0000\u0000\u20f6\u20f4"+
		"\u0001\u0000\u0000\u0000\u20f6\u20f5\u0001\u0000\u0000\u0000\u20f7\u212a"+
		"\u0001\u0000\u0000\u0000\u20f8\u20f9\u0005\u00d6\u0000\u0000\u20f9\u20fa"+
		"\u0005\u0380\u0000\u0000\u20fa\u212a\u0003\u0208\u0104\u0000\u20fb\u20fc"+
		"\u0005\u0019\u0000\u0000\u20fc\u20fd\u0005\u0380\u0000\u0000\u20fd\u212a"+
		"\u0003\u0208\u0104\u0000\u20fe\u20ff\u0005\u02c7\u0000\u0000\u20ff\u2100"+
		"\u0005\u0380\u0000\u0000\u2100\u212a\u0003\u0208\u0104\u0000\u2101\u2102"+
		"\u0005\u02c6\u0000\u0000\u2102\u2103\u0005\u0380\u0000\u0000\u2103\u212a"+
		"\u0003\u0208\u0104\u0000\u2104\u2105\u0005\u0141\u0000\u0000\u2105\u2106"+
		"\u0005\u0380\u0000\u0000\u2106\u212a\u0003\u0208\u0104\u0000\u2107\u2108"+
		"\u0005\u0088\u0000\u0000\u2108\u2109\u0005\u0380\u0000\u0000\u2109\u212a"+
		"\u00051\u0000\u0000\u210a\u212a\u0005\u0185\u0000\u0000\u210b\u212a\u0005"+
		"\u029f\u0000\u0000\u210c\u212a\u0005\u01b1\u0000\u0000\u210d\u210e\u0005"+
		"\u02a0\u0000\u0000\u210e\u210f\u0005\u0380\u0000\u0000\u210f\u212a\u0003"+
		"\u0208\u0104\u0000\u2110\u2111\u0005U\u0000\u0000\u2111\u2112\u0005\u0380"+
		"\u0000\u0000\u2112\u212a\u0003\u0208\u0104\u0000\u2113\u2114\u0005\u0088"+
		"\u0000\u0000\u2114\u2115\u0005\u0380\u0000\u0000\u2115\u212a\u00051\u0000"+
		"\u0000\u2116\u212a\u0005\u012f\u0000\u0000\u2117\u212a\u0005a\u0000\u0000"+
		"\u2118\u212a\u0005^\u0000\u0000\u2119\u212a\u0005\u0345\u0000\u0000\u211a"+
		"\u212a\u0005\u00b9\u0000\u0000\u211b\u212a\u0005\u022c\u0000\u0000\u211c"+
		"\u212a\u0005\u01b1\u0000\u0000\u211d\u211e\u0005\u0212\u0000\u0000\u211e"+
		"\u211f\u0005\u0380\u0000\u0000\u211f\u212a\u0003\u0208\u0104\u0000\u2120"+
		"\u2121\u0005\u02c8\u0000\u0000\u2121\u2122\u0005\u0380\u0000\u0000\u2122"+
		"\u212a\u0003\u0208\u0104\u0000\u2123\u2124\u0005\u00c5\u0000\u0000\u2124"+
		"\u2125\u0005\u0380\u0000\u0000\u2125\u212a\u0003\u0208\u0104\u0000\u2126"+
		"\u2127\u0005\u00c4\u0000\u0000\u2127\u2128\u0005\u0380\u0000\u0000\u2128"+
		"\u212a\u0003\u0208\u0104\u0000\u2129\u2096\u0001\u0000\u0000\u0000\u2129"+
		"\u2099\u0001\u0000\u0000\u0000\u2129\u209f\u0001\u0000\u0000\u0000\u2129"+
		"\u20a5\u0001\u0000\u0000\u0000\u2129\u20a8\u0001\u0000\u0000\u0000\u2129"+
		"\u20ab\u0001\u0000\u0000\u0000\u2129\u20ae\u0001\u0000\u0000\u0000\u2129"+
		"\u20b4\u0001\u0000\u0000\u0000\u2129\u20ba\u0001\u0000\u0000\u0000\u2129"+
		"\u20c0\u0001\u0000\u0000\u0000\u2129\u20c3\u0001\u0000\u0000\u0000\u2129"+
		"\u20ca\u0001\u0000\u0000\u0000\u2129\u20d1\u0001\u0000\u0000\u0000\u2129"+
		"\u20d4\u0001\u0000\u0000\u0000\u2129\u20dc\u0001\u0000\u0000\u0000\u2129"+
		"\u20e6\u0001\u0000\u0000\u0000\u2129\u20e9\u0001\u0000\u0000\u0000\u2129"+
		"\u20ec\u0001\u0000\u0000\u0000\u2129\u20ef\u0001\u0000\u0000\u0000\u2129"+
		"\u20f2\u0001\u0000\u0000\u0000\u2129\u20f8\u0001\u0000\u0000\u0000\u2129"+
		"\u20fb\u0001\u0000\u0000\u0000\u2129\u20fe\u0001\u0000\u0000\u0000\u2129"+
		"\u2101\u0001\u0000\u0000\u0000\u2129\u2104\u0001\u0000\u0000\u0000\u2129"+
		"\u2107\u0001\u0000\u0000\u0000\u2129\u210a\u0001\u0000\u0000\u0000\u2129"+
		"\u210b\u0001\u0000\u0000\u0000\u2129\u210c\u0001\u0000\u0000\u0000\u2129"+
		"\u210d\u0001\u0000\u0000\u0000\u2129\u2110\u0001\u0000\u0000\u0000\u2129"+
		"\u2113\u0001\u0000\u0000\u0000\u2129\u2116\u0001\u0000\u0000\u0000\u2129"+
		"\u2117\u0001\u0000\u0000\u0000\u2129\u2118\u0001\u0000\u0000\u0000\u2129"+
		"\u2119\u0001\u0000\u0000\u0000\u2129\u211a\u0001\u0000\u0000\u0000\u2129"+
		"\u211b\u0001\u0000\u0000\u0000\u2129\u211c\u0001\u0000\u0000\u0000\u2129"+
		"\u211d\u0001\u0000\u0000\u0000\u2129\u2120\u0001\u0000\u0000\u0000\u2129"+
		"\u2123\u0001\u0000\u0000\u0000\u2129\u2126\u0001\u0000\u0000\u0000\u212a"+
		"\u01e3\u0001\u0000\u0000\u0000\u212b\u212c\u0005\u01dd\u0000\u0000\u212c"+
		"\u2132\u0005\u0380\u0000\u0000\u212d\u2133\u0005\u0093\u0000\u0000\u212e"+
		"\u2133\u0005\u029b\u0000\u0000\u212f\u2133\u0005\u029c\u0000\u0000\u2130"+
		"\u2131\u0005\u029c\u0000\u0000\u2131\u2133\u0005\u0004\u0000\u0000\u2132"+
		"\u212d\u0001\u0000\u0000\u0000\u2132\u212e\u0001\u0000\u0000\u0000\u2132"+
		"\u212f\u0001\u0000\u0000\u0000\u2132\u2130\u0001\u0000\u0000\u0000\u2133"+
		"\u214c\u0001\u0000\u0000\u0000\u2134\u2135\u0005\u0297\u0000\u0000\u2135"+
		"\u2136\u0005\u0380\u0000\u0000\u2136\u214c\u0003\u03f0\u01f8\u0000\u2137"+
		"\u2138\u0005\u0220\u0000\u0000\u2138\u2139\u0005\u0380\u0000\u0000\u2139"+
		"\u214c\u0003\u0208\u0104\u0000\u213a\u213b\u0005\u0253\u0000\u0000\u213b"+
		"\u213c\u0005\u0380\u0000\u0000\u213c\u214c\u0003\u0208\u0104\u0000\u213d"+
		"\u213e\u0005\u018d\u0000\u0000\u213e\u213f\u0005\u0380\u0000\u0000\u213f"+
		"\u214c\u0005h\u0000\u0000\u2140\u214c\u0005g\u0000\u0000\u2141\u214c\u0005"+
		"\u01b1\u0000\u0000\u2142\u2143\u0005\u00de\u0000\u0000\u2143\u2144\u0005"+
		"\u0380\u0000\u0000\u2144\u214c\u0003\u0208\u0104\u0000\u2145\u2146\u0005"+
		"\u0309\u0000\u0000\u2146\u2147\u0005\u0380\u0000\u0000\u2147\u214c\u0003"+
		"\u0208\u0104\u0000\u2148\u2149\u0005\u0111\u0000\u0000\u2149\u214a\u0005"+
		"\u0380\u0000\u0000\u214a\u214c\u0003\u0208\u0104\u0000\u214b\u212b\u0001"+
		"\u0000\u0000\u0000\u214b\u2134\u0001\u0000\u0000\u0000\u214b\u2137\u0001"+
		"\u0000\u0000\u0000\u214b\u213a\u0001\u0000\u0000\u0000\u214b\u213d\u0001"+
		"\u0000\u0000\u0000\u214b\u2140\u0001\u0000\u0000\u0000\u214b\u2141\u0001"+
		"\u0000\u0000\u0000\u214b\u2142\u0001\u0000\u0000\u0000\u214b\u2145\u0001"+
		"\u0000\u0000\u0000\u214b\u2148\u0001\u0000\u0000\u0000\u214c\u01e5\u0001"+
		"\u0000\u0000\u0000\u214d\u214e\u0005\u00da\u0000\u0000\u214e\u214f\u0005"+
		"\u0380\u0000\u0000\u214f\u2150\u0005\u038a\u0000\u0000\u2150\u2151\u0005"+
		"\u030c\u0000\u0000\u2151\u2152\u0005\u0380\u0000\u0000\u2152\u2153\u0007"+
		"8\u0000\u0000\u2153\u2154\u0005\u038b\u0000\u0000\u2154\u01e7\u0001\u0000"+
		"\u0000\u0000\u2155\u2156\u0005\u030c\u0000\u0000\u2156\u2157\u0005\u0380"+
		"\u0000\u0000\u2157\u2158\u0003\u03ca\u01e5\u0000\u2158\u01e9\u0001\u0000"+
		"\u0000\u0000\u2159\u215a\u0005\u0189\u0000\u0000\u215a\u215b\u0005\u0380"+
		"\u0000\u0000\u215b\u215c\u0003\u03ca\u01e5\u0000\u215c\u01eb\u0001\u0000"+
		"\u0000\u0000\u215d\u215e\u0005\u016a\u0000\u0000\u215e\u215f\u0005\u0380"+
		"\u0000\u0000\u215f\u2160\u0003\u03ca\u01e5\u0000\u2160\u01ed\u0001\u0000"+
		"\u0000\u0000\u2161\u2162\u0005\u00da\u0000\u0000\u2162\u2163\u0005\u0380"+
		"\u0000\u0000\u2163\u216c\u0005\u038a\u0000\u0000\u2164\u2166\u0003\u01e8"+
		"\u00f4\u0000\u2165\u2164\u0001\u0000\u0000\u0000\u2165\u2166\u0001\u0000"+
		"\u0000\u0000\u2166\u2167\u0001\u0000\u0000\u0000\u2167\u216d\u0003\u01ea"+
		"\u00f5\u0000\u2168\u216a\u0003\u01e8\u00f4\u0000\u2169\u216b\u0003\u01ec"+
		"\u00f6\u0000\u216a\u2169\u0001\u0000\u0000\u0000\u216a\u216b\u0001\u0000"+
		"\u0000\u0000\u216b\u216d\u0001\u0000\u0000\u0000\u216c\u2165\u0001\u0000"+
		"\u0000\u0000\u216c\u2168\u0001\u0000\u0000\u0000\u216d\u216e\u0001\u0000"+
		"\u0000\u0000\u216e\u216f\u0005\u038b\u0000\u0000\u216f\u01ef\u0001\u0000"+
		"\u0000\u0000\u2170\u2171\u0005F\u0000\u0000\u2171\u2172\u0005\u0380\u0000"+
		"\u0000\u2172\u2173\u0003\u03ca\u01e5\u0000\u2173\u01f1\u0001\u0000\u0000"+
		"\u0000\u2174\u2175\u0005?\u0000\u0000\u2175\u2176\u0005\u0380\u0000\u0000"+
		"\u2176\u2177\u0003\u03ca\u01e5\u0000\u2177\u01f3\u0001\u0000\u0000\u0000"+
		"\u2178\u2179\u0005A\u0000\u0000\u2179\u217a\u0005\u0380\u0000\u0000\u217a"+
		"\u217b\u0003\u03ca\u01e5\u0000\u217b\u01f5\u0001\u0000\u0000\u0000\u217c"+
		"\u217d\u0005@\u0000\u0000\u217d\u217e\u0005\u0380\u0000\u0000\u217e\u217f"+
		"\u0003\u03ca\u01e5\u0000\u217f\u01f7\u0001\u0000\u0000\u0000\u2180\u2181"+
		"\u0005\u030c\u0000\u0000\u2181\u2182\u0005\u0380\u0000\u0000\u2182\u2184"+
		"\u0005I\u0000\u0000\u2183\u2180\u0001\u0000\u0000\u0000\u2183\u2184\u0001"+
		"\u0000\u0000\u0000\u2184\u2185\u0001\u0000\u0000\u0000\u2185\u2186\u0005"+
		"\u0189\u0000\u0000\u2186\u2187\u0005\u0380\u0000\u0000\u2187\u2193\u0003"+
		"\u03ca\u01e5\u0000\u2188\u2189\u0005\u0189\u0000\u0000\u2189\u218a\u0005"+
		"\u0380\u0000\u0000\u218a\u218b\u0003\u03ca\u01e5\u0000\u218b\u218c\u0005"+
		"\u030c\u0000\u0000\u218c\u218d\u0005\u0380\u0000\u0000\u218d\u218e\u0005"+
		"I\u0000\u0000\u218e\u2193\u0001\u0000\u0000\u0000\u218f\u2190\u0005\u030c"+
		"\u0000\u0000\u2190\u2191\u0005\u0380\u0000\u0000\u2191\u2193\u0005\u01b2"+
		"\u0000\u0000\u2192\u2183\u0001\u0000\u0000\u0000\u2192\u2188\u0001\u0000"+
		"\u0000\u0000\u2192\u218f\u0001\u0000\u0000\u0000\u2193\u01f9\u0001\u0000"+
		"\u0000\u0000\u2194\u2195\u0005\u00da\u0000\u0000\u2195\u2196\u0005\u0380"+
		"\u0000\u0000\u2196\u2197\u0005\u038a\u0000\u0000\u2197\u2198\u0003\u01f8"+
		"\u00fc\u0000\u2198\u2199\u0005\u038b\u0000\u0000\u2199\u01fb\u0001\u0000"+
		"\u0000\u0000\u219a\u219b\u0005\u02c0\u0000\u0000\u219b\u219c\u0005\u0380"+
		"\u0000\u0000\u219c\u219d\u0003\u03d0\u01e8\u0000\u219d\u01fd\u0001\u0000"+
		"\u0000\u0000\u219e\u21a8\u0003\u01fc\u00fe\u0000\u219f\u21a0\u0005\u0098"+
		"\u0000\u0000\u21a0\u21a1\u0005\u0380\u0000\u0000\u21a1\u21a2\u0005\u038a"+
		"\u0000\u0000\u21a2\u21a3\u0005M\u0000\u0000\u21a3\u21a4\u0005\u0380\u0000"+
		"\u0000\u21a4\u21a5\u0003\u03ca\u01e5\u0000\u21a5\u21a6\u0005\u038b\u0000"+
		"\u0000\u21a6\u21a8\u0001\u0000\u0000\u0000\u21a7\u219e\u0001\u0000\u0000"+
		"\u0000\u21a7\u219f\u0001\u0000\u0000\u0000\u21a8\u01ff\u0001\u0000\u0000"+
		"\u0000\u21a9\u21aa\u0005\u030c\u0000\u0000\u21aa\u21ab\u0005\u0380\u0000"+
		"\u0000\u21ab\u21ad\u0005\u0120\u0000\u0000\u21ac\u21a9\u0001\u0000\u0000"+
		"\u0000\u21ac\u21ad\u0001\u0000\u0000\u0000\u21ad\u21ae\u0001\u0000\u0000"+
		"\u0000\u21ae\u21af\u0005\u016a\u0000\u0000\u21af\u21b0\u0005\u0380\u0000"+
		"\u0000\u21b0\u21bc\u0003\u03ca\u01e5\u0000\u21b1\u21b2\u0005\u016a\u0000"+
		"\u0000\u21b2\u21b3\u0005\u0380\u0000\u0000\u21b3\u21b4\u0003\u03ca\u01e5"+
		"\u0000\u21b4\u21b5\u0005\u030c\u0000\u0000\u21b5\u21b6\u0005\u0380\u0000"+
		"\u0000\u21b6\u21b7\u0005\u0120\u0000\u0000\u21b7\u21bc\u0001\u0000\u0000"+
		"\u0000\u21b8\u21b9\u0005\u030c\u0000\u0000\u21b9\u21ba\u0005\u0380\u0000"+
		"\u0000\u21ba\u21bc\u0005\u01b2\u0000\u0000\u21bb\u21ac\u0001\u0000\u0000"+
		"\u0000\u21bb\u21b1\u0001\u0000\u0000\u0000\u21bb\u21b8\u0001\u0000\u0000"+
		"\u0000\u21bc\u0201\u0001\u0000\u0000\u0000\u21bd\u21be\u0005\u00da\u0000"+
		"\u0000\u21be\u21bf\u0005\u0380\u0000\u0000\u21bf\u21c0\u0005\u038a\u0000"+
		"\u0000\u21c0\u21c1\u0003\u0200\u0100\u0000\u21c1\u21c2\u0005\u038b\u0000"+
		"\u0000\u21c2\u0203\u0001\u0000\u0000\u0000\u21c3\u21d2\u0003\u01fc\u00fe"+
		"\u0000\u21c4\u21c5\u0005\u0098\u0000\u0000\u21c5\u21c6\u0005\u0380\u0000"+
		"\u0000\u21c6\u21cd\u0005\u038a\u0000\u0000\u21c7\u21c8\u0003\u01f2\u00f9"+
		"\u0000\u21c8\u21ca\u0003\u01f4\u00fa\u0000\u21c9\u21cb\u0003\u01f0\u00f8"+
		"\u0000\u21ca\u21c9\u0001\u0000\u0000\u0000\u21ca\u21cb\u0001\u0000\u0000"+
		"\u0000\u21cb\u21ce\u0001\u0000\u0000\u0000\u21cc\u21ce\u0003\u01f6\u00fb"+
		"\u0000\u21cd\u21c7\u0001\u0000\u0000\u0000\u21cd\u21cc\u0001\u0000\u0000"+
		"\u0000\u21ce\u21cf\u0001\u0000\u0000\u0000\u21cf\u21d0\u0005\u038b\u0000"+
		"\u0000\u21d0\u21d2\u0001\u0000\u0000\u0000\u21d1\u21c3\u0001\u0000\u0000"+
		"\u0000\u21d1\u21c4\u0001\u0000\u0000\u0000\u21d2\u0205\u0001\u0000\u0000"+
		"\u0000\u21d3\u21d4\u0005\u0316\u0000\u0000\u21d4\u21d5\u0005\u0380\u0000"+
		"\u0000\u21d5\u21de\u00079\u0000\u0000\u21d6\u21d8\u0003\u0204\u0102\u0000"+
		"\u21d7\u21d6\u0001\u0000\u0000\u0000\u21d7\u21d8\u0001\u0000\u0000\u0000"+
		"\u21d8\u21d9\u0001\u0000\u0000\u0000\u21d9\u21df\u0003\u01ee\u00f7\u0000"+
		"\u21da\u21dc\u0003\u01ee\u00f7\u0000\u21db\u21da\u0001\u0000\u0000\u0000"+
		"\u21db\u21dc\u0001\u0000\u0000\u0000\u21dc\u21dd\u0001\u0000\u0000\u0000"+
		"\u21dd\u21df\u0003\u0204\u0102\u0000\u21de\u21d7\u0001\u0000\u0000\u0000"+
		"\u21de\u21db\u0001\u0000\u0000\u0000\u21de\u21df\u0001\u0000\u0000\u0000"+
		"\u21df\u21fb\u0001\u0000\u0000\u0000\u21e0\u21e1\u0005\u0316\u0000\u0000"+
		"\u21e1\u21e2\u0005\u0380\u0000\u0000\u21e2\u21eb\u0005\u0373\u0000\u0000"+
		"\u21e3\u21e5\u0003\u01fc\u00fe\u0000\u21e4\u21e3\u0001\u0000\u0000\u0000"+
		"\u21e4\u21e5\u0001\u0000\u0000\u0000\u21e5\u21e6\u0001\u0000\u0000\u0000"+
		"\u21e6\u21ec\u0003\u0202\u0101\u0000\u21e7\u21e9\u0003\u0202\u0101\u0000"+
		"\u21e8\u21e7\u0001\u0000\u0000\u0000\u21e8\u21e9\u0001\u0000\u0000\u0000"+
		"\u21e9\u21ea\u0001\u0000\u0000\u0000\u21ea\u21ec\u0003\u01fc\u00fe\u0000"+
		"\u21eb\u21e4\u0001\u0000\u0000\u0000\u21eb\u21e8\u0001\u0000\u0000\u0000"+
		"\u21eb\u21ec\u0001\u0000\u0000\u0000\u21ec\u21fb\u0001\u0000\u0000\u0000"+
		"\u21ed\u21ee\u0005\u0316\u0000\u0000\u21ee\u21ef\u0005\u0380\u0000\u0000"+
		"\u21ef\u21f8\u0005\u0374\u0000\u0000\u21f0\u21f2\u0003\u01fe\u00ff\u0000"+
		"\u21f1\u21f0\u0001\u0000\u0000\u0000\u21f1\u21f2\u0001\u0000\u0000\u0000"+
		"\u21f2\u21f3\u0001\u0000\u0000\u0000\u21f3\u21f9\u0003\u01fa\u00fd\u0000"+
		"\u21f4\u21f6\u0003\u01fa\u00fd\u0000\u21f5\u21f4\u0001\u0000\u0000\u0000"+
		"\u21f5\u21f6\u0001\u0000\u0000\u0000\u21f6\u21f7\u0001\u0000\u0000\u0000"+
		"\u21f7\u21f9\u0003\u01fe\u00ff\u0000\u21f8\u21f1\u0001\u0000\u0000\u0000"+
		"\u21f8\u21f5\u0001\u0000\u0000\u0000\u21f8\u21f9\u0001\u0000\u0000\u0000"+
		"\u21f9\u21fb\u0001\u0000\u0000\u0000\u21fa\u21d3\u0001\u0000\u0000\u0000"+
		"\u21fa\u21e0\u0001\u0000\u0000\u0000\u21fa\u21ed\u0001\u0000\u0000\u0000"+
		"\u21fb\u0207\u0001\u0000\u0000\u0000\u21fc\u21fd\u0007:\u0000\u0000\u21fd"+
		"\u0209\u0001\u0000\u0000\u0000\u21fe\u21ff\u0005\u00d2\u0000\u0000\u21ff"+
		"\u2200\u0005\u0380\u0000\u0000\u2200\u2201\u0003\u0208\u0104\u0000\u2201"+
		"\u020b\u0001\u0000\u0000\u0000\u2202\u2203";
	private static final String _serializedATNSegment4 =
		"\u0005\u0236\u0000\u0000\u2203\u2204\u0005\u0380\u0000\u0000\u2204\u2205"+
		"\u0003\u0208\u0104\u0000\u2205\u020d\u0001\u0000\u0000\u0000\u2206\u2207"+
		"\u00059\u0000\u0000\u2207\u2208\u0005\u0380\u0000\u0000\u2208\u2209\u0003"+
		"\u0208\u0104\u0000\u2209\u020f\u0001\u0000\u0000\u0000\u220a\u220b\u0005"+
		"\u01b7\u0000\u0000\u220b\u220c\u0005\u0380\u0000\u0000\u220c\u220d\u0003"+
		"\u03ca\u01e5\u0000\u220d\u0211\u0001\u0000\u0000\u0000\u220e\u220f\u0005"+
		"\u00c1\u0000\u0000\u220f\u2210\u0005\u0380\u0000\u0000\u2210\u221b\u0005"+
		"\u038a\u0000\u0000\u2211\u2213\u0003\u020a\u0105\u0000\u2212\u2214\u0003"+
		"\u020c\u0106\u0000\u2213\u2212\u0001\u0000\u0000\u0000\u2213\u2214\u0001"+
		"\u0000\u0000\u0000\u2214\u221c\u0001\u0000\u0000\u0000\u2215\u2216\u0005"+
		"\u0236\u0000\u0000\u2216\u2217\u0005\u0380\u0000\u0000\u2217\u221c\u0005"+
		"\u0104\u0000\u0000\u2218\u2219\u0003\u020c\u0106\u0000\u2219\u221a\u0003"+
		"\u020a\u0105\u0000\u221a\u221c\u0001\u0000\u0000\u0000\u221b\u2211\u0001"+
		"\u0000\u0000\u0000\u221b\u2215\u0001\u0000\u0000\u0000\u221b\u2218\u0001"+
		"\u0000\u0000\u0000\u221c\u221d\u0001\u0000\u0000\u0000\u221d\u221e\u0005"+
		"\u038b\u0000\u0000\u221e\u0213\u0001\u0000\u0000\u0000\u221f\u2220\u0005"+
		"\u00c1\u0000\u0000\u2220\u2221\u0005\u0380\u0000\u0000\u2221\u2222\u0005"+
		"\u038a\u0000\u0000\u2222\u2224\u0003\u020a\u0105\u0000\u2223\u2225\u0003"+
		"\u020c\u0106\u0000\u2224\u2223\u0001\u0000\u0000\u0000\u2224\u2225\u0001"+
		"\u0000\u0000\u0000\u2225\u2227\u0001\u0000\u0000\u0000\u2226\u2228\u0003"+
		"\u020e\u0107\u0000\u2227\u2226\u0001\u0000\u0000\u0000\u2227\u2228\u0001"+
		"\u0000\u0000\u0000\u2228\u2229\u0001\u0000\u0000\u0000\u2229\u222a\u0005"+
		"\u038b\u0000\u0000\u222a\u224a\u0001\u0000\u0000\u0000\u222b\u222c\u0005"+
		"\u00c1\u0000\u0000\u222c\u222d\u0005\u0380\u0000\u0000\u222d\u222e\u0005"+
		"\u038a\u0000\u0000\u222e\u2230\u0003\u020a\u0105\u0000\u222f\u2231\u0003"+
		"\u020e\u0107\u0000\u2230\u222f\u0001\u0000\u0000\u0000\u2230\u2231\u0001"+
		"\u0000\u0000\u0000\u2231\u2233\u0001\u0000\u0000\u0000\u2232\u2234\u0003"+
		"\u020c\u0106\u0000\u2233\u2232\u0001\u0000\u0000\u0000\u2233\u2234\u0001"+
		"\u0000\u0000\u0000\u2234\u2236\u0001\u0000\u0000\u0000\u2235\u2237\u0003"+
		"\u0210\u0108\u0000\u2236\u2235\u0001\u0000\u0000\u0000\u2236\u2237\u0001"+
		"\u0000\u0000\u0000\u2237\u2238\u0001\u0000\u0000\u0000\u2238\u2239\u0005"+
		"\u038b\u0000\u0000\u2239\u224a\u0001\u0000\u0000\u0000\u223a\u223b\u0005"+
		"\u00c1\u0000\u0000\u223b\u223c\u0005\u0380\u0000\u0000\u223c\u223d\u0005"+
		"\u038a\u0000\u0000\u223d\u223f\u0003\u020a\u0105\u0000\u223e\u2240\u0003"+
		"\u020c\u0106\u0000\u223f\u223e\u0001\u0000\u0000\u0000\u223f\u2240\u0001"+
		"\u0000\u0000\u0000\u2240\u2242\u0001\u0000\u0000\u0000\u2241\u2243\u0003"+
		"\u020e\u0107\u0000\u2242\u2241\u0001\u0000\u0000\u0000\u2242\u2243\u0001"+
		"\u0000\u0000\u0000\u2243\u2245\u0001\u0000\u0000\u0000\u2244\u2246\u0003"+
		"\u0210\u0108\u0000\u2245\u2244\u0001\u0000\u0000\u0000\u2245\u2246\u0001"+
		"\u0000\u0000\u0000\u2246\u2247\u0001\u0000\u0000\u0000\u2247\u2248\u0005"+
		"\u038b\u0000\u0000\u2248\u224a\u0001\u0000\u0000\u0000\u2249\u221f\u0001"+
		"\u0000\u0000\u0000\u2249\u222b\u0001\u0000\u0000\u0000\u2249\u223a\u0001"+
		"\u0000\u0000\u0000\u224a\u0215\u0001\u0000\u0000\u0000\u224b\u224d\u0005"+
		"\u0097\u0000\u0000\u224c\u224e\u0003\u02fc\u017e\u0000\u224d\u224c\u0001"+
		"\u0000\u0000\u0000\u224d\u224e\u0001\u0000\u0000\u0000\u224e\u2250\u0001"+
		"\u0000\u0000\u0000\u224f\u2251\u0003\u0234\u011a\u0000\u2250\u224f\u0001"+
		"\u0000\u0000\u0000\u2250\u2251\u0001\u0000\u0000\u0000\u2251\u2252\u0001"+
		"\u0000\u0000\u0000\u2252\u2254\u0005\u02ac\u0000\u0000\u2253\u2255\u0003"+
		"\u02fa\u017d\u0000\u2254\u2253\u0001\u0000\u0000\u0000\u2254\u2255\u0001"+
		"\u0000\u0000\u0000\u2255\u2256\u0001\u0000\u0000\u0000\u2256\u2258\u0003"+
		"\u03ee\u01f7\u0000\u2257\u2259\u0003\u01e6\u00f3\u0000\u2258\u2257\u0001"+
		"\u0000\u0000\u0000\u2258\u2259\u0001\u0000\u0000\u0000\u2259\u225b\u0001"+
		"\u0000\u0000\u0000\u225a\u225c\u0003\u0212\u0109\u0000\u225b\u225a\u0001"+
		"\u0000\u0000\u0000\u225b\u225c\u0001\u0000\u0000\u0000\u225c\u2270\u0001"+
		"\u0000\u0000\u0000\u225d\u225e\u0005\u010b\u0000\u0000\u225e\u225f\u0005"+
		"\u0380\u0000\u0000\u225f\u226c\u0005\u038a\u0000\u0000\u2260\u2261\u0005"+
		"\u0115\u0000\u0000\u2261\u2262\u0005\u0380\u0000\u0000\u2262\u226d\u0003"+
		"\u03ca\u01e5\u0000\u2263\u2264\u0005\u030c\u0000\u0000\u2264\u2265\u0005"+
		"\u0380\u0000\u0000\u2265\u2269\u0003\u0186\u00c3\u0000\u2266\u2268\u0003"+
		"\u01e2\u00f1\u0000\u2267\u2266\u0001\u0000\u0000\u0000\u2268\u226b\u0001"+
		"\u0000\u0000\u0000\u2269\u2267\u0001\u0000\u0000\u0000\u2269\u226a\u0001"+
		"\u0000\u0000\u0000\u226a\u226d\u0001\u0000\u0000\u0000\u226b\u2269\u0001"+
		"\u0000\u0000\u0000\u226c\u2260\u0001\u0000\u0000\u0000\u226c\u2263\u0001"+
		"\u0000\u0000\u0000\u226d\u226e\u0001\u0000\u0000\u0000\u226e\u226f\u0005"+
		"\u038b\u0000\u0000\u226f\u2271\u0001\u0000\u0000\u0000\u2270\u225d\u0001"+
		"\u0000\u0000\u0000\u2270\u2271\u0001\u0000\u0000\u0000\u2271\u2278\u0001"+
		"\u0000\u0000\u0000\u2272\u2273\u0005\u0095\u0000\u0000\u2273\u2274\u0005"+
		"\u0380\u0000\u0000\u2274\u2275\u0005\u038a\u0000\u0000\u2275\u2276\u0003"+
		"\u01e4\u00f2\u0000\u2276\u2277\u0005\u038b\u0000\u0000\u2277\u2279\u0001"+
		"\u0000\u0000\u0000\u2278\u2272\u0001\u0000\u0000\u0000\u2278\u2279\u0001"+
		"\u0000\u0000\u0000\u2279\u227b\u0001\u0000\u0000\u0000\u227a\u227c\u0003"+
		"\u0238\u011c\u0000\u227b\u227a\u0001\u0000\u0000\u0000\u227b\u227c\u0001"+
		"\u0000\u0000\u0000\u227c\u227e\u0001\u0000\u0000\u0000\u227d\u227f\u0003"+
		"\u02f2\u0179\u0000\u227e\u227d\u0001\u0000\u0000\u0000\u227e\u227f\u0001"+
		"\u0000\u0000\u0000\u227f\u22b4\u0001\u0000\u0000\u0000\u2280\u2282\u0005"+
		"\u0097\u0000\u0000\u2281\u2283\u0003\u02fc\u017e\u0000\u2282\u2281\u0001"+
		"\u0000\u0000\u0000\u2282\u2283\u0001\u0000\u0000\u0000\u2283\u2285\u0001"+
		"\u0000\u0000\u0000\u2284\u2286\u0003\u0234\u011a\u0000\u2285\u2284\u0001"+
		"\u0000\u0000\u0000\u2285\u2286\u0001\u0000\u0000\u0000\u2286\u2287\u0001"+
		"\u0000\u0000\u0000\u2287\u2289\u0005\u02ac\u0000\u0000\u2288\u228a\u0003"+
		"\u02fa\u017d\u0000\u2289\u2288\u0001\u0000\u0000\u0000\u2289\u228a\u0001"+
		"\u0000\u0000\u0000\u228a\u228b\u0001\u0000\u0000\u0000\u228b\u228c\u0003"+
		"\u03ee\u01f7\u0000\u228c\u228e\u0003\u0206\u0103\u0000\u228d\u228f\u0003"+
		"\u0214\u010a\u0000\u228e\u228d\u0001\u0000\u0000\u0000\u228e\u228f\u0001"+
		"\u0000\u0000\u0000\u228f\u22a3\u0001\u0000\u0000\u0000\u2290\u2291\u0005"+
		"\u010b\u0000\u0000\u2291\u2292\u0005\u0380\u0000\u0000\u2292\u229f\u0005"+
		"\u038a\u0000\u0000\u2293\u2294\u0005\u0115\u0000\u0000\u2294\u2295\u0005"+
		"\u0380\u0000\u0000\u2295\u22a0\u0003\u03ca\u01e5\u0000\u2296\u2297\u0005"+
		"\u030c\u0000\u0000\u2297\u2298\u0005\u0380\u0000\u0000\u2298\u229c\u0003"+
		"\u0186\u00c3\u0000\u2299\u229b\u0003\u01e2\u00f1\u0000\u229a\u2299\u0001"+
		"\u0000\u0000\u0000\u229b\u229e\u0001\u0000\u0000\u0000\u229c\u229a\u0001"+
		"\u0000\u0000\u0000\u229c\u229d\u0001\u0000\u0000\u0000\u229d\u22a0\u0001"+
		"\u0000\u0000\u0000\u229e\u229c\u0001\u0000\u0000\u0000\u229f\u2293\u0001"+
		"\u0000\u0000\u0000\u229f\u2296\u0001\u0000\u0000\u0000\u22a0\u22a1\u0001"+
		"\u0000\u0000\u0000\u22a1\u22a2\u0005\u038b\u0000\u0000\u22a2\u22a4\u0001"+
		"\u0000\u0000\u0000\u22a3\u2290\u0001\u0000\u0000\u0000\u22a3\u22a4\u0001"+
		"\u0000\u0000\u0000\u22a4\u22ab\u0001\u0000\u0000\u0000\u22a5\u22a6\u0005"+
		"\u0095\u0000\u0000\u22a6\u22a7\u0005\u0380\u0000\u0000\u22a7\u22a8\u0005"+
		"\u038a\u0000\u0000\u22a8\u22a9\u0003\u01e4\u00f2\u0000\u22a9\u22aa\u0005"+
		"\u038b\u0000\u0000\u22aa\u22ac\u0001\u0000\u0000\u0000\u22ab\u22a5\u0001"+
		"\u0000\u0000\u0000\u22ab\u22ac\u0001\u0000\u0000\u0000\u22ac\u22ae\u0001"+
		"\u0000\u0000\u0000\u22ad\u22af\u0003\u0238\u011c\u0000\u22ae\u22ad\u0001"+
		"\u0000\u0000\u0000\u22ae\u22af\u0001\u0000\u0000\u0000\u22af\u22b1\u0001"+
		"\u0000\u0000\u0000\u22b0\u22b2\u0003\u02f2\u0179\u0000\u22b1\u22b0\u0001"+
		"\u0000\u0000\u0000\u22b1\u22b2\u0001\u0000\u0000\u0000\u22b2\u22b4\u0001"+
		"\u0000\u0000\u0000\u22b3\u224b\u0001\u0000\u0000\u0000\u22b3\u2280\u0001"+
		"\u0000\u0000\u0000\u22b4\u0217\u0001\u0000\u0000\u0000\u22b5\u22b6\u0005"+
		"\u001c\u0000\u0000\u22b6\u22b8\u0005\u02ac\u0000\u0000\u22b7\u22b9\u0003"+
		"\u02f8\u017c\u0000\u22b8\u22b7\u0001\u0000\u0000\u0000\u22b8\u22b9\u0001"+
		"\u0000\u0000\u0000\u22b9\u22ba\u0001\u0000\u0000\u0000\u22ba\u22bb\u0003"+
		"\u03ee\u01f7\u0000\u22bb\u22bc\u0005\u023c\u0000\u0000\u22bc\u22bd\u0005"+
		"\u02f9\u0000\u0000\u22bd\u22be\u0003\u03ee\u01f7\u0000\u22be\u22e8\u0001"+
		"\u0000\u0000\u0000\u22bf\u22c0\u0005\u001c\u0000\u0000\u22c0\u22c2\u0005"+
		"\u02ac\u0000\u0000\u22c1\u22c3\u0003\u02f8\u017c\u0000\u22c2\u22c1\u0001"+
		"\u0000\u0000\u0000\u22c2\u22c3\u0001\u0000\u0000\u0000\u22c3\u22c4\u0001"+
		"\u0000\u0000\u0000\u22c4\u22c5\u0003\u03ee\u01f7\u0000\u22c5\u22c6\u0003"+
		"\u0148\u00a4\u0000\u22c6\u22e8\u0001\u0000\u0000\u0000\u22c7\u22c8\u0005"+
		"\u001c\u0000\u0000\u22c8\u22ca\u0005\u02ac\u0000\u0000\u22c9\u22cb\u0003"+
		"\u02f8\u017c\u0000\u22ca\u22c9\u0001\u0000\u0000\u0000\u22ca\u22cb\u0001"+
		"\u0000\u0000\u0000\u22cb\u22cc\u0001\u0000\u0000\u0000\u22cc\u22cd\u0003"+
		"\u03ee\u01f7\u0000\u22cd\u22ce\u0003\u014c\u00a6\u0000\u22ce\u22e8\u0001"+
		"\u0000\u0000\u0000\u22cf\u22d0\u0005\u001c\u0000\u0000\u22d0\u22d2\u0005"+
		"\u02ac\u0000\u0000\u22d1\u22d3\u0003\u02f8\u017c\u0000\u22d2\u22d1\u0001"+
		"\u0000\u0000\u0000\u22d2\u22d3\u0001\u0000\u0000\u0000\u22d3\u22d4\u0001"+
		"\u0000\u0000\u0000\u22d4\u22d5\u0003\u03ee\u01f7\u0000\u22d5\u22d7\u0005"+
		"\u028e\u0000\u0000\u22d6\u22d8\u0003\u0206\u0103\u0000\u22d7\u22d6\u0001"+
		"\u0000\u0000\u0000\u22d7\u22d8\u0001\u0000\u0000\u0000\u22d8\u22da\u0001"+
		"\u0000\u0000\u0000\u22d9\u22db\u00030\u0018\u0000\u22da\u22d9\u0001\u0000"+
		"\u0000\u0000\u22da\u22db\u0001\u0000\u0000\u0000\u22db\u22e2\u0001\u0000"+
		"\u0000\u0000\u22dc\u22dd\u0005\u0095\u0000\u0000\u22dd\u22de\u0005\u0380"+
		"\u0000\u0000\u22de\u22df\u0005\u038a\u0000\u0000\u22df\u22e0\u0003\u01e4"+
		"\u00f2\u0000\u22e0\u22e1\u0005\u038b\u0000\u0000\u22e1\u22e3\u0001\u0000"+
		"\u0000\u0000\u22e2\u22dc\u0001\u0000\u0000\u0000\u22e2\u22e3\u0001\u0000"+
		"\u0000\u0000\u22e3\u22e5\u0001\u0000\u0000\u0000\u22e4\u22e6\u0003\u02f2"+
		"\u0179\u0000\u22e5\u22e4\u0001\u0000\u0000\u0000\u22e5\u22e6\u0001\u0000"+
		"\u0000\u0000\u22e6\u22e8\u0001\u0000\u0000\u0000\u22e7\u22b5\u0001\u0000"+
		"\u0000\u0000\u22e7\u22bf\u0001\u0000\u0000\u0000\u22e7\u22c7\u0001\u0000"+
		"\u0000\u0000\u22e7\u22cf\u0001\u0000\u0000\u0000\u22e8\u0219\u0001\u0000"+
		"\u0000\u0000\u22e9\u22ea\u0005\u00ca\u0000\u0000\u22ea\u22ec\u0005\u02ac"+
		"\u0000\u0000\u22eb\u22ed\u0003\u02f8\u017c\u0000\u22ec\u22eb\u0001\u0000"+
		"\u0000\u0000\u22ec\u22ed\u0001\u0000\u0000\u0000\u22ed\u22ee\u0001\u0000"+
		"\u0000\u0000\u22ee\u22ef\u0003\u03ee\u01f7\u0000\u22ef\u021b\u0001\u0000"+
		"\u0000\u0000\u22f0\u22f1\u0003\u0300\u0180\u0000\u22f1\u22f2\u0005\u02ac"+
		"\u0000\u0000\u22f2\u22f3\u0003\u03ee\u01f7\u0000\u22f3\u021d\u0001\u0000"+
		"\u0000\u0000\u22f4\u22f5\u0005\u0293\u0000\u0000\u22f5\u22f7\u0005\u02ad"+
		"\u0000\u0000\u22f6\u22f8\u0003\u03b4\u01da\u0000\u22f7\u22f6\u0001\u0000"+
		"\u0000\u0000\u22f7\u22f8\u0001\u0000\u0000\u0000\u22f8\u22fa\u0001\u0000"+
		"\u0000\u0000\u22f9\u22fb\u0003\u036e\u01b7\u0000\u22fa\u22f9\u0001\u0000"+
		"\u0000\u0000\u22fa\u22fb\u0001\u0000\u0000\u0000\u22fb\u021f\u0001\u0000"+
		"\u0000\u0000\u22fc\u22fd\u0005\u02c1\u0000\u0000\u22fd\u22fe\u0005\u0380"+
		"\u0000\u0000\u22fe\u22ff\u0005\u0268\u0000\u0000\u22ff\u2300\u0005\u02be"+
		"\u0000\u0000\u2300\u2301\u0005\u0380\u0000\u0000\u2301\u2305\u0003\u03ca"+
		"\u01e5\u0000\u2302\u2303\u0005\u02bd\u0000\u0000\u2303\u2304\u0005\u0380"+
		"\u0000\u0000\u2304\u2306\u0003\u03ca\u01e5\u0000\u2305\u2302\u0001\u0000"+
		"\u0000\u0000\u2305\u2306\u0001\u0000\u0000\u0000\u2306\u2311\u0001\u0000"+
		"\u0000\u0000\u2307\u2308\u0005\u02c1\u0000\u0000\u2308\u2309\u0005\u0380"+
		"\u0000\u0000\u2309\u2311\u0005\u011f\u0000\u0000\u230a\u230b\u0005\u02c1"+
		"\u0000\u0000\u230b\u230c\u0005\u0380\u0000\u0000\u230c\u230d\u0005G\u0000"+
		"\u0000\u230d\u230e\u0005O\u0000\u0000\u230e\u230f\u0005\u0380\u0000\u0000"+
		"\u230f\u2311\u0003\u03ca\u01e5\u0000\u2310\u22fc\u0001\u0000\u0000\u0000"+
		"\u2310\u2307\u0001\u0000\u0000\u0000\u2310\u230a\u0001\u0000\u0000\u0000"+
		"\u2311\u0221\u0001\u0000\u0000\u0000\u2312\u2313\u0005\u02be\u0000\u0000"+
		"\u2313\u2314\u0005\u0380\u0000\u0000\u2314\u2318\u0003\u03ca\u01e5\u0000"+
		"\u2315\u2316\u0005\u02bd\u0000\u0000\u2316\u2317\u0005\u0380\u0000\u0000"+
		"\u2317\u2319\u0003\u03ca\u01e5\u0000\u2318\u2315\u0001\u0000\u0000\u0000"+
		"\u2318\u2319\u0001\u0000\u0000\u0000\u2319\u231e\u0001\u0000\u0000\u0000"+
		"\u231a\u231b\u0005O\u0000\u0000\u231b\u231c\u0005\u0380\u0000\u0000\u231c"+
		"\u231e\u0003\u03ca\u01e5\u0000\u231d\u2312\u0001\u0000\u0000\u0000\u231d"+
		"\u231a\u0001\u0000\u0000\u0000\u231e\u0223\u0001\u0000\u0000\u0000\u231f"+
		"\u2320\u0005\u0158\u0000\u0000\u2320\u2321\u0005\u0380\u0000\u0000\u2321"+
		"\u2322\u0003\u03ca\u01e5\u0000\u2322\u0225\u0001\u0000\u0000\u0000\u2323"+
		"\u2325\u0005\u0097\u0000\u0000\u2324\u2326\u0003\u02fc\u017e\u0000\u2325"+
		"\u2324\u0001\u0000\u0000\u0000\u2325\u2326\u0001\u0000\u0000\u0000\u2326"+
		"\u2327\u0001\u0000\u0000\u0000\u2327\u2328\u0005\u02bb\u0000\u0000\u2328"+
		"\u232a\u0005\u0158\u0000\u0000\u2329\u232b\u0003\u02fa\u017d\u0000\u232a"+
		"\u2329\u0001\u0000\u0000\u0000\u232a\u232b\u0001\u0000\u0000\u0000\u232b"+
		"\u232c\u0001\u0000\u0000\u0000\u232c\u232d\u0003\u03d0\u01e8\u0000\u232d"+
		"\u232e\u0005\u030c\u0000\u0000\u232e\u232f\u0005\u0380\u0000\u0000\u232f"+
		"\u2330\u0005\u0102\u0000\u0000\u2330\u2331\u0003\u0220\u0110\u0000\u2331"+
		"\u2332\u0005\u00d3\u0000\u0000\u2332\u2333\u0005\u0380\u0000\u0000\u2333"+
		"\u2334\u0003\u0208\u0104\u0000\u2334\u2335\u0005\u02bc\u0000\u0000\u2335"+
		"\u2336\u0005\u0380\u0000\u0000\u2336\u2337\u0005\u038a\u0000\u0000\u2337"+
		"\u2338\u0003\u03cc\u01e6\u0000\u2338\u233f\u0005\u038b\u0000\u0000\u2339"+
		"\u233a\u0005\u02bf\u0000\u0000\u233a\u233b\u0005\u0380\u0000\u0000\u233b"+
		"\u233c\u0005\u038a\u0000\u0000\u233c\u233d\u0003\u03cc\u01e6\u0000\u233d"+
		"\u233e\u0005\u038b\u0000\u0000\u233e\u2340\u0001\u0000\u0000\u0000\u233f"+
		"\u2339\u0001\u0000\u0000\u0000\u233f\u2340\u0001\u0000\u0000\u0000\u2340"+
		"\u2342\u0001\u0000\u0000\u0000\u2341\u2343\u0003\u02f2\u0179\u0000\u2342"+
		"\u2341\u0001\u0000\u0000\u0000\u2342\u2343\u0001\u0000\u0000\u0000\u2343"+
		"\u0227\u0001\u0000\u0000\u0000\u2344\u2345\u0005\u0094\u0000\u0000\u2345"+
		"\u2346\u0005\u012b\u0000\u0000\u2346\u0229\u0001\u0000\u0000\u0000\u2347"+
		"\u2348\u0005(\u0000\u0000\u2348\u2349\u0005\u0380\u0000\u0000\u2349\u234a"+
		"\u0003\u0208\u0104\u0000\u234a\u022b\u0001\u0000\u0000\u0000\u234b\u234c"+
		"\u0005\u0156\u0000\u0000\u234c\u234d\u0005\u0380\u0000\u0000\u234d\u234e"+
		"\u0005\u0306\u0000\u0000\u234e\u022d\u0001\u0000\u0000\u0000\u234f\u2350"+
		"\u0005\u0294\u0000\u0000\u2350\u2351\u0005\u0380\u0000\u0000\u2351\u2352"+
		"\u0003\u0208\u0104\u0000\u2352\u022f\u0001\u0000\u0000\u0000\u2353\u2354"+
		"\u0003\u0162\u00b1\u0000\u2354\u2361\u0005\u038a\u0000\u0000\u2355\u2356"+
		"\u0005\u02e7\u0000\u0000\u2356\u2357\u0005\u037d\u0000\u0000\u2357\u2362"+
		"\u0003\u03ca\u01e5\u0000\u2358\u2359\u0005\u01d3\u0000\u0000\u2359\u235a"+
		"\u0005\u037d\u0000\u0000\u235a\u2362\u0003\u03ca\u01e5\u0000\u235b\u235c"+
		"\u0005\u02b6\u0000\u0000\u235c\u235d\u0005\u037d\u0000\u0000\u235d\u2362"+
		"\u0003\u03d0\u01e8\u0000\u235e\u235f\u0005\u02c2\u0000\u0000\u235f\u2360"+
		"\u0005\u037d\u0000\u0000\u2360\u2362\u0003\u03ca\u01e5\u0000\u2361\u2355"+
		"\u0001\u0000\u0000\u0000\u2361\u2358\u0001\u0000\u0000\u0000\u2361\u235b"+
		"\u0001\u0000\u0000\u0000\u2361\u235e\u0001\u0000\u0000\u0000\u2362\u2363"+
		"\u0001\u0000\u0000\u0000\u2363\u2364\u0005\u038b\u0000\u0000\u2364\u0231"+
		"\u0001\u0000\u0000\u0000\u2365\u2367\u0005\u0097\u0000\u0000\u2366\u2368"+
		"\u0003\u02fc\u017e\u0000\u2367\u2366\u0001\u0000\u0000\u0000\u2367\u2368"+
		"\u0001\u0000\u0000\u0000\u2368\u2369\u0001\u0000\u0000\u0000\u2369\u236b"+
		"\u0005\u02c2\u0000\u0000\u236a\u236c\u0003\u02fa\u017d\u0000\u236b\u236a"+
		"\u0001\u0000\u0000\u0000\u236b\u236c\u0001\u0000\u0000\u0000\u236c\u236d"+
		"\u0001\u0000\u0000\u0000\u236d\u236f\u0003\u03ea\u01f5\u0000\u236e\u2370"+
		"\u0003\u0238\u011c\u0000\u236f\u236e\u0001\u0000\u0000\u0000\u236f\u2370"+
		"\u0001\u0000\u0000\u0000\u2370\u2372\u0001\u0000\u0000\u0000\u2371\u2373"+
		"\u0003\u0228\u0114\u0000\u2372\u2371\u0001\u0000\u0000\u0000\u2372\u2373"+
		"\u0001\u0000\u0000\u0000\u2373\u2374\u0001\u0000\u0000\u0000\u2374\u2375"+
		"\u0005\u01d9\u0000\u0000\u2375\u2376\u0007;\u0000\u0000\u2376\u2378\u0003"+
		"\u03ea\u01f5\u0000\u2377\u2379\u0003\u0230\u0118\u0000\u2378\u2377\u0001"+
		"\u0000\u0000\u0000\u2378\u2379\u0001\u0000\u0000\u0000\u2379\u237b\u0001"+
		"\u0000\u0000\u0000\u237a\u237c\u0003\u022a\u0115\u0000\u237b\u237a\u0001"+
		"\u0000\u0000\u0000\u237b\u237c\u0001\u0000\u0000\u0000\u237c\u237e\u0001"+
		"\u0000\u0000\u0000\u237d\u237f\u0003\u022e\u0117\u0000\u237e\u237d\u0001"+
		"\u0000\u0000\u0000\u237e\u237f\u0001\u0000\u0000\u0000\u237f\u2381\u0001"+
		"\u0000\u0000\u0000\u2380\u2382\u0003\u02f2\u0179\u0000\u2381\u2380\u0001"+
		"\u0000\u0000\u0000\u2381\u2382\u0001\u0000\u0000\u0000\u2382\u23b5\u0001"+
		"\u0000\u0000\u0000\u2383\u2385\u0005\u0097\u0000\u0000\u2384\u2386\u0003"+
		"\u02fc\u017e\u0000\u2385\u2384\u0001\u0000\u0000\u0000\u2385\u2386\u0001"+
		"\u0000\u0000\u0000\u2386\u2387\u0001\u0000\u0000\u0000\u2387\u2389\u0005"+
		"\u02c2\u0000\u0000\u2388\u238a\u0003\u02fa\u017d\u0000\u2389\u2388\u0001"+
		"\u0000\u0000\u0000\u2389\u238a\u0001\u0000\u0000\u0000\u238a\u238b\u0001"+
		"\u0000\u0000\u0000\u238b\u238d\u0003\u03ea\u01f5\u0000\u238c\u238e\u0003"+
		"\u0238\u011c\u0000\u238d\u238c\u0001\u0000\u0000\u0000\u238d\u238e\u0001"+
		"\u0000\u0000\u0000\u238e\u2390\u0001\u0000\u0000\u0000\u238f\u2391\u0003"+
		"\u0228\u0114\u0000\u2390\u238f\u0001\u0000\u0000\u0000\u2390\u2391\u0001"+
		"\u0000\u0000\u0000\u2391\u2392\u0001\u0000\u0000\u0000\u2392\u2393\u0005"+
		"\u01d9\u0000\u0000\u2393\u2394\u0005\u00f3\u0000\u0000\u2394\u2395\u0005"+
		"\u02d4\u0000\u0000\u2395\u2397\u0003\u03ea\u01f5\u0000\u2396\u2398\u0003"+
		"\u0230\u0118\u0000\u2397\u2396\u0001\u0000\u0000\u0000\u2397\u2398\u0001"+
		"\u0000\u0000\u0000\u2398\u239a\u0001\u0000\u0000\u0000\u2399\u239b\u0003"+
		"\u022c\u0116\u0000\u239a\u2399\u0001\u0000\u0000\u0000\u239a\u239b\u0001"+
		"\u0000\u0000\u0000\u239b\u239d\u0001\u0000\u0000\u0000\u239c\u239e\u0003"+
		"\u02f2\u0179\u0000\u239d\u239c\u0001\u0000\u0000\u0000\u239d\u239e\u0001"+
		"\u0000\u0000\u0000\u239e\u23b5\u0001\u0000\u0000\u0000\u239f\u23a1\u0005"+
		"\u0097\u0000\u0000\u23a0\u23a2\u0003\u02fc\u017e\u0000\u23a1\u23a0\u0001"+
		"\u0000\u0000\u0000\u23a1\u23a2\u0001\u0000\u0000\u0000\u23a2\u23a3\u0001"+
		"\u0000\u0000\u0000\u23a3\u23a5\u0005\u02c2\u0000\u0000\u23a4\u23a6\u0003"+
		"\u02fa\u017d\u0000\u23a5\u23a4\u0001\u0000\u0000\u0000\u23a5\u23a6\u0001"+
		"\u0000\u0000\u0000\u23a6\u23a7\u0001\u0000\u0000\u0000\u23a7\u23a9\u0003"+
		"\u03ea\u01f5\u0000\u23a8\u23aa\u0003\u0238\u011c\u0000\u23a9\u23a8\u0001"+
		"\u0000\u0000\u0000\u23a9\u23aa\u0001\u0000\u0000\u0000\u23aa\u23ac\u0001"+
		"\u0000\u0000\u0000\u23ab\u23ad\u0003\u0228\u0114\u0000\u23ac\u23ab\u0001"+
		"\u0000\u0000\u0000\u23ac\u23ad\u0001\u0000\u0000\u0000\u23ad\u23ae\u0001"+
		"\u0000\u0000\u0000\u23ae\u23af\u0005\u01d9\u0000\u0000\u23af\u23b0\u0005"+
		"\u02ac\u0000\u0000\u23b0\u23b2\u0003\u03ea\u01f5\u0000\u23b1\u23b3\u0003"+
		"\u02f2\u0179\u0000\u23b2\u23b1\u0001\u0000\u0000\u0000\u23b2\u23b3\u0001"+
		"\u0000\u0000\u0000\u23b3\u23b5\u0001\u0000\u0000\u0000\u23b4\u2365\u0001"+
		"\u0000\u0000\u0000\u23b4\u2383\u0001\u0000\u0000\u0000\u23b4\u239f\u0001"+
		"\u0000\u0000\u0000\u23b5\u0233\u0001\u0000\u0000\u0000\u23b6\u23b7\u0007"+
		"<\u0000\u0000\u23b7\u0235\u0001\u0000\u0000\u0000\u23b8\u23ba\u0007=\u0000"+
		"\u0000\u23b9\u23b8\u0001\u0000\u0000\u0000\u23b9\u23ba\u0001\u0000\u0000"+
		"\u0000\u23ba\u23bb\u0001\u0000\u0000\u0000\u23bb\u23bf\u0003\u0234\u011a"+
		"\u0000\u23bc\u23bf\u0005\u032c\u0000\u0000\u23bd\u23bf\u0005\u0302\u0000"+
		"\u0000\u23be\u23b9\u0001\u0000\u0000\u0000\u23be\u23bc\u0001\u0000\u0000"+
		"\u0000\u23be\u23bd\u0001\u0000\u0000\u0000\u23bf\u0237\u0001\u0000\u0000"+
		"\u0000\u23c0\u23c2\u0005\u0336\u0000\u0000\u23c1\u23c0\u0001\u0000\u0000"+
		"\u0000\u23c1\u23c2\u0001\u0000\u0000\u0000\u23c2\u23c3\u0001\u0000\u0000"+
		"\u0000\u23c3\u23c4\u0005\u02db\u0000\u0000\u23c4\u23c5\u0005\u038a\u0000"+
		"\u0000\u23c5\u23ca\u0003\u019a\u00cd\u0000\u23c6\u23c7\u0005\u0390\u0000"+
		"\u0000\u23c7\u23c9\u0003\u019a\u00cd\u0000\u23c8\u23c6\u0001\u0000\u0000"+
		"\u0000\u23c9\u23cc\u0001\u0000\u0000\u0000\u23ca\u23c8\u0001\u0000\u0000"+
		"\u0000\u23ca\u23cb\u0001\u0000\u0000\u0000\u23cb\u23cd\u0001\u0000\u0000"+
		"\u0000\u23cc\u23ca\u0001\u0000\u0000\u0000\u23cd\u23ce\u0005\u038b\u0000"+
		"\u0000\u23ce\u0239\u0001\u0000\u0000\u0000\u23cf\u23d1\u0005\u0336\u0000"+
		"\u0000\u23d0\u23cf\u0001\u0000\u0000\u0000\u23d0\u23d1\u0001\u0000\u0000"+
		"\u0000\u23d1\u23d2\u0001\u0000\u0000\u0000\u23d2\u23d3\u0005\u025f\u0000"+
		"\u0000\u23d3\u23d4\u0005\u0005\u0000\u0000\u23d4\u23d5\u0005\u020f\u0000"+
		"\u0000\u23d5\u23d6\u0003\u03d0\u01e8\u0000\u23d6\u23d7\u0005\u01d9\u0000"+
		"\u0000\u23d7\u23d8\u0005\u038a\u0000\u0000\u23d8\u23dd\u0003\u03e4\u01f2"+
		"\u0000\u23d9\u23da\u0005\u0390\u0000\u0000\u23da\u23dc\u0003\u03e4\u01f2"+
		"\u0000\u23db\u23d9\u0001\u0000\u0000\u0000\u23dc\u23df\u0001\u0000\u0000"+
		"\u0000\u23dd\u23db\u0001\u0000\u0000\u0000\u23dd\u23de\u0001\u0000\u0000"+
		"\u0000\u23de\u23e0\u0001\u0000\u0000\u0000\u23df\u23dd\u0001\u0000\u0000"+
		"\u0000\u23e0\u23e1\u0005\u038b\u0000\u0000\u23e1\u023b\u0001\u0000\u0000"+
		"\u0000\u23e2\u23e3\u0005\u007f\u0000\u0000\u23e3\u23e5\u0005`\u0000\u0000"+
		"\u23e4\u23e6\u0005\u0179\u0000\u0000\u23e5\u23e4\u0001\u0000\u0000\u0000"+
		"\u23e5\u23e6\u0001\u0000\u0000\u0000\u23e6\u23e7\u0001\u0000\u0000\u0000"+
		"\u23e7\u23e8\u0003\u049e\u024f\u0000\u23e8\u023d\u0001\u0000\u0000\u0000"+
		"\u23e9\u23ea\u0005l\u0000\u0000\u23ea\u23eb\u0005\u0380\u0000\u0000\u23eb"+
		"\u23ec\u0003\u0208\u0104\u0000\u23ec\u023f\u0001\u0000\u0000\u0000\u23ed"+
		"\u23ef\u0005\u0336\u0000\u0000\u23ee\u23ed\u0001\u0000\u0000\u0000\u23ee"+
		"\u23ef\u0001\u0000\u0000\u0000\u23ef\u23f0\u0001\u0000\u0000\u0000\u23f0"+
		"\u23f1\u0005\u0188\u0000\u0000\u23f1\u23f2\u0005\u020f\u0000\u0000\u23f2"+
		"\u23f5\u0003\u03d0\u01e8\u0000\u23f3\u23f4\u0005\u0321\u0000\u0000\u23f4"+
		"\u23f6\u0003\u019c\u00ce\u0000\u23f5\u23f3\u0001\u0000\u0000\u0000\u23f5"+
		"\u23f6\u0001\u0000\u0000\u0000\u23f6\u0241\u0001\u0000\u0000\u0000\u23f7"+
		"\u23f8\u0005\u0082\u0000\u0000\u23f8\u23f9\u0003\u03ca\u01e5\u0000\u23f9"+
		"\u0243\u0001\u0000\u0000\u0000\u23fa\u23fb\u0007>\u0000\u0000\u23fb\u0245"+
		"\u0001\u0000\u0000\u0000\u23fc\u23fd\u0005\u00b0\u0000\u0000\u23fd\u2410"+
		"\u0003\u03f6\u01fb\u0000\u23fe\u240a\u0007?\u0000\u0000\u23ff\u2400\u0005"+
		"\u038a\u0000\u0000\u2400\u2401\u0003\u03f0\u01f8\u0000\u2401\u2402\u0005"+
		"\u0390\u0000\u0000\u2402\u2403\u0003\u03f0\u01f8\u0000\u2403\u2404\u0005"+
		"\u038b\u0000\u0000\u2404\u240b\u0001\u0000\u0000\u0000\u2405\u240b\u0003"+
		"\u01cc\u00e6\u0000\u2406\u240b\u0003\u01ce\u00e7\u0000\u2407\u2408\u0003"+
		"\u01cc\u00e6\u0000\u2408\u2409\u0003\u01ce\u00e7\u0000\u2409\u240b\u0001"+
		"\u0000\u0000\u0000\u240a\u23ff\u0001\u0000\u0000\u0000\u240a\u2405\u0001"+
		"\u0000\u0000\u0000\u240a\u2406\u0001\u0000\u0000\u0000\u240a\u2407\u0001"+
		"\u0000\u0000\u0000\u240a\u240b\u0001\u0000\u0000\u0000\u240b\u240d\u0001"+
		"\u0000\u0000\u0000\u240c\u240e\u0003\u0244\u0122\u0000\u240d\u240c\u0001"+
		"\u0000\u0000\u0000\u240d\u240e\u0001\u0000\u0000\u0000\u240e\u2410\u0001"+
		"\u0000\u0000\u0000\u240f\u23fc\u0001\u0000\u0000\u0000\u240f\u23fe\u0001"+
		"\u0000\u0000\u0000\u2410\u0247\u0001\u0000\u0000\u0000\u2411\u2412\u0005"+
		"\u0112\u0000\u0000\u2412\u2413\u0005\u0168\u0000\u0000\u2413\u0249\u0001"+
		"\u0000\u0000\u0000\u2414\u2415\u0005\u0216\u0000\u0000\u2415\u2416\u0005"+
		"\u0168\u0000\u0000\u2416\u024b\u0001\u0000\u0000\u0000\u2417\u2418\u0005"+
		"\u0090\u0000\u0000\u2418\u241a\u0003\u03d0\u01e8\u0000\u2419\u2417\u0001"+
		"\u0000\u0000\u0000\u2419\u241a\u0001\u0000\u0000\u0000\u241a\u242d\u0001"+
		"\u0000\u0000\u0000\u241b\u241e\u0005\u030f\u0000\u0000\u241c\u241e\u0003"+
		"\u024a\u0125\u0000\u241d\u241b\u0001\u0000\u0000\u0000\u241d\u241c\u0001"+
		"\u0000\u0000\u0000\u241e\u241f\u0001\u0000\u0000\u0000\u241f\u2423\u0003"+
		"\u019c\u00ce\u0000\u2420\u2422\u0003\u0110\u0088\u0000\u2421\u2420\u0001"+
		"\u0000\u0000\u0000\u2422\u2425\u0001\u0000\u0000\u0000\u2423\u2421\u0001"+
		"\u0000\u0000\u0000\u2423\u2424\u0001\u0000\u0000\u0000\u2424\u242e\u0001"+
		"\u0000\u0000\u0000\u2425\u2423\u0001\u0000\u0000\u0000\u2426\u2427\u0003"+
		"\u0248\u0124\u0000\u2427\u2428\u0003\u019c\u00ce\u0000\u2428\u2429\u0005"+
		"\u0232\u0000\u0000\u2429\u242a\u0003\u03ea\u01f5\u0000\u242a\u242b\u0003"+
		"\u019c\u00ce\u0000\u242b\u242c\u0003\u011a\u008d\u0000\u242c\u242e\u0001"+
		"\u0000\u0000\u0000\u242d\u241d\u0001\u0000\u0000\u0000\u242d\u2426\u0001"+
		"\u0000\u0000\u0000\u242e\u2430\u0001\u0000\u0000\u0000\u242f\u2431\u0003"+
		"\u02f4\u017a\u0000\u2430\u242f\u0001\u0000\u0000\u0000\u2430\u2431\u0001"+
		"\u0000\u0000\u0000\u2431\u024d\u0001\u0000\u0000\u0000\u2432\u2439\u0003"+
		"\u018e\u00c7\u0000\u2433\u2438\u0003\u0242\u0121\u0000\u2434\u2438\u0003"+
		"\u0108\u0084\u0000\u2435\u2438\u0003\u04b0\u0258\u0000\u2436\u2438\u0003"+
		"\u0246\u0123\u0000\u2437\u2433\u0001\u0000\u0000\u0000\u2437\u2434\u0001"+
		"\u0000\u0000\u0000\u2437\u2435\u0001\u0000\u0000\u0000\u2437\u2436\u0001"+
		"\u0000\u0000\u0000\u2438\u243b\u0001\u0000\u0000\u0000\u2439\u2437\u0001"+
		"\u0000\u0000\u0000\u2439\u243a\u0001\u0000\u0000\u0000\u243a\u243d\u0001"+
		"\u0000\u0000\u0000\u243b\u2439\u0001\u0000\u0000\u0000\u243c\u243e\u0003"+
		"\u0240\u0120\u0000\u243d\u243c\u0001\u0000\u0000\u0000\u243d\u243e\u0001"+
		"\u0000\u0000\u0000\u243e\u2440\u0001\u0000\u0000\u0000\u243f\u2441\u0003"+
		"\u0238\u011c\u0000\u2440\u243f\u0001\u0000\u0000\u0000\u2440\u2441\u0001"+
		"\u0000\u0000\u0000\u2441\u2443\u0001\u0000\u0000\u0000\u2442\u2444\u0003"+
		"\u02f4\u017a\u0000\u2443\u2442\u0001\u0000\u0000\u0000\u2443\u2444\u0001"+
		"\u0000\u0000\u0000\u2444\u024f\u0001\u0000\u0000\u0000\u2445\u2447\u0003"+
		"\u03e4\u01f2\u0000\u2446\u2448\u0003\u040a\u0205\u0000\u2447\u2446\u0001"+
		"\u0000\u0000\u0000\u2447\u2448\u0001\u0000\u0000\u0000\u2448\u244a\u0001"+
		"\u0000\u0000\u0000\u2449\u244b\u0003\u0240\u0120\u0000\u244a\u2449\u0001"+
		"\u0000\u0000\u0000\u244a\u244b\u0001\u0000\u0000\u0000\u244b\u244d\u0001"+
		"\u0000\u0000\u0000\u244c\u244e\u0003\u0238\u011c\u0000\u244d\u244c\u0001"+
		"\u0000\u0000\u0000\u244d\u244e\u0001\u0000\u0000\u0000\u244e\u2451\u0001"+
		"\u0000\u0000\u0000\u244f\u2450\u0005\u0086\u0000\u0000\u2450\u2452\u0003"+
		"\u03ca\u01e5\u0000\u2451\u244f\u0001\u0000\u0000\u0000\u2451\u2452\u0001"+
		"\u0000\u0000\u0000\u2452\u0251\u0001\u0000\u0000\u0000\u2453\u2458\u0003"+
		"\u0250\u0128\u0000\u2454\u2455\u0005\u0390\u0000\u0000\u2455\u2457\u0003"+
		"\u0250\u0128\u0000\u2456\u2454\u0001\u0000\u0000\u0000\u2457\u245a\u0001"+
		"\u0000\u0000\u0000\u2458\u2456\u0001\u0000\u0000\u0000\u2458\u2459\u0001"+
		"\u0000\u0000\u0000\u2459\u0253\u0001\u0000\u0000\u0000\u245a\u2458\u0001"+
		"\u0000\u0000\u0000\u245b\u245e\u0003\u024e\u0127\u0000\u245c\u245e\u0003"+
		"\u024c\u0126\u0000\u245d\u245b\u0001\u0000\u0000\u0000\u245d\u245c\u0001"+
		"\u0000\u0000\u0000\u245e\u0255\u0001\u0000\u0000\u0000\u245f\u2464\u0003"+
		"\u0254\u012a\u0000\u2460\u2461\u0005\u0390\u0000\u0000\u2461\u2463\u0003"+
		"\u0254\u012a\u0000\u2462\u2460\u0001\u0000\u0000\u0000\u2463\u2466\u0001"+
		"\u0000\u0000\u0000\u2464\u2462\u0001\u0000\u0000\u0000\u2464\u2465\u0001"+
		"\u0000\u0000\u0000\u2465\u0257\u0001\u0000\u0000\u0000\u2466\u2464\u0001"+
		"\u0000\u0000\u0000\u2467\u246a\u0005\u0097\u0000\u0000\u2468\u246b\u0003"+
		"\u02fc\u017e\u0000\u2469\u246b\u0003\u02fe\u017f\u0000\u246a\u2468\u0001"+
		"\u0000\u0000\u0000\u246a\u2469\u0001\u0000\u0000\u0000\u246a\u246b\u0001"+
		"\u0000\u0000\u0000\u246b\u246d\u0001\u0000\u0000\u0000\u246c\u246e\u0003"+
		"\u0236\u011b\u0000\u246d\u246c\u0001\u0000\u0000\u0000\u246d\u246e\u0001"+
		"\u0000\u0000\u0000\u246e\u246f\u0001\u0000\u0000\u0000\u246f\u2478\u0005"+
		"\u02d4\u0000\u0000\u2470\u2472\u0003\u02fa\u017d\u0000\u2471\u2470\u0001"+
		"\u0000\u0000\u0000\u2471\u2472\u0001\u0000\u0000\u0000\u2472\u2473\u0001"+
		"\u0000\u0000\u0000\u2473\u2479\u0003\u03ea\u01f5\u0000\u2474\u2476\u0003"+
		"\u03ea\u01f5\u0000\u2475\u2477\u0003\u02fa\u017d\u0000\u2476\u2475\u0001"+
		"\u0000\u0000\u0000\u2476\u2477\u0001\u0000\u0000\u0000\u2477\u2479\u0001"+
		"\u0000\u0000\u0000\u2478\u2471\u0001\u0000\u0000\u0000\u2478\u2474\u0001"+
		"\u0000\u0000\u0000\u2479\u2482\u0001\u0000\u0000\u0000\u247a\u247c\u0003"+
		"\u02f2\u0179\u0000\u247b\u247a\u0001\u0000\u0000\u0000\u247b\u247c\u0001"+
		"\u0000\u0000\u0000\u247c\u247d\u0001\u0000\u0000\u0000\u247d\u2483\u0003"+
		"\u025c\u012e\u0000\u247e\u2480\u0003\u025c\u012e\u0000\u247f\u2481\u0003"+
		"\u02f2\u0179\u0000\u2480\u247f\u0001\u0000\u0000\u0000\u2480\u2481\u0001"+
		"\u0000\u0000\u0000\u2481\u2483\u0001\u0000\u0000\u0000\u2482\u247b\u0001"+
		"\u0000\u0000\u0000\u2482\u247e\u0001\u0000\u0000\u0000\u2483\u0259\u0001"+
		"\u0000\u0000\u0000\u2484\u2485\u0005\u038a\u0000\u0000\u2485\u2486\u0003"+
		"\u0256\u012b\u0000\u2486\u2487\u0005\u038b\u0000\u0000\u2487\u025b\u0001"+
		"\u0000\u0000\u0000\u2488\u248a\u0003\u025a\u012d\u0000\u2489\u248b\u0003"+
		"\u023c\u011e\u0000\u248a\u2489\u0001\u0000\u0000\u0000\u248a\u248b\u0001"+
		"\u0000\u0000\u0000\u248b\u2494\u0001\u0000\u0000\u0000\u248c\u248e\u0003"+
		"\u023c\u011e\u0000\u248d\u248c\u0001\u0000\u0000\u0000\u248d\u248e\u0001"+
		"\u0000\u0000\u0000\u248e\u2490\u0001\u0000\u0000\u0000\u248f\u2491\u0003"+
		"\u02f2\u0179\u0000\u2490\u248f\u0001\u0000\u0000\u0000\u2490\u2491\u0001"+
		"\u0000\u0000\u0000\u2491\u2492\u0001\u0000\u0000\u0000\u2492\u2494\u0003"+
		"\u025a\u012d\u0000\u2493\u2488\u0001\u0000\u0000\u0000\u2493\u248d\u0001"+
		"\u0000\u0000\u0000\u2494\u2496\u0001\u0000\u0000\u0000\u2495\u2497\u0003"+
		"6\u001b\u0000\u2496\u2495\u0001\u0000\u0000\u0000\u2496\u2497\u0001\u0000"+
		"\u0000\u0000\u2497\u249e\u0001\u0000\u0000\u0000\u2498\u2499\u0005\u02ae"+
		"\u0000\u0000\u2499\u249a\u0005\u0380\u0000\u0000\u249a\u249b\u0005\u038a"+
		"\u0000\u0000\u249b\u249c\u0003\u01e4\u00f2\u0000\u249c\u249d\u0005\u038b"+
		"\u0000\u0000\u249d\u249f\u0001\u0000\u0000\u0000\u249e\u2498\u0001\u0000"+
		"\u0000\u0000\u249e\u249f\u0001\u0000\u0000\u0000\u249f\u24a1\u0001\u0000"+
		"\u0000\u0000\u24a0\u24a2\u0003\u0174\u00ba\u0000\u24a1\u24a0\u0001\u0000"+
		"\u0000\u0000\u24a1\u24a2\u0001\u0000\u0000\u0000\u24a2\u24a4\u0001\u0000"+
		"\u0000\u0000\u24a3\u24a5\u0003\u023e\u011f\u0000\u24a4\u24a3\u0001\u0000"+
		"\u0000\u0000\u24a4\u24a5\u0001\u0000\u0000\u0000\u24a5\u24a7\u0001\u0000"+
		"\u0000\u0000\u24a6\u24a8\u0003\u008cF\u0000\u24a7\u24a6\u0001\u0000\u0000"+
		"\u0000\u24a7\u24a8\u0001\u0000\u0000\u0000\u24a8\u24aa\u0001\u0000\u0000"+
		"\u0000\u24a9\u24ab\u0003\u0228\u0114\u0000\u24aa\u24a9\u0001\u0000\u0000"+
		"\u0000\u24aa\u24ab\u0001\u0000\u0000\u0000\u24ab\u24ad\u0001\u0000\u0000"+
		"\u0000\u24ac\u24ae\u0003\u02f2\u0179\u0000\u24ad\u24ac\u0001\u0000\u0000"+
		"\u0000\u24ad\u24ae\u0001\u0000\u0000\u0000\u24ae\u24b0\u0001\u0000\u0000"+
		"\u0000\u24af\u24b1\u0003\u023a\u011d\u0000\u24b0\u24af\u0001\u0000\u0000"+
		"\u0000\u24b0\u24b1\u0001\u0000\u0000\u0000\u24b1\u24b3\u0001\u0000\u0000"+
		"\u0000\u24b2\u24b4\u0003\u0238\u011c\u0000\u24b3\u24b2\u0001\u0000\u0000"+
		"\u0000\u24b3\u24b4\u0001\u0000\u0000\u0000\u24b4\u025d\u0001\u0000\u0000"+
		"\u0000\u24b5\u24b7\u0005\u0097\u0000\u0000\u24b6\u24b8\u0003\u02fc\u017e"+
		"\u0000\u24b7\u24b6\u0001\u0000\u0000\u0000\u24b7\u24b8\u0001\u0000\u0000"+
		"\u0000\u24b8\u24ba\u0001\u0000\u0000\u0000\u24b9\u24bb\u0003\u0236\u011b"+
		"\u0000\u24ba\u24b9\u0001\u0000\u0000\u0000\u24ba\u24bb\u0001\u0000\u0000"+
		"\u0000\u24bb\u24bc\u0001\u0000\u0000\u0000\u24bc\u24c5\u0005\u02d4\u0000"+
		"\u0000\u24bd\u24bf\u0003\u02fa\u017d\u0000\u24be\u24bd\u0001\u0000\u0000"+
		"\u0000\u24be\u24bf\u0001\u0000\u0000\u0000\u24bf\u24c0\u0001\u0000\u0000"+
		"\u0000\u24c0\u24c6\u0003\u03ea\u01f5\u0000\u24c1\u24c3\u0003\u03ea\u01f5"+
		"\u0000\u24c2\u24c4\u0003\u02fa\u017d\u0000\u24c3\u24c2\u0001\u0000\u0000"+
		"\u0000\u24c3\u24c4\u0001\u0000\u0000\u0000\u24c4\u24c6\u0001\u0000\u0000"+
		"\u0000\u24c5\u24be\u0001\u0000\u0000\u0000\u24c5\u24c1\u0001\u0000\u0000"+
		"\u0000\u24c6\u24cb\u0001\u0000\u0000\u0000\u24c7\u24c8\u0005\u038a\u0000"+
		"\u0000\u24c8\u24c9\u0003\u0256\u012b\u0000\u24c9\u24ca\u0005\u038b\u0000"+
		"\u0000\u24ca\u24cc\u0001\u0000\u0000\u0000\u24cb\u24c7\u0001\u0000\u0000"+
		"\u0000\u24cb\u24cc\u0001\u0000\u0000\u0000\u24cc\u24ce\u0001\u0000\u0000"+
		"\u0000\u24cd\u24cf\u0003\u023c\u011e\u0000\u24ce\u24cd\u0001\u0000\u0000"+
		"\u0000\u24ce\u24cf\u0001\u0000\u0000\u0000\u24cf\u24d1\u0001\u0000\u0000"+
		"\u0000\u24d0\u24d2\u0003\u0228\u0114\u0000\u24d1\u24d0\u0001\u0000\u0000"+
		"\u0000\u24d1\u24d2\u0001\u0000\u0000\u0000\u24d2\u24d4\u0001\u0000\u0000"+
		"\u0000\u24d3\u24d5\u0003\u023a\u011d\u0000\u24d4\u24d3\u0001\u0000\u0000"+
		"\u0000\u24d4\u24d5\u0001\u0000\u0000\u0000\u24d5\u24d7\u0001\u0000\u0000"+
		"\u0000\u24d6\u24d8\u0003\u0238\u011c\u0000\u24d7\u24d6\u0001\u0000\u0000"+
		"\u0000\u24d7\u24d8\u0001\u0000\u0000\u0000\u24d8\u24da\u0001\u0000\u0000"+
		"\u0000\u24d9\u24db\u0003\u02f2\u0179\u0000\u24da\u24d9\u0001\u0000\u0000"+
		"\u0000\u24da\u24db\u0001\u0000\u0000\u0000\u24db\u24dc\u0001\u0000\u0000"+
		"\u0000\u24dc\u24dd\u0005+\u0000\u0000\u24dd\u24de\u0003\u042e\u0217\u0000"+
		"\u24de\u025f\u0001\u0000\u0000\u0000\u24df\u24e1\u0005\u0097\u0000\u0000"+
		"\u24e0\u24e2\u0003\u02fc\u017e\u0000\u24e1\u24e0\u0001\u0000\u0000\u0000"+
		"\u24e1\u24e2\u0001\u0000\u0000\u0000\u24e2\u24e4\u0001\u0000\u0000\u0000"+
		"\u24e3\u24e5\u0005\u0302\u0000\u0000\u24e4\u24e3\u0001\u0000\u0000\u0000"+
		"\u24e4\u24e5\u0001\u0000\u0000\u0000\u24e5\u24e6\u0001\u0000\u0000\u0000"+
		"\u24e6\u24e8\u0005\u02d4\u0000\u0000\u24e7\u24e9\u0003\u02fa\u017d\u0000"+
		"\u24e8\u24e7\u0001\u0000\u0000\u0000\u24e8\u24e9\u0001\u0000\u0000\u0000"+
		"\u24e9\u24ea\u0001\u0000\u0000\u0000\u24ea\u24eb\u0003\u03ea\u01f5\u0000"+
		"\u24eb\u24ec\u0005\u0177\u0000\u0000\u24ec\u24ee\u0003\u03ea\u01f5\u0000"+
		"\u24ed\u24ef\u0003\u023c\u011e\u0000\u24ee\u24ed\u0001\u0000\u0000\u0000"+
		"\u24ee\u24ef\u0001\u0000\u0000\u0000\u24ef\u24f1\u0001\u0000\u0000\u0000"+
		"\u24f0\u24f2\u0003\u0228\u0114\u0000\u24f1\u24f0\u0001\u0000\u0000\u0000"+
		"\u24f1\u24f2\u0001\u0000\u0000\u0000\u24f2\u0261\u0001\u0000\u0000\u0000"+
		"\u24f3\u24f5\u0005\u0097\u0000\u0000\u24f4\u24f6\u0003\u02fc\u017e\u0000"+
		"\u24f5\u24f4\u0001\u0000\u0000\u0000\u24f5\u24f6\u0001\u0000\u0000\u0000"+
		"\u24f6\u24f7\u0001\u0000\u0000\u0000\u24f7\u24f9\u0005\u02db\u0000\u0000"+
		"\u24f8\u24fa\u0003\u02fa\u017d\u0000\u24f9\u24f8\u0001\u0000\u0000\u0000"+
		"\u24f9\u24fa\u0001\u0000\u0000\u0000\u24fa\u24fb\u0001\u0000\u0000\u0000"+
		"\u24fb\u24fd\u0003\u03ea\u01f5\u0000\u24fc\u24fe\u0003\u0264\u0132\u0000"+
		"\u24fd\u24fc\u0001\u0000\u0000\u0000\u24fd\u24fe\u0001\u0000\u0000\u0000"+
		"\u24fe\u2500\u0001\u0000\u0000\u0000\u24ff\u2501\u0003\u02f2\u0179\u0000"+
		"\u2500\u24ff\u0001\u0000\u0000\u0000\u2500\u2501\u0001\u0000\u0000\u0000"+
		"\u2501\u0263\u0001\u0000\u0000\u0000\u2502\u2503\u0005\u0017\u0000\u0000"+
		"\u2503\u2504\u0003\u03cc\u01e6\u0000\u2504\u0265\u0001\u0000\u0000\u0000"+
		"\u2505\u2506\u0007@\u0000\u0000\u2506\u0267\u0001\u0000\u0000\u0000\u2507"+
		"\u250c\u0003\u0266\u0133\u0000\u2508\u2509\u0005\u0390\u0000\u0000\u2509"+
		"\u250b\u0003\u0266\u0133\u0000\u250a\u2508\u0001\u0000\u0000\u0000\u250b"+
		"\u250e\u0001\u0000\u0000\u0000\u250c\u250a\u0001\u0000\u0000\u0000\u250c"+
		"\u250d\u0001\u0000\u0000\u0000\u250d\u0269\u0001\u0000\u0000\u0000\u250e"+
		"\u250c\u0001\u0000\u0000\u0000\u250f\u2514\u0003\u0090H\u0000\u2510\u2511"+
		"\u0005\u0390\u0000\u0000\u2511\u2513\u0003\u0090H\u0000\u2512\u2510\u0001"+
		"\u0000\u0000\u0000\u2513\u2516\u0001\u0000\u0000\u0000\u2514\u2512\u0001"+
		"\u0000\u0000\u0000\u2514\u2515\u0001\u0000\u0000\u0000\u2515\u026b\u0001"+
		"\u0000\u0000\u0000\u2516\u2514\u0001\u0000\u0000\u0000\u2517\u2519\u0005"+
		"\u0097\u0000\u0000\u2518\u251a\u0003\u02fc\u017e\u0000\u2519\u2518\u0001"+
		"\u0000\u0000\u0000\u2519\u251a\u0001\u0000\u0000\u0000\u251a\u251b\u0001"+
		"\u0000\u0000\u0000\u251b\u251d\u0005\u02de\u0000\u0000\u251c\u251e\u0003"+
		"\u02fa\u017d\u0000\u251d\u251c\u0001\u0000\u0000\u0000\u251d\u251e\u0001"+
		"\u0000\u0000\u0000\u251e\u251f\u0001\u0000\u0000\u0000\u251f\u2523\u0003"+
		"\u03ea\u01f5\u0000\u2520\u2522\u0003\u026e\u0137\u0000\u2521\u2520\u0001"+
		"\u0000\u0000\u0000\u2522\u2525\u0001\u0000\u0000\u0000\u2523\u2521\u0001"+
		"\u0000\u0000\u0000\u2523\u2524\u0001\u0000\u0000\u0000\u2524\u2527\u0001"+
		"\u0000\u0000\u0000\u2525\u2523\u0001\u0000\u0000\u0000\u2526\u2528\u0003"+
		"\u02f2\u0179\u0000\u2527\u2526\u0001\u0000\u0000\u0000\u2527\u2528\u0001"+
		"\u0000\u0000\u0000\u2528\u252a\u0001\u0000\u0000\u0000\u2529\u252b\u0003"+
		"\u0228\u0114\u0000\u252a\u2529\u0001\u0000\u0000\u0000\u252a\u252b\u0001"+
		"\u0000\u0000\u0000\u252b\u2535\u0001\u0000\u0000\u0000\u252c\u252d\u0005"+
		"\u000e\u0000\u0000\u252d\u2532\u0003\u03ea\u01f5\u0000\u252e\u252f\u0005"+
		"\u0390\u0000\u0000\u252f\u2531\u0003\u03ea\u01f5\u0000\u2530\u252e\u0001"+
		"\u0000\u0000\u0000\u2531\u2534\u0001\u0000\u0000\u0000\u2532\u2530\u0001"+
		"\u0000\u0000\u0000\u2532\u2533\u0001\u0000\u0000\u0000\u2533\u2536\u0001"+
		"\u0000\u0000\u0000\u2534\u2532\u0001\u0000\u0000\u0000\u2535\u252c\u0001"+
		"\u0000\u0000\u0000\u2535\u2536\u0001\u0000\u0000\u0000\u2536\u2539\u0001"+
		"\u0000\u0000\u0000\u2537\u2538\u0005\u0334\u0000\u0000\u2538\u253a\u0003"+
		"\u04ac\u0256\u0000\u2539\u2537\u0001\u0000\u0000\u0000\u2539\u253a\u0001"+
		"\u0000\u0000\u0000\u253a\u253b\u0001\u0000\u0000\u0000\u253b\u253c\u0005"+
		"+\u0000\u0000\u253c\u253d\u0003\u027c\u013e\u0000\u253d\u026d\u0001\u0000"+
		"\u0000\u0000\u253e\u2546\u0003\u0270\u0138\u0000\u253f\u2546\u0003\u0272"+
		"\u0139\u0000\u2540\u2546\u0003\u027a\u013d\u0000\u2541\u2546\u0003\u026a"+
		"\u0135\u0000\u2542\u2546\u0003\u0274\u013a\u0000\u2543\u2546\u0003\u0276"+
		"\u013b\u0000\u2544\u2546\u0003\u0278\u013c\u0000\u2545\u253e\u0001\u0000"+
		"\u0000\u0000\u2545\u253f\u0001\u0000\u0000\u0000\u2545\u2540\u0001\u0000"+
		"\u0000\u0000\u2545\u2541\u0001\u0000\u0000\u0000\u2545\u2542\u0001\u0000"+
		"\u0000\u0000\u2545\u2543\u0001\u0000\u0000\u0000\u2545\u2544\u0001\u0000"+
		"\u0000\u0000\u2546\u026f\u0001\u0000\u0000\u0000\u2547\u2548\u0005\u032d"+
		"\u0000\u0000\u2548\u2549\u0005\u0380\u0000\u0000\u2549\u2551\u0003\u03d0"+
		"\u01e8\u0000\u254a\u254b\u0005\u031d\u0000\u0000\u254b\u254e\u0005\u0380"+
		"\u0000\u0000\u254c\u254f\u0003\u0288\u0144\u0000\u254d\u254f\u0003\u03ca"+
		"\u01e5\u0000\u254e\u254c\u0001\u0000\u0000\u0000\u254e\u254d\u0001\u0000"+
		"\u0000\u0000\u254f\u2551\u0001\u0000\u0000\u0000\u2550\u2547\u0001\u0000"+
		"\u0000\u0000\u2550\u254a\u0001\u0000\u0000\u0000\u2551\u0271\u0001\u0000"+
		"\u0000\u0000\u2552\u2553\u0005\u027c\u0000\u0000\u2553\u2554\u0005\u0380"+
		"\u0000\u0000\u2554\u2555\u0003\u03ca\u01e5\u0000\u2555\u0273\u0001\u0000"+
		"\u0000\u0000\u2556\u2557\u0005\u031e\u0000\u0000\u2557\u2558\u0005\u0380"+
		"\u0000\u0000\u2558\u2559\u0003\u03f0\u01f8\u0000\u2559\u0275\u0001\u0000"+
		"\u0000\u0000\u255a\u255b\u0005\u02cf\u0000\u0000\u255b\u255c\u0005\u0380"+
		"\u0000\u0000\u255c\u255d\u0003\u03f0\u01f8\u0000\u255d\u0277\u0001\u0000"+
		"\u0000\u0000\u255e\u255f\u0005\u00e3\u0000\u0000\u255f\u2560\u0005\u0380"+
		"\u0000\u0000\u2560\u2561\u0003\u03d0\u01e8\u0000\u2561\u0279\u0001\u0000"+
		"\u0000\u0000\u2562\u2563\u0005\u001b\u0000\u0000\u2563\u2564\u0005\u0380"+
		"\u0000\u0000\u2564\u2565\u0003\u0208\u0104\u0000\u2565\u027b\u0001\u0000"+
		"\u0000\u0000\u2566\u2567\u0005\u00ed\u0000\u0000\u2567\u2568\u0005\u0143"+
		"\u0000\u0000\u2568\u256c\u0005\u0376\u0000\u0000\u2569\u256c\u0003\u0004"+
		"\u0002\u0000\u256a\u256c\u0003\u027e\u013f\u0000\u256b\u2566\u0001\u0000"+
		"\u0000\u0000\u256b\u2569\u0001\u0000\u0000\u0000\u256b\u256a\u0001\u0000"+
		"\u0000\u0000\u256c\u027d\u0001\u0000\u0000\u0000\u256d\u256e\u0005b\u0000"+
		"\u0000\u256e\u256f\u0003\u03ea\u01f5\u0000\u256f\u2571\u0005\u038a\u0000"+
		"\u0000\u2570\u2572\u0003\u03f2\u01f9\u0000\u2571\u2570\u0001\u0000\u0000"+
		"\u0000\u2571\u2572\u0001\u0000\u0000\u0000\u2572\u2573\u0001\u0000\u0000"+
		"\u0000\u2573\u2574\u0005\u038b\u0000\u0000\u2574\u027f\u0001\u0000\u0000"+
		"\u0000\u2575\u2577\u0005\u0097\u0000\u0000\u2576\u2578\u0003\u02fc\u017e"+
		"\u0000\u2577\u2576\u0001\u0000\u0000\u0000\u2577\u2578\u0001\u0000\u0000"+
		"\u0000\u2578\u2579\u0001\u0000\u0000\u0000\u2579\u257b\u0005\u0319\u0000"+
		"\u0000\u257a\u257c\u0003\u02fa\u017d\u0000\u257b\u257a\u0001\u0000\u0000"+
		"\u0000\u257b\u257c\u0001\u0000\u0000\u0000\u257c\u257d\u0001\u0000\u0000"+
		"\u0000\u257d\u257f\u0003\u03d0\u01e8\u0000\u257e\u2580\u0003\u008eG\u0000"+
		"\u257f\u257e\u0001\u0000\u0000\u0000\u257f\u2580\u0001\u0000\u0000\u0000"+
		"\u2580\u2582\u0001\u0000\u0000\u0000\u2581\u2583\u0003\u008aE\u0000\u2582"+
		"\u2581\u0001\u0000\u0000\u0000\u2582\u2583\u0001\u0000\u0000\u0000\u2583"+
		"\u2585\u0001\u0000\u0000\u0000\u2584\u2586\u0003\u0090H\u0000\u2585\u2584"+
		"\u0001\u0000\u0000\u0000\u2585\u2586\u0001\u0000\u0000\u0000\u2586\u0281"+
		"\u0001\u0000\u0000\u0000\u2587\u2588\u0003\u03e4\u01f2\u0000\u2588\u2589"+
		"\u0003\u0240\u0120\u0000\u2589\u258a\u0003\u0238\u011c\u0000\u258a\u0283"+
		"\u0001\u0000\u0000\u0000\u258b\u258d\u0005\u0097\u0000\u0000\u258c\u258e"+
		"\u0003\u02fc\u017e\u0000\u258d\u258c\u0001\u0000\u0000\u0000\u258d\u258e"+
		"\u0001\u0000\u0000\u0000\u258e\u2590\u0001\u0000\u0000\u0000\u258f\u2591"+
		"\u0005\u0283\u0000\u0000\u2590\u258f\u0001\u0000\u0000\u0000\u2590\u2591"+
		"\u0001\u0000\u0000\u0000\u2591\u2593\u0001\u0000\u0000\u0000\u2592\u2594"+
		"\u0005\u0231\u0000\u0000\u2593\u2592\u0001\u0000\u0000\u0000\u2593\u2594"+
		"\u0001\u0000\u0000\u0000\u2594\u2595\u0001\u0000\u0000\u0000\u2595\u2597"+
		"\u0005\u0329\u0000\u0000\u2596\u2598\u0003\u02fa\u017d\u0000\u2597\u2596"+
		"\u0001\u0000\u0000\u0000\u2597\u2598\u0001\u0000\u0000\u0000\u2598\u2599"+
		"\u0001\u0000\u0000\u0000\u2599\u259e\u0003\u03ea\u01f5\u0000\u259a\u259b"+
		"\u0005\u038a\u0000\u0000\u259b\u259c\u0003\u03e8\u01f4\u0000\u259c\u259d"+
		"\u0005\u038b\u0000\u0000\u259d\u259f\u0001\u0000\u0000\u0000\u259e\u259a"+
		"\u0001\u0000\u0000\u0000\u259e\u259f\u0001\u0000\u0000\u0000\u259f\u25a3"+
		"\u0001\u0000\u0000\u0000\u25a0\u25a2\u0003\u0282\u0141\u0000\u25a1\u25a0"+
		"\u0001\u0000\u0000\u0000\u25a2\u25a5\u0001\u0000\u0000\u0000\u25a3\u25a1"+
		"\u0001\u0000\u0000\u0000\u25a3\u25a4\u0001\u0000\u0000\u0000\u25a4\u25a7"+
		"\u0001\u0000\u0000\u0000\u25a5\u25a3\u0001\u0000\u0000\u0000\u25a6\u25a8"+
		"\u0003\u023a\u011d\u0000\u25a7\u25a6\u0001\u0000\u0000\u0000\u25a7\u25a8"+
		"\u0001\u0000\u0000\u0000\u25a8\u25aa\u0001\u0000\u0000\u0000\u25a9\u25ab"+
		"\u0003\u0238\u011c\u0000\u25aa\u25a9\u0001\u0000\u0000\u0000\u25aa\u25ab"+
		"\u0001\u0000\u0000\u0000\u25ab\u25ad\u0001\u0000\u0000\u0000\u25ac\u25ae"+
		"\u0003\u0228\u0114\u0000\u25ad\u25ac\u0001\u0000\u0000\u0000\u25ad\u25ae"+
		"\u0001\u0000\u0000\u0000\u25ae\u25b0\u0001\u0000\u0000\u0000\u25af\u25b1"+
		"\u0003\u02f2\u0179\u0000\u25b0\u25af\u0001\u0000\u0000\u0000\u25b0\u25b1"+
		"\u0001\u0000\u0000\u0000\u25b1\u25b2\u0001\u0000\u0000\u0000\u25b2\u25b3"+
		"\u0005+\u0000\u0000\u25b3\u25b4\u0003\u042e\u0217\u0000\u25b4\u0285\u0001"+
		"\u0000\u0000\u0000\u25b5\u25b7\u0005\u0097\u0000\u0000\u25b6\u25b8\u0003"+
		"\u02fc\u017e\u0000\u25b7\u25b6\u0001\u0000\u0000\u0000\u25b7\u25b8\u0001"+
		"\u0000\u0000\u0000\u25b8\u25b9\u0001\u0000\u0000\u0000\u25b9\u25bb\u0005"+
		"\u032d\u0000\u0000\u25ba\u25bc\u0003\u02fa\u017d\u0000\u25bb\u25ba\u0001"+
		"\u0000\u0000\u0000\u25bb\u25bc\u0001\u0000\u0000\u0000\u25bc\u25bd\u0001"+
		"\u0000\u0000\u0000\u25bd\u25c6\u0003\u03ce\u01e7\u0000\u25be\u25c0\u0005"+
		"\u0336\u0000\u0000\u25bf\u25be\u0001\u0000\u0000\u0000\u25bf\u25c0\u0001"+
		"\u0000\u0000\u0000\u25c0\u25c2\u0001\u0000\u0000\u0000\u25c1\u25c3\u0003"+
		"\u028c\u0146\u0000\u25c2\u25c1\u0001\u0000\u0000\u0000\u25c3\u25c4\u0001"+
		"\u0000\u0000\u0000\u25c4\u25c2\u0001\u0000\u0000\u0000\u25c4\u25c5\u0001"+
		"\u0000\u0000\u0000\u25c5\u25c7\u0001\u0000\u0000\u0000\u25c6\u25bf\u0001"+
		"\u0000\u0000\u0000\u25c6\u25c7\u0001\u0000\u0000\u0000\u25c7\u25cb\u0001"+
		"\u0000\u0000\u0000\u25c8\u25ca\u0003\u028e\u0147\u0000\u25c9\u25c8\u0001"+
		"\u0000\u0000\u0000\u25ca\u25cd\u0001\u0000\u0000\u0000\u25cb\u25c9\u0001"+
		"\u0000\u0000\u0000\u25cb\u25cc\u0001\u0000\u0000\u0000\u25cc\u0287\u0001"+
		"\u0000\u0000\u0000\u25cd\u25cb\u0001\u0000\u0000\u0000\u25ce\u25cf\u0007"+
		"A\u0000\u0000\u25cf\u0289\u0001\u0000\u0000\u0000\u25d0\u25d1\u0007B\u0000"+
		"\u0000\u25d1\u028b\u0001\u0000\u0000\u0000\u25d2\u25d3\u0005\u032f\u0000"+
		"\u0000\u25d3\u25d7\u0005\u0380\u0000\u0000\u25d4\u25d8\u0003\u0288\u0144"+
		"\u0000\u25d5\u25d8\u0003\u028a\u0145\u0000\u25d6\u25d8\u0005\u0370\u0000"+
		"\u0000\u25d7\u25d4\u0001\u0000\u0000\u0000\u25d7\u25d5\u0001\u0000\u0000"+
		"\u0000\u25d7\u25d6\u0001\u0000\u0000\u0000\u25d8\u25ff\u0001\u0000\u0000"+
		"\u0000\u25d9\u25da\u0005\u0330\u0000\u0000\u25da\u25db\u0005\u0380\u0000"+
		"\u0000\u25db\u25ff\u0007C\u0000\u0000\u25dc\u25dd\u0005\u0191\u0000\u0000"+
		"\u25dd\u25de\u0005\u0380\u0000\u0000\u25de\u25ff\u0003\u03f0\u01f8\u0000"+
		"\u25df\u25e0\u0005\u019e\u0000\u0000\u25e0\u25e1\u0005\u0380\u0000\u0000"+
		"\u25e1\u25ff\u0003\u03f0\u01f8\u0000\u25e2\u25e3\u0005\u027b\u0000\u0000"+
		"\u25e3\u25e4\u0005\u0380\u0000\u0000\u25e4\u25ff\u0007D\u0000\u0000\u25e5"+
		"\u25e9\u0005;\u0000\u0000\u25e6\u25e7\u0005\u0380\u0000\u0000\u25e7\u25ea"+
		"\u0003\u03f0\u01f8\u0000\u25e8\u25ea\u0005\u01bf\u0000\u0000\u25e9\u25e6"+
		"\u0001\u0000\u0000\u0000\u25e9\u25e8\u0001\u0000\u0000\u0000\u25ea\u25ff"+
		"\u0001\u0000\u0000\u0000\u25eb\u25ec\u0005:\u0000\u0000\u25ec\u25ed\u0005"+
		"\u0380\u0000\u0000\u25ed\u25ff\u0003\u0208\u0104\u0000\u25ee\u25ef\u0005"+
		"\u0151\u0000\u0000\u25ef\u25f0\u0005\u0380\u0000\u0000\u25f0\u25ff\u0003"+
		"\u0208\u0104\u0000\u25f1\u25f2\u0005\u0249\u0000\u0000\u25f2\u25f3\u0005"+
		"\u0380\u0000\u0000\u25f3\u25ff\u0003\u03d0\u01e8\u0000\u25f4\u25ff\u0003"+
		"\u02f2\u0179\u0000\u25f5\u25f6\u0005\u00d7\u0000\u0000\u25f6\u25f7\u0005"+
		"\u0380\u0000\u0000\u25f7\u25ff\u0003\u0208\u0104\u0000\u25f8\u25f9\u0005"+
		"\u0227\u0000\u0000\u25f9\u25fa\u0005\u0380\u0000\u0000\u25fa\u25ff\u0003"+
		"\u03f0\u01f8\u0000\u25fb\u25fc\u0005\u0192\u0000\u0000\u25fc\u25fd\u0005"+
		"\u0380\u0000\u0000\u25fd\u25ff\u0003\u03f0\u01f8\u0000\u25fe\u25d2\u0001"+
		"\u0000\u0000\u0000\u25fe\u25d9\u0001\u0000\u0000\u0000\u25fe\u25dc\u0001"+
		"\u0000\u0000\u0000\u25fe\u25df\u0001\u0000\u0000\u0000\u25fe\u25e2\u0001"+
		"\u0000\u0000\u0000\u25fe\u25e5\u0001\u0000\u0000\u0000\u25fe\u25eb\u0001"+
		"\u0000\u0000\u0000\u25fe\u25ee\u0001\u0000\u0000\u0000\u25fe\u25f1\u0001"+
		"\u0000\u0000\u0000\u25fe\u25f4\u0001\u0000\u0000\u0000\u25fe\u25f5\u0001"+
		"\u0000\u0000\u0000\u25fe\u25f8\u0001\u0000\u0000\u0000\u25fe\u25fb\u0001"+
		"\u0000\u0000\u0000\u25ff\u028d\u0001\u0000\u0000\u0000\u2600\u2601\u0005"+
		"\u0192\u0000\u0000\u2601\u2602\u0005\u0380\u0000\u0000\u2602\u260d\u0003"+
		"\u03f0\u01f8\u0000\u2603\u2604\u0005\u02b7\u0000\u0000\u2604\u2605\u0005"+
		"\u0380\u0000\u0000\u2605\u260d\u0003\u03f0\u01f8\u0000\u2606\u2607\u0005"+
		"\u02b8\u0000\u0000\u2607\u2608\u0005\u0380\u0000\u0000\u2608\u260a\u0003"+
		"\u03f0\u01f8\u0000\u2609\u260b\u0003\u0238\u011c\u0000\u260a\u2609\u0001"+
		"\u0000\u0000\u0000\u260a\u260b\u0001\u0000\u0000\u0000\u260b\u260d\u0001"+
		"\u0000\u0000\u0000\u260c\u2600\u0001\u0000\u0000\u0000\u260c\u2603\u0001"+
		"\u0000\u0000\u0000\u260c\u2606\u0001\u0000\u0000\u0000\u260d\u028f\u0001"+
		"\u0000\u0000\u0000\u260e\u260f\u0005\u01d9\u0000\u0000\u260f\u2610\u0003"+
		"\u03f0\u01f8\u0000\u2610\u2611\u0005\u0207\u0000\u0000\u2611\u2612\u0005"+
		"\u00c8\u0000\u0000\u2612\u2613\u0007\u0014\u0000\u0000\u2613\u0291\u0001"+
		"\u0000\u0000\u0000\u2614\u2630\u0005\u0259\u0000\u0000\u2615\u2630\u0005"+
		"\u0319\u0000\u0000\u2616\u2630\u0005\u032d\u0000\u0000\u2617\u2630\u0005"+
		"\u0158\u0000\u0000\u2618\u2619\u0005\u01ab\u0000\u0000\u2619\u2630\u0005"+
		"\u020f\u0000\u0000\u261a\u261b\u0005\u028a\u0000\u0000\u261b\u2630\u0005"+
		"\u020f\u0000\u0000\u261c\u2630\u0005\u00a5\u0000\u0000\u261d\u2630\u0005"+
		"\u027d\u0000\u0000\u261e\u2630\u0005\u02d4\u0000\u0000\u261f\u2630\u0005"+
		"\u0329\u0000\u0000\u2620\u2630\u0005\u02ac\u0000\u0000\u2621\u2622\u0005"+
		"\u0108\u0000\u0000\u2622\u2630\u0005\u0113\u0000\u0000\u2623\u2630\u0005"+
		"\u02c2\u0000\u0000\u2624\u2630\u0005\u02de\u0000\u0000\u2625\u2626\u0005"+
		"\u0188\u0000\u0000\u2626\u2630\u0005\u020f\u0000\u0000\u2627\u2628\u0005"+
		"\u025f\u0000\u0000\u2628\u2629\u0005\u0005\u0000\u0000\u2629\u2630\u0005"+
		"\u020f\u0000\u0000\u262a\u2630\u0005\u02db\u0000\u0000\u262b\u2630\u0005"+
		"\u020a\u0000\u0000\u262c\u2630\u0005\u0119\u0000\u0000\u262d\u2630\u0005"+
		"\u021a\u0000\u0000\u262e\u2630\u0005\u0288\u0000\u0000\u262f\u2614\u0001"+
		"\u0000\u0000\u0000\u262f\u2615\u0001\u0000\u0000\u0000\u262f\u2616\u0001"+
		"\u0000\u0000\u0000\u262f\u2617\u0001\u0000\u0000\u0000\u262f\u2618\u0001"+
		"\u0000\u0000\u0000\u262f\u261a\u0001\u0000\u0000\u0000\u262f\u261c\u0001"+
		"\u0000\u0000\u0000\u262f\u261d\u0001\u0000\u0000\u0000\u262f\u261e\u0001"+
		"\u0000\u0000\u0000\u262f\u261f\u0001\u0000\u0000\u0000\u262f\u2620\u0001"+
		"\u0000\u0000\u0000\u262f\u2621\u0001\u0000\u0000\u0000\u262f\u2623\u0001"+
		"\u0000\u0000\u0000\u262f\u2624\u0001\u0000\u0000\u0000\u262f\u2625\u0001"+
		"\u0000\u0000\u0000\u262f\u2627\u0001\u0000\u0000\u0000\u262f\u262a\u0001"+
		"\u0000\u0000\u0000\u262f\u262b\u0001\u0000\u0000\u0000\u262f\u262c\u0001"+
		"\u0000\u0000\u0000\u262f\u262d\u0001\u0000\u0000\u0000\u262f\u262e\u0001"+
		"\u0000\u0000\u0000\u2630\u0293\u0001\u0000\u0000\u0000\u2631\u2632\u0007"+
		"E\u0000\u0000\u2632\u0295\u0001\u0000\u0000\u0000\u2633\u2655\u0003\u0298"+
		"\u014c\u0000\u2634\u2655\u0003\u029a\u014d\u0000\u2635\u2655\u0003\u029c"+
		"\u014e\u0000\u2636\u2655\u0003\u029e\u014f\u0000\u2637\u2655\u0003\u02a0"+
		"\u0150\u0000\u2638\u2655\u0003\u02a2\u0151\u0000\u2639\u2655\u0003\u02a4"+
		"\u0152\u0000\u263a\u2655\u0003\u02a6\u0153\u0000\u263b\u2655\u0003\u02a8"+
		"\u0154\u0000\u263c\u2655\u0003\u02aa\u0155\u0000\u263d\u2655\u0003\u02ac"+
		"\u0156\u0000\u263e\u2655\u0003\u02ae\u0157\u0000\u263f\u2655\u0003\u02b0"+
		"\u0158\u0000\u2640\u2655\u0003\u02b2\u0159\u0000\u2641\u2655\u0003\u02c6"+
		"\u0163\u0000\u2642\u2655\u0003\u02b4\u015a\u0000\u2643\u2655\u0003\u02b6"+
		"\u015b\u0000\u2644\u2655\u0003\u02b8\u015c\u0000\u2645\u2655\u0003\u02ba"+
		"\u015d\u0000\u2646\u2655\u0003\u02bc\u015e\u0000\u2647\u2655\u0003\u02be"+
		"\u015f\u0000\u2648\u2655\u0003\u02c0\u0160\u0000\u2649\u2655\u0003\u02c2"+
		"\u0161\u0000\u264a\u2655\u0003\u02c4\u0162\u0000\u264b\u2655\u0003\u02c8"+
		"\u0164\u0000\u264c\u2655\u0003\u021a\u010d\u0000\u264d\u2655\u0003\u02ca"+
		"\u0165\u0000\u264e\u2655\u0003\u02cc\u0166\u0000\u264f\u2655\u0003\u02ce"+
		"\u0167\u0000\u2650\u2655\u0003\u02d0\u0168\u0000\u2651\u2655\u0003\u02d2"+
		"\u0169\u0000\u2652\u2655\u0003\u02d4\u016a\u0000\u2653\u2655\u0003\u02d6"+
		"\u016b\u0000\u2654\u2633\u0001\u0000\u0000\u0000\u2654\u2634\u0001\u0000"+
		"\u0000\u0000\u2654\u2635\u0001\u0000\u0000\u0000\u2654\u2636\u0001\u0000"+
		"\u0000\u0000\u2654\u2637\u0001\u0000\u0000\u0000\u2654\u2638\u0001\u0000"+
		"\u0000\u0000\u2654\u2639\u0001\u0000\u0000\u0000\u2654\u263a\u0001\u0000"+
		"\u0000\u0000\u2654\u263b\u0001\u0000\u0000\u0000\u2654\u263c\u0001\u0000"+
		"\u0000\u0000\u2654\u263d\u0001\u0000\u0000\u0000\u2654\u263e\u0001\u0000"+
		"\u0000\u0000\u2654\u263f\u0001\u0000\u0000\u0000\u2654\u2640\u0001\u0000"+
		"\u0000\u0000\u2654\u2641\u0001\u0000\u0000\u0000\u2654\u2642\u0001\u0000"+
		"\u0000\u0000\u2654\u2643\u0001\u0000\u0000\u0000\u2654\u2644\u0001\u0000"+
		"\u0000\u0000\u2654\u2645\u0001\u0000\u0000\u0000\u2654\u2646\u0001\u0000"+
		"\u0000\u0000\u2654\u2647\u0001\u0000\u0000\u0000\u2654\u2648\u0001\u0000"+
		"\u0000\u0000\u2654\u2649\u0001\u0000\u0000\u0000\u2654\u264a\u0001\u0000"+
		"\u0000\u0000\u2654\u264b\u0001\u0000\u0000\u0000\u2654\u264c\u0001\u0000"+
		"\u0000\u0000\u2654\u264d\u0001\u0000\u0000\u0000\u2654\u264e\u0001\u0000"+
		"\u0000\u0000\u2654\u264f\u0001\u0000\u0000\u0000\u2654\u2650\u0001\u0000"+
		"\u0000\u0000\u2654\u2651\u0001\u0000\u0000\u0000\u2654\u2652\u0001\u0000"+
		"\u0000\u0000\u2654\u2653\u0001\u0000\u0000\u0000\u2655\u0297\u0001\u0000"+
		"\u0000\u0000\u2656\u2657\u0005\u00ca\u0000\u0000\u2657\u2658\u0003\u03ba"+
		"\u01dd\u0000\u2658\u2659\u0003\u02f8\u017c\u0000\u2659\u265b\u0003\u03d0"+
		"\u01e8\u0000\u265a\u265c\u0003\u02d8\u016c\u0000\u265b\u265a\u0001\u0000"+
		"\u0000\u0000\u265b\u265c\u0001\u0000\u0000\u0000\u265c\u0299\u0001\u0000"+
		"\u0000\u0000\u265d\u265e\u0005\u00ca\u0000\u0000\u265e\u265f\u0005\u000f"+
		"\u0000\u0000\u265f\u2660\u0003\u03d0\u01e8\u0000\u2660\u029b\u0001\u0000"+
		"\u0000\u0000\u2661\u2662\u0005\u00ca\u0000\u0000\u2662\u2664\u0005\u008e"+
		"\u0000\u0000\u2663\u2665\u0003\u02f8\u017c\u0000\u2664\u2663\u0001\u0000"+
		"\u0000\u0000\u2664\u2665\u0001\u0000\u0000\u0000\u2665\u2666\u0001\u0000"+
		"\u0000\u0000\u2666\u2667\u0003\u03d0\u01e8\u0000\u2667\u029d\u0001\u0000"+
		"\u0000\u0000\u2668\u2669\u0005\u00ca\u0000\u0000\u2669\u266b\u0005\u00a5"+
		"\u0000\u0000\u266a\u266c\u0003\u02f8\u017c\u0000\u266b\u266a\u0001\u0000"+
		"\u0000\u0000\u266b\u266c\u0001\u0000\u0000\u0000\u266c\u266d\u0001\u0000"+
		"\u0000\u0000\u266d\u266f\u0003\u03d0\u01e8\u0000\u266e\u2670\u0003\u02d8"+
		"\u016c\u0000\u266f\u266e\u0001\u0000\u0000\u0000\u266f\u2670\u0001\u0000"+
		"\u0000\u0000\u2670\u029f\u0001\u0000\u0000\u0000\u2671\u2672\u0005\u00ca"+
		"\u0000\u0000\u2672\u2673\u0005\u00cb\u0000\u0000\u2673\u2674\u0005\u02d4"+
		"\u0000\u0000\u2674\u2675\u0003\u03d0\u01e8\u0000\u2675\u02a1\u0001\u0000"+
		"\u0000\u0000\u2676\u2677\u0005\u00ca\u0000\u0000\u2677\u2678\u0005\u00f3"+
		"\u0000\u0000\u2678\u267a\u0005\u02d4\u0000\u0000\u2679\u267b\u0003\u02f8"+
		"\u017c\u0000\u267a\u2679\u0001\u0000\u0000\u0000\u267a\u267b\u0001\u0000"+
		"\u0000\u0000\u267b\u267c\u0001\u0000\u0000\u0000\u267c\u267e\u0003\u03ea"+
		"\u01f5\u0000\u267d\u267f\u0003\u02d8\u016c\u0000\u267e\u267d\u0001\u0000"+
		"\u0000\u0000\u267e\u267f\u0001\u0000\u0000\u0000\u267f\u02a3\u0001\u0000"+
		"\u0000\u0000\u2680\u2681\u0005\u00ca\u0000\u0000\u2681\u2682\u0005\u0103"+
		"\u0000\u0000\u2682\u2684\u0005\u012c\u0000\u0000\u2683\u2685\u0003\u02f8"+
		"\u017c\u0000\u2684\u2683\u0001\u0000\u0000\u0000\u2684\u2685\u0001\u0000"+
		"\u0000\u0000\u2685\u2686\u0001\u0000\u0000\u0000\u2686\u2687\u0003\u03d0"+
		"\u01e8\u0000\u2687\u02a5\u0001\u0000\u0000\u0000\u2688\u2689\u0005\u00ca"+
		"\u0000\u0000\u2689\u268a\u0005\u0108\u0000\u0000\u268a\u268c\u0005\u0113"+
		"\u0000\u0000\u268b\u268d\u0003\u02f8\u017c\u0000\u268c\u268b\u0001\u0000"+
		"\u0000\u0000\u268c\u268d\u0001\u0000\u0000\u0000\u268d\u268e\u0001\u0000"+
		"\u0000\u0000\u268e\u268f\u0003\u03d0\u01e8\u0000\u268f\u02a7\u0001\u0000"+
		"\u0000\u0000\u2690\u2691\u0005\u00ca\u0000\u0000\u2691\u2693\u0005\u0119"+
		"\u0000\u0000\u2692\u2694\u0003\u02f8\u017c\u0000\u2693\u2692\u0001\u0000"+
		"\u0000\u0000\u2693\u2694\u0001\u0000\u0000\u0000\u2694\u2695\u0001\u0000"+
		"\u0000\u0000\u2695\u2696\u0003\u03ea\u01f5\u0000\u2696\u2697\u0003\u02da"+
		"\u016d\u0000\u2697\u02a9\u0001\u0000\u0000\u0000\u2698\u269a\u0005\u00ca"+
		"\u0000\u0000\u2699\u269b\u0007F\u0000\u0000\u269a\u2699\u0001\u0000\u0000"+
		"\u0000\u269a\u269b\u0001\u0000\u0000\u0000\u269b\u269c\u0001\u0000\u0000"+
		"\u0000\u269c\u269e\u0005\u0158\u0000\u0000\u269d\u269f\u0003\u02f8\u017c"+
		"\u0000\u269e\u269d\u0001\u0000\u0000\u0000\u269e\u269f\u0001\u0000\u0000"+
		"\u0000\u269f\u26a0\u0001\u0000\u0000\u0000\u26a0\u26a1\u0003\u03d0\u01e8"+
		"\u0000\u26a1\u02ab\u0001\u0000\u0000\u0000\u26a2\u26a3\u0005\u00ca\u0000"+
		"\u0000\u26a3\u26a4\u0005\u0187\u0000\u0000\u26a4\u26a5\u0005\u0006\u0000"+
		"\u0000\u26a5\u26a6\u0003\u03d0\u01e8\u0000\u26a6\u02ad\u0001\u0000\u0000"+
		"\u0000\u26a7\u26a8\u0005\u00ca\u0000\u0000\u26a8\u26a9\u0005\u0188\u0000"+
		"\u0000\u26a9\u26aa\u0005\u020f\u0000\u0000\u26aa\u26ab\u0003\u03d0\u01e8"+
		"\u0000\u26ab\u02af\u0001\u0000\u0000\u0000\u26ac\u26ad\u0005\u00ca\u0000"+
		"\u0000\u26ad\u26ae\u0005\u018f\u0000\u0000\u26ae\u26b0\u0005\u0329\u0000"+
		"\u0000\u26af\u26b1\u0003\u02f8\u017c\u0000\u26b0\u26af\u0001\u0000\u0000"+
		"\u0000\u26b0\u26b1\u0001\u0000\u0000\u0000\u26b1\u26b2\u0001\u0000\u0000"+
		"\u0000\u26b2\u26b3\u0003\u03ea\u01f5\u0000\u26b3\u02b1\u0001\u0000\u0000"+
		"\u0000\u26b4\u26b5\u0005\u00ca\u0000\u0000\u26b5\u26b6\u0005\u01ab\u0000"+
		"\u0000\u26b6\u26b8\u0005\u020f\u0000\u0000\u26b7\u26b9\u0003\u02f8\u017c"+
		"\u0000\u26b8\u26b7\u0001\u0000\u0000\u0000\u26b8\u26b9\u0001\u0000\u0000"+
		"\u0000\u26b9\u26ba\u0001\u0000\u0000\u0000\u26ba\u26bb\u0003\u03d0\u01e8"+
		"\u0000\u26bb\u02b3\u0001\u0000\u0000\u0000\u26bc\u26bd\u0005\u00ca\u0000"+
		"\u0000\u26bd\u26bf\u0005\u020a\u0000\u0000\u26be\u26c0\u0003\u02f8\u017c"+
		"\u0000\u26bf\u26be\u0001\u0000\u0000\u0000\u26bf\u26c0\u0001\u0000\u0000"+
		"\u0000\u26c0\u26c1\u0001\u0000\u0000\u0000\u26c1\u26c2\u0003\u03ea\u01f5"+
		"\u0000\u26c2\u02b5\u0001\u0000\u0000\u0000\u26c3\u26c4\u0005\u00ca\u0000"+
		"\u0000\u26c4\u26c6\u0005\u021a\u0000\u0000\u26c5\u26c7\u0003\u02f8\u017c"+
		"\u0000\u26c6\u26c5\u0001\u0000\u0000\u0000\u26c6\u26c7\u0001\u0000\u0000"+
		"\u0000\u26c7\u26c8\u0001\u0000\u0000\u0000\u26c8\u26c9\u0003\u03ea\u01f5"+
		"\u0000\u26c9\u26ca\u0003\u02da\u016d\u0000\u26ca\u02b7\u0001\u0000\u0000"+
		"\u0000\u26cb\u26cc\u0005\u00ca\u0000\u0000\u26cc\u26cd\u0005\u0241\u0000"+
		"\u0000\u26cd\u26cf\u0005\u012c\u0000\u0000\u26ce\u26d0\u0003\u02f8\u017c"+
		"\u0000\u26cf\u26ce\u0001\u0000\u0000\u0000\u26cf\u26d0\u0001\u0000\u0000"+
		"\u0000\u26d0\u26d1\u0001\u0000\u0000\u0000\u26d1\u26d2\u0003\u03d0\u01e8"+
		"\u0000\u26d2\u02b9\u0001\u0000\u0000\u0000\u26d3\u26d4\u0005\u00ca\u0000"+
		"\u0000\u26d4\u26d5\u0005\u0247\u0000\u0000\u26d5\u26d6\u0005\u01a3\u0000"+
		"\u0000\u26d6\u26d7\u0003\u03d0\u01e8\u0000\u26d7\u02bb\u0001\u0000\u0000"+
		"\u0000\u26d8\u26d9\u0005\u00ca\u0000\u0000\u26d9\u26db\u0005\u0259\u0000"+
		"\u0000\u26da\u26dc\u0003\u02f8\u017c\u0000\u26db\u26da\u0001\u0000\u0000"+
		"\u0000\u26db\u26dc\u0001\u0000\u0000\u0000\u26dc\u26dd\u0001\u0000\u0000"+
		"\u0000\u26dd\u26de\u0003\u03d0\u01e8\u0000\u26de\u02bd\u0001\u0000\u0000"+
		"\u0000\u26df\u26e0\u0005\u00ca\u0000\u0000\u26e0\u26e1\u0005\u025f\u0000"+
		"\u0000\u26e1\u26e2\u0005\u0005\u0000\u0000\u26e2\u26e4\u0005\u020f\u0000"+
		"\u0000\u26e3\u26e5\u0003\u02f8\u017c\u0000\u26e4\u26e3\u0001\u0000\u0000"+
		"\u0000\u26e4\u26e5\u0001\u0000\u0000\u0000\u26e5\u26e6\u0001\u0000\u0000"+
		"\u0000\u26e6\u26e7\u0003\u03d0\u01e8\u0000\u26e7\u02bf\u0001\u0000\u0000"+
		"\u0000\u26e8\u26e9\u0005\u00ca\u0000\u0000\u26e9\u26eb\u0005\u027d\u0000"+
		"\u0000\u26ea\u26ec\u0003\u02f8\u017c\u0000\u26eb\u26ea\u0001\u0000\u0000"+
		"\u0000\u26eb\u26ec\u0001\u0000\u0000\u0000\u26ec\u26ed\u0001\u0000\u0000"+
		"\u0000\u26ed\u26ef\u0003\u03b8\u01dc\u0000\u26ee\u26f0\u0003\u02d8\u016c"+
		"\u0000\u26ef\u26ee\u0001\u0000\u0000\u0000\u26ef\u26f0\u0001\u0000\u0000"+
		"\u0000\u26f0\u02c1\u0001\u0000\u0000\u0000\u26f1\u26f2\u0005\u00ca\u0000"+
		"\u0000\u26f2\u26f4\u0005\u0288\u0000\u0000\u26f3\u26f5\u0003\u02f8\u017c"+
		"\u0000\u26f4\u26f3\u0001\u0000\u0000\u0000\u26f4\u26f5\u0001\u0000\u0000"+
		"\u0000\u26f5\u26f6\u0001\u0000\u0000\u0000\u26f6\u26f8\u0003\u03ea\u01f5"+
		"\u0000\u26f7\u26f9\u0003\u02d8\u016c\u0000\u26f8\u26f7\u0001\u0000\u0000"+
		"\u0000\u26f8\u26f9\u0001\u0000\u0000\u0000\u26f9\u02c3\u0001\u0000\u0000"+
		"\u0000\u26fa\u26fb\u0005\u00ca\u0000\u0000\u26fb\u26fc\u0005\u028a\u0000"+
		"\u0000\u26fc\u26fe\u0005\u020f\u0000\u0000\u26fd\u26ff\u0003\u02f8\u017c"+
		"\u0000\u26fe\u26fd\u0001\u0000\u0000\u0000\u26fe\u26ff\u0001\u0000\u0000"+
		"\u0000\u26ff\u2700\u0001\u0000\u0000\u0000\u2700\u2701\u0003\u03ea\u01f5"+
		"\u0000\u2701\u02c5\u0001\u0000\u0000\u0000\u2702\u2703\u0005\u00ca\u0000"+
		"\u0000\u2703\u2704\u0005\u01f7\u0000\u0000\u2704\u2706\u0005\u020f\u0000"+
		"\u0000\u2705\u2707\u0003\u02f8\u017c\u0000\u2706\u2705\u0001\u0000\u0000"+
		"\u0000\u2706\u2707\u0001\u0000\u0000\u0000\u2707\u2708\u0001\u0000\u0000"+
		"\u0000\u2708\u2709\u0003\u03ea\u01f5\u0000\u2709\u02c7\u0001\u0000\u0000"+
		"\u0000\u270a\u270b\u0005\u00ca\u0000\u0000\u270b\u270c\u0005\u0290\u0000"+
		"\u0000\u270c\u270d\u0003\u03d0\u01e8\u0000\u270d\u02c9\u0001\u0000\u0000"+
		"\u0000\u270e\u270f\u0005\u00ca\u0000\u0000\u270f\u2711\u0005\u02c2\u0000"+
		"\u0000\u2710\u2712\u0003\u02f8\u017c\u0000\u2711\u2710\u0001\u0000\u0000"+
		"\u0000\u2711\u2712\u0001\u0000\u0000\u0000\u2712\u2713\u0001\u0000\u0000"+
		"\u0000\u2713\u2714\u0003\u03ea\u01f5\u0000\u2714\u02cb\u0001\u0000\u0000"+
		"\u0000\u2715\u2716\u0005\u00ca\u0000\u0000\u2716\u2718\u0005\u02d4\u0000"+
		"\u0000\u2717\u2719\u0003\u02f8\u017c\u0000\u2718\u2717\u0001\u0000\u0000"+
		"\u0000\u2718\u2719\u0001\u0000\u0000\u0000\u2719\u271a\u0001\u0000\u0000"+
		"\u0000\u271a\u271c\u0003\u03ea\u01f5\u0000\u271b\u271d\u0003\u02d8\u016c"+
		"\u0000\u271c\u271b\u0001\u0000\u0000\u0000\u271c\u271d\u0001\u0000\u0000"+
		"\u0000\u271d\u02cd\u0001\u0000\u0000\u0000\u271e\u271f\u0005\u00ca\u0000"+
		"\u0000\u271f\u2721\u0005\u02db\u0000\u0000\u2720\u2722\u0003\u02f8\u017c"+
		"\u0000\u2721\u2720\u0001\u0000\u0000\u0000\u2721\u2722\u0001\u0000\u0000"+
		"\u0000\u2722\u2723\u0001\u0000\u0000\u0000\u2723\u2724\u0003\u03ea\u01f5"+
		"\u0000\u2724\u02cf\u0001\u0000\u0000\u0000\u2725\u2726\u0005\u00ca\u0000"+
		"\u0000\u2726\u2728\u0005\u02de\u0000\u0000\u2727\u2729\u0003\u02f8\u017c"+
		"\u0000\u2728\u2727\u0001\u0000\u0000\u0000\u2728\u2729\u0001\u0000\u0000"+
		"\u0000\u2729\u272a\u0001\u0000\u0000\u0000\u272a\u272b\u0003\u03ea\u01f5"+
		"\u0000\u272b\u02d1\u0001\u0000\u0000\u0000\u272c\u272d\u0005\u00ca\u0000"+
		"\u0000\u272d\u272f\u0005\u0319\u0000\u0000\u272e\u2730\u0003\u02f8\u017c"+
		"\u0000\u272f\u272e\u0001\u0000\u0000\u0000\u272f\u2730\u0001\u0000\u0000"+
		"\u0000\u2730\u2731\u0001\u0000\u0000\u0000\u2731\u2732\u0003\u03d0\u01e8"+
		"\u0000\u2732\u02d3\u0001\u0000\u0000\u0000\u2733\u2734\u0005\u00ca\u0000"+
		"\u0000\u2734\u2736\u0005\u0329\u0000\u0000\u2735\u2737\u0003\u02f8\u017c"+
		"\u0000\u2736\u2735\u0001\u0000\u0000\u0000\u2736\u2737\u0001\u0000\u0000"+
		"\u0000\u2737\u2738\u0001\u0000\u0000\u0000\u2738\u2739\u0003\u03ea\u01f5"+
		"\u0000\u2739\u02d5\u0001\u0000\u0000\u0000\u273a\u273b\u0005\u00ca\u0000"+
		"\u0000\u273b\u273d\u0005\u032d\u0000\u0000\u273c\u273e\u0003\u02f8\u017c"+
		"\u0000\u273d\u273c\u0001\u0000\u0000\u0000\u273d\u273e\u0001\u0000\u0000"+
		"\u0000\u273e\u273f\u0001\u0000\u0000\u0000\u273f\u2740\u0003\u03ce\u01e7"+
		"\u0000\u2740\u02d7\u0001\u0000\u0000\u0000\u2741\u2742\u0007G\u0000\u0000"+
		"\u2742\u02d9\u0001\u0000\u0000\u0000\u2743\u2745\u0005\u038a\u0000\u0000"+
		"\u2744\u2746\u0003\u00c0`\u0000\u2745\u2744\u0001\u0000\u0000\u0000\u2745"+
		"\u2746\u0001\u0000\u0000\u0000\u2746\u2747\u0001\u0000\u0000\u0000\u2747"+
		"\u2748\u0005\u038b\u0000\u0000\u2748\u02db\u0001\u0000\u0000\u0000\u2749"+
		"\u274e\u0003\u02de\u016f\u0000\u274a\u274e\u0003\u02e0\u0170\u0000\u274b"+
		"\u274e\u0003\u02e2\u0171\u0000\u274c\u274e\u0003\u02e4\u0172\u0000\u274d"+
		"\u2749\u0001\u0000\u0000\u0000\u274d\u274a\u0001\u0000\u0000\u0000\u274d"+
		"\u274b\u0001\u0000\u0000\u0000\u274d\u274c\u0001\u0000\u0000\u0000\u274e"+
		"\u02dd\u0001\u0000\u0000\u0000\u274f\u2750\u0005\u030d\u0000\u0000\u2750"+
		"\u2751\u0005\u00a5\u0000\u0000\u2751\u2752\u0003\u03d0\u01e8\u0000\u2752"+
		"\u02df\u0001\u0000\u0000\u0000\u2753\u2754\u0005\u030d\u0000\u0000\u2754"+
		"\u2755\u0005\u027d\u0000\u0000\u2755\u2756\u0003\u03b8\u01dc\u0000\u2756"+
		"\u02e1\u0001\u0000\u0000\u0000\u2757\u2758\u0005\u030d\u0000\u0000\u2758"+
		"\u2759\u0005\u02d4\u0000\u0000\u2759\u275a\u0003\u03ea\u01f5\u0000\u275a"+
		"\u02e3\u0001\u0000\u0000\u0000\u275b\u275c\u0005\u030d\u0000\u0000\u275c"+
		"\u275d\u0005\u02db\u0000\u0000\u275d\u275e\u0003\u03ea\u01f5\u0000\u275e"+
		"\u02e5\u0001\u0000\u0000\u0000\u275f\u2765\u0003\u02e8\u0174\u0000\u2760"+
		"\u2765\u0003\u02ea\u0175\u0000\u2761\u2765\u0003\u02ec\u0176\u0000\u2762"+
		"\u2765\u0003\u02ee\u0177\u0000\u2763\u2765\u0003\u02f0\u0178\u0000\u2764"+
		"\u275f\u0001\u0000\u0000\u0000\u2764\u2760\u0001\u0000\u0000\u0000\u2764"+
		"\u2761\u0001\u0000\u0000\u0000\u2764\u2762\u0001\u0000\u0000\u0000\u2764"+
		"\u2763\u0001\u0000\u0000\u0000\u2765\u02e7\u0001\u0000\u0000\u0000\u2766"+
		"\u2767\u0005\u0318\u0000\u0000\u2767\u2768\u0005\u00a5\u0000\u0000\u2768"+
		"\u2769\u0003\u03d0\u01e8\u0000\u2769\u02e9\u0001\u0000\u0000\u0000\u276a"+
		"\u276b\u0005\u0318\u0000\u0000\u276b\u276c\u0005\u0259\u0000\u0000\u276c"+
		"\u276d\u0003\u03d0\u01e8\u0000\u276d\u02eb\u0001\u0000\u0000\u0000\u276e"+
		"\u2770\u0005\u0318\u0000\u0000\u276f\u2771\u0005\u027d\u0000\u0000\u2770"+
		"\u276f\u0001\u0000\u0000\u0000\u2770\u2771\u0001\u0000\u0000\u0000\u2771"+
		"\u2775\u0001\u0000\u0000\u0000\u2772\u2773\u0003\u03d0\u01e8\u0000\u2773"+
		"\u2774\u0005\u0386\u0000\u0000\u2774\u2776\u0001\u0000\u0000\u0000\u2775"+
		"\u2772\u0001\u0000\u0000\u0000\u2775\u2776\u0001\u0000\u0000\u0000\u2776"+
		"\u2777\u0001\u0000\u0000\u0000\u2777\u2778\u0003\u03d0\u01e8\u0000\u2778"+
		"\u02ed\u0001\u0000\u0000\u0000\u2779\u277a\u0005\u0318\u0000\u0000\u277a"+
		"\u277b\u0005\u0282\u0000\u0000\u277b\u277c\u0005\u025a\u0000\u0000\u277c"+
		"\u277d\u0007H\u0000\u0000\u277d\u02ef\u0001\u0000\u0000\u0000\u277e\u277f"+
		"\u0005\u0318\u0000\u0000\u277f\u2780\u0005\u032d\u0000\u0000\u2780\u2781"+
		"\u0003\u03ce\u01e7\u0000\u2781\u02f1\u0001\u0000\u0000\u0000\u2782\u2783"+
		"\u0005\u0086\u0000\u0000\u2783\u2784\u0005\u0380\u0000\u0000\u2784\u2785"+
		"\u0003\u03ca\u01e5\u0000\u2785\u02f3\u0001\u0000\u0000\u0000\u2786\u2787"+
		"\u0005\u0086\u0000\u0000\u2787\u2788\u0003\u03ca\u01e5\u0000\u2788\u02f5"+
		"\u0001\u0000\u0000\u0000\u2789\u278a\u0005\u013d\u0000\u0000\u278a\u278b"+
		"\u0005\u02cd\u0000\u0000\u278b\u02f7\u0001\u0000\u0000\u0000\u278c\u278d"+
		"\u0005\u013d\u0000\u0000\u278d\u278e\u0005\u00ef\u0000\u0000\u278e\u02f9"+
		"\u0001\u0000\u0000\u0000\u278f\u2790\u0005\u013d\u0000\u0000\u2790\u2791"+
		"\u0005\u01b5\u0000\u0000\u2791\u2792\u0005\u00ef\u0000\u0000\u2792\u02fb"+
		"\u0001\u0000\u0000\u0000\u2793\u2794\u0005\u01e2\u0000\u0000\u2794\u2795"+
		"\u0005\u023e\u0000\u0000\u2795\u02fd\u0001\u0000\u0000\u0000\u2796\u2797"+
		"\u0005\u01e2\u0000\u0000\u2797\u2798\u0005\u001c\u0000\u0000\u2798\u02ff"+
		"\u0001\u0000\u0000\u0000\u2799\u279a\u0007I\u0000\u0000\u279a\u0301\u0001"+
		"\u0000\u0000\u0000\u279b\u27b9\u0003\u0304\u0182\u0000\u279c\u27b9\u0003"+
		"\u0306\u0183\u0000\u279d\u27b9\u0003\u0308\u0184\u0000\u279e\u27b9\u0003"+
		"\u030a\u0185\u0000\u279f\u27b9\u0003\u030c\u0186\u0000\u27a0\u27b9\u0003"+
		"\u030e\u0187\u0000\u27a1\u27b9\u0003\u0310\u0188\u0000\u27a2\u27b9\u0003"+
		"\u0312\u0189\u0000\u27a3\u27b9\u0003\u0314\u018a\u0000\u27a4\u27b9\u0003"+
		"\u0316\u018b\u0000\u27a5\u27b9\u0003\u0318\u018c\u0000\u27a6\u27b9\u0003"+
		"\u032a\u0195\u0000\u27a7\u27b9\u0003\u031a\u018d\u0000\u27a8\u27b9\u0003"+
		"\u031c\u018e\u0000\u27a9\u27b9\u0003\u031e\u018f\u0000\u27aa\u27b9\u0003"+
		"\u0320\u0190\u0000\u27ab\u27b9\u0003\u0322\u0191\u0000\u27ac\u27b9\u0003"+
		"\u0324\u0192\u0000\u27ad\u27b9\u0003\u0326\u0193\u0000\u27ae\u27b9\u0003"+
		"\u0328\u0194\u0000\u27af\u27b9\u0003\u032c\u0196\u0000\u27b0\u27b9\u0003"+
		"\u021c\u010e\u0000\u27b1\u27b9\u0003\u032e\u0197\u0000\u27b2\u27b9\u0003"+
		"\u0330\u0198\u0000\u27b3\u27b9\u0003\u0332\u0199\u0000\u27b4\u27b9\u0003"+
		"\u0334\u019a\u0000\u27b5\u27b9\u0003\u0336\u019b\u0000\u27b6\u27b9\u0003"+
		"\u0338\u019c\u0000\u27b7\u27b9\u0003\u033a\u019d\u0000\u27b8\u279b\u0001"+
		"\u0000\u0000\u0000\u27b8\u279c\u0001\u0000\u0000\u0000\u27b8\u279d\u0001"+
		"\u0000\u0000\u0000\u27b8\u279e\u0001\u0000\u0000\u0000\u27b8\u279f\u0001"+
		"\u0000\u0000\u0000\u27b8\u27a0\u0001\u0000\u0000\u0000\u27b8\u27a1\u0001"+
		"\u0000\u0000\u0000\u27b8\u27a2\u0001\u0000\u0000\u0000\u27b8\u27a3\u0001"+
		"\u0000\u0000\u0000\u27b8\u27a4\u0001\u0000\u0000\u0000\u27b8\u27a5\u0001"+
		"\u0000\u0000\u0000\u27b8\u27a6\u0001\u0000\u0000\u0000\u27b8\u27a7\u0001"+
		"\u0000\u0000\u0000\u27b8\u27a8\u0001\u0000\u0000\u0000\u27b8\u27a9\u0001"+
		"\u0000\u0000\u0000\u27b8\u27aa\u0001\u0000\u0000\u0000\u27b8\u27ab\u0001"+
		"\u0000\u0000\u0000\u27b8\u27ac\u0001\u0000\u0000\u0000\u27b8\u27ad\u0001"+
		"\u0000\u0000\u0000\u27b8\u27ae\u0001\u0000\u0000\u0000\u27b8\u27af\u0001"+
		"\u0000\u0000\u0000\u27b8\u27b0\u0001\u0000\u0000\u0000\u27b8\u27b1\u0001"+
		"\u0000\u0000\u0000\u27b8\u27b2\u0001\u0000\u0000\u0000\u27b8\u27b3\u0001"+
		"\u0000\u0000\u0000\u27b8\u27b4\u0001\u0000\u0000\u0000\u27b8\u27b5\u0001"+
		"\u0000\u0000\u0000\u27b8\u27b6\u0001\u0000\u0000\u0000\u27b8\u27b7\u0001"+
		"\u0000\u0000\u0000\u27b9\u0303\u0001\u0000\u0000\u0000\u27ba\u27bb\u0003"+
		"\u0300\u0180\u0000\u27bb\u27bc\u0005\u000f\u0000\u0000\u27bc\u27bd\u0003"+
		"\u03d0\u01e8\u0000\u27bd\u0305\u0001\u0000\u0000\u0000\u27be\u27bf\u0003"+
		"\u0300\u0180\u0000\u27bf\u27c0\u0005\u00a5\u0000\u0000\u27c0\u27c1\u0003"+
		"\u03d0\u01e8\u0000\u27c1\u0307\u0001\u0000\u0000\u0000\u27c2\u27c3\u0003"+
		"\u0300\u0180\u0000\u27c3\u27c4\u0005\u00cb\u0000\u0000\u27c4\u27c5\u0005"+
		"\u02d4\u0000\u0000\u27c5\u27c6\u0003\u03d0\u01e8\u0000\u27c6\u0309\u0001"+
		"\u0000\u0000\u0000\u27c7\u27c8\u0003\u0300\u0180\u0000\u27c8\u27c9\u0005"+
		"\u00e9\u0000\u0000\u27c9\u27ca\u0005\u02d4\u0000\u0000\u27ca\u27cb\u0003"+
		"\u03d0\u01e8\u0000\u27cb\u030b\u0001\u0000\u0000\u0000\u27cc\u27ce\u0003"+
		"\u0300\u0180\u0000\u27cd\u27cf\u0005\u00f3\u0000\u0000\u27ce\u27cd\u0001"+
		"\u0000\u0000\u0000\u27ce\u27cf\u0001\u0000\u0000\u0000\u27cf\u27d0\u0001"+
		"\u0000\u0000\u0000\u27d0\u27d1\u0005\u02d4\u0000\u0000\u27d1\u27d5\u0003"+
		"\u03ea\u01f5\u0000\u27d2\u27d3\u0005\u030c\u0000\u0000\u27d3\u27d4\u0005"+
		"\u0380\u0000\u0000\u27d4\u27d6\u0007J\u0000\u0000\u27d5\u27d2\u0001\u0000"+
		"\u0000\u0000\u27d5\u27d6\u0001\u0000\u0000\u0000\u27d6\u030d\u0001\u0000"+
		"\u0000\u0000\u27d7\u27d8\u0003\u0300\u0180\u0000\u27d8\u27d9\u0005\u0108"+
		"\u0000\u0000\u27d9\u27da\u0005\u0113\u0000\u0000\u27da\u27db\u0003\u03d0"+
		"\u01e8\u0000\u27db\u030f\u0001\u0000\u0000\u0000\u27dc\u27dd\u0003\u0300"+
		"\u0180\u0000\u27dd\u27de\u0005\u0119\u0000\u0000\u27de\u27df\u0003\u03ea"+
		"\u01f5\u0000\u27df\u27e0\u0003\u02da\u016d\u0000\u27e0\u0311\u0001\u0000"+
		"\u0000\u0000\u27e1\u27e3\u0003\u0300\u0180\u0000\u27e2\u27e4\u0007F\u0000"+
		"\u0000\u27e3\u27e2\u0001\u0000\u0000\u0000\u27e3\u27e4\u0001\u0000\u0000"+
		"\u0000\u27e4\u27e5\u0001\u0000\u0000\u0000\u27e5\u27e6\u0005\u0158\u0000"+
		"\u0000\u27e6\u27e7\u0003\u03d0\u01e8\u0000\u27e7\u0313\u0001\u0000\u0000"+
		"\u0000\u27e8\u27e9\u0003\u0300\u0180\u0000\u27e9\u27ea\u0005\u0188\u0000"+
		"\u0000\u27ea\u27eb\u0005\u020f\u0000\u0000\u27eb\u27ec\u0003\u03d0\u01e8"+
		"\u0000\u27ec\u0315\u0001\u0000\u0000\u0000\u27ed\u27ee\u0003\u0300\u0180"+
		"\u0000\u27ee\u27ef\u0005\u018f\u0000\u0000\u27ef\u27f0\u0005\u0329\u0000"+
		"\u0000\u27f0\u27f1\u0003\u03ea\u01f5\u0000\u27f1\u0317\u0001\u0000\u0000"+
		"\u0000\u27f2\u27f3\u0003\u0300\u0180\u0000\u27f3\u27f4\u0005\u01ab\u0000"+
		"\u0000\u27f4\u27f5\u0005\u020f\u0000\u0000\u27f5\u27f6\u0003\u03d0\u01e8"+
		"\u0000\u27f6\u0319\u0001\u0000\u0000\u0000\u27f7\u27f8\u0003\u0300\u0180"+
		"\u0000\u27f8\u27f9\u0005\u020a\u0000\u0000\u27f9\u27fa\u0003\u03ea\u01f5"+
		"\u0000\u27fa\u031b\u0001\u0000\u0000\u0000\u27fb\u27fc\u0003\u0300\u0180"+
		"\u0000\u27fc\u27fd\u0005\u021a\u0000\u0000\u27fd\u27fe\u0003\u03ea\u01f5"+
		"\u0000\u27fe\u27ff\u0003\u02da\u016d\u0000\u27ff\u031d\u0001\u0000\u0000"+
		"\u0000\u2800\u2801\u0003\u0300\u0180\u0000\u2801\u2806\u0005\u024e\u0000"+
		"\u0000\u2802\u2807\u0005\u0377\u0000\u0000\u2803\u2804\u0005\u0170\u0000"+
		"\u0000\u2804\u2805\u0005\u038a\u0000\u0000\u2805\u2807\u0005\u038b\u0000"+
		"\u0000\u2806\u2802\u0001\u0000\u0000\u0000\u2806\u2803\u0001\u0000\u0000"+
		"\u0000\u2807\u031f\u0001\u0000\u0000\u0000\u2808\u2809\u0003\u0300\u0180"+
		"\u0000\u2809\u280a\u0005\u025f\u0000\u0000\u280a\u280b\u0005\u0005\u0000"+
		"\u0000\u280b\u280c\u0005\u020f\u0000\u0000\u280c\u280d\u0003\u03d0\u01e8"+
		"\u0000\u280d\u0321\u0001\u0000\u0000\u0000\u280e\u280f\u0003\u0300\u0180"+
		"\u0000\u280f\u2810\u0005\u027d\u0000\u0000\u2810\u2811\u0003\u03b8\u01dc"+
		"\u0000\u2811\u0323\u0001\u0000\u0000\u0000\u2812\u2813\u0003\u0300\u0180"+
		"\u0000\u2813\u2814\u0005\u0281\u0000\u0000\u2814\u2815\u0005\u01e0\u0000"+
		"\u0000\u2815\u2816\u0005\u01d9\u0000\u0000\u2816\u2817\u0003\u03ea\u01f5"+
		"\u0000\u2817\u0325\u0001\u0000\u0000\u0000\u2818\u2819\u0003\u0300\u0180"+
		"\u0000\u2819\u281a\u0005\u0288\u0000\u0000\u281a\u281b\u0003\u03ea\u01f5"+
		"\u0000\u281b\u0327\u0001\u0000\u0000\u0000\u281c\u281d\u0003\u0300\u0180"+
		"\u0000\u281d\u281e\u0005\u028a\u0000\u0000\u281e\u281f\u0005\u020f\u0000"+
		"\u0000\u281f\u2820\u0003\u03ea\u01f5\u0000\u2820\u0329\u0001\u0000\u0000"+
		"\u0000\u2821\u2822\u0003\u0300\u0180\u0000\u2822\u2823\u0005\u01f7\u0000"+
		"\u0000\u2823\u2824\u0005\u020f\u0000\u0000\u2824\u2825\u0003\u03ea\u01f5"+
		"\u0000\u2825\u032b\u0001\u0000\u0000\u0000\u2826\u2827\u0003\u0300\u0180"+
		"\u0000\u2827\u2828\u0005\u0290\u0000\u0000\u2828\u2829\u0003\u03d0\u01e8"+
		"\u0000\u2829\u032d\u0001\u0000\u0000\u0000\u282a\u282b\u0003\u0300\u0180"+
		"\u0000\u282b\u282c\u0005\u02c2\u0000\u0000\u282c\u282d\u0003\u03ea\u01f5"+
		"\u0000\u282d\u032f\u0001\u0000\u0000\u0000\u282e\u282f\u0003\u0300\u0180"+
		"\u0000\u282f\u2830\u0005\u02d4\u0000\u0000\u2830\u2834\u0003\u03ea\u01f5"+
		"\u0000\u2831\u2832\u0005\u030c\u0000\u0000\u2832\u2833\u0005\u0380\u0000"+
		"\u0000\u2833\u2835\u0007J\u0000\u0000\u2834\u2831\u0001\u0000\u0000\u0000"+
		"\u2834\u2835\u0001\u0000\u0000\u0000\u2835\u0331\u0001\u0000\u0000\u0000"+
		"\u2836\u2837\u0003\u0300\u0180\u0000\u2837\u2838\u0005\u02de\u0000\u0000"+
		"\u2838\u2839\u0003\u03ea\u01f5\u0000\u2839\u0333\u0001\u0000\u0000\u0000"+
		"\u283a\u283b\u0003\u0300\u0180\u0000\u283b\u283c\u0005\u02fe\u0000\u0000"+
		"\u283c\u283d\u0003\u03f0\u01f8\u0000\u283d\u0335\u0001\u0000\u0000\u0000"+
		"\u283e\u283f\u0003\u0300\u0180\u0000\u283f\u2840\u0005\u0319\u0000\u0000"+
		"\u2840\u2841\u0003\u03d0\u01e8\u0000\u2841\u0337\u0001\u0000\u0000\u0000"+
		"\u2842\u2843\u0003\u0300\u0180\u0000\u2843\u2844\u0005\u0329\u0000\u0000"+
		"\u2844\u2845\u0003\u03ea\u01f5\u0000\u2845\u0339\u0001\u0000\u0000\u0000"+
		"\u2846\u2847\u0003\u0300\u0180\u0000\u2847\u2848\u0005\u032d\u0000\u0000"+
		"\u2848\u2849\u0003\u03d0\u01e8\u0000\u2849\u033b\u0001\u0000\u0000\u0000"+
		"\u284a\u2881\u0003\u033e\u019f\u0000\u284b\u2881\u0003\u0340\u01a0\u0000"+
		"\u284c\u2881\u0003\u0342\u01a1\u0000\u284d\u2881\u0003\u0344\u01a2\u0000"+
		"\u284e\u2881\u0003\u034a\u01a5\u0000\u284f\u2881\u0003\u034c\u01a6\u0000"+
		"\u2850\u2881\u0003\u034e\u01a7\u0000\u2851\u2881\u0003\u0350\u01a8\u0000"+
		"\u2852\u2881\u0003\u0352\u01a9\u0000\u2853\u2881\u0003\u0354\u01aa\u0000"+
		"\u2854\u2881\u0003\u0356\u01ab\u0000\u2855\u2881\u0003\u0358\u01ac\u0000"+
		"\u2856\u2881\u0003\u035a\u01ad\u0000\u2857\u2881\u0003\u035c\u01ae\u0000"+
		"\u2858\u2881\u0003\u035e\u01af\u0000\u2859\u2881\u0003\u0360\u01b0\u0000"+
		"\u285a\u2881\u0003\u0362\u01b1\u0000\u285b\u2881\u0003\u0366\u01b3\u0000"+
		"\u285c\u2881\u0003\u0368\u01b4\u0000\u285d\u2881\u0003\u036a\u01b5\u0000"+
		"\u285e\u2881\u0003\u036c\u01b6\u0000\u285f\u2881\u0003\u0372\u01b9\u0000"+
		"\u2860\u2881\u0003\u0374\u01ba\u0000\u2861\u2881\u0003\u0376\u01bb\u0000"+
		"\u2862\u2881\u0003\u0378\u01bc\u0000\u2863\u2881\u0003\u037c\u01be\u0000"+
		"\u2864\u2881\u0003\u0398\u01cc\u0000\u2865\u2881\u0003\u037e\u01bf\u0000"+
		"\u2866\u2881\u0003\u0380\u01c0\u0000\u2867\u2881\u0003\u0382\u01c1\u0000"+
		"\u2868\u2881\u0003\u0384\u01c2\u0000\u2869\u2881\u0003\u0386\u01c3\u0000"+
		"\u286a\u2881\u0003\u0388\u01c4\u0000\u286b\u2881\u0003\u038a\u01c5\u0000"+
		"\u286c\u2881\u0003\u038c\u01c6\u0000\u286d\u2881\u0003\u038e\u01c7\u0000"+
		"\u286e\u2881\u0003\u0390\u01c8\u0000\u286f\u2881\u0003\u0392\u01c9\u0000"+
		"\u2870\u2881\u0003\u0394\u01ca\u0000\u2871\u2881\u0003\u0396\u01cb\u0000"+
		"\u2872\u2881\u0003\u039a\u01cd\u0000\u2873\u2881\u0003\u039c\u01ce\u0000"+
		"\u2874\u2881\u0003\u039e\u01cf\u0000\u2875\u2881\u0003\u021e\u010f\u0000"+
		"\u2876\u2881\u0003\u03a0\u01d0\u0000\u2877\u2881\u0003\u03a2\u01d1\u0000"+
		"\u2878\u2881\u0003\u03a4\u01d2\u0000\u2879\u2881\u0003\u03a6\u01d3\u0000"+
		"\u287a\u2881\u0003\u03a8\u01d4\u0000\u287b\u2881\u0003\u03aa\u01d5\u0000"+
		"\u287c\u2881\u0003\u03ac\u01d6\u0000\u287d\u2881\u0003\u03ae\u01d7\u0000"+
		"\u287e\u2881\u0003\u03b0\u01d8\u0000\u287f\u2881\u0003\u03b2\u01d9\u0000"+
		"\u2880\u284a\u0001\u0000\u0000\u0000\u2880\u284b\u0001\u0000\u0000\u0000"+
		"\u2880\u284c\u0001\u0000\u0000\u0000\u2880\u284d\u0001\u0000\u0000\u0000"+
		"\u2880\u284e\u0001\u0000\u0000\u0000\u2880\u284f\u0001\u0000\u0000\u0000"+
		"\u2880\u2850\u0001\u0000\u0000\u0000\u2880\u2851\u0001\u0000\u0000\u0000"+
		"\u2880\u2852\u0001\u0000\u0000\u0000\u2880\u2853\u0001\u0000\u0000\u0000"+
		"\u2880\u2854\u0001\u0000\u0000\u0000\u2880\u2855\u0001\u0000\u0000\u0000"+
		"\u2880\u2856\u0001\u0000\u0000\u0000\u2880\u2857\u0001\u0000\u0000\u0000"+
		"\u2880\u2858\u0001\u0000\u0000\u0000\u2880\u2859\u0001\u0000\u0000\u0000"+
		"\u2880\u285a\u0001\u0000\u0000\u0000\u2880\u285b\u0001\u0000\u0000\u0000"+
		"\u2880\u285c\u0001\u0000\u0000\u0000\u2880\u285d\u0001\u0000\u0000\u0000"+
		"\u2880\u285e\u0001\u0000\u0000\u0000\u2880\u285f\u0001\u0000\u0000\u0000"+
		"\u2880\u2860\u0001\u0000\u0000\u0000\u2880\u2861\u0001\u0000\u0000\u0000"+
		"\u2880\u2862\u0001\u0000\u0000\u0000\u2880\u2863\u0001\u0000\u0000\u0000"+
		"\u2880\u2864\u0001\u0000\u0000\u0000\u2880\u2865\u0001\u0000\u0000\u0000"+
		"\u2880\u2866\u0001\u0000\u0000\u0000\u2880\u2867\u0001\u0000\u0000\u0000"+
		"\u2880\u2868\u0001\u0000\u0000\u0000\u2880\u2869\u0001\u0000\u0000\u0000"+
		"\u2880\u286a\u0001\u0000\u0000\u0000\u2880\u286b\u0001\u0000\u0000\u0000"+
		"\u2880\u286c\u0001\u0000\u0000\u0000\u2880\u286d\u0001\u0000\u0000\u0000"+
		"\u2880\u286e\u0001\u0000\u0000\u0000\u2880\u286f\u0001\u0000\u0000\u0000"+
		"\u2880\u2870\u0001\u0000\u0000\u0000\u2880\u2871\u0001\u0000\u0000\u0000"+
		"\u2880\u2872\u0001\u0000\u0000\u0000\u2880\u2873\u0001\u0000\u0000\u0000"+
		"\u2880\u2874\u0001\u0000\u0000\u0000\u2880\u2875\u0001\u0000\u0000\u0000"+
		"\u2880\u2876\u0001\u0000\u0000\u0000\u2880\u2877\u0001\u0000\u0000\u0000"+
		"\u2880\u2878\u0001\u0000\u0000\u0000\u2880\u2879\u0001\u0000\u0000\u0000"+
		"\u2880\u287a\u0001\u0000\u0000\u0000\u2880\u287b\u0001\u0000\u0000\u0000"+
		"\u2880\u287c\u0001\u0000\u0000\u0000\u2880\u287d\u0001\u0000\u0000\u0000"+
		"\u2880\u287e\u0001\u0000\u0000\u0000\u2880\u287f\u0001\u0000\u0000\u0000"+
		"\u2881\u033d\u0001\u0000\u0000\u0000\u2882\u2884\u0005\u0293\u0000\u0000"+
		"\u2883\u2885\u0005\u02e2\u0000\u0000\u2884\u2883\u0001\u0000\u0000\u0000"+
		"\u2884\u2885\u0001\u0000\u0000\u0000\u2885\u2886\u0001\u0000\u0000\u0000"+
		"\u2886\u2888\u0005\u0010\u0000\u0000\u2887\u2889\u0003\u03b4\u01da\u0000"+
		"\u2888\u2887\u0001\u0000\u0000\u0000\u2888\u2889\u0001\u0000\u0000\u0000"+
		"\u2889\u2896\u0001\u0000\u0000\u0000\u288a\u2894\u0005\u014a\u0000\u0000"+
		"\u288b\u2895\u0005\u0006\u0000\u0000\u288c\u288e\u0005\u00a5\u0000\u0000"+
		"\u288d\u288f\u0003\u03d0\u01e8\u0000\u288e\u288d\u0001\u0000\u0000\u0000"+
		"\u288e\u288f\u0001\u0000\u0000\u0000\u288f\u2895\u0001\u0000\u0000\u0000"+
		"\u2890\u2892\u0005\u027d\u0000\u0000\u2891\u2893\u0003\u03b8\u01dc\u0000"+
		"\u2892\u2891\u0001\u0000\u0000\u0000\u2892\u2893\u0001\u0000\u0000\u0000"+
		"\u2893\u2895\u0001\u0000\u0000\u0000\u2894\u288b\u0001\u0000\u0000\u0000"+
		"\u2894\u288c\u0001\u0000\u0000\u0000\u2894\u2890\u0001\u0000\u0000\u0000"+
		"\u2895\u2897\u0001\u0000\u0000\u0000\u2896\u288a\u0001\u0000\u0000\u0000"+
		"\u2896\u2897\u0001\u0000\u0000\u0000\u2897\u2899\u0001\u0000\u0000\u0000"+
		"\u2898\u289a\u0003\u0346\u01a3\u0000\u2899\u2898\u0001\u0000\u0000\u0000"+
		"\u2899\u289a\u0001\u0000\u0000\u0000\u289a\u289c\u0001\u0000\u0000\u0000"+
		"\u289b\u289d\u0003\u0348\u01a4\u0000\u289c\u289b\u0001\u0000\u0000\u0000"+
		"\u289c\u289d\u0001\u0000\u0000\u0000\u289d\u033f\u0001\u0000\u0000\u0000"+
		"\u289e\u289f\u0005\u0293\u0000\u0000\u289f\u28a1\u0005m\u0000\u0000\u28a0"+
		"\u28a2\u0003\u03b4\u01da\u0000\u28a1\u28a0\u0001\u0000\u0000\u0000\u28a1"+
		"\u28a2\u0001\u0000\u0000\u0000\u28a2\u28b4\u0001\u0000\u0000\u0000\u28a3"+
		"\u28b2\u0005\u014a\u0000\u0000\u28a4\u28b3\u0005\u0006\u0000\u0000\u28a5"+
		"\u28a7\u0005\u00a5\u0000\u0000\u28a6\u28a8\u0003\u03d0\u01e8\u0000\u28a7"+
		"\u28a6\u0001\u0000\u0000\u0000\u28a7\u28a8\u0001\u0000\u0000\u0000\u28a8"+
		"\u28b3\u0001\u0000\u0000\u0000\u28a9\u28ab\u0005\u027d\u0000\u0000\u28aa"+
		"\u28ac\u0003\u03b8\u01dc\u0000\u28ab\u28aa\u0001\u0000\u0000\u0000\u28ab"+
		"\u28ac\u0001\u0000\u0000\u0000\u28ac\u28b3\u0001\u0000\u0000\u0000\u28ad"+
		"\u28b3\u0005\u02d4\u0000\u0000\u28ae\u28b0\u0005\u02d4\u0000\u0000\u28af"+
		"\u28ae\u0001\u0000\u0000\u0000\u28af\u28b0\u0001\u0000\u0000\u0000\u28b0"+
		"\u28b1\u0001\u0000\u0000\u0000\u28b1\u28b3\u0003\u03ea\u01f5\u0000\u28b2"+
		"\u28a4\u0001\u0000\u0000\u0000\u28b2\u28a5\u0001\u0000\u0000\u0000\u28b2"+
		"\u28a9\u0001\u0000\u0000\u0000\u28b2\u28ad\u0001\u0000\u0000\u0000\u28b2"+
		"\u28af\u0001\u0000\u0000\u0000\u28b3\u28b5\u0001\u0000\u0000\u0000\u28b4"+
		"\u28a3\u0001\u0000\u0000\u0000\u28b4\u28b5\u0001\u0000\u0000\u0000\u28b5"+
		"\u0341\u0001\u0000\u0000\u0000\u28b6\u28b7\u0005\u0293\u0000\u0000\u28b7"+
		"\u28b9\u0005\u0085\u0000\u0000\u28b8\u28ba\u0003\u03b4\u01da\u0000\u28b9"+
		"\u28b8\u0001\u0000\u0000\u0000\u28b9\u28ba\u0001\u0000\u0000\u0000\u28ba"+
		"\u28d1\u0001\u0000\u0000\u0000\u28bb\u28cf\u0005\u014a\u0000\u0000\u28bc"+
		"\u28d0\u0005\u0006\u0000\u0000\u28bd\u28bf\u0005\u00a5\u0000\u0000\u28be"+
		"\u28c0\u0003\u03d0\u01e8\u0000\u28bf\u28be\u0001\u0000\u0000\u0000\u28bf"+
		"\u28c0\u0001\u0000\u0000\u0000\u28c0\u28d0\u0001\u0000\u0000\u0000\u28c1"+
		"\u28c3\u0005\u027d\u0000\u0000\u28c2\u28c4\u0003\u03b8\u01dc\u0000\u28c3"+
		"\u28c2\u0001\u0000\u0000\u0000\u28c3\u28c4\u0001\u0000\u0000\u0000\u28c4"+
		"\u28d0\u0001\u0000\u0000\u0000\u28c5\u28d0\u0005\u02d4\u0000\u0000\u28c6"+
		"\u28c8\u0005\u02d4\u0000\u0000\u28c7\u28c6\u0001\u0000\u0000\u0000\u28c7"+
		"\u28c8\u0001\u0000\u0000\u0000\u28c8\u28c9\u0001\u0000\u0000\u0000\u28c9"+
		"\u28d0\u0003\u03ea\u01f5\u0000\u28ca\u28d0\u0005\u0329\u0000\u0000\u28cb"+
		"\u28cd\u0005\u0329\u0000\u0000\u28cc\u28cb\u0001\u0000\u0000\u0000\u28cc"+
		"\u28cd\u0001\u0000\u0000\u0000\u28cd\u28ce\u0001\u0000\u0000\u0000\u28ce"+
		"\u28d0\u0003\u03ea\u01f5\u0000\u28cf\u28bc\u0001\u0000\u0000\u0000\u28cf"+
		"\u28bd\u0001\u0000\u0000\u0000\u28cf\u28c1\u0001\u0000\u0000\u0000\u28cf"+
		"\u28c5\u0001\u0000\u0000\u0000\u28cf\u28c7\u0001\u0000\u0000\u0000\u28cf"+
		"\u28ca\u0001\u0000\u0000\u0000\u28cf\u28cc\u0001\u0000\u0000\u0000\u28d0"+
		"\u28d2\u0001\u0000\u0000\u0000\u28d1\u28bb\u0001\u0000\u0000\u0000\u28d1"+
		"\u28d2\u0001\u0000\u0000\u0000\u28d2\u0343\u0001\u0000\u0000\u0000\u28d3"+
		"\u28d4\u0005\u0293\u0000\u0000\u28d4\u28d6\u0005\u008f\u0000\u0000\u28d5"+
		"\u28d7\u0003\u03b4\u01da\u0000\u28d6\u28d5\u0001\u0000\u0000\u0000\u28d6"+
		"\u28d7\u0001\u0000\u0000\u0000\u28d7\u0345\u0001\u0000\u0000\u0000\u28d8"+
		"\u28d9\u0005\u02b2\u0000\u0000\u28d9\u28da\u0005\u0336\u0000\u0000\u28da"+
		"\u28db\u0003\u03ca\u01e5\u0000\u28db\u0347\u0001\u0000\u0000\u0000\u28dc"+
		"\u28dd\u0005\u0178\u0000\u0000\u28dd\u28e0\u0003\u03f0\u01f8\u0000\u28de"+
		"\u28df\u0005\u0117\u0000\u0000\u28df\u28e1\u0003\u03ca\u01e5\u0000\u28e0"+
		"\u28de\u0001\u0000\u0000\u0000\u28e0\u28e1\u0001\u0000\u0000\u0000\u28e1"+
		"\u0349\u0001\u0000\u0000\u0000\u28e2\u28e4\u0005\u0293\u0000\u0000\u28e3"+
		"\u28e5\u0005\u02e2\u0000\u0000\u28e4\u28e3\u0001\u0000\u0000\u0000\u28e4"+
		"\u28e5\u0001\u0000\u0000\u0000\u28e5\u28e6\u0001\u0000\u0000\u0000\u28e6"+
		"\u28e8\u0005\u00a6\u0000\u0000\u28e7\u28e9\u0005\u0139\u0000\u0000\u28e8"+
		"\u28e7\u0001\u0000\u0000\u0000\u28e8\u28e9\u0001\u0000\u0000\u0000\u28e9"+
		"\u28eb\u0001\u0000\u0000\u0000\u28ea\u28ec\u0003\u03b4\u01da\u0000\u28eb"+
		"\u28ea\u0001\u0000\u0000\u0000\u28eb\u28ec\u0001\u0000\u0000\u0000\u28ec"+
		"\u28ee\u0001\u0000\u0000\u0000\u28ed\u28ef\u0003\u0346\u01a3\u0000\u28ee"+
		"\u28ed\u0001\u0000\u0000\u0000\u28ee\u28ef\u0001\u0000\u0000\u0000\u28ef"+
		"\u28f1\u0001\u0000\u0000\u0000\u28f0\u28f2\u0003\u0348\u01a4\u0000\u28f1"+
		"\u28f0\u0001\u0000\u0000\u0000\u28f1\u28f2\u0001\u0000\u0000\u0000\u28f2"+
		"\u034b\u0001\u0000\u0000\u0000\u28f3\u28f4\u0005\u0293\u0000\u0000\u28f4"+
		"\u28f5\u0005\u00a6\u0000\u0000\u28f5\u28f6\u0005\u014a\u0000\u0000\u28f6"+
		"\u28f7\u0005\u0103\u0000\u0000\u28f7\u28f8\u0005\u012c\u0000\u0000\u28f8"+
		"\u28f9\u0003\u03d0\u01e8\u0000\u28f9\u034d\u0001\u0000\u0000\u0000\u28fa"+
		"\u28fb\u0005\u0293\u0000\u0000\u28fb\u28fc\u0005\u00a6\u0000\u0000\u28fc"+
		"\u28fd\u0005\u014a\u0000\u0000\u28fd\u28fe\u0005\u0241\u0000\u0000\u28fe"+
		"\u28ff\u0005\u012c\u0000\u0000\u28ff\u2900\u0003\u03d0\u01e8\u0000\u2900"+
		"\u034f\u0001\u0000\u0000\u0000\u2901\u2902\u0005\u0293\u0000\u0000\u2902"+
		"\u2903\u0005\u00ba\u0000\u0000\u2903\u2912\u00050\u0000\u0000\u2904\u2905"+
		"\u0005\u0293\u0000\u0000\u2905\u2906\u0005\u00ba\u0000\u0000\u2906\u2907"+
		"\u00050\u0000\u0000\u2907\u2908\u0005`\u0000\u0000\u2908\u2909\u0005\u0319"+
		"\u0000\u0000\u2909\u2912\u0003\u03d0\u01e8\u0000\u290a\u290b\u0005\u0293"+
		"\u0000\u0000\u290b\u290c\u0005\u00ba\u0000\u0000\u290c\u290d\u00050\u0000"+
		"\u0000\u290d\u290e\u0005\u02f9\u0000\u0000\u290e\u290f\u0005\u0284\u0000"+
		"\u0000\u290f\u2910\u0005\u0158\u0000\u0000\u2910\u2912\u0003\u03d0\u01e8"+
		"\u0000\u2911\u2901\u0001\u0000\u0000\u0000\u2911\u2904\u0001\u0000\u0000"+
		"\u0000\u2911\u290a\u0001\u0000\u0000\u0000\u2912\u0351\u0001\u0000\u0000"+
		"\u0000\u2913\u2914\u0005\u0293\u0000\u0000\u2914\u2915\u0005\u00cb\u0000"+
		"\u0000\u2915\u2917\u0005\u02d7\u0000\u0000\u2916\u2918\u0003\u03b4\u01da"+
		"\u0000\u2917\u2916\u0001\u0000\u0000\u0000\u2917\u2918\u0001\u0000\u0000"+
		"\u0000\u2918\u2927\u0001\u0000\u0000\u0000\u2919\u2925\u0005\u014a\u0000"+
		"\u0000\u291a\u2926\u0005\u0006\u0000\u0000\u291b\u291d\u0005\u00a5\u0000"+
		"\u0000\u291c\u291e\u0003\u03d0\u01e8\u0000\u291d\u291c\u0001\u0000\u0000"+
		"\u0000\u291d\u291e\u0001\u0000\u0000\u0000\u291e\u2926\u0001\u0000\u0000"+
		"\u0000\u291f\u2921\u0005\u027d\u0000\u0000\u2920\u291f\u0001\u0000\u0000"+
		"\u0000\u2920\u2921\u0001\u0000\u0000\u0000\u2921\u2923\u0001\u0000\u0000"+
		"\u0000\u2922\u2924\u0003\u03b8\u01dc\u0000\u2923\u2922\u0001\u0000\u0000"+
		"\u0000\u2923\u2924\u0001\u0000\u0000\u0000\u2924\u2926\u0001\u0000\u0000"+
		"\u0000\u2925\u291a\u0001\u0000\u0000\u0000\u2925\u291b\u0001\u0000\u0000"+
		"\u0000\u2925\u2920\u0001\u0000\u0000\u0000\u2926\u2928\u0001\u0000\u0000"+
		"\u0000\u2927\u2919\u0001\u0000\u0000\u0000\u2927\u2928\u0001\u0000\u0000"+
		"\u0000\u2928\u292a\u0001\u0000\u0000\u0000\u2929\u292b\u0003\u0346\u01a3"+
		"\u0000\u292a\u2929\u0001\u0000\u0000\u0000\u292a\u292b\u0001\u0000\u0000"+
		"\u0000\u292b\u292d\u0001\u0000\u0000\u0000\u292c\u292e\u0003\u0348\u01a4"+
		"\u0000\u292d\u292c\u0001\u0000\u0000\u0000\u292d\u292e\u0001\u0000\u0000"+
		"\u0000\u292e\u0353\u0001\u0000\u0000\u0000\u292f\u2931\u0005\u0293\u0000"+
		"\u0000\u2930\u2932\u0005\u02e2\u0000\u0000\u2931\u2930\u0001\u0000\u0000"+
		"\u0000\u2931\u2932\u0001\u0000\u0000\u0000\u2932\u2933\u0001\u0000\u0000"+
		"\u0000\u2933\u2934\u0005\u00e9\u0000\u0000\u2934\u2936\u0005\u02d7\u0000"+
		"\u0000\u2935\u2937\u0003\u03b4\u01da\u0000\u2936\u2935\u0001\u0000\u0000"+
		"\u0000\u2936\u2937\u0001\u0000\u0000\u0000\u2937\u2946\u0001\u0000\u0000"+
		"\u0000\u2938\u2944\u0005\u014a\u0000\u0000\u2939\u2945\u0005\u0006\u0000"+
		"\u0000\u293a\u293c\u0005\u00a5\u0000\u0000\u293b\u293d\u0003\u03d0\u01e8"+
		"\u0000\u293c\u293b\u0001\u0000\u0000\u0000\u293c\u293d\u0001\u0000\u0000"+
		"\u0000\u293d\u2945\u0001\u0000\u0000\u0000\u293e\u2940\u0005\u027d\u0000"+
		"\u0000\u293f\u293e\u0001\u0000\u0000\u0000\u293f\u2940\u0001\u0000\u0000"+
		"\u0000\u2940\u2942\u0001\u0000\u0000\u0000\u2941\u2943\u0003\u03b8\u01dc"+
		"\u0000\u2942\u2941\u0001\u0000\u0000\u0000\u2942\u2943\u0001\u0000\u0000"+
		"\u0000\u2943\u2945\u0001\u0000\u0000\u0000\u2944\u2939\u0001\u0000\u0000"+
		"\u0000\u2944\u293a\u0001\u0000\u0000\u0000\u2944\u293f\u0001\u0000\u0000"+
		"\u0000\u2945\u2947\u0001\u0000\u0000\u0000\u2946\u2938\u0001\u0000\u0000"+
		"\u0000\u2946\u2947\u0001\u0000\u0000\u0000\u2947\u2949\u0001\u0000\u0000"+
		"\u0000\u2948\u294a\u0003\u0346\u01a3\u0000\u2949\u2948\u0001\u0000\u0000"+
		"\u0000\u2949\u294a\u0001\u0000\u0000\u0000\u294a\u294c\u0001\u0000\u0000"+
		"\u0000\u294b\u294d\u0003\u0348\u01a4\u0000\u294c\u294b\u0001\u0000\u0000"+
		"\u0000\u294c\u294d\u0001\u0000\u0000\u0000\u294d\u0355\u0001\u0000\u0000"+
		"\u0000\u294e\u294f\u0005\u0293\u0000\u0000\u294f\u2950\u0005\u00f3\u0000"+
		"\u0000\u2950\u2952\u0005\u011a\u0000\u0000\u2951\u2953\u0003\u03b4\u01da"+
		"\u0000\u2952\u2951\u0001\u0000\u0000\u0000\u2952\u2953\u0001\u0000\u0000"+
		"\u0000\u2953\u0357\u0001\u0000\u0000\u0000\u2954\u2956\u0005\u0293\u0000"+
		"\u0000\u2955\u2957\u0005\u02e2\u0000\u0000\u2956\u2955\u0001\u0000\u0000"+
		"\u0000\u2956\u2957\u0001\u0000\u0000\u0000\u2957\u2958\u0001\u0000\u0000"+
		"\u0000\u2958\u2959\u0005\u00f3\u0000\u0000\u2959\u295b\u0005\u02d7\u0000"+
		"\u0000\u295a\u295c\u0003\u03b4\u01da\u0000\u295b\u295a\u0001\u0000\u0000"+
		"\u0000\u295b\u295c\u0001\u0000\u0000\u0000\u295c\u296b\u0001\u0000\u0000"+
		"\u0000\u295d\u2969\u0005\u014a\u0000\u0000\u295e\u296a\u0005\u0006\u0000"+
		"\u0000\u295f\u2961\u0005\u00a5\u0000\u0000\u2960\u2962\u0003\u03d0\u01e8"+
		"\u0000\u2961\u2960\u0001\u0000\u0000\u0000\u2961\u2962\u0001\u0000\u0000"+
		"\u0000\u2962\u296a\u0001\u0000\u0000\u0000\u2963\u2965\u0005\u027d\u0000"+
		"\u0000\u2964\u2963\u0001\u0000\u0000\u0000\u2964\u2965\u0001\u0000\u0000"+
		"\u0000\u2965\u2967\u0001\u0000\u0000\u0000\u2966\u2968\u0003\u03b8\u01dc"+
		"\u0000\u2967\u2966\u0001\u0000\u0000\u0000\u2967\u2968\u0001\u0000\u0000"+
		"\u0000\u2968\u296a\u0001\u0000\u0000\u0000\u2969\u295e\u0001\u0000\u0000"+
		"\u0000\u2969\u295f\u0001\u0000\u0000\u0000\u2969\u2964\u0001\u0000\u0000"+
		"\u0000\u296a\u296c\u0001\u0000\u0000\u0000\u296b\u295d\u0001\u0000\u0000"+
		"\u0000\u296b\u296c\u0001\u0000\u0000\u0000\u296c\u296e\u0001\u0000\u0000"+
		"\u0000\u296d\u296f\u0003\u0346\u01a3\u0000\u296e\u296d\u0001\u0000\u0000"+
		"\u0000\u296e\u296f\u0001\u0000\u0000\u0000\u296f\u2971\u0001\u0000\u0000"+
		"\u0000\u2970\u2972\u0003\u0348\u01a4\u0000\u2971\u2970\u0001\u0000\u0000"+
		"\u0000\u2971\u2972\u0001\u0000\u0000\u0000\u2972\u0359\u0001\u0000\u0000"+
		"\u0000\u2973\u2974\u0005\u0293\u0000\u0000\u2974\u2975\u0005\u0103\u0000"+
		"\u0000\u2975\u2979\u0005\u012e\u0000\u0000\u2976\u2977\u0005\u014a\u0000"+
		"\u0000\u2977\u2978\u0005\u0006\u0000\u0000\u2978\u297a\u0003\u03d0\u01e8"+
		"\u0000\u2979\u2976\u0001\u0000\u0000\u0000\u2979\u297a\u0001\u0000\u0000"+
		"\u0000\u297a\u035b\u0001\u0000\u0000\u0000\u297b\u297c\u0005\u0293\u0000"+
		"\u0000\u297c\u297d\u0005\u0108\u0000\u0000\u297d\u297f\u0005\u0114\u0000"+
		"\u0000\u297e\u2980\u0003\u03b4\u01da\u0000\u297f\u297e\u0001\u0000\u0000"+
		"\u0000\u297f\u2980\u0001\u0000\u0000\u0000\u2980\u298c\u0001\u0000\u0000"+
		"\u0000\u2981\u298a\u0005\u014a\u0000\u0000\u2982\u298b\u0005\u0006\u0000"+
		"\u0000\u2983\u298b\u0005\u00a5\u0000\u0000\u2984\u2985\u0005\u00a5\u0000"+
		"\u0000\u2985\u298b\u0003\u03d0\u01e8\u0000\u2986\u298b\u0005\u027d\u0000"+
		"\u0000\u2987\u2988\u0005\u027d\u0000\u0000\u2988\u298b\u0003\u03b8\u01dc"+
		"\u0000\u2989\u298b\u0003\u03b8\u01dc\u0000\u298a\u2982\u0001\u0000\u0000"+
		"\u0000\u298a\u2983\u0001\u0000\u0000\u0000\u298a\u2984\u0001\u0000\u0000"+
		"\u0000\u298a\u2986\u0001\u0000\u0000\u0000\u298a\u2987\u0001\u0000\u0000"+
		"\u0000\u298a\u2989\u0001\u0000\u0000\u0000\u298b\u298d\u0001\u0000\u0000"+
		"\u0000\u298c\u2981\u0001\u0000\u0000\u0000\u298c\u298d\u0001\u0000\u0000"+
		"\u0000\u298d\u035d\u0001\u0000\u0000\u0000\u298e\u298f\u0005\u0293\u0000"+
		"\u0000\u298f\u2991\u0005\u011a\u0000\u0000\u2990\u2992\u0003\u03b4\u01da"+
		"\u0000\u2991\u2990\u0001\u0000\u0000\u0000\u2991\u2992\u0001\u0000\u0000"+
		"\u0000\u2992\u299e\u0001\u0000\u0000\u0000\u2993\u299c\u0005\u014a\u0000"+
		"\u0000\u2994\u299d\u0005\u0006\u0000\u0000\u2995\u299d\u0005\u00a5\u0000"+
		"\u0000\u2996\u2997\u0005\u00a5\u0000\u0000\u2997\u299d\u0003\u03d0\u01e8"+
		"\u0000\u2998\u299d\u0005\u027d\u0000\u0000\u2999\u299a\u0005\u027d\u0000"+
		"\u0000\u299a\u299d\u0003\u03d0\u01e8\u0000\u299b\u299d\u0003\u03d0\u01e8"+
		"\u0000\u299c\u2994\u0001\u0000\u0000\u0000\u299c\u2995\u0001\u0000\u0000"+
		"\u0000\u299c\u2996\u0001\u0000\u0000\u0000\u299c\u2998\u0001\u0000\u0000"+
		"\u0000\u299c\u2999\u0001\u0000\u0000\u0000\u299c\u299b\u0001\u0000\u0000"+
		"\u0000\u299d\u299f\u0001\u0000\u0000\u0000\u299e\u2993\u0001\u0000\u0000"+
		"\u0000\u299e\u299f\u0001\u0000\u0000\u0000\u299f\u035f\u0001\u0000\u0000"+
		"\u0000\u29a0\u29a1\u0005\u0293\u0000\u0000\u29a1\u29a2\u0005\u0128\u0000"+
		"\u0000\u29a2\u29a4\u0005\b\u0000\u0000\u29a3\u29a5\u0003\u03b4\u01da\u0000"+
		"\u29a4\u29a3\u0001\u0000\u0000\u0000\u29a4\u29a5\u0001\u0000\u0000\u0000"+
		"\u29a5\u0361\u0001\u0000\u0000\u0000\u29a6\u29a7\u0005\u0293\u0000\u0000"+
		"\u29a7\u29a9\u0005\u012b\u0000\u0000\u29a8\u29aa\u0003\u0364\u01b2\u0000"+
		"\u29a9\u29a8\u0001\u0000\u0000\u0000\u29a9\u29aa\u0001\u0000\u0000\u0000"+
		"\u29aa\u29b8\u0001\u0000\u0000\u0000\u29ab\u29ac\u0005\u0293\u0000\u0000"+
		"\u29ac\u29ad\u0005\u011b\u0000\u0000\u29ad\u29ae\u0005\u012b\u0000\u0000"+
		"\u29ae\u29af\u0005\u014a\u0000\u0000\u29af\u29b0\u0005\u027d\u0000\u0000"+
		"\u29b0\u29b8\u0003\u03b8\u01dc\u0000\u29b1\u29b2\u0005\u0293\u0000\u0000"+
		"\u29b2\u29b3\u0005\u011b\u0000\u0000\u29b3\u29b4\u0005\u012b\u0000\u0000"+
		"\u29b4\u29b5\u0005\u014a\u0000\u0000\u29b5\u29b6\u0005\u00a5\u0000\u0000"+
		"\u29b6\u29b8\u0003\u03d0\u01e8\u0000\u29b7\u29a6\u0001\u0000\u0000\u0000"+
		"\u29b7\u29ab\u0001\u0000\u0000\u0000\u29b7\u29b1\u0001\u0000\u0000\u0000"+
		"\u29b8\u0363\u0001\u0000\u0000\u0000\u29b9\u29ba\u0005\u01d9\u0000\u0000"+
		"\u29ba\u29cf\u0005\u0006\u0000\u0000\u29bb\u29bc\u0005\u01d9\u0000\u0000"+
		"\u29bc\u29bd\u0003\u03ba\u01dd\u0000\u29bd\u29be\u0003\u03ea\u01f5\u0000"+
		"\u29be\u29cf\u0001\u0000\u0000\u0000\u29bf\u29c6\u0005\u02f9\u0000\u0000"+
		"\u29c0\u29c1\u0005\u0259\u0000\u0000\u29c1\u29c7\u0003\u03d0\u01e8\u0000"+
		"\u29c2\u29c3\u0005\u0319\u0000\u0000\u29c3\u29c7\u0003\u03d0\u01e8\u0000"+
		"\u29c4\u29c5\u0005\u0290\u0000\u0000\u29c5\u29c7\u0003\u03d0\u01e8\u0000"+
		"\u29c6\u29c0\u0001\u0000\u0000\u0000\u29c6\u29c2\u0001\u0000\u0000\u0000"+
		"\u29c6\u29c4\u0001\u0000\u0000\u0000\u29c7\u29cf\u0001\u0000\u0000\u0000"+
		"\u29c8\u29c9\u0005\u01d2\u0000\u0000\u29c9\u29ca\u0005\u0259\u0000\u0000"+
		"\u29ca\u29cf\u0003\u03d0\u01e8\u0000\u29cb\u29cc\u0005\u01d2\u0000\u0000"+
		"\u29cc\u29cd\u0005\u0290\u0000\u0000\u29cd\u29cf\u0003\u03d0\u01e8\u0000"+
		"\u29ce\u29b9\u0001\u0000\u0000\u0000\u29ce\u29bb\u0001\u0000\u0000\u0000"+
		"\u29ce\u29bf\u0001\u0000\u0000\u0000\u29ce\u29c8\u0001\u0000\u0000\u0000"+
		"\u29ce\u29cb\u0001\u0000\u0000\u0000\u29cf\u0365\u0001\u0000\u0000\u0000"+
		"\u29d0\u29d2\u0005\u0293\u0000\u0000\u29d1\u29d3\u0007F\u0000\u0000\u29d2"+
		"\u29d1\u0001\u0000\u0000\u0000\u29d2\u29d3\u0001\u0000\u0000\u0000\u29d3"+
		"\u29d4\u0001\u0000\u0000\u0000\u29d4\u29d6\u0005\u0159\u0000\u0000\u29d5"+
		"\u29d7\u0003\u03b4\u01da\u0000\u29d6\u29d5\u0001\u0000\u0000\u0000\u29d6"+
		"\u29d7\u0001\u0000\u0000\u0000\u29d7\u0367\u0001\u0000\u0000\u0000\u29d8"+
		"\u29d9\u0005\u0293\u0000\u0000\u29d9\u29dc\u0005\u017e\u0000\u0000\u29da"+
		"\u29db\u0005\u014a\u0000\u0000\u29db\u29dd\u0005\u0006\u0000\u0000\u29dc"+
		"\u29da\u0001\u0000\u0000\u0000\u29dc\u29dd\u0001\u0000\u0000\u0000\u29dd"+
		"\u0369\u0001\u0000\u0000\u0000\u29de\u29df\u0005\u0293\u0000\u0000\u29df"+
		"\u29e0\u0005\u0187\u0000\u0000\u29e0\u29e2\u0005\b\u0000\u0000\u29e1\u29e3"+
		"\u0003\u03b4\u01da\u0000\u29e2\u29e1\u0001\u0000\u0000\u0000\u29e2\u29e3"+
		"\u0001\u0000\u0000\u0000\u29e3\u036b\u0001\u0000\u0000\u0000\u29e4\u29e5"+
		"\u0005\u0293\u0000\u0000\u29e5\u29e6\u0005\u0188\u0000\u0000\u29e6\u29e8"+
		"\u0005\u020e\u0000\u0000\u29e7\u29e9\u0003\u03b4\u01da\u0000\u29e8\u29e7"+
		"\u0001\u0000\u0000\u0000\u29e8\u29e9\u0001\u0000\u0000\u0000\u29e9\u29eb"+
		"\u0001\u0000\u0000\u0000\u29ea\u29ec\u0003\u036e\u01b7\u0000\u29eb\u29ea"+
		"\u0001\u0000\u0000\u0000\u29eb\u29ec\u0001\u0000\u0000\u0000\u29ec\u036d"+
		"\u0001\u0000\u0000\u0000\u29ed\u29f6\u0005\u014a\u0000\u0000\u29ee\u29f7"+
		"\u0005\u0006\u0000\u0000\u29ef\u29f7\u0005\u00a5\u0000\u0000\u29f0\u29f1"+
		"\u0005\u00a5\u0000\u0000\u29f1\u29f7\u0003\u03d0\u01e8\u0000\u29f2\u29f7"+
		"\u0005\u027d\u0000\u0000\u29f3\u29f4\u0005\u027d\u0000\u0000\u29f4\u29f7"+
		"\u0003\u03b8\u01dc\u0000\u29f5\u29f7\u0003\u03b8\u01dc\u0000\u29f6\u29ee"+
		"\u0001\u0000\u0000\u0000\u29f6\u29ef\u0001\u0000\u0000\u0000\u29f6\u29f0"+
		"\u0001\u0000\u0000\u0000\u29f6\u29f2\u0001\u0000\u0000\u0000\u29f6\u29f3"+
		"\u0001\u0000\u0000\u0000\u29f6\u29f5\u0001\u0000\u0000\u0000\u29f7\u036f"+
		"\u0001\u0000\u0000\u0000\u29f8\u2a05\u0005\u014a\u0000\u0000\u29f9\u2a06"+
		"\u0005\u0006\u0000\u0000\u29fa\u29fc\u0005\u00a5\u0000\u0000\u29fb\u29fd"+
		"\u0003\u03d0\u01e8\u0000\u29fc\u29fb\u0001\u0000\u0000\u0000\u29fc\u29fd"+
		"\u0001\u0000\u0000\u0000\u29fd\u2a06\u0001\u0000\u0000\u0000\u29fe\u2a00"+
		"\u0005\u027d\u0000\u0000\u29ff\u2a01\u0003\u03b8\u01dc\u0000\u2a00\u29ff"+
		"\u0001\u0000\u0000\u0000\u2a00\u2a01\u0001\u0000\u0000\u0000\u2a01\u2a06"+
		"\u0001\u0000\u0000\u0000\u2a02\u2a06\u0005\u02d4\u0000\u0000\u2a03\u2a04"+
		"\u0005\u02d4\u0000\u0000\u2a04\u2a06\u0003\u03ea\u01f5\u0000\u2a05\u29f9"+
		"\u0001\u0000\u0000\u0000\u2a05\u29fa\u0001\u0000\u0000\u0000\u2a05\u29fe"+
		"\u0001\u0000\u0000\u0000\u2a05\u2a02\u0001\u0000\u0000\u0000\u2a05\u2a03"+
		"\u0001\u0000\u0000\u0000\u2a06\u0371\u0001\u0000\u0000\u0000\u2a07\u2a08"+
		"\u0005\u0293\u0000\u0000\u2a08\u2a09\u0005\u018f\u0000\u0000\u2a09\u2a0b"+
		"\u0005\u032a\u0000\u0000\u2a0a\u2a0c\u0003\u03b4\u01da\u0000\u2a0b\u2a0a"+
		"\u0001\u0000\u0000\u0000\u2a0b\u2a0c\u0001\u0000\u0000\u0000\u2a0c\u2a0e"+
		"\u0001\u0000\u0000\u0000\u2a0d\u2a0f\u0003\u036e\u01b7\u0000\u2a0e\u2a0d"+
		"\u0001\u0000\u0000\u0000\u2a0e\u2a0f\u0001\u0000\u0000\u0000\u2a0f\u0373"+
		"\u0001\u0000\u0000\u0000\u2a10\u2a11\u0005\u0293\u0000\u0000\u2a11\u2a12"+
		"\u0005\u01ab\u0000\u0000\u2a12\u2a13\u0005\u020e\u0000\u0000\u2a13\u0375"+
		"\u0001\u0000\u0000\u0000\u2a14\u2a15\u0005\u0293\u0000\u0000\u2a15\u2a17"+
		"\u0005\u01d0\u0000\u0000\u2a16\u2a18\u0003\u03b4\u01da\u0000\u2a17\u2a16"+
		"\u0001\u0000\u0000\u0000\u2a17\u2a18\u0001\u0000\u0000\u0000\u2a18\u2a1a"+
		"\u0001\u0000\u0000\u0000\u2a19\u2a1b\u0003\u036e\u01b7\u0000\u2a1a\u2a19"+
		"\u0001\u0000\u0000\u0000\u2a1a\u2a1b\u0001\u0000\u0000\u0000\u2a1b\u0377"+
		"\u0001\u0000\u0000\u0000\u2a1c\u2a1d\u0005\u0293\u0000\u0000\u2a1d\u2a1e"+
		"\u0005\u01e7\u0000\u0000\u2a1e\u2a20\u0005\b\u0000\u0000\u2a1f\u2a21\u0003"+
		"\u03b4\u01da\u0000\u2a20\u2a1f\u0001\u0000\u0000\u0000\u2a20\u2a21\u0001"+
		"\u0000\u0000\u0000\u2a21\u0379\u0001\u0000\u0000\u0000\u2a22\u2a23\u0007"+
		"K\u0000\u0000\u2a23\u037b\u0001\u0000\u0000\u0000\u2a24\u2a25\u0005\u0293"+
		"\u0000\u0000\u2a25\u2a27\u0005\u01f1\u0000\u0000\u2a26\u2a28\u0003\u03b4"+
		"\u01da\u0000\u2a27\u2a26\u0001\u0000\u0000\u0000\u2a27\u2a28\u0001\u0000"+
		"\u0000\u0000\u2a28\u2a38\u0001\u0000\u0000\u0000\u2a29\u2a36\u0003\u037a"+
		"\u01bd\u0000\u2a2a\u2a37\u0005\u028a\u0000\u0000\u2a2b\u2a37\u0005\u0006"+
		"\u0000\u0000\u2a2c\u2a2e\u0005\u0319\u0000\u0000\u2a2d\u2a2f\u0003\u03d0"+
		"\u01e8\u0000\u2a2e\u2a2d\u0001\u0000\u0000\u0000\u2a2e\u2a2f\u0001\u0000"+
		"\u0000\u0000\u2a2f\u2a37\u0001\u0000\u0000\u0000\u2a30\u2a32\u0007L\u0000"+
		"\u0000\u2a31\u2a33\u0003\u03d0\u01e8\u0000\u2a32\u2a31\u0001\u0000\u0000"+
		"\u0000\u2a32\u2a33\u0001\u0000\u0000\u0000\u2a33\u2a37\u0001\u0000\u0000"+
		"\u0000\u2a34\u2a35\u0005\u02d4\u0000\u0000\u2a35\u2a37\u0003\u03ea\u01f5"+
		"\u0000\u2a36\u2a2a\u0001\u0000\u0000\u0000\u2a36\u2a2b\u0001\u0000\u0000"+
		"\u0000\u2a36\u2a2c\u0001\u0000\u0000\u0000\u2a36\u2a30\u0001\u0000\u0000"+
		"\u0000\u2a36\u2a34\u0001\u0000\u0000\u0000\u2a37\u2a39\u0001\u0000\u0000"+
		"\u0000\u2a38\u2a29\u0001\u0000\u0000\u0000\u2a38\u2a39\u0001\u0000\u0000"+
		"\u0000\u2a39\u037d\u0001\u0000\u0000\u0000\u2a3a\u2a3b\u0005\u0293\u0000"+
		"\u0000\u2a3b\u2a3d\u0005\u020b\u0000\u0000\u2a3c\u2a3e\u0003\u03b4\u01da"+
		"\u0000\u2a3d\u2a3c\u0001\u0000\u0000\u0000\u2a3d\u2a3e\u0001\u0000\u0000"+
		"\u0000\u2a3e\u2a40\u0001\u0000\u0000\u0000\u2a3f\u2a41\u0003\u036e\u01b7"+
		"\u0000\u2a40\u2a3f\u0001\u0000\u0000\u0000\u2a40\u2a41\u0001\u0000\u0000"+
		"\u0000\u2a41\u037f\u0001\u0000\u0000\u0000\u2a42\u2a44\u0005\u0293\u0000"+
		"\u0000\u2a43\u2a45\u0005\u02e2\u0000\u0000\u2a44\u2a43\u0001\u0000\u0000"+
		"\u0000\u2a44\u2a45\u0001\u0000\u0000\u0000\u2a45\u2a46\u0001\u0000\u0000"+
		"\u0000\u2a46\u2a47\u0005\u0216\u0000\u0000\u2a47\u2a49\u0005\u0169\u0000"+
		"\u0000\u2a48\u2a4a\u0003\u0370\u01b8\u0000\u2a49\u2a48\u0001\u0000\u0000"+
		"\u0000\u2a49\u2a4a\u0001\u0000\u0000\u0000\u2a4a\u0381\u0001\u0000\u0000"+
		"\u0000\u2a4b\u2a4c\u0005\u0293\u0000\u0000\u2a4c\u2a4e\u0005\u021b\u0000"+
		"\u0000\u2a4d\u2a4f\u0003\u03b4\u01da\u0000\u2a4e\u2a4d\u0001\u0000\u0000"+
		"\u0000\u2a4e\u2a4f\u0001\u0000\u0000\u0000\u2a4f\u2a51\u0001\u0000\u0000"+
		"\u0000\u2a50\u2a52\u0003\u036e\u01b7\u0000\u2a51\u2a50\u0001\u0000\u0000"+
		"\u0000\u2a51\u2a52\u0001\u0000\u0000\u0000\u2a52\u0383\u0001\u0000\u0000"+
		"\u0000\u2a53\u2a54\u0005\u0293\u0000\u0000\u2a54\u2a56\u0005\u0238\u0000"+
		"\u0000\u2a55\u2a57\u0003\u03b4\u01da\u0000\u2a56\u2a55\u0001\u0000\u0000"+
		"\u0000\u2a56\u2a57\u0001\u0000\u0000\u0000\u2a57\u0385\u0001\u0000\u0000"+
		"\u0000\u2a58\u2a59\u0005\u0293\u0000\u0000\u2a59\u2a5a\u0005\u0241\u0000"+
		"\u0000\u2a5a\u2a5c\u0005\b\u0000\u0000\u2a5b\u2a5d\u0003\u03b4\u01da\u0000"+
		"\u2a5c\u2a5b\u0001\u0000\u0000\u0000\u2a5c\u2a5d\u0001\u0000\u0000\u0000"+
		"\u2a5d\u0387\u0001\u0000\u0000\u0000\u2a5e\u2a5f\u0005\u0293\u0000\u0000"+
		"\u2a5f\u2a60\u0005\u0241\u0000\u0000\u2a60\u2a62\u0005\u00a6\u0000\u0000"+
		"\u2a61\u2a63\u0003\u03b4\u01da\u0000\u2a62\u2a61\u0001\u0000\u0000\u0000"+
		"\u2a62\u2a63\u0001\u0000\u0000\u0000\u2a63\u2a6a\u0001\u0000\u0000\u0000"+
		"\u2a64\u2a65\u0005\u0336\u0000\u0000\u2a65\u2a66\u0005\u0216\u0000\u0000"+
		"\u2a66\u2a67\u0003\u03b6\u01db\u0000\u2a67\u2a68\u0005\u0386\u0000\u0000"+
		"\u2a68\u2a69\u0003\u03d0\u01e8\u0000\u2a69\u2a6b\u0001\u0000\u0000\u0000"+
		"\u2a6a\u2a64\u0001\u0000\u0000\u0000\u2a6a\u2a6b\u0001\u0000\u0000\u0000"+
		"\u2a6b\u0389\u0001\u0000\u0000\u0000\u2a6c\u2a6d\u0005\u0293\u0000\u0000"+
		"\u2a6d\u2a6e\u0005\u0241\u0000\u0000\u2a6e\u2a72\u0005\u012e\u0000\u0000"+
		"\u2a6f\u2a70\u0005\u014a\u0000\u0000\u2a70\u2a71\u0005\u0006\u0000\u0000"+
		"\u2a71\u2a73\u0003\u03d0\u01e8\u0000\u2a72\u2a6f\u0001\u0000\u0000\u0000"+
		"\u2a72\u2a73\u0001\u0000\u0000\u0000\u2a73\u038b\u0001\u0000\u0000\u0000"+
		"\u2a74\u2a75\u0005\u0293\u0000\u0000\u2a75\u2a76\u0005\u0247\u0000\u0000"+
		"\u2a76\u2a78\u0005\u01a4\u0000\u0000\u2a77\u2a79\u0003\u03b4\u01da\u0000"+
		"\u2a78\u2a77\u0001\u0000\u0000\u0000\u2a78\u2a79\u0001\u0000\u0000\u0000"+
		"\u2a79\u038d\u0001\u0000\u0000\u0000\u2a7a\u2a7b\u0005\u0293\u0000\u0000"+
		"\u2a7b\u2a7d\u0005\u025a\u0000\u0000\u2a7c\u2a7e\u0003\u03b4\u01da\u0000"+
		"\u2a7d\u2a7c\u0001\u0000\u0000\u0000\u2a7d\u2a7e\u0001\u0000\u0000\u0000"+
		"\u2a7e\u038f\u0001\u0000\u0000\u0000\u2a7f\u2a80\u0005\u0293\u0000\u0000"+
		"\u2a80\u2a81\u0005\u025f\u0000\u0000\u2a81\u2a82\u0005\u0005\u0000\u0000"+
		"\u2a82\u2a84\u0005\u020e\u0000\u0000\u2a83\u2a85\u0003\u03b4\u01da\u0000"+
		"\u2a84\u2a83\u0001\u0000\u0000\u0000\u2a84\u2a85\u0001\u0000\u0000\u0000"+
		"\u2a85\u2a87\u0001\u0000\u0000\u0000\u2a86\u2a88\u0003\u036e\u01b7\u0000"+
		"\u2a87\u2a86\u0001\u0000\u0000\u0000\u2a87\u2a88\u0001\u0000\u0000\u0000"+
		"\u2a88\u0391\u0001\u0000\u0000\u0000\u2a89\u2a8b\u0005\u0293\u0000\u0000"+
		"\u2a8a\u2a8c\u0005\u02e2\u0000\u0000\u2a8b\u2a8a\u0001\u0000\u0000\u0000"+
		"\u2a8b\u2a8c\u0001\u0000\u0000\u0000\u2a8c\u2a8d\u0001\u0000\u0000\u0000"+
		"\u2a8d\u2a8f\u0005\u027e\u0000\u0000\u2a8e\u2a90\u0005\u0139\u0000\u0000"+
		"\u2a8f\u2a8e\u0001\u0000\u0000\u0000\u2a8f\u2a90\u0001\u0000\u0000\u0000"+
		"\u2a90\u2a92\u0001\u0000\u0000\u0000\u2a91\u2a93\u0003\u03b4\u01da\u0000"+
		"\u2a92\u2a91\u0001\u0000\u0000\u0000\u2a92\u2a93\u0001\u0000\u0000\u0000"+
		"\u2a93\u2a9c\u0001\u0000\u0000\u0000\u2a94\u2a9a\u0005\u014a\u0000\u0000"+
		"\u2a95\u2a9b\u0005\u0006\u0000\u0000\u2a96\u2a98\u0005\u00a5\u0000\u0000"+
		"\u2a97\u2a99\u0003\u03d0\u01e8\u0000\u2a98\u2a97\u0001\u0000\u0000\u0000"+
		"\u2a98\u2a99\u0001\u0000\u0000\u0000\u2a99\u2a9b\u0001\u0000\u0000\u0000"+
		"\u2a9a\u2a95\u0001\u0000\u0000\u0000\u2a9a\u2a96\u0001\u0000\u0000\u0000"+
		"\u2a9b\u2a9d\u0001\u0000\u0000\u0000\u2a9c\u2a94\u0001\u0000\u0000\u0000"+
		"\u2a9c\u2a9d\u0001\u0000\u0000\u0000\u2a9d\u2a9f\u0001\u0000\u0000\u0000"+
		"\u2a9e\u2aa0\u0003\u0346\u01a3\u0000\u2a9f\u2a9e\u0001\u0000\u0000\u0000"+
		"\u2a9f\u2aa0\u0001\u0000\u0000\u0000\u2aa0\u2aa2\u0001\u0000\u0000\u0000"+
		"\u2aa1\u2aa3\u0003\u0348\u01a4\u0000\u2aa2\u2aa1\u0001\u0000\u0000\u0000"+
		"\u2aa2\u2aa3\u0001\u0000\u0000\u0000\u2aa3\u0393\u0001\u0000\u0000\u0000"+
		"\u2aa4\u2aa5\u0005\u0293\u0000\u0000\u2aa5\u2aa7\u0005\u0289\u0000\u0000"+
		"\u2aa6\u2aa8\u0003\u03b4\u01da\u0000\u2aa7\u2aa6\u0001\u0000\u0000\u0000"+
		"\u2aa7\u2aa8\u0001\u0000\u0000\u0000\u2aa8\u2aaa\u0001\u0000\u0000\u0000"+
		"\u2aa9\u2aab\u0003\u036e\u01b7\u0000\u2aaa\u2aa9\u0001\u0000\u0000\u0000"+
		"\u2aaa\u2aab\u0001\u0000\u0000\u0000\u2aab\u0395\u0001\u0000\u0000\u0000"+
		"\u2aac\u2aad\u0005\u0293\u0000\u0000\u2aad\u2aae\u0005\u028a\u0000\u0000"+
		"\u2aae\u2aaf\u0005\u020e\u0000\u0000\u2aaf\u0397\u0001\u0000\u0000\u0000"+
		"\u2ab0\u2ab1\u0005\u0293\u0000\u0000\u2ab1\u2ab2\u0005\u01f7\u0000\u0000"+
		"\u2ab2\u2ab3\u0005\u020e\u0000\u0000\u2ab3\u0399\u0001\u0000\u0000\u0000"+
		"\u2ab4\u2ab5\u0005\u0293\u0000\u0000\u2ab5\u2ab7\u0005\u0291\u0000\u0000"+
		"\u2ab6\u2ab8\u0003\u03b4\u01da\u0000\u2ab7\u2ab6\u0001\u0000\u0000\u0000"+
		"\u2ab7\u2ab8\u0001\u0000\u0000\u0000\u2ab8\u039b\u0001\u0000\u0000\u0000"+
		"\u2ab9\u2aba\u0005\u0293\u0000\u0000\u2aba\u2abb\u0005\u0291\u0000\u0000"+
		"\u2abb\u2abc\u0005\u014a\u0000\u0000\u2abc\u2abd\u0005\u0103\u0000\u0000"+
		"\u2abd\u2abe\u0005\u012c\u0000\u0000\u2abe\u2abf\u0003\u03d0\u01e8\u0000"+
		"\u2abf\u039d\u0001\u0000\u0000\u0000\u2ac0\u2ac1\u0005\u0293\u0000\u0000"+
		"\u2ac1\u2ac2\u0005\u0291\u0000\u0000\u2ac2\u2ac3\u0005\u014a\u0000\u0000"+
		"\u2ac3\u2ac4\u0005\u0241\u0000\u0000\u2ac4\u2ac5\u0005\u012c\u0000\u0000"+
		"\u2ac5\u2ac6\u0003\u03d0\u01e8\u0000\u2ac6\u039f\u0001\u0000\u0000\u0000"+
		"\u2ac7\u2ac8\u0005\u0293\u0000\u0000\u2ac8\u2aca\u0005\u02c3\u0000\u0000"+
		"\u2ac9\u2acb\u0003\u03b4\u01da\u0000\u2aca\u2ac9\u0001\u0000\u0000\u0000"+
		"\u2aca\u2acb\u0001\u0000\u0000\u0000\u2acb\u2acd\u0001\u0000\u0000\u0000"+
		"\u2acc\u2ace\u0003\u036e\u01b7\u0000\u2acd\u2acc\u0001\u0000\u0000\u0000"+
		"\u2acd\u2ace\u0001\u0000\u0000\u0000\u2ace\u03a1\u0001\u0000\u0000\u0000"+
		"\u2acf\u2ad0\u0005\u0293\u0000\u0000\u2ad0\u2ad2\u0005\u02d7\u0000\u0000"+
		"\u2ad1\u2ad3\u0003\u03b4\u01da\u0000\u2ad2\u2ad1\u0001\u0000\u0000\u0000"+
		"\u2ad2\u2ad3\u0001\u0000\u0000\u0000\u2ad3\u2ad5\u0001\u0000\u0000\u0000"+
		"\u2ad4\u2ad6\u0003\u036e\u01b7\u0000\u2ad5\u2ad4\u0001\u0000\u0000\u0000"+
		"\u2ad5\u2ad6\u0001\u0000\u0000\u0000\u2ad6\u03a3\u0001\u0000\u0000\u0000"+
		"\u2ad7\u2ad8\u0005\u0293\u0000\u0000\u2ad8\u2ada\u0005\u02dc\u0000\u0000"+
		"\u2ad9\u2adb\u0003\u03b4\u01da\u0000\u2ada\u2ad9\u0001\u0000\u0000\u0000"+
		"\u2ada\u2adb\u0001\u0000\u0000\u0000\u2adb\u2ae5\u0001\u0000\u0000\u0000"+
		"\u2adc\u2add\u0005\u014a\u0000\u0000\u2add\u2ae6\u0005\u0006\u0000\u0000"+
		"\u2ade\u2ae6\u0005\u00a5\u0000\u0000\u2adf\u2ae0\u0005\u00a5\u0000\u0000"+
		"\u2ae0\u2ae6\u0003\u03d0\u01e8\u0000\u2ae1\u2ae6\u0005\u027d\u0000\u0000"+
		"\u2ae2\u2ae3\u0005\u027d\u0000\u0000\u2ae3\u2ae6\u0003\u03b8\u01dc\u0000"+
		"\u2ae4\u2ae6\u0003\u03b8\u01dc\u0000\u2ae5\u2adc\u0001\u0000\u0000\u0000"+
		"\u2ae5\u2ade\u0001\u0000\u0000\u0000\u2ae5\u2adf\u0001\u0000\u0000\u0000"+
		"\u2ae5\u2ae1\u0001\u0000\u0000\u0000\u2ae5\u2ae2\u0001\u0000\u0000\u0000"+
		"\u2ae5\u2ae4\u0001\u0000\u0000\u0000\u2ae5\u2ae6\u0001\u0000\u0000\u0000"+
		"\u2ae6\u03a5\u0001\u0000\u0000\u0000\u2ae7\u2ae9\u0005\u0293\u0000\u0000"+
		"\u2ae8\u2aea\u0005\u02e2\u0000\u0000\u2ae9\u2ae8\u0001\u0000\u0000\u0000"+
		"\u2ae9\u2aea\u0001\u0000\u0000\u0000\u2aea\u2aeb\u0001\u0000\u0000\u0000"+
		"\u2aeb\u2aed\u0005\u02df\u0000\u0000\u2aec\u2aee\u0003\u03b4\u01da\u0000"+
		"\u2aed\u2aec\u0001\u0000\u0000\u0000\u2aed\u2aee\u0001\u0000\u0000\u0000"+
		"\u2aee\u2afd\u0001\u0000\u0000\u0000\u2aef\u2afb\u0005\u014a\u0000\u0000"+
		"\u2af0\u2afc\u0005\u0006\u0000\u0000\u2af1\u2af3\u0005\u00a5\u0000\u0000"+
		"\u2af2\u2af4\u0003\u03d0\u01e8\u0000\u2af3\u2af2\u0001\u0000\u0000\u0000"+
		"\u2af3\u2af4\u0001\u0000\u0000\u0000\u2af4\u2afc\u0001\u0000\u0000\u0000"+
		"\u2af5\u2af7\u0005\u027d\u0000\u0000\u2af6\u2af5\u0001\u0000\u0000\u0000"+
		"\u2af6\u2af7\u0001\u0000\u0000\u0000\u2af7\u2af9\u0001\u0000\u0000\u0000"+
		"\u2af8\u2afa\u0003\u03b8\u01dc\u0000\u2af9\u2af8\u0001\u0000\u0000\u0000"+
		"\u2af9\u2afa\u0001\u0000\u0000\u0000\u2afa\u2afc\u0001\u0000\u0000\u0000"+
		"\u2afb\u2af0\u0001\u0000\u0000\u0000\u2afb\u2af1\u0001\u0000\u0000\u0000"+
		"\u2afb\u2af6\u0001\u0000\u0000\u0000\u2afc\u2afe\u0001\u0000\u0000\u0000"+
		"\u2afd\u2aef\u0001\u0000\u0000\u0000\u2afd\u2afe\u0001\u0000\u0000\u0000"+
		"\u2afe\u2b00\u0001\u0000\u0000\u0000\u2aff\u2b01\u0003\u0346\u01a3\u0000"+
		"\u2b00\u2aff\u0001\u0000\u0000\u0000\u2b00\u2b01\u0001\u0000\u0000\u0000"+
		"\u2b01\u2b03\u0001\u0000\u0000\u0000\u2b02\u2b04\u0003\u0348\u01a4\u0000"+
		"\u2b03\u2b02\u0001\u0000\u0000\u0000\u2b03\u2b04\u0001\u0000\u0000\u0000"+
		"\u2b04\u03a7\u0001\u0000\u0000\u0000\u2b05\u2b06\u0005\u0293\u0000\u0000"+
		"\u2b06\u2b09\u0005\u02ff\u0000\u0000\u2b07\u2b08\u0005\u014a\u0000\u0000"+
		"\u2b08\u2b0a\u0005\u0006\u0000\u0000\u2b09\u2b07\u0001\u0000\u0000\u0000"+
		"\u2b09\u2b0a\u0001\u0000\u0000\u0000\u2b0a\u03a9\u0001\u0000\u0000\u0000"+
		"\u2b0b\u2b0c\u0005\u0293\u0000\u0000\u2b0c\u2b0d\u0005\u0319\u0000\u0000"+
		"\u2b0d\u2b0f\u0005\u011a\u0000\u0000\u2b0e\u2b10\u0003\u03b4\u01da\u0000"+
		"\u2b0f\u2b0e\u0001\u0000\u0000\u0000\u2b0f\u2b10\u0001\u0000\u0000\u0000"+
		"\u2b10\u2b12\u0001\u0000\u0000\u0000\u2b11\u2b13\u0003\u036e\u01b7\u0000"+
		"\u2b12\u2b11\u0001\u0000\u0000\u0000\u2b12\u2b13\u0001\u0000\u0000\u0000"+
		"\u2b13\u03ab\u0001\u0000\u0000\u0000\u2b14\u2b16\u0005\u0293\u0000\u0000"+
		"\u2b15\u2b17\u0005\u02e2\u0000\u0000\u2b16\u2b15\u0001\u0000\u0000\u0000"+
		"\u2b16\u2b17\u0001\u0000\u0000\u0000\u2b17\u2b18\u0001\u0000\u0000\u0000"+
		"\u2b18\u2b1a\u0005\u031b\u0000\u0000\u2b19\u2b1b\u0003\u03b4\u01da\u0000"+
		"\u2b1a\u2b19\u0001\u0000\u0000\u0000\u2b1a\u2b1b\u0001\u0000\u0000\u0000"+
		"\u2b1b\u2b1f\u0001\u0000\u0000\u0000\u2b1c\u2b1d\u0005\u02b2\u0000\u0000"+
		"\u2b1d\u2b1e\u0005\u0336\u0000\u0000\u2b1e\u2b20\u0003\u03ca\u01e5\u0000"+
		"\u2b1f\u2b1c\u0001\u0000\u0000\u0000\u2b1f\u2b20\u0001\u0000\u0000\u0000"+
		"\u2b20\u2b23\u0001\u0000\u0000\u0000\u2b21\u2b22\u0005\u0178\u0000\u0000"+
		"\u2b22\u2b24\u0003\u03f0\u01f8\u0000\u2b23\u2b21\u0001\u0000\u0000\u0000"+
		"\u2b23\u2b24\u0001\u0000\u0000\u0000\u2b24\u2b27\u0001\u0000\u0000\u0000"+
		"\u2b25\u2b26\u0005\u0117\u0000\u0000\u2b26\u2b28\u0003\u03ca\u01e5\u0000"+
		"\u2b27\u2b25\u0001\u0000\u0000\u0000\u2b27\u2b28\u0001\u0000\u0000\u0000"+
		"\u2b28\u03ad\u0001\u0000\u0000\u0000\u2b29\u2b2a\u0005\u0293\u0000\u0000"+
		"\u2b2a\u2b2c\u0005\u0327\u0000\u0000\u2b2b\u2b2d\u0003\u03b4\u01da\u0000"+
		"\u2b2c\u2b2b\u0001\u0000\u0000\u0000\u2b2c\u2b2d\u0001\u0000\u0000\u0000"+
		"\u2b2d\u03af\u0001\u0000\u0000\u0000\u2b2e\u2b30\u0005\u0293\u0000\u0000"+
		"\u2b2f\u2b31\u0005\u02e2\u0000\u0000\u2b30\u2b2f\u0001\u0000\u0000\u0000"+
		"\u2b30\u2b31\u0001\u0000\u0000\u0000\u2b31\u2b32\u0001\u0000\u0000\u0000"+
		"\u2b32\u2b34\u0005\u032a\u0000\u0000\u2b33\u2b35\u0003\u03b4\u01da\u0000"+
		"\u2b34\u2b33\u0001\u0000\u0000\u0000\u2b34\u2b35\u0001\u0000\u0000\u0000"+
		"\u2b35\u2b44\u0001\u0000\u0000\u0000\u2b36\u2b42\u0005\u014a\u0000\u0000"+
		"\u2b37\u2b43\u0005\u0006\u0000\u0000\u2b38\u2b3a\u0005\u00a5\u0000\u0000"+
		"\u2b39\u2b3b\u0003\u03d0\u01e8\u0000\u2b3a\u2b39\u0001\u0000\u0000\u0000"+
		"\u2b3a\u2b3b\u0001\u0000\u0000\u0000\u2b3b\u2b43\u0001\u0000\u0000\u0000"+
		"\u2b3c\u2b3e\u0005\u027d\u0000\u0000\u2b3d\u2b3c\u0001\u0000\u0000\u0000"+
		"\u2b3d\u2b3e\u0001\u0000\u0000\u0000\u2b3e\u2b40\u0001\u0000\u0000\u0000"+
		"\u2b3f\u2b41\u0003\u03b8\u01dc\u0000\u2b40\u2b3f\u0001\u0000\u0000\u0000"+
		"\u2b40\u2b41\u0001\u0000\u0000\u0000\u2b41\u2b43\u0001\u0000\u0000\u0000"+
		"\u2b42\u2b37\u0001\u0000\u0000\u0000\u2b42\u2b38\u0001\u0000\u0000\u0000"+
		"\u2b42\u2b3d\u0001\u0000\u0000\u0000\u2b43\u2b45\u0001\u0000\u0000\u0000"+
		"\u2b44\u2b36\u0001\u0000\u0000\u0000\u2b44\u2b45\u0001\u0000\u0000\u0000"+
		"\u2b45\u2b47\u0001\u0000\u0000\u0000\u2b46\u2b48\u0003\u0346\u01a3\u0000"+
		"\u2b47\u2b46\u0001\u0000\u0000\u0000\u2b47\u2b48\u0001\u0000\u0000\u0000"+
		"\u2b48\u2b4a\u0001\u0000\u0000\u0000\u2b49\u2b4b\u0003\u0348\u01a4\u0000"+
		"\u2b4a\u2b49\u0001\u0000\u0000\u0000\u2b4a\u2b4b\u0001\u0000\u0000\u0000"+
		"\u2b4b\u03b1\u0001\u0000\u0000\u0000\u2b4c\u2b4d\u0005\u0293\u0000\u0000"+
		"\u2b4d\u2b4f\u0005\u032e\u0000\u0000\u2b4e\u2b50\u0003\u03b4\u01da\u0000"+
		"\u2b4f\u2b4e\u0001\u0000\u0000\u0000\u2b4f\u2b50\u0001\u0000\u0000\u0000"+
		"\u2b50\u03b3\u0001\u0000\u0000\u0000\u2b51\u2b52\u0005\u0177\u0000\u0000"+
		"\u2b52\u2b53\u0003\u03ca\u01e5\u0000\u2b53\u03b5\u0001\u0000\u0000\u0000"+
		"\u2b54\u2b55\u0003\u03d0\u01e8\u0000\u2b55\u03b7\u0001\u0000\u0000\u0000"+
		"\u2b56\u2b57\u0003\u03d0\u01e8\u0000\u2b57\u2b58\u0005\u0386\u0000\u0000"+
		"\u2b58\u2b59\u0003\u03d0\u01e8\u0000\u2b59\u2b5c\u0001\u0000\u0000\u0000"+
		"\u2b5a\u2b5c\u0003\u03d0\u01e8\u0000\u2b5b\u2b56\u0001\u0000\u0000\u0000"+
		"\u2b5b\u2b5a\u0001\u0000\u0000\u0000\u2b5c\u03b9\u0001\u0000\u0000\u0000"+
		"\u2b5d\u2b5e\u0005\u0006\u0000\u0000\u2b5e\u2b6a\u0005\u01f1\u0000\u0000"+
		"\u2b5f\u2b6a\u0005\u00a6\u0000\u0000\u2b60\u2b6a\u0005\u0159\u0000\u0000"+
		"\u2b61\u2b62\u0005\u01ab\u0000\u0000\u2b62\u2b6a\u0005\u020e\u0000\u0000"+
		"\u2b63\u2b64\u0005\u0247\u0000\u0000\u2b64\u2b6a\u0005\u01a4\u0000\u0000"+
		"\u2b65\u2b6a\u0005\u025a\u0000\u0000\u2b66\u2b6a\u0005\u0291\u0000\u0000"+
		"\u2b67\u2b6a\u0005\u031b\u0000\u0000\u2b68\u2b6a\u0005\u032e\u0000\u0000"+
		"\u2b69\u2b5d\u0001\u0000\u0000\u0000\u2b69\u2b5f\u0001\u0000\u0000\u0000"+
		"\u2b69\u2b60\u0001\u0000\u0000\u0000\u2b69\u2b61\u0001\u0000\u0000\u0000"+
		"\u2b69\u2b63\u0001\u0000\u0000\u0000\u2b69\u2b65\u0001\u0000\u0000\u0000"+
		"\u2b69\u2b66\u0001\u0000\u0000\u0000\u2b69\u2b67\u0001\u0000\u0000\u0000"+
		"\u2b69\u2b68\u0001\u0000\u0000\u0000\u2b6a\u03bb\u0001\u0000\u0000\u0000"+
		"\u2b6b\u2b70\u0003\u03ba\u01dd\u0000\u2b6c\u2b6d\u0005\u0390\u0000\u0000"+
		"\u2b6d\u2b6f\u0003\u03ba\u01dd\u0000\u2b6e\u2b6c\u0001\u0000\u0000\u0000"+
		"\u2b6f\u2b72\u0001\u0000\u0000\u0000\u2b70\u2b6e\u0001\u0000\u0000\u0000"+
		"\u2b70\u2b71\u0001\u0000\u0000\u0000\u2b71\u03bd\u0001\u0000\u0000\u0000"+
		"\u2b72\u2b70\u0001\u0000\u0000\u0000\u2b73\u2b74\u0003\u03ca\u01e5\u0000"+
		"\u2b74\u03bf\u0001\u0000\u0000\u0000\u2b75\u2b76\u0003\u03d0\u01e8\u0000"+
		"\u2b76\u03c1\u0001\u0000\u0000\u0000\u2b77\u2b78\u0003\u03d0\u01e8\u0000"+
		"\u2b78\u03c3\u0001\u0000\u0000\u0000\u2b79\u2b7a\u0003\u03d0\u01e8\u0000"+
		"\u2b7a\u03c5\u0001\u0000\u0000\u0000\u2b7b\u2b7c\u0003\u03d0\u01e8\u0000"+
		"\u2b7c\u03c7\u0001\u0000\u0000\u0000\u2b7d\u2b7e\u0003\u03d0\u01e8\u0000"+
		"\u2b7e\u03c9\u0001\u0000\u0000\u0000\u2b7f\u2b80\u0005\u0377\u0000\u0000"+
		"\u2b80\u03cb\u0001\u0000\u0000\u0000\u2b81\u2b86\u0003\u03ca\u01e5\u0000"+
		"\u2b82\u2b83\u0005\u0390\u0000\u0000\u2b83\u2b85\u0003\u03ca\u01e5\u0000"+
		"\u2b84\u2b82\u0001\u0000\u0000\u0000\u2b85\u2b88\u0001\u0000\u0000\u0000"+
		"\u2b86\u2b84\u0001\u0000\u0000\u0000\u2b86\u2b87\u0001\u0000\u0000\u0000"+
		"\u2b87\u03cd\u0001\u0000\u0000\u0000\u2b88\u2b86\u0001\u0000\u0000\u0000"+
		"\u2b89\u2b90\u0003\u03d0\u01e8\u0000\u2b8a\u2b8b\u0005\u013b\u0000\u0000"+
		"\u2b8b\u2b8c\u0005\u038a\u0000\u0000\u2b8c\u2b8d\u0003\u03d0\u01e8\u0000"+
		"\u2b8d\u2b8e\u0005\u038b\u0000\u0000\u2b8e\u2b90\u0001\u0000\u0000\u0000"+
		"\u2b8f\u2b89\u0001\u0000\u0000\u0000\u2b8f\u2b8a\u0001\u0000\u0000\u0000"+
		"\u2b90\u03cf\u0001\u0000\u0000\u0000\u2b91\u2b9f\u0005\u036f\u0000\u0000"+
		"\u2b92\u2b9f\u0005\u0370\u0000\u0000\u2b93\u2b9f\u0005\u036c\u0000\u0000"+
		"\u2b94\u2b9f\u0005\u036d\u0000\u0000\u2b95\u2b9f\u0003\u03d2\u01e9\u0000"+
		"\u2b96\u2b9f\u0003\u03d4\u01ea\u0000\u2b97\u2b9f\u0003\u0294\u014a\u0000"+
		"\u2b98\u2b9f\u0003\u040a\u0205\u0000\u2b99\u2b9f\u0003\u03d6\u01eb\u0000"+
		"\u2b9a\u2b9f\u0003\u03d8\u01ec\u0000\u2b9b\u2b9f\u0003\u03da\u01ed\u0000"+
		"\u2b9c\u2b9f\u0003\u03dc\u01ee\u0000\u2b9d\u2b9f\u0003\u03de\u01ef\u0000"+
		"\u2b9e\u2b91\u0001\u0000\u0000\u0000\u2b9e\u2b92\u0001\u0000\u0000\u0000"+
		"\u2b9e\u2b93\u0001\u0000\u0000\u0000\u2b9e\u2b94\u0001\u0000\u0000\u0000"+
		"\u2b9e\u2b95\u0001\u0000\u0000\u0000\u2b9e\u2b96\u0001\u0000\u0000\u0000"+
		"\u2b9e\u2b97\u0001\u0000\u0000\u0000\u2b9e\u2b98\u0001\u0000\u0000\u0000"+
		"\u2b9e\u2b99\u0001\u0000\u0000\u0000\u2b9e\u2b9a\u0001\u0000\u0000\u0000"+
		"\u2b9e\u2b9b\u0001\u0000\u0000\u0000\u2b9e\u2b9c\u0001\u0000\u0000\u0000"+
		"\u2b9e\u2b9d\u0001\u0000\u0000\u0000\u2b9f\u03d1\u0001\u0000\u0000\u0000"+
		"\u2ba0\u2ba1\u0007M\u0000\u0000\u2ba1\u03d3\u0001\u0000\u0000\u0000\u2ba2"+
		"\u2ba3\u0007N\u0000\u0000\u2ba3\u03d5\u0001\u0000\u0000\u0000\u2ba4\u2ba5"+
		"\u0007O\u0000\u0000\u2ba5\u03d7\u0001\u0000\u0000\u0000\u2ba6\u2ba7\u0007"+
		"P\u0000\u0000\u2ba7\u03d9\u0001\u0000\u0000\u0000\u2ba8\u2bb5\u0007Q\u0000"+
		"\u0000\u2ba9\u2bb5\u0005\u0126\u0000\u0000\u2baa\u2bb5\u0005\u0174\u0000"+
		"\u0000\u2bab\u2bb5\u0005\u0257\u0000\u0000\u2bac\u2bb5\u0005\u00ad\u0000"+
		"\u0000\u2bad\u2bb5\u0007R\u0000\u0000\u2bae\u2bb5\u0005\u02a7\u0000\u0000"+
		"\u2baf\u2bb5\u0005\u01bd\u0000\u0000\u2bb0\u2bb5\u0005\u00e1\u0000\u0000"+
		"\u2bb1\u2bb5\u0005\u0091\u0000\u0000\u2bb2\u2bb5\u0005\u0082\u0000\u0000"+
		"\u2bb3\u2bb5\u0005\u02fc\u0000\u0000\u2bb4\u2ba8\u0001\u0000\u0000\u0000"+
		"\u2bb4\u2ba9\u0001\u0000\u0000\u0000\u2bb4\u2baa\u0001\u0000\u0000\u0000"+
		"\u2bb4\u2bab\u0001\u0000\u0000\u0000\u2bb4\u2bac\u0001\u0000\u0000\u0000"+
		"\u2bb4\u2bad\u0001\u0000\u0000\u0000\u2bb4\u2bae\u0001\u0000\u0000\u0000"+
		"\u2bb4\u2baf\u0001\u0000\u0000\u0000\u2bb4\u2bb0\u0001\u0000\u0000\u0000"+
		"\u2bb4\u2bb1\u0001\u0000\u0000\u0000\u2bb4\u2bb2\u0001\u0000\u0000\u0000"+
		"\u2bb4\u2bb3\u0001\u0000\u0000\u0000\u2bb5\u03db\u0001\u0000\u0000\u0000"+
		"\u2bb6\u2bbc\u0005p\u0000\u0000\u2bb7\u2bbc\u0005\u023e\u0000\u0000\u2bb8"+
		"\u2bbc\u0007S\u0000\u0000\u2bb9\u2bbc\u0005\u0177\u0000\u0000\u2bba\u2bbc"+
		"\u0005\u0142\u0000\u0000\u2bbb\u2bb6\u0001\u0000\u0000\u0000\u2bbb\u2bb7"+
		"\u0001\u0000\u0000\u0000\u2bbb\u2bb8\u0001\u0000\u0000\u0000\u2bbb\u2bb9"+
		"\u0001\u0000\u0000\u0000\u2bbb\u2bba\u0001\u0000\u0000\u0000\u2bbc\u03dd"+
		"\u0001\u0000\u0000\u0000\u2bbd\u2bc3\u0007T\u0000\u0000\u2bbe\u2bc3\u0007"+
		"U\u0000\u0000\u2bbf\u2bc3\u0005\u02a8\u0000\u0000\u2bc0\u2bc3\u0005\u01c3"+
		"\u0000\u0000\u2bc1\u2bc3\u0005\u013e\u0000\u0000\u2bc2\u2bbd\u0001\u0000"+
		"\u0000\u0000\u2bc2\u2bbe\u0001\u0000\u0000\u0000\u2bc2\u2bbf\u0001\u0000"+
		"\u0000\u0000\u2bc2\u2bc0\u0001\u0000\u0000\u0000\u2bc2\u2bc1\u0001\u0000"+
		"\u0000\u0000\u2bc3\u03df\u0001\u0000\u0000\u0000\u2bc4\u2bc5\u0007V\u0000"+
		"\u0000\u2bc5\u03e1\u0001\u0000\u0000\u0000\u2bc6\u2bc7\u0005\u0205\u0000"+
		"\u0000\u2bc7\u2bc8\u0005\u0380\u0000\u0000\u2bc8\u2bc9\u0003\u03ca\u01e5"+
		"\u0000\u2bc9\u03e3\u0001\u0000\u0000\u0000\u2bca\u2bcb\u0003\u03d0\u01e8"+
		"\u0000\u2bcb\u2bcc\u0005\u0386\u0000\u0000\u2bcc\u2bce\u0001\u0000\u0000"+
		"\u0000\u2bcd\u2bca\u0001\u0000\u0000\u0000\u2bcd\u2bce\u0001\u0000\u0000"+
		"\u0000\u2bce\u2bcf\u0001\u0000\u0000\u0000\u2bcf\u2bd0\u0003\u03d0\u01e8"+
		"\u0000\u2bd0\u03e5\u0001\u0000\u0000\u0000\u2bd1\u2bd6\u0003\u03e4\u01f2"+
		"\u0000\u2bd2\u2bd3\u0005\u0390\u0000\u0000\u2bd3\u2bd5\u0003\u03e4\u01f2"+
		"\u0000\u2bd4\u2bd2\u0001\u0000\u0000\u0000\u2bd5\u2bd8\u0001\u0000\u0000"+
		"\u0000\u2bd6\u2bd4\u0001\u0000\u0000\u0000\u2bd6\u2bd7\u0001\u0000\u0000"+
		"\u0000\u2bd7\u03e7\u0001\u0000\u0000\u0000\u2bd8\u2bd6\u0001\u0000\u0000"+
		"\u0000\u2bd9\u2bdc\u0003\u03e4\u01f2\u0000\u2bda\u2bdb\u0005\u0086\u0000"+
		"\u0000\u2bdb\u2bdd\u0003\u03ca\u01e5\u0000\u2bdc\u2bda\u0001\u0000\u0000"+
		"\u0000\u2bdc\u2bdd\u0001\u0000\u0000\u0000\u2bdd\u2be6\u0001\u0000\u0000"+
		"\u0000\u2bde\u2bdf\u0005\u0390\u0000\u0000\u2bdf\u2be2\u0003\u03e4\u01f2"+
		"\u0000\u2be0\u2be1\u0005\u0086\u0000\u0000\u2be1\u2be3\u0003\u03ca\u01e5"+
		"\u0000\u2be2\u2be0\u0001\u0000\u0000\u0000\u2be2\u2be3\u0001\u0000\u0000"+
		"\u0000\u2be3\u2be5\u0001\u0000\u0000\u0000\u2be4\u2bde\u0001\u0000\u0000"+
		"\u0000\u2be5\u2be8\u0001\u0000\u0000\u0000\u2be6\u2be4\u0001\u0000\u0000"+
		"\u0000\u2be6\u2be7\u0001\u0000\u0000\u0000\u2be7\u03e9\u0001\u0000\u0000"+
		"\u0000\u2be8\u2be6\u0001\u0000\u0000\u0000\u2be9\u2bea\u0003\u03ec\u01f6"+
		"\u0000\u2bea\u2beb\u0005\u0386\u0000\u0000\u2beb\u2bec\u0003\u03ec\u01f6"+
		"\u0000\u2bec\u2bed\u0005\u0386\u0000\u0000\u2bed\u2bee\u0003\u03ec\u01f6"+
		"\u0000\u2bee\u2bf5\u0001\u0000\u0000\u0000\u2bef\u2bf0\u0003\u03ec\u01f6"+
		"\u0000\u2bf0\u2bf1\u0005\u0386\u0000\u0000\u2bf1\u2bf2\u0003\u03ec\u01f6"+
		"\u0000\u2bf2\u2bf5\u0001\u0000\u0000\u0000\u2bf3\u2bf5\u0003\u03ec\u01f6"+
		"\u0000\u2bf4\u2be9\u0001\u0000\u0000\u0000\u2bf4\u2bef\u0001\u0000\u0000"+
		"\u0000\u2bf4\u2bf3\u0001\u0000\u0000\u0000\u2bf5\u03eb\u0001\u0000\u0000"+
		"\u0000\u2bf6\u2bfd\u0003\u03d0\u01e8\u0000\u2bf7\u2bf8\u0005\u0389\u0000"+
		"\u0000\u2bf8\u2bf9\u0005\u038e\u0000\u0000\u2bf9\u2bfa\u0003\u03d0\u01e8"+
		"\u0000\u2bfa\u2bfb\u0005\u038f\u0000\u0000\u2bfb\u2bfd\u0001\u0000\u0000"+
		"\u0000\u2bfc\u2bf6\u0001\u0000\u0000\u0000\u2bfc\u2bf7\u0001\u0000\u0000"+
		"\u0000\u2bfd\u03ed\u0001\u0000\u0000\u0000\u2bfe\u2c05\u0003\u03ea\u01f5"+
		"\u0000\u2bff\u2c00\u0005\u013b\u0000\u0000\u2c00\u2c01\u0005\u038a\u0000"+
		"\u0000\u2c01\u2c02\u0003\u03ca\u01e5\u0000\u2c02\u2c03\u0005\u038b\u0000"+
		"\u0000\u2c03\u2c05\u0001\u0000\u0000\u0000\u2c04\u2bfe\u0001\u0000\u0000"+
		"\u0000\u2c04\u2bff\u0001\u0000\u0000\u0000\u2c05\u03ef\u0001\u0000\u0000"+
		"\u0000\u2c06\u2c07\u0005\u0378\u0000\u0000\u2c07\u03f1\u0001\u0000\u0000"+
		"\u0000\u2c08\u2c0d\u0003\u03f6\u01fb\u0000\u2c09\u2c0a\u0005\u0390\u0000"+
		"\u0000\u2c0a\u2c0c\u0003\u03f6\u01fb\u0000\u2c0b\u2c09\u0001\u0000\u0000"+
		"\u0000\u2c0c\u2c0f\u0001\u0000\u0000\u0000\u2c0d\u2c0b\u0001\u0000\u0000"+
		"\u0000\u2c0d\u2c0e\u0001\u0000\u0000\u0000\u2c0e\u03f3\u0001\u0000\u0000"+
		"\u0000\u2c0f\u2c0d\u0001\u0000\u0000\u0000\u2c10\u2c12\u0003\u03f6\u01fb"+
		"\u0000\u2c11\u2c13\u0003\u0410\u0208\u0000\u2c12\u2c11\u0001\u0000\u0000"+
		"\u0000\u2c12\u2c13\u0001\u0000\u0000\u0000\u2c13\u2c1b\u0001\u0000\u0000"+
		"\u0000\u2c14\u2c15\u0005\u0390\u0000\u0000\u2c15\u2c17\u0003\u03f6\u01fb"+
		"\u0000\u2c16\u2c18\u0003\u0410\u0208\u0000\u2c17\u2c16\u0001\u0000\u0000"+
		"\u0000\u2c17\u2c18\u0001\u0000\u0000\u0000\u2c18\u2c1a\u0001\u0000\u0000"+
		"\u0000\u2c19\u2c14\u0001\u0000\u0000\u0000\u2c1a\u2c1d\u0001\u0000\u0000"+
		"\u0000\u2c1b\u2c19\u0001\u0000\u0000\u0000\u2c1b\u2c1c\u0001\u0000\u0000"+
		"\u0000\u2c1c\u03f5\u0001\u0000\u0000\u0000\u2c1d\u2c1b\u0001\u0000\u0000"+
		"\u0000\u2c1e\u2c1f\u0006\u01fb\uffff\uffff\u0000\u2c1f\u2c20\u0003\u03ea"+
		"\u01f5\u0000\u2c20\u2c21\u0005\u0386\u0000\u0000\u2c21\u2c22\u0005\u01af"+
		"\u0000\u0000\u2c22\u2c37\u0001\u0000\u0000\u0000\u2c23\u2c37\u0003\u0428"+
		"\u0214\u0000\u2c24\u2c37\u0003\u03f8\u01fc\u0000\u2c25\u2c37\u0003\u0426"+
		"\u0213\u0000\u2c26\u2c27\u0007W\u0000\u0000\u2c27\u2c37\u0003\u03f6\u01fb"+
		"\u0016\u2c28\u2c2a\u0005\u01b5\u0000\u0000\u2c29\u2c28\u0001\u0000\u0000"+
		"\u0000\u2c2a\u2c2b\u0001\u0000\u0000\u0000\u2c2b\u2c29\u0001\u0000\u0000"+
		"\u0000\u2c2b\u2c2c\u0001\u0000\u0000\u0000\u2c2c\u2c2d\u0001\u0000\u0000"+
		"\u0000\u2c2d\u2c37\u0003\u03f6\u01fb\u0012\u2c2e\u2c37\u0003\u0406\u0203"+
		"\u0000\u2c2f\u2c37\u0003\u03fe\u01ff\u0000\u2c30\u2c37\u0003\u03fc\u01fe"+
		"\u0000\u2c31\u2c37\u0003\u0400\u0200\u0000\u2c32\u2c37\u0003\u03fa\u01fd"+
		"\u0000\u2c33\u2c37\u0003\u0414\u020a\u0000\u2c34\u2c37\u0003\u04b2\u0259"+
		"\u0000\u2c35\u2c37\u0003\u040c\u0206\u0000\u2c36\u2c1e\u0001\u0000\u0000"+
		"\u0000\u2c36\u2c23\u0001\u0000\u0000\u0000\u2c36\u2c24\u0001\u0000\u0000"+
		"\u0000\u2c36\u2c25\u0001\u0000\u0000\u0000\u2c36\u2c26\u0001\u0000\u0000"+
		"\u0000\u2c36\u2c29\u0001\u0000\u0000\u0000\u2c36\u2c2e\u0001\u0000\u0000"+
		"\u0000\u2c36\u2c2f\u0001\u0000\u0000\u0000\u2c36\u2c30\u0001\u0000\u0000"+
		"\u0000\u2c36\u2c31\u0001\u0000\u0000\u0000\u2c36\u2c32\u0001\u0000\u0000"+
		"\u0000\u2c36\u2c33\u0001\u0000\u0000\u0000\u2c36\u2c34\u0001\u0000\u0000"+
		"\u0000\u2c36\u2c35\u0001\u0000\u0000\u0000\u2c37\u2c93\u0001\u0000\u0000"+
		"\u0000\u2c38\u2c39\n\u001c\u0000\u0000\u2c39\u2c3a\u0005\u0392\u0000\u0000"+
		"\u2c3a\u2c92\u0003\u03f6\u01fb\u001d\u2c3b\u2c3c\n\u0015\u0000\u0000\u2c3c"+
		"\u2c3d\u0007X\u0000\u0000\u2c3d\u2c92\u0003\u03f6\u01fb\u0016\u2c3e\u2c3f"+
		"\n\u0014\u0000\u0000\u2c3f\u2c40\u0007Y\u0000\u0000\u2c40\u2c92\u0003"+
		"\u03f6\u01fb\u0015\u2c41\u2c42\n\u0013\u0000\u0000\u2c42\u2c43\u0003\u04ae"+
		"\u0257\u0000\u2c43\u2c44\u0003\u03f6\u01fb\u0014\u2c44\u2c92\u0001\u0000"+
		"\u0000\u0000\u2c45\u2c46\n\u0011\u0000\u0000\u2c46\u2c47\u0005\u001d\u0000"+
		"\u0000\u2c47\u2c92\u0003\u03f6\u01fb\u0012\u2c48\u2c49\n\u0010\u0000\u0000"+
		"\u2c49\u2c4a\u0005\u01e2\u0000\u0000\u2c4a\u2c92\u0003\u03f6\u01fb\u0011"+
		"\u2c4b\u2c4d\n\u0003\u0000\u0000\u2c4c\u2c4e\u0005\u01b5\u0000\u0000\u2c4d"+
		"\u2c4c\u0001\u0000\u0000\u0000\u2c4d\u2c4e\u0001\u0000\u0000\u0000\u2c4e"+
		"\u2c4f\u0001\u0000\u0000\u0000\u2c4f\u2c50\u0005\u0258\u0000\u0000\u2c50"+
		"\u2c92\u0003\u03f6\u01fb\u0004\u2c51\u2c52\n\u001d\u0000\u0000\u2c52\u2c53"+
		"\u0005\u038c\u0000\u0000\u2c53\u2c54\u0003\u03f6\u01fb\u0000\u2c54\u2c55"+
		"\u0005\u038d\u0000\u0000\u2c55\u2c92\u0001\u0000\u0000\u0000\u2c56\u2c57"+
		"\n\u001b\u0000\u0000\u2c57\u2c5a\u0005\u0386\u0000\u0000\u2c58\u2c5b\u0005"+
		"\u0325\u0000\u0000\u2c59\u2c5b\u0003\u03f6\u01fb\u0000\u2c5a\u2c58\u0001"+
		"\u0000\u0000\u0000\u2c5a\u2c59\u0001\u0000\u0000\u0000\u2c5b\u2c92\u0001"+
		"\u0000\u0000\u0000\u2c5c\u2c5d\n\u001a\u0000\u0000\u2c5d\u2c5e\u0005\u0082"+
		"\u0000\u0000\u2c5e\u2c92\u0003\u03ca\u01e5\u0000\u2c5f\u2c60\n\u000e\u0000"+
		"\u0000\u2c60\u2c92\u0003\u0412\u0209\u0000\u2c61\u2c62\n\f\u0000\u0000"+
		"\u2c62\u2c63\u0005\u0393\u0000\u0000\u2c63\u2c92\u0003\u040a\u0205\u0000"+
		"\u2c64\u2c65\n\u0006\u0000\u0000\u2c65\u2c66\u0005\u015d\u0000\u0000\u2c66"+
		"\u2c92\u0003\u04b0\u0258\u0000\u2c67\u2c69\n\u0005\u0000\u0000\u2c68\u2c6a"+
		"\u0005\u01b5\u0000\u0000\u2c69\u2c68\u0001\u0000\u0000\u0000\u2c69\u2c6a"+
		"\u0001\u0000\u0000\u0000\u2c6a\u2c6b\u0001\u0000\u0000\u0000\u2c6b\u2c6c"+
		"\u0005\u014a\u0000\u0000\u2c6c\u2c6f\u0005\u038a\u0000\u0000\u2c6d\u2c70"+
		"\u0003\u04b2\u0259\u0000\u2c6e\u2c70\u0003\u03f2\u01f9\u0000\u2c6f\u2c6d"+
		"\u0001\u0000\u0000\u0000\u2c6f\u2c6e\u0001\u0000\u0000\u0000\u2c70\u2c71"+
		"\u0001\u0000\u0000\u0000\u2c71\u2c72\u0005\u038b\u0000\u0000\u2c72\u2c92"+
		"\u0001\u0000\u0000\u0000\u2c73\u2c75\n\u0004\u0000\u0000\u2c74\u2c76\u0005"+
		"\u01b5\u0000\u0000\u2c75\u2c74\u0001\u0000\u0000\u0000\u2c75\u2c76\u0001"+
		"\u0000\u0000\u0000\u2c76\u2c77\u0001\u0000\u0000\u0000\u2c77\u2c78\u0007"+
		"Z\u0000\u0000\u2c78\u2c7b\u0003\u03f6\u01fb\u0000\u2c79\u2c7a\u0005\u00e7"+
		"\u0000\u0000\u2c7a\u2c7c\u0003\u03f6\u01fb\u0000\u2c7b\u2c79\u0001\u0000"+
		"\u0000\u0000\u2c7b\u2c7c\u0001\u0000\u0000\u0000\u2c7c\u2c92\u0001\u0000"+
		"\u0000\u0000\u2c7d\u2c7f\n\u0002\u0000\u0000\u2c7e\u2c80\u0005\u01b5\u0000"+
		"\u0000\u2c7f\u2c7e\u0001\u0000\u0000\u0000\u2c7f\u2c80\u0001\u0000\u0000"+
		"\u0000\u2c80\u2c81\u0001\u0000\u0000\u0000\u2c81\u2c82\u0007Z\u0000\u0000"+
		"\u2c82\u2c83\u0005\u001e\u0000\u0000\u2c83\u2c84\u0005\u038a\u0000\u0000"+
		"\u2c84\u2c89\u0003\u03f6\u01fb\u0000\u2c85\u2c86\u0005\u0390\u0000\u0000"+
		"\u2c86\u2c88\u0003\u03f6\u01fb\u0000\u2c87\u2c85\u0001\u0000\u0000\u0000"+
		"\u2c88\u2c8b\u0001\u0000\u0000\u0000\u2c89\u2c87\u0001\u0000\u0000\u0000"+
		"\u2c89\u2c8a\u0001\u0000\u0000\u0000\u2c8a\u2c8c\u0001\u0000\u0000\u0000"+
		"\u2c8b\u2c89\u0001\u0000\u0000\u0000\u2c8c\u2c8f\u0005\u038b\u0000\u0000"+
		"\u2c8d\u2c8e\u0005\u00e7\u0000\u0000\u2c8e\u2c90\u0003\u03f6\u01fb\u0000"+
		"\u2c8f\u2c8d\u0001\u0000\u0000\u0000\u2c8f\u2c90\u0001\u0000\u0000\u0000"+
		"\u2c90\u2c92\u0001\u0000\u0000\u0000\u2c91\u2c38\u0001\u0000\u0000\u0000"+
		"\u2c91\u2c3b\u0001\u0000\u0000\u0000\u2c91\u2c3e\u0001\u0000\u0000\u0000"+
		"\u2c91\u2c41\u0001\u0000\u0000\u0000\u2c91\u2c45\u0001\u0000\u0000\u0000"+
		"\u2c91\u2c48\u0001\u0000\u0000\u0000\u2c91\u2c4b\u0001\u0000\u0000\u0000"+
		"\u2c91\u2c51\u0001\u0000\u0000\u0000\u2c91\u2c56\u0001\u0000\u0000\u0000"+
		"\u2c91\u2c5c\u0001\u0000\u0000\u0000\u2c91\u2c5f\u0001\u0000\u0000\u0000"+
		"\u2c91\u2c61\u0001\u0000\u0000\u0000\u2c91\u2c64\u0001\u0000\u0000\u0000"+
		"\u2c91\u2c67\u0001\u0000\u0000\u0000\u2c91\u2c73\u0001\u0000\u0000\u0000"+
		"\u2c91\u2c7d\u0001\u0000\u0000\u0000\u2c92\u2c95\u0001\u0000\u0000\u0000"+
		"\u2c93\u2c91\u0001\u0000\u0000\u0000\u2c93\u2c94\u0001\u0000\u0000\u0000"+
		"\u2c94\u03f7\u0001\u0000\u0000\u0000\u2c95\u2c93\u0001\u0000\u0000\u0000"+
		"\u2c96\u2c97\u0005\u013e\u0000\u0000\u2c97\u2c98\u0005\u038a\u0000\u0000"+
		"\u2c98\u2c99\u0003\u04ac\u0256\u0000\u2c99\u2c9a\u0005\u0390\u0000\u0000"+
		"\u2c9a\u2c9b\u0003\u03f6\u01fb\u0000\u2c9b\u2c9c\u0005\u0390\u0000\u0000"+
		"\u2c9c\u2c9d\u0003\u03f6\u01fb\u0000\u2c9d\u2c9e\u0005\u038b\u0000\u0000"+
		"\u2c9e\u03f9\u0001\u0000\u0000\u0000\u2c9f\u2ca0\u0007[\u0000\u0000\u2ca0"+
		"\u2ca1\u0005\u038a\u0000\u0000\u2ca1\u2ca6\u0003\u03f6\u01fb\u0000\u2ca2"+
		"\u2ca3\u0005\u0390\u0000\u0000\u2ca3\u2ca5\u0003\u03ca\u01e5\u0000\u2ca4"+
		"\u2ca2\u0001\u0000\u0000\u0000\u2ca5\u2ca8\u0001\u0000\u0000\u0000\u2ca6"+
		"\u2ca4\u0001\u0000\u0000\u0000\u2ca6\u2ca7\u0001\u0000\u0000\u0000\u2ca7"+
		"\u2ca9\u0001\u0000\u0000\u0000\u2ca8\u2ca6\u0001\u0000\u0000\u0000\u2ca9"+
		"\u2caa\u0005\u038b\u0000\u0000\u2caa\u03fb\u0001\u0000\u0000\u0000\u2cab"+
		"\u2cac\u0005\u030a\u0000\u0000\u2cac\u2cad\u0005\u038a\u0000\u0000\u2cad"+
		"\u2cae\u0003\u03f6\u01fb\u0000\u2cae\u2caf\u0005+\u0000\u0000\u2caf\u2cb0"+
		"\u0003\u040a\u0205\u0000\u2cb0\u2cb1\u0005\u038b\u0000\u0000\u2cb1\u03fd"+
		"\u0001\u0000\u0000\u0000\u2cb2\u2cb3\u0005i\u0000\u0000\u2cb3\u2cb4\u0005"+
		"\u038a\u0000\u0000\u2cb4\u2cb5\u0003\u03f6\u01fb\u0000\u2cb5\u2cb6\u0005"+
		"+\u0000\u0000\u2cb6\u2cb7\u0003\u040a\u0205\u0000\u2cb7\u2cb8\u0005\u038b"+
		"\u0000\u0000\u2cb8\u2cbc\u0001\u0000\u0000\u0000\u2cb9\u2cba\u0007\\\u0000"+
		"\u0000\u2cba\u2cbc\u0003\u03f6\u01fb\u0000\u2cbb\u2cb2\u0001\u0000\u0000"+
		"\u0000\u2cbb\u2cb9\u0001\u0000\u0000\u0000\u2cbc\u03ff\u0001\u0000\u0000"+
		"\u0000\u2cbd\u2cbe\u0005\u038e\u0000\u0000\u2cbe\u2cc3\u0003\u0402\u0201"+
		"\u0000\u2cbf\u2cc0\u0005\u0390\u0000\u0000\u2cc0\u2cc2\u0003\u0402\u0201"+
		"\u0000\u2cc1\u2cbf\u0001\u0000\u0000\u0000\u2cc2\u2cc5\u0001\u0000\u0000"+
		"\u0000\u2cc3\u2cc1\u0001\u0000\u0000\u0000\u2cc3\u2cc4\u0001\u0000\u0000"+
		"\u0000\u2cc4\u2cc6\u0001\u0000\u0000\u0000\u2cc5\u2cc3\u0001\u0000\u0000"+
		"\u0000\u2cc6\u2cc7\u0005\u038f\u0000\u0000\u2cc7\u2ccb\u0001\u0000\u0000"+
		"\u0000\u2cc8\u2cc9\u0005\u038e\u0000\u0000\u2cc9\u2ccb\u0005\u038f\u0000"+
		"\u0000\u2cca\u2cbd\u0001\u0000\u0000\u0000\u2cca\u2cc8\u0001\u0000\u0000"+
		"\u0000\u2ccb\u0401\u0001\u0000\u0000\u0000\u2ccc\u2ccd\u0005\u0377\u0000"+
		"\u0000\u2ccd\u2cce\u0005\u0392\u0000\u0000\u2cce\u2ccf\u0003\u0404\u0202"+
		"\u0000\u2ccf\u0403\u0001\u0000\u0000\u0000\u2cd0\u2cd1\u0003\u03f6\u01fb"+
		"\u0000\u2cd1\u0405\u0001\u0000\u0000\u0000\u2cd2\u2cd3\u0005\u038c\u0000"+
		"\u0000\u2cd3\u2cd8\u0003\u0404\u0202\u0000\u2cd4\u2cd5\u0005\u0390\u0000"+
		"\u0000\u2cd5\u2cd7\u0003\u0404\u0202\u0000\u2cd6\u2cd4\u0001\u0000\u0000"+
		"\u0000\u2cd7\u2cda\u0001\u0000\u0000\u0000\u2cd8\u2cd6\u0001\u0000\u0000"+
		"\u0000\u2cd8\u2cd9\u0001\u0000\u0000\u0000\u2cd9\u2cdb\u0001\u0000\u0000"+
		"\u0000\u2cda\u2cd8\u0001\u0000\u0000\u0000\u2cdb\u2cdc\u0005\u038d\u0000"+
		"\u0000\u2cdc\u2ce0\u0001\u0000\u0000\u0000\u2cdd\u2cde\u0005\u038c\u0000"+
		"\u0000\u2cde\u2ce0\u0005\u038d\u0000\u0000\u2cdf\u2cd2\u0001\u0000\u0000"+
		"\u0000\u2cdf\u2cdd\u0001\u0000\u0000\u0000\u2ce0\u0407\u0001\u0000\u0000"+
		"\u0000\u2ce1\u2ce2\u0005\u038a\u0000\u0000\u2ce2\u2ce3\u0003\u03f0\u01f8"+
		"\u0000\u2ce3\u2ce4\u0005\u038b\u0000\u0000\u2ce4\u0409\u0001\u0000\u0000"+
		"\u0000\u2ce5\u2d1e\u0007]\u0000\u0000\u2ce6\u2cef\u0007^\u0000\u0000\u2ce7"+
		"\u2ce8\u0005\u038a\u0000\u0000\u2ce8\u2ceb\u0003\u03f0\u01f8\u0000\u2ce9"+
		"\u2cea\u0005\u0390\u0000\u0000\u2cea\u2cec\u0003\u03f0\u01f8\u0000\u2ceb"+
		"\u2ce9\u0001\u0000\u0000\u0000\u2ceb\u2cec\u0001\u0000\u0000\u0000\u2cec"+
		"\u2ced\u0001\u0000\u0000\u0000\u2ced\u2cee\u0005\u038b\u0000\u0000\u2cee"+
		"\u2cf0\u0001\u0000\u0000\u0000\u2cef\u2ce7\u0001\u0000\u0000\u0000\u2cef"+
		"\u2cf0\u0001\u0000\u0000\u0000\u2cf0\u2d1e\u0001\u0000\u0000\u0000\u2cf1"+
		"\u2d1e\u0007_\u0000\u0000\u2cf2\u2d1e\u0005\u034a\u0000\u0000\u2cf3\u2d1e"+
		"\u0005\u034d\u0000\u0000\u2cf4\u2cf6\u0005\u034e\u0000\u0000\u2cf5\u2cf7"+
		"\u0003\u0408\u0204\u0000\u2cf6\u2cf5\u0001\u0000\u0000\u0000\u2cf6\u2cf7"+
		"\u0001\u0000\u0000\u0000\u2cf7\u2d1e\u0001\u0000\u0000\u0000\u2cf8\u2cfa"+
		"\u0005\u02e4\u0000\u0000\u2cf9\u2cfb\u0003\u0408\u0204\u0000\u2cfa\u2cf9"+
		"\u0001\u0000\u0000\u0000\u2cfa\u2cfb\u0001\u0000\u0000\u0000\u2cfb\u2d1e"+
		"\u0001\u0000\u0000\u0000\u2cfc\u2cfe\u0005\u02e7\u0000\u0000\u2cfd\u2cff"+
		"\u0003\u0408\u0204\u0000\u2cfe\u2cfd\u0001\u0000\u0000\u0000\u2cfe\u2cff"+
		"\u0001\u0000\u0000\u0000\u2cff\u2d1e\u0001\u0000\u0000\u0000\u2d00\u2d02"+
		"\u0005\u02eb\u0000\u0000\u2d01\u2d03\u0003\u0408\u0204\u0000\u2d02\u2d01"+
		"\u0001\u0000\u0000\u0000\u2d02\u2d03\u0001\u0000\u0000\u0000\u2d03\u2d1e"+
		"\u0001\u0000\u0000\u0000\u2d04\u2d06\u0005\u02ed\u0000\u0000\u2d05\u2d07"+
		"\u0003\u0408\u0204\u0000\u2d06\u2d05\u0001\u0000\u0000\u0000\u2d06\u2d07"+
		"\u0001\u0000\u0000\u0000\u2d07\u2d1e\u0001\u0000\u0000\u0000\u2d08\u2d0a"+
		"\u0005\u02f1\u0000\u0000\u2d09\u2d0b\u0003\u0408\u0204\u0000\u2d0a\u2d09"+
		"\u0001\u0000\u0000\u0000\u2d0a\u2d0b\u0001\u0000\u0000\u0000\u2d0b\u2d1e"+
		"\u0001\u0000\u0000\u0000\u2d0c\u2d0e\u0007`\u0000\u0000\u2d0d\u2d0f\u0003"+
		"\u0408\u0204\u0000\u2d0e\u2d0d\u0001\u0000\u0000\u0000\u2d0e\u2d0f\u0001"+
		"\u0000\u0000\u0000\u2d0f\u2d1e\u0001\u0000\u0000\u0000\u2d10\u2d12\u0007"+
		"a\u0000\u0000\u2d11\u2d13\u0003\u0408\u0204\u0000\u2d12\u2d11\u0001\u0000"+
		"\u0000\u0000\u2d12\u2d13\u0001\u0000\u0000\u0000\u2d13\u2d1e\u0001\u0000"+
		"\u0000\u0000\u2d14\u2d16\u0007b\u0000\u0000\u2d15\u2d17\u0003\u0408\u0204"+
		"\u0000\u2d16\u2d15\u0001\u0000\u0000\u0000\u2d16\u2d17\u0001\u0000\u0000"+
		"\u0000\u2d17\u2d1e\u0001\u0000\u0000\u0000\u2d18\u2d1e\u0005\u0365\u0000"+
		"\u0000\u2d19\u2d1e\u0005\u01ce\u0000\u0000\u2d1a\u2d1e\u0005\u0346\u0000"+
		"\u0000\u2d1b\u2d1e\u0005\u0356\u0000\u0000\u2d1c\u2d1e\u0005\u0357\u0000"+
		"\u0000\u2d1d\u2ce5\u0001\u0000\u0000\u0000\u2d1d\u2ce6\u0001\u0000\u0000"+
		"\u0000\u2d1d\u2cf1\u0001\u0000\u0000\u0000\u2d1d\u2cf2\u0001\u0000\u0000"+
		"\u0000\u2d1d\u2cf3\u0001\u0000\u0000\u0000\u2d1d\u2cf4\u0001\u0000\u0000"+
		"\u0000\u2d1d\u2cf8\u0001\u0000\u0000\u0000\u2d1d\u2cfc\u0001\u0000\u0000"+
		"\u0000\u2d1d\u2d00\u0001\u0000\u0000\u0000\u2d1d\u2d04\u0001\u0000\u0000"+
		"\u0000\u2d1d\u2d08\u0001\u0000\u0000\u0000\u2d1d\u2d0c\u0001\u0000\u0000"+
		"\u0000\u2d1d\u2d10\u0001\u0000\u0000\u0000\u2d1d\u2d14\u0001\u0000\u0000"+
		"\u0000\u2d1d\u2d18\u0001\u0000\u0000\u0000\u2d1d\u2d19\u0001\u0000\u0000"+
		"\u0000\u2d1d\u2d1a\u0001\u0000\u0000\u0000\u2d1d\u2d1b\u0001\u0000\u0000"+
		"\u0000\u2d1d\u2d1c\u0001\u0000\u0000\u0000\u2d1e\u040b\u0001\u0000\u0000"+
		"\u0000\u2d1f\u2d36\u0005\u00b0\u0000\u0000\u2d20\u2d36\u0005\u01bf\u0000"+
		"\u0000\u2d21\u2d26\u0003\u03d0\u01e8\u0000\u2d22\u2d23\u0005\u0386\u0000"+
		"\u0000\u2d23\u2d25\u0003\u03d0\u01e8\u0000\u2d24\u2d22\u0001\u0000\u0000"+
		"\u0000\u2d25\u2d28\u0001\u0000\u0000\u0000\u2d26\u2d24\u0001\u0000\u0000"+
		"\u0000\u2d26\u2d27\u0001\u0000\u0000\u0000\u2d27\u2d36\u0001\u0000\u0000"+
		"\u0000\u2d28\u2d26\u0001\u0000\u0000\u0000\u2d29\u2d2a\u0003\u03d0\u01e8"+
		"\u0000\u2d2a\u2d2b\u0005\u0386\u0000\u0000\u2d2b\u2d2c\u0005\u0394\u0000"+
		"\u0000\u2d2c\u2d36\u0001\u0000\u0000\u0000\u2d2d\u2d36\u0003\u0424\u0212"+
		"\u0000\u2d2e\u2d36\u0003\u0420\u0210\u0000\u2d2f\u2d36\u0005\u0347\u0000"+
		"\u0000\u2d30\u2d36\u00052\u0000\u0000\u2d31\u2d36\u0005L\u0000\u0000\u2d32"+
		"\u2d36\u0005]\u0000\u0000\u2d33\u2d36\u0005\u01b2\u0000\u0000\u2d34\u2d36"+
		"\u0005\u01cf\u0000\u0000\u2d35\u2d1f\u0001\u0000\u0000\u0000\u2d35\u2d20"+
		"\u0001\u0000\u0000\u0000\u2d35\u2d21\u0001\u0000\u0000\u0000\u2d35\u2d29"+
		"\u0001\u0000\u0000\u0000\u2d35\u2d2d\u0001\u0000\u0000\u0000\u2d35\u2d2e"+
		"\u0001\u0000\u0000\u0000\u2d35\u2d2f\u0001\u0000\u0000\u0000\u2d35\u2d30"+
		"\u0001\u0000\u0000\u0000\u2d35\u2d31\u0001\u0000\u0000\u0000\u2d35\u2d32"+
		"\u0001\u0000\u0000\u0000\u2d35\u2d33\u0001\u0000\u0000\u0000\u2d35\u2d34"+
		"\u0001\u0000\u0000\u0000\u2d36\u040d\u0001\u0000\u0000\u0000\u2d37\u2d38"+
		"\u0005\u01e5\u0000\u0000\u2d38\u2d39\u0005`\u0000\u0000\u2d39\u2d3a\u0003"+
		"\u03f4\u01fa\u0000\u2d3a\u040f\u0001\u0000\u0000\u0000\u2d3b\u2d3c\u0007"+
		"c\u0000\u0000\u2d3c\u0411\u0001\u0000\u0000\u0000\u2d3d\u2d3e\u0005\u01ea"+
		"\u0000\u0000\u2d3e\u2d3f\u0005\u038a\u0000\u0000\u2d3f\u2d41\u0003\u0482"+
		"\u0241\u0000\u2d40\u2d42\u0003\u040e\u0207\u0000\u2d41\u2d40\u0001\u0000"+
		"\u0000\u0000\u2d41\u2d42\u0001\u0000\u0000\u0000\u2d42\u2d43\u0001\u0000"+
		"\u0000\u0000\u2d43\u2d44\u0005\u038b\u0000\u0000\u2d44\u2d4e\u0001\u0000"+
		"\u0000\u0000\u2d45\u2d46\u0005\u01ea\u0000\u0000\u2d46\u2d47\u0005\u038a"+
		"\u0000\u0000\u2d47\u2d48\u0003\u040e\u0207\u0000\u2d48\u2d49\u0005\u038b"+
		"\u0000\u0000\u2d49\u2d4e\u0001\u0000\u0000\u0000\u2d4a\u2d4b\u0005\u01ea"+
		"\u0000\u0000\u2d4b\u2d4c\u0005\u038a\u0000\u0000\u2d4c\u2d4e\u0005\u038b"+
		"\u0000\u0000\u2d4d\u2d3d\u0001\u0000\u0000\u0000\u2d4d\u2d45\u0001\u0000"+
		"\u0000\u0000\u2d4d\u2d4a\u0001\u0000\u0000\u0000\u2d4e\u0413\u0001\u0000"+
		"\u0000\u0000\u2d4f\u2d9d\u0003\u04ce\u0267\u0000\u2d50\u2d51\u0003\u03d8"+
		"\u01ec\u0000\u2d51\u2d52\u0005\u038a\u0000\u0000\u2d52\u2d57\u0003\u03f6"+
		"\u01fb\u0000\u2d53\u2d54\u0005\u0390\u0000\u0000\u2d54\u2d56\u0003\u03f6"+
		"\u01fb\u0000\u2d55\u2d53\u0001\u0000\u0000\u0000\u2d56\u2d59\u0001\u0000"+
		"\u0000\u0000\u2d57\u2d55\u0001\u0000\u0000\u0000\u2d57\u2d58\u0001\u0000"+
		"\u0000\u0000\u2d58\u2d5a\u0001\u0000\u0000\u0000\u2d59\u2d57\u0001\u0000"+
		"\u0000\u0000";
	private static final String _serializedATNSegment5 =
		"\u2d5a\u2d5b\u0005\u038b\u0000\u0000\u2d5b\u2d9d\u0001\u0000\u0000\u0000"+
		"\u2d5c\u2d5d\u0003\u03da\u01ed\u0000\u2d5d\u2d5e\u0005\u038a\u0000\u0000"+
		"\u2d5e\u2d5f\u0003\u03f6\u01fb\u0000\u2d5f\u2d60\u0005\u0390\u0000\u0000"+
		"\u2d60\u2d61\u0003\u03f6\u01fb\u0000\u2d61\u2d62\u0005\u038b\u0000\u0000"+
		"\u2d62\u2d9d\u0001\u0000\u0000\u0000\u2d63\u2d64\u0003\u03dc\u01ee\u0000"+
		"\u2d64\u2d65\u0005\u038a\u0000\u0000\u2d65\u2d66\u0003\u03f6\u01fb\u0000"+
		"\u2d66\u2d67\u0005\u0390\u0000\u0000\u2d67\u2d6c\u0003\u03f6\u01fb\u0000"+
		"\u2d68\u2d69\u0005\u0390\u0000\u0000\u2d69\u2d6b\u0003\u03f6\u01fb\u0000"+
		"\u2d6a\u2d68\u0001\u0000\u0000\u0000\u2d6b\u2d6e\u0001\u0000\u0000\u0000"+
		"\u2d6c\u2d6a\u0001\u0000\u0000\u0000\u2d6c\u2d6d\u0001\u0000\u0000\u0000"+
		"\u2d6d\u2d6f\u0001\u0000\u0000\u0000\u2d6e\u2d6c\u0001\u0000\u0000\u0000"+
		"\u2d6f\u2d70\u0005\u038b\u0000\u0000\u2d70\u2d9d\u0001\u0000\u0000\u0000"+
		"\u2d71\u2d72\u0003\u03de\u01ef\u0000\u2d72\u2d73\u0005\u038a\u0000\u0000"+
		"\u2d73\u2d74\u0003\u03f6\u01fb\u0000\u2d74\u2d75\u0005\u0390\u0000\u0000"+
		"\u2d75\u2d76\u0003\u03f6\u01fb\u0000\u2d76\u2d77\u0005\u0390\u0000\u0000"+
		"\u2d77\u2d78\u0003\u03f6\u01fb\u0000\u2d78\u2d79\u0005\u038b\u0000\u0000"+
		"\u2d79\u2d9d\u0001\u0000\u0000\u0000\u2d7a\u2d9d\u0003\u041c\u020e\u0000"+
		"\u2d7b\u2d9d\u0003\u041e\u020f\u0000\u2d7c\u2d7d\u0003\u03ea\u01f5\u0000"+
		"\u2d7d\u2d7f\u0005\u038a\u0000\u0000\u2d7e\u2d80\u0003\u03f2\u01f9\u0000"+
		"\u2d7f\u2d7e\u0001\u0000\u0000\u0000\u2d7f\u2d80\u0001\u0000\u0000\u0000"+
		"\u2d80\u2d81\u0001\u0000\u0000\u0000\u2d81\u2d82\u0005\u038b\u0000\u0000"+
		"\u2d82\u2d9d\u0001\u0000\u0000\u0000\u2d83\u2d84\u0003\u03ea\u01f5\u0000"+
		"\u2d84\u2d85\u0005\u038a\u0000\u0000\u2d85\u2d86\u0003\u0416\u020b\u0000"+
		"\u2d86\u2d87\u0005\u038b\u0000\u0000\u2d87\u2d9d\u0001\u0000\u0000\u0000"+
		"\u2d88\u2d89\u0003\u03e0\u01f0\u0000\u2d89\u2d8a\u0005\u038a\u0000\u0000"+
		"\u2d8a\u2d8b\u0003\u03f2\u01f9\u0000\u2d8b\u2d8c\u0005\u038b\u0000\u0000"+
		"\u2d8c\u2d9d\u0001\u0000\u0000\u0000\u2d8d\u2d8e\u0007R\u0000\u0000\u2d8e"+
		"\u2d8f\u0005\u038a\u0000\u0000\u2d8f\u2d90\u0003\u03f6\u01fb\u0000\u2d90"+
		"\u2d91\u0005\u038b\u0000\u0000\u2d91\u2d9d\u0001\u0000\u0000\u0000\u2d92"+
		"\u2d93\u0007d\u0000\u0000\u2d93\u2d94\u0005\u038a\u0000\u0000\u2d94\u2d95"+
		"\u0003\u03f6\u01fb\u0000\u2d95\u2d96\u0005\u038b\u0000\u0000\u2d96\u2d9d"+
		"\u0001\u0000\u0000\u0000\u2d97\u2d98\u0005\u02fa\u0000\u0000\u2d98\u2d99"+
		"\u0005\u038a\u0000\u0000\u2d99\u2d9a\u0003\u03f6\u01fb\u0000\u2d9a\u2d9b"+
		"\u0005\u038b\u0000\u0000\u2d9b\u2d9d\u0001\u0000\u0000\u0000\u2d9c\u2d4f"+
		"\u0001\u0000\u0000\u0000\u2d9c\u2d50\u0001\u0000\u0000\u0000\u2d9c\u2d5c"+
		"\u0001\u0000\u0000\u0000\u2d9c\u2d63\u0001\u0000\u0000\u0000\u2d9c\u2d71"+
		"\u0001\u0000\u0000\u0000\u2d9c\u2d7a\u0001\u0000\u0000\u0000\u2d9c\u2d7b"+
		"\u0001\u0000\u0000\u0000\u2d9c\u2d7c\u0001\u0000\u0000\u0000\u2d9c\u2d83"+
		"\u0001\u0000\u0000\u0000\u2d9c\u2d88\u0001\u0000\u0000\u0000\u2d9c\u2d8d"+
		"\u0001\u0000\u0000\u0000\u2d9c\u2d92\u0001\u0000\u0000\u0000\u2d9c\u2d97"+
		"\u0001\u0000\u0000\u0000\u2d9d\u0415\u0001\u0000\u0000\u0000\u2d9e\u2da3"+
		"\u0003\u0418\u020c\u0000\u2d9f\u2da0\u0005\u0390\u0000\u0000\u2da0\u2da2"+
		"\u0003\u0418\u020c\u0000\u2da1\u2d9f\u0001\u0000\u0000\u0000\u2da2\u2da5"+
		"\u0001\u0000\u0000\u0000\u2da3\u2da1\u0001\u0000\u0000\u0000\u2da3\u2da4"+
		"\u0001\u0000\u0000\u0000\u2da4\u0417\u0001\u0000\u0000\u0000\u2da5\u2da3"+
		"\u0001\u0000\u0000\u0000\u2da6\u2da7\u0003\u03d0\u01e8\u0000\u2da7\u2da8"+
		"\u0005\u037d\u0000\u0000\u2da8\u2da9\u0003\u03f6\u01fb\u0000\u2da9\u0419"+
		"\u0001\u0000\u0000\u0000\u2daa\u2dab\u0007e\u0000\u0000\u2dab\u2dac\u0005"+
		"\u01be\u0000\u0000\u2dac\u041b\u0001\u0000\u0000\u0000\u2dad\u2dae\u0007"+
		"f\u0000\u0000\u2dae\u2daf\u0005\u038a\u0000\u0000\u2daf\u2db0\u0005\u038b"+
		"\u0000\u0000\u2db0\u2dd1\u0003\u0412\u0209\u0000\u2db1\u2db2\u0005\u01bc"+
		"\u0000\u0000\u2db2\u2db3\u0005\u038a\u0000\u0000\u2db3\u2db4\u0003\u03f6"+
		"\u01fb\u0000\u2db4\u2db5\u0005\u038b\u0000\u0000\u2db5\u2db6\u0003\u0412"+
		"\u0209\u0000\u2db6\u2dd1\u0001\u0000\u0000\u0000\u2db7\u2db8\u0007g\u0000"+
		"\u0000\u2db8\u2db9\u0005\u038a\u0000\u0000\u2db9\u2dbf\u0003\u03f6\u01fb"+
		"\u0000\u2dba\u2dbb\u0005\u0390\u0000\u0000\u2dbb\u2dbc\u0003\u03f6\u01fb"+
		"\u0000\u2dbc\u2dbd\u0005\u0390\u0000\u0000\u2dbd\u2dbe\u0003\u03f6\u01fb"+
		"\u0000\u2dbe\u2dc0\u0001\u0000\u0000\u0000\u2dbf\u2dba\u0001\u0000\u0000"+
		"\u0000\u2dbf\u2dc0\u0001\u0000\u0000\u0000\u2dc0\u2dc1\u0001\u0000\u0000"+
		"\u0000\u2dc1\u2dc3\u0005\u038b\u0000\u0000\u2dc2\u2dc4\u0003\u041a\u020d"+
		"\u0000\u2dc3\u2dc2\u0001\u0000\u0000\u0000\u2dc3\u2dc4\u0001\u0000\u0000"+
		"\u0000\u2dc4\u2dc5\u0001\u0000\u0000\u0000\u2dc5\u2dc6\u0003\u0412\u0209"+
		"\u0000\u2dc6\u2dd1\u0001\u0000\u0000\u0000\u2dc7\u2dc8\u0007h\u0000\u0000"+
		"\u2dc8\u2dc9\u0005\u038a\u0000\u0000\u2dc9\u2dca\u0003\u03f6\u01fb\u0000"+
		"\u2dca\u2dcc\u0005\u038b\u0000\u0000\u2dcb\u2dcd\u0003\u041a\u020d\u0000"+
		"\u2dcc\u2dcb\u0001\u0000\u0000\u0000\u2dcc\u2dcd\u0001\u0000\u0000\u0000"+
		"\u2dcd\u2dce\u0001\u0000\u0000\u0000\u2dce\u2dcf\u0003\u0412\u0209\u0000"+
		"\u2dcf\u2dd1\u0001\u0000\u0000\u0000\u2dd0\u2dad\u0001\u0000\u0000\u0000"+
		"\u2dd0\u2db1\u0001\u0000\u0000\u0000\u2dd0\u2db7\u0001\u0000\u0000\u0000"+
		"\u2dd0\u2dc7\u0001\u0000\u0000\u0000\u2dd1\u041d\u0001\u0000\u0000\u0000"+
		"\u2dd2\u2dd3\u0003\u03d0\u01e8\u0000\u2dd3\u2dd5\u0005\u038a\u0000\u0000"+
		"\u2dd4\u2dd6\u0005\u00c7\u0000\u0000\u2dd5\u2dd4\u0001\u0000\u0000\u0000"+
		"\u2dd5\u2dd6\u0001\u0000\u0000\u0000\u2dd6\u2dd7\u0001\u0000\u0000\u0000"+
		"\u2dd7\u2dd8\u0003\u03f2\u01f9\u0000\u2dd8\u2dd9\u0005\u038b\u0000\u0000"+
		"\u2dd9\u2df3\u0001\u0000\u0000\u0000\u2dda\u2ddb\u0003\u03d0\u01e8\u0000"+
		"\u2ddb\u2ddc\u0005\u038a\u0000\u0000\u2ddc\u2ddd\u0005\u0394\u0000\u0000"+
		"\u2ddd\u2dde\u0005\u038b\u0000\u0000\u2dde\u2df3\u0001\u0000\u0000\u0000"+
		"\u2ddf\u2de0\u0007i\u0000\u0000\u2de0\u2de2\u0005\u038a\u0000\u0000\u2de1"+
		"\u2de3\u0005\u00c7\u0000\u0000\u2de2\u2de1\u0001\u0000\u0000\u0000\u2de2"+
		"\u2de3\u0001\u0000\u0000\u0000\u2de3\u2de4\u0001\u0000\u0000\u0000\u2de4"+
		"\u2de7\u0003\u03f6\u01fb\u0000\u2de5\u2de6\u0005\u0390\u0000\u0000\u2de6"+
		"\u2de8\u0003\u03ca\u01e5\u0000\u2de7\u2de5\u0001\u0000\u0000\u0000\u2de7"+
		"\u2de8\u0001\u0000\u0000\u0000\u2de8\u2de9\u0001\u0000\u0000\u0000\u2de9"+
		"\u2df0\u0005\u038b\u0000\u0000\u2dea\u2deb\u0005\u0337\u0000\u0000\u2deb"+
		"\u2dec\u0005\u012c\u0000\u0000\u2dec\u2ded\u0005\u038a\u0000\u0000\u2ded"+
		"\u2dee\u0003\u04c4\u0262\u0000\u2dee\u2def\u0005\u038b\u0000\u0000\u2def"+
		"\u2df1\u0001\u0000\u0000\u0000\u2df0\u2dea\u0001\u0000\u0000\u0000\u2df0"+
		"\u2df1\u0001\u0000\u0000\u0000\u2df1\u2df3\u0001\u0000\u0000\u0000\u2df2"+
		"\u2dd2\u0001\u0000\u0000\u0000\u2df2\u2dda\u0001\u0000\u0000\u0000\u2df2"+
		"\u2ddf\u0001\u0000\u0000\u0000\u2df3\u041f\u0001\u0000\u0000\u0000\u2df4"+
		"\u2e01\u0005\u0377\u0000\u0000\u2df5\u2df7\u0003\u0422\u0211\u0000\u2df6"+
		"\u2df5\u0001\u0000\u0000\u0000\u2df6\u2df7\u0001\u0000\u0000\u0000\u2df7"+
		"\u2df8\u0001\u0000\u0000\u0000\u2df8\u2e01\u0005\u0378\u0000\u0000\u2df9"+
		"\u2dfb\u0003\u0422\u0211\u0000\u2dfa\u2df9\u0001\u0000\u0000\u0000\u2dfa"+
		"\u2dfb\u0001\u0000\u0000\u0000\u2dfb\u2dfc\u0001\u0000\u0000\u0000\u2dfc"+
		"\u2e01\u0007j\u0000\u0000\u2dfd\u2e01\u0003\u0208\u0104\u0000\u2dfe\u2e01"+
		"\u0005\u01bf\u0000\u0000\u2dff\u2e01\u0005\u0388\u0000\u0000\u2e00\u2df4"+
		"\u0001\u0000\u0000\u0000\u2e00\u2df6\u0001\u0000\u0000\u0000\u2e00\u2dfa"+
		"\u0001\u0000\u0000\u0000\u2e00\u2dfd\u0001\u0000\u0000\u0000\u2e00\u2dfe"+
		"\u0001\u0000\u0000\u0000\u2e00\u2dff\u0001\u0000\u0000\u0000\u2e01\u0421"+
		"\u0001\u0000\u0000\u0000\u2e02\u2e03\u0007W\u0000\u0000\u2e03\u0423\u0001"+
		"\u0000\u0000\u0000\u2e04\u2e06\u0003\u03d0\u01e8\u0000\u2e05\u2e04\u0001"+
		"\u0000\u0000\u0000\u2e05\u2e06\u0001\u0000\u0000\u0000\u2e06\u2e07\u0001"+
		"\u0000\u0000\u0000\u2e07\u2e09\u0005\u0386\u0000\u0000\u2e08\u2e0a\u0003"+
		"\u03d0\u01e8\u0000\u2e09\u2e08\u0001\u0000\u0000\u0000\u2e09\u2e0a\u0001"+
		"\u0000\u0000\u0000\u2e0a\u2e0b\u0001\u0000\u0000\u0000\u2e0b\u2e0d\u0005"+
		"\u0386\u0000\u0000\u2e0c\u2e0e\u0003\u03d0\u01e8\u0000\u2e0d\u2e0c\u0001"+
		"\u0000\u0000\u0000\u2e0d\u2e0e\u0001\u0000\u0000\u0000\u2e0e\u2e0f\u0001"+
		"\u0000\u0000\u0000\u2e0f\u2e10\u0005\u0386\u0000\u0000\u2e10\u2e21\u0003"+
		"\u03d0\u01e8\u0000\u2e11\u2e13\u0003\u03d0\u01e8\u0000\u2e12\u2e11\u0001"+
		"\u0000\u0000\u0000\u2e12\u2e13\u0001\u0000\u0000\u0000\u2e13\u2e14\u0001"+
		"\u0000\u0000\u0000\u2e14\u2e16\u0005\u0386\u0000\u0000\u2e15\u2e17\u0003"+
		"\u03d0\u01e8\u0000\u2e16\u2e15\u0001\u0000\u0000\u0000\u2e16\u2e17\u0001"+
		"\u0000\u0000\u0000\u2e17\u2e18\u0001\u0000\u0000\u0000\u2e18\u2e19\u0005"+
		"\u0386\u0000\u0000\u2e19\u2e21\u0003\u03d0\u01e8\u0000\u2e1a\u2e1c\u0003"+
		"\u03d0\u01e8\u0000\u2e1b\u2e1a\u0001\u0000\u0000\u0000\u2e1b\u2e1c\u0001"+
		"\u0000\u0000\u0000\u2e1c\u2e1d\u0001\u0000\u0000\u0000\u2e1d\u2e1e\u0005"+
		"\u0386\u0000\u0000\u2e1e\u2e21\u0003\u03d0\u01e8\u0000\u2e1f\u2e21\u0003"+
		"\u03d0\u01e8\u0000\u2e20\u2e05\u0001\u0000\u0000\u0000\u2e20\u2e12\u0001"+
		"\u0000\u0000\u0000\u2e20\u2e1b\u0001\u0000\u0000\u0000\u2e20\u2e1f\u0001"+
		"\u0000\u0000\u0000\u2e21\u0425\u0001\u0000\u0000\u0000\u2e22\u2e23\u0005"+
		"\u038a\u0000\u0000\u2e23\u2e24\u0003\u03f2\u01f9\u0000\u2e24\u2e25\u0005"+
		"\u038b\u0000\u0000\u2e25\u2e2b\u0001\u0000\u0000\u0000\u2e26\u2e27\u0005"+
		"\u038a\u0000\u0000\u2e27\u2e28\u0003\u04b2\u0259\u0000\u2e28\u2e29\u0005"+
		"\u038b\u0000\u0000\u2e29\u2e2b\u0001\u0000\u0000\u0000\u2e2a\u2e22\u0001"+
		"\u0000\u0000\u0000\u2e2a\u2e26\u0001\u0000\u0000\u0000\u2e2b\u0427\u0001"+
		"\u0000\u0000\u0000\u2e2c\u2e2d\u0005f\u0000\u0000\u2e2d\u2e2f\u0003\u03f6"+
		"\u01fb\u0000\u2e2e\u2e30\u0003\u042c\u0216\u0000\u2e2f\u2e2e\u0001\u0000"+
		"\u0000\u0000\u2e30\u2e31\u0001\u0000\u0000\u0000\u2e31\u2e2f\u0001\u0000"+
		"\u0000\u0000\u2e31\u2e32\u0001\u0000\u0000\u0000\u2e32\u2e35\u0001\u0000"+
		"\u0000\u0000\u2e33\u2e34\u0005\u00ce\u0000\u0000\u2e34\u2e36\u0003\u03f6"+
		"\u01fb\u0000\u2e35\u2e33\u0001\u0000\u0000\u0000\u2e35\u2e36\u0001\u0000"+
		"\u0000\u0000\u2e36\u2e37\u0001\u0000\u0000\u0000\u2e37\u2e38\u0005\u00db"+
		"\u0000\u0000\u2e38\u2e46\u0001\u0000\u0000\u0000\u2e39\u2e3b\u0005f\u0000"+
		"\u0000\u2e3a\u2e3c\u0003\u042a\u0215\u0000\u2e3b\u2e3a\u0001\u0000\u0000"+
		"\u0000\u2e3c\u2e3d\u0001\u0000\u0000\u0000\u2e3d\u2e3b\u0001\u0000\u0000"+
		"\u0000\u2e3d\u2e3e\u0001\u0000\u0000\u0000\u2e3e\u2e41\u0001\u0000\u0000"+
		"\u0000\u2e3f\u2e40\u0005\u00ce\u0000\u0000\u2e40\u2e42\u0003\u03f6\u01fb"+
		"\u0000\u2e41\u2e3f\u0001\u0000\u0000\u0000\u2e41\u2e42\u0001\u0000\u0000"+
		"\u0000\u2e42\u2e43\u0001\u0000\u0000\u0000\u2e43\u2e44\u0005\u00db\u0000"+
		"\u0000\u2e44\u2e46\u0001\u0000\u0000\u0000\u2e45\u2e2c\u0001\u0000\u0000"+
		"\u0000\u2e45\u2e39\u0001\u0000\u0000\u0000\u2e46\u0429\u0001\u0000\u0000"+
		"\u0000\u2e47\u2e48\u0005\u0334\u0000\u0000\u2e48\u2e49\u0003\u04ac\u0256"+
		"\u0000\u2e49\u2e4a\u0005\u02e3\u0000\u0000\u2e4a\u2e4b\u0003\u03f6\u01fb"+
		"\u0000\u2e4b\u042b\u0001\u0000\u0000\u0000\u2e4c\u2e4d\u0005\u0334\u0000"+
		"\u0000\u2e4d\u2e4e\u0003\u03f6\u01fb\u0000\u2e4e\u2e4f\u0005\u02e3\u0000"+
		"\u0000\u2e4f\u2e50\u0003\u03f6\u01fb\u0000\u2e50\u042d\u0001\u0000\u0000"+
		"\u0000\u2e51\u2e53\u0003\u0430\u0218\u0000\u2e52\u2e51\u0001\u0000\u0000"+
		"\u0000\u2e52\u2e53\u0001\u0000\u0000\u0000\u2e53\u2e54\u0001\u0000\u0000"+
		"\u0000\u2e54\u2e58\u0003\u0438\u021c\u0000\u2e55\u2e57\u0003\u0436\u021b"+
		"\u0000\u2e56\u2e55\u0001\u0000\u0000\u0000\u2e57\u2e5a\u0001\u0000\u0000"+
		"\u0000\u2e58\u2e56\u0001\u0000\u0000\u0000\u2e58\u2e59\u0001\u0000\u0000"+
		"\u0000\u2e59\u042f\u0001\u0000\u0000\u0000\u2e5a\u2e58\u0001\u0000\u0000"+
		"\u0000\u2e5b\u2e5d\u0005\u0336\u0000\u0000\u2e5c\u2e5e\u0005\u0231\u0000"+
		"\u0000\u2e5d\u2e5c\u0001\u0000\u0000\u0000\u2e5d\u2e5e\u0001\u0000\u0000"+
		"\u0000\u2e5e\u2e5f\u0001\u0000\u0000\u0000\u2e5f\u2e64\u0003\u0432\u0219"+
		"\u0000\u2e60\u2e61\u0005\u0390\u0000\u0000\u2e61\u2e63\u0003\u0432\u0219"+
		"\u0000\u2e62\u2e60\u0001\u0000\u0000\u0000\u2e63\u2e66\u0001\u0000\u0000"+
		"\u0000\u2e64\u2e62\u0001\u0000\u0000\u0000\u2e64\u2e65\u0001\u0000\u0000"+
		"\u0000\u2e65\u0431\u0001\u0000\u0000\u0000\u2e66\u2e64\u0001\u0000\u0000"+
		"\u0000\u2e67\u2e6c\u0003\u03ec\u01f6\u0000\u2e68\u2e69\u0005\u038a\u0000"+
		"\u0000\u2e69\u2e6a\u0003\u03e6\u01f3\u0000\u2e6a\u2e6b\u0005\u038b\u0000"+
		"\u0000\u2e6b\u2e6d\u0001\u0000\u0000\u0000\u2e6c\u2e68\u0001\u0000\u0000"+
		"\u0000\u2e6c\u2e6d\u0001\u0000\u0000\u0000\u2e6d\u2e6e\u0001\u0000\u0000"+
		"\u0000\u2e6e\u2e6f\u0005+\u0000\u0000\u2e6f\u2e70\u0003\u0438\u021c\u0000"+
		"\u2e70\u0433\u0001\u0000\u0000\u0000\u2e71\u2e72\u0003\u043c\u021e\u0000"+
		"\u2e72\u2e74\u0003\u043a\u021d\u0000\u2e73\u2e75\u0003\u04ca\u0265\u0000"+
		"\u2e74\u2e73\u0001\u0000\u0000\u0000\u2e74\u2e75\u0001\u0000\u0000\u0000"+
		"\u2e75\u2e7a\u0001\u0000\u0000\u0000\u2e76\u2e77\u0003\u043e\u021f\u0000"+
		"\u2e77\u2e78\u0003\u043a\u021d\u0000\u2e78\u2e7a\u0001\u0000\u0000\u0000"+
		"\u2e79\u2e71\u0001\u0000\u0000\u0000\u2e79\u2e76\u0001\u0000\u0000\u0000"+
		"\u2e7a\u0435\u0001\u0000\u0000\u0000\u2e7b\u2e7d\u0005\u030e\u0000\u0000"+
		"\u2e7c\u2e7e\u0005\u0011\u0000\u0000\u2e7d\u2e7c\u0001\u0000\u0000\u0000"+
		"\u2e7d\u2e7e\u0001\u0000\u0000\u0000\u2e7e\u2e83\u0001\u0000\u0000\u0000"+
		"\u2e7f\u2e83\u0005\u00ea\u0000\u0000\u2e80\u2e83\u0005\u019d\u0000\u0000"+
		"\u2e81\u2e83\u0005\u015a\u0000\u0000\u2e82\u2e7b\u0001\u0000\u0000\u0000"+
		"\u2e82\u2e7f\u0001\u0000\u0000\u0000\u2e82\u2e80\u0001\u0000\u0000\u0000"+
		"\u2e82\u2e81\u0001\u0000\u0000\u0000\u2e83\u2e84\u0001\u0000\u0000\u0000"+
		"\u2e84\u2e87\u0003\u0438\u021c\u0000\u2e85\u2e87\u0003\u0438\u021c\u0000"+
		"\u2e86\u2e82\u0001\u0000\u0000\u0000\u2e86\u2e85\u0001\u0000\u0000\u0000"+
		"\u2e87\u0437\u0001\u0000\u0000\u0000\u2e88\u2e89\u0006\u021c\uffff\uffff"+
		"\u0000\u2e89\u2e8a\u0005\u038a\u0000\u0000\u2e8a\u2e8b\u0003\u0438\u021c"+
		"\u0000\u2e8b\u2e8c\u0005\u038b\u0000\u0000\u2e8c\u2e90\u0001\u0000\u0000"+
		"\u0000\u2e8d\u2e90\u0003\u0434\u021a\u0000\u2e8e\u2e90\u0003\u0430\u0218"+
		"\u0000\u2e8f\u2e88\u0001\u0000\u0000\u0000\u2e8f\u2e8d\u0001\u0000\u0000"+
		"\u0000\u2e8f\u2e8e\u0001\u0000\u0000\u0000\u2e90\u2e95\u0001\u0000\u0000"+
		"\u0000\u2e91\u2e92\n\u0003\u0000\u0000\u2e92\u2e94\u0003\u0436\u021b\u0000"+
		"\u2e93\u2e91\u0001\u0000\u0000\u0000\u2e94\u2e97\u0001\u0000\u0000\u0000"+
		"\u2e95\u2e93\u0001\u0000\u0000\u0000\u2e95\u2e96\u0001\u0000\u0000\u0000"+
		"\u2e96\u0439\u0001\u0000\u0000\u0000\u2e97\u2e95\u0001\u0000\u0000\u0000"+
		"\u2e98\u2e9a\u0003\u045a\u022d\u0000\u2e99\u2e98\u0001\u0000\u0000\u0000"+
		"\u2e99\u2e9a\u0001\u0000\u0000\u0000\u2e9a\u2e9c\u0001\u0000\u0000\u0000"+
		"\u2e9b\u2e9d\u0003\u0460\u0230\u0000\u2e9c\u2e9b\u0001\u0000\u0000\u0000"+
		"\u2e9c\u2e9d\u0001\u0000\u0000\u0000\u2e9d\u2e9f\u0001\u0000\u0000\u0000"+
		"\u2e9e\u2ea0\u0003\u04b6\u025b\u0000\u2e9f\u2e9e\u0001\u0000\u0000\u0000"+
		"\u2e9f\u2ea0\u0001\u0000\u0000\u0000\u2ea0\u2ea3\u0001\u0000\u0000\u0000"+
		"\u2ea1\u2ea4\u0003\u04bc\u025e\u0000\u2ea2\u2ea4\u0003\u04be\u025f\u0000"+
		"\u2ea3\u2ea1\u0001\u0000\u0000\u0000\u2ea3\u2ea2\u0001\u0000\u0000\u0000"+
		"\u2ea3\u2ea4\u0001\u0000\u0000\u0000\u2ea4\u2ea6\u0001\u0000\u0000\u0000"+
		"\u2ea5\u2ea7\u0003\u04c0\u0260\u0000\u2ea6\u2ea5\u0001\u0000\u0000\u0000"+
		"\u2ea6\u2ea7\u0001\u0000\u0000\u0000\u2ea7\u2ea9\u0001\u0000\u0000\u0000"+
		"\u2ea8\u2eaa\u0003\u04c4\u0262\u0000\u2ea9\u2ea8\u0001\u0000\u0000\u0000"+
		"\u2ea9\u2eaa\u0001\u0000\u0000\u0000\u2eaa\u043b\u0001\u0000\u0000\u0000"+
		"\u2eab\u2eac\u0005\u0287\u0000\u0000\u2eac\u2ead\u0003\u0440\u0220\u0000"+
		"\u2ead\u043d\u0001\u0000\u0000\u0000\u2eae\u2eaf\u0005\u0287\u0000\u0000"+
		"\u2eaf\u2eb0\u0003\u0442\u0221\u0000\u2eb0\u043f\u0001\u0000\u0000\u0000"+
		"\u2eb1\u2eb3\u0003\u0456\u022b\u0000\u2eb2\u2eb1\u0001\u0000\u0000\u0000"+
		"\u2eb2\u2eb3\u0001\u0000\u0000\u0000\u2eb3\u2eb4\u0001\u0000\u0000\u0000"+
		"\u2eb4\u2eb5\u0003\u0444\u0222\u0000\u2eb5\u0441\u0001\u0000\u0000\u0000"+
		"\u2eb6\u2eb8\u0003\u0456\u022b\u0000\u2eb7\u2eb6\u0001\u0000\u0000\u0000"+
		"\u2eb7\u2eb8\u0001\u0000\u0000\u0000\u2eb8\u2eba\u0001\u0000\u0000\u0000"+
		"\u2eb9\u2ebb\u0003\u0458\u022c\u0000\u2eba\u2eb9\u0001\u0000\u0000\u0000"+
		"\u2eba\u2ebb\u0001\u0000\u0000\u0000\u2ebb\u2ebc\u0001\u0000\u0000\u0000"+
		"\u2ebc\u2ebd\u0003\u0444\u0222\u0000\u2ebd\u0443\u0001\u0000\u0000\u0000"+
		"\u2ebe\u2ec3\u0003\u0446\u0223\u0000\u2ebf\u2ec0\u0005\u0390\u0000\u0000"+
		"\u2ec0\u2ec2\u0003\u0446\u0223\u0000\u2ec1\u2ebf\u0001\u0000\u0000\u0000"+
		"\u2ec2\u2ec5\u0001\u0000\u0000\u0000\u2ec3\u2ec1\u0001\u0000\u0000\u0000"+
		"\u2ec3\u2ec4\u0001\u0000\u0000\u0000\u2ec4\u2ec7\u0001\u0000\u0000\u0000"+
		"\u2ec5\u2ec3\u0001\u0000\u0000\u0000\u2ec6\u2ec8\u0005\u0390\u0000\u0000"+
		"\u2ec7\u2ec6\u0001\u0000\u0000\u0000\u2ec7\u2ec8\u0001\u0000\u0000\u0000"+
		"\u2ec8\u0445\u0001\u0000\u0000\u0000\u2ec9\u2ecb\u0003\u044a\u0225\u0000"+
		"\u2eca\u2ecc\u0003\u0450\u0228\u0000\u2ecb\u2eca\u0001\u0000\u0000\u0000"+
		"\u2ecb\u2ecc\u0001\u0000\u0000\u0000\u2ecc\u2ed6\u0001\u0000\u0000\u0000"+
		"\u2ecd\u2ecf\u0003\u0448\u0224\u0000\u2ece\u2ed0\u0003\u044e\u0227\u0000"+
		"\u2ecf\u2ece\u0001\u0000\u0000\u0000\u2ecf\u2ed0\u0001\u0000\u0000\u0000"+
		"\u2ed0\u2ed6\u0001\u0000\u0000\u0000\u2ed1\u2ed3\u0003\u0452\u0229\u0000"+
		"\u2ed2\u2ed4\u0003\u0450\u0228\u0000\u2ed3\u2ed2\u0001\u0000\u0000\u0000"+
		"\u2ed3\u2ed4\u0001\u0000\u0000\u0000\u2ed4\u2ed6\u0001\u0000\u0000\u0000"+
		"\u2ed5\u2ec9\u0001\u0000\u0000\u0000\u2ed5\u2ecd\u0001\u0000\u0000\u0000"+
		"\u2ed5\u2ed1\u0001\u0000\u0000\u0000\u2ed6\u0447\u0001\u0000\u0000\u0000"+
		"\u2ed7\u2ed9\u0003\u044c\u0226\u0000\u2ed8\u2ed7\u0001\u0000\u0000\u0000"+
		"\u2ed8\u2ed9\u0001\u0000\u0000\u0000\u2ed9\u2eda\u0001\u0000\u0000\u0000"+
		"\u2eda\u2edb\u0005\u0394\u0000\u0000\u2edb\u0449\u0001\u0000\u0000\u0000"+
		"\u2edc\u2ede\u0003\u044c\u0226\u0000\u2edd\u2edc\u0001\u0000\u0000\u0000"+
		"\u2edd\u2ede\u0001\u0000\u0000\u0000\u2ede\u2edf\u0001\u0000\u0000\u0000"+
		"\u2edf\u2ee6\u0003\u03e4\u01f2\u0000\u2ee0\u2ee2\u0003\u044c\u0226\u0000"+
		"\u2ee1\u2ee0\u0001\u0000\u0000\u0000\u2ee1\u2ee2\u0001\u0000\u0000\u0000"+
		"\u2ee2\u2ee3\u0001\u0000\u0000\u0000\u2ee3\u2ee4\u0005\u0389\u0000\u0000"+
		"\u2ee4\u2ee6\u0003\u0454\u022a\u0000\u2ee5\u2edd\u0001\u0000\u0000\u0000"+
		"\u2ee5\u2ee1\u0001\u0000\u0000\u0000\u2ee6\u044b\u0001\u0000\u0000\u0000"+
		"\u2ee7\u2eec\u0003\u03ea\u01f5\u0000\u2ee8\u2ee9\u0003\u0484\u0242\u0000"+
		"\u2ee9\u2eea\u0005\u0386\u0000\u0000\u2eea\u2eec\u0001\u0000\u0000\u0000"+
		"\u2eeb\u2ee7\u0001\u0000\u0000\u0000\u2eeb\u2ee8\u0001\u0000\u0000\u0000"+
		"\u2eec\u044d\u0001\u0000\u0000\u0000\u2eed\u2ef0\u0005\u00eb\u0000\u0000"+
		"\u2eee\u2ef1\u0003\u03e4\u01f2\u0000\u2eef\u2ef1\u0003\u019c\u00ce\u0000"+
		"\u2ef0\u2eee\u0001\u0000\u0000\u0000\u2ef0\u2eef\u0001\u0000\u0000\u0000"+
		"\u2ef1\u044f\u0001\u0000\u0000\u0000\u2ef2\u2ef4\u0005+\u0000\u0000\u2ef3"+
		"\u2ef2\u0001\u0000\u0000\u0000\u2ef3\u2ef4\u0001\u0000\u0000\u0000\u2ef4"+
		"\u2ef5\u0001\u0000\u0000\u0000\u2ef5\u2ef6\u0003\u0484\u0242\u0000\u2ef6"+
		"\u0451\u0001\u0000\u0000\u0000\u2ef7\u2efa\u0003\u03f6\u01fb\u0000\u2ef8"+
		"\u2efa\u0003\u04b4\u025a\u0000\u2ef9\u2ef7\u0001\u0000\u0000\u0000\u2ef9"+
		"\u2ef8\u0001\u0000\u0000\u0000\u2efa\u0453\u0001\u0000\u0000\u0000\u2efb"+
		"\u2efc\u0003\u03f0\u01f8\u0000\u2efc\u0455\u0001\u0000\u0000\u0000\u2efd"+
		"\u2efe\u0007k\u0000\u0000\u2efe\u0457\u0001\u0000\u0000\u0000\u2eff\u2f00"+
		"\u0005\u02fd\u0000\u0000\u2f00\u2f01\u0003\u03f0\u01f8\u0000\u2f01\u0459"+
		"\u0001\u0000\u0000\u0000\u2f02\u2f03\u0005\u015c\u0000\u0000\u2f03\u2f04"+
		"\u0003\u045c\u022e\u0000\u2f04\u045b\u0001\u0000\u0000\u0000\u2f05\u2f0a"+
		"\u0003\u045e\u022f\u0000\u2f06\u2f07\u0005\u0390\u0000\u0000\u2f07\u2f09"+
		"\u0003\u045e\u022f\u0000\u2f08\u2f06\u0001\u0000\u0000\u0000\u2f09\u2f0c"+
		"\u0001\u0000\u0000\u0000\u2f0a\u2f08\u0001\u0000\u0000\u0000\u2f0a\u2f0b"+
		"\u0001\u0000\u0000\u0000\u2f0b\u045d\u0001\u0000\u0000\u0000\u2f0c\u2f0a"+
		"\u0001\u0000\u0000\u0000\u2f0d\u2f0e\u0005\u0392\u0000\u0000\u2f0e\u2f0f"+
		"\u0003\u03d0\u01e8\u0000\u2f0f\u045f\u0001\u0000\u0000\u0000\u2f10\u2f11"+
		"\u0005\u0117\u0000\u0000\u2f11\u2f12\u0003\u0462\u0231\u0000\u2f12\u0461"+
		"\u0001\u0000\u0000\u0000\u2f13\u2f18\u0003\u0464\u0232\u0000\u2f14\u2f15"+
		"\u0005\u0390\u0000\u0000\u2f15\u2f17\u0003\u0464\u0232\u0000\u2f16\u2f14"+
		"\u0001\u0000\u0000\u0000\u2f17\u2f1a\u0001\u0000\u0000\u0000\u2f18\u2f16"+
		"\u0001\u0000\u0000\u0000\u2f18\u2f19\u0001\u0000\u0000\u0000\u2f19\u0463"+
		"\u0001\u0000\u0000\u0000\u2f1a\u2f18\u0001\u0000\u0000\u0000\u2f1b\u2f1c"+
		"\u0003\u0466\u0233\u0000\u2f1c\u0465\u0001\u0000\u0000\u0000\u2f1d\u2f21"+
		"\u0003\u0468\u0234\u0000\u2f1e\u2f20\u0003\u0478\u023c\u0000\u2f1f\u2f1e"+
		"\u0001\u0000\u0000\u0000\u2f20\u2f23\u0001\u0000\u0000\u0000\u2f21\u2f1f"+
		"\u0001\u0000\u0000\u0000\u2f21\u2f22\u0001\u0000\u0000\u0000\u2f22\u2f2e"+
		"\u0001\u0000\u0000\u0000\u2f23\u2f21\u0001\u0000\u0000\u0000\u2f24\u2f25"+
		"\u0005\u038a\u0000\u0000\u2f25\u2f26\u0003\u0466\u0233\u0000\u2f26\u2f2a"+
		"\u0005\u038b\u0000\u0000\u2f27\u2f29\u0003\u0478\u023c\u0000\u2f28\u2f27"+
		"\u0001\u0000\u0000\u0000\u2f29\u2f2c\u0001\u0000\u0000\u0000\u2f2a\u2f28"+
		"\u0001\u0000\u0000\u0000\u2f2a\u2f2b\u0001\u0000\u0000\u0000\u2f2b\u2f2e"+
		"\u0001\u0000\u0000\u0000\u2f2c\u2f2a\u0001\u0000\u0000\u0000\u2f2d\u2f1d"+
		"\u0001\u0000\u0000\u0000\u2f2d\u2f24\u0001\u0000\u0000\u0000\u2f2e\u0467"+
		"\u0001\u0000\u0000\u0000\u2f2f\u2f31\u0003\u03ea\u01f5\u0000\u2f30\u2f32"+
		"\u0003\u047a\u023d\u0000\u2f31\u2f30\u0001\u0000\u0000\u0000\u2f31\u2f32"+
		"\u0001\u0000\u0000\u0000\u2f32\u2f34\u0001\u0000\u0000\u0000\u2f33\u2f35"+
		"\u0003\u047e\u023f\u0000\u2f34\u2f33\u0001\u0000\u0000\u0000\u2f34\u2f35"+
		"\u0001\u0000\u0000\u0000\u2f35\u2f37\u0001\u0000\u0000\u0000\u2f36\u2f38"+
		"\u0003\u0498\u024c\u0000\u2f37\u2f36\u0001\u0000\u0000\u0000\u2f37\u2f38"+
		"\u0001\u0000\u0000\u0000\u2f38\u2f3a\u0001\u0000\u0000\u0000\u2f39\u2f3b"+
		"\u0003\u049a\u024d\u0000\u2f3a\u2f39\u0001\u0000\u0000\u0000\u2f3a\u2f3b"+
		"\u0001\u0000\u0000\u0000\u2f3b\u2f3d\u0001\u0000\u0000\u0000\u2f3c\u2f3e"+
		"\u0003\u0450\u0228\u0000\u2f3d\u2f3c\u0001\u0000\u0000\u0000\u2f3d\u2f3e"+
		"\u0001\u0000\u0000\u0000\u2f3e\u2f40\u0001\u0000\u0000\u0000\u2f3f\u2f41"+
		"\u0003\u019c\u00ce\u0000\u2f40\u2f3f\u0001\u0000\u0000\u0000\u2f40\u2f41"+
		"\u0001\u0000\u0000\u0000\u2f41\u2f43\u0001\u0000\u0000\u0000\u2f42\u2f44"+
		"\u0003\u04aa\u0255\u0000\u2f43\u2f42\u0001\u0000\u0000\u0000\u2f43\u2f44"+
		"\u0001\u0000\u0000\u0000\u2f44\u2f77\u0001\u0000\u0000\u0000\u2f45\u2f46"+
		"\u0003\u03ea\u01f5\u0000\u2f46\u2f47\u0005\u02b1\u0000\u0000\u2f47\u2f48"+
		"\u0005\u0336\u0000\u0000\u2f48\u2f49\u0003\u04b4\u025a\u0000\u2f49\u2f4a"+
		"\u0005\u008d\u0000\u0000\u2f4a\u2f4c\u0005`\u0000\u0000\u2f4b\u2f4d\u0003"+
		"\u0470\u0238\u0000\u2f4c\u2f4b\u0001\u0000\u0000\u0000\u2f4c\u2f4d\u0001"+
		"\u0000\u0000\u0000\u2f4d\u2f77\u0001\u0000\u0000\u0000\u2f4e\u2f4f\u0005"+
		"\u02d4\u0000\u0000\u2f4f\u2f50\u0005\u038a\u0000\u0000\u2f50\u2f51\u0003"+
		"\u0414\u020a\u0000\u2f51\u2f53\u0005\u038b\u0000\u0000\u2f52\u2f54\u0003"+
		"\u049a\u024d\u0000\u2f53\u2f52\u0001\u0000\u0000\u0000\u2f53\u2f54\u0001"+
		"\u0000\u0000\u0000\u2f54\u2f56\u0001\u0000\u0000\u0000\u2f55\u2f57\u0003"+
		"\u0450\u0228\u0000\u2f56\u2f55\u0001\u0000\u0000\u0000\u2f56\u2f57\u0001"+
		"\u0000\u0000\u0000\u2f57\u2f59\u0001\u0000\u0000\u0000\u2f58\u2f5a\u0003"+
		"\u04aa\u0255\u0000\u2f59\u2f58\u0001\u0000\u0000\u0000\u2f59\u2f5a\u0001"+
		"\u0000\u0000\u0000\u2f5a\u2f77\u0001\u0000\u0000\u0000\u2f5b\u2f5d\u0003"+
		"\u04a0\u0250\u0000\u2f5c\u2f5e\u0003\u04aa\u0255\u0000\u2f5d\u2f5c\u0001"+
		"\u0000\u0000\u0000\u2f5d\u2f5e\u0001\u0000\u0000\u0000\u2f5e\u2f77\u0001"+
		"\u0000\u0000\u0000\u2f5f\u2f61\u0005\u0172\u0000\u0000\u2f60\u2f5f\u0001"+
		"\u0000\u0000\u0000\u2f60\u2f61\u0001\u0000\u0000\u0000\u2f61\u2f62\u0001"+
		"\u0000\u0000\u0000\u2f62\u2f63\u0005\u038a\u0000\u0000\u2f63\u2f64\u0003"+
		"\u04b2\u0259\u0000\u2f64\u2f66\u0005\u038b\u0000\u0000\u2f65\u2f67\u0003"+
		"\u049a\u024d\u0000\u2f66\u2f65\u0001\u0000\u0000\u0000\u2f66\u2f67\u0001"+
		"\u0000\u0000\u0000\u2f67\u2f69\u0001\u0000\u0000\u0000\u2f68\u2f6a\u0003"+
		"\u0450\u0228\u0000\u2f69\u2f68\u0001\u0000\u0000\u0000\u2f69\u2f6a\u0001"+
		"\u0000\u0000\u0000\u2f6a\u2f6c\u0001\u0000\u0000\u0000\u2f6b\u2f6d\u0003"+
		"\u019c\u00ce\u0000\u2f6c\u2f6b\u0001\u0000\u0000\u0000\u2f6c\u2f6d\u0001"+
		"\u0000\u0000\u0000\u2f6d\u2f77\u0001\u0000\u0000\u0000\u2f6e\u2f71\u0005"+
		"\u0172\u0000\u0000\u2f6f\u2f72\u0003\u046c\u0236\u0000\u2f70\u2f72\u0003"+
		"\u046e\u0237\u0000\u2f71\u2f6f\u0001\u0000\u0000\u0000\u2f71\u2f70\u0001"+
		"\u0000\u0000\u0000\u2f72\u2f74\u0001\u0000\u0000\u0000\u2f73\u2f75\u0003"+
		"\u0450\u0228\u0000\u2f74\u2f73\u0001\u0000\u0000\u0000\u2f74\u2f75\u0001"+
		"\u0000\u0000\u0000\u2f75\u2f77\u0001\u0000\u0000\u0000\u2f76\u2f2f\u0001"+
		"\u0000\u0000\u0000\u2f76\u2f45\u0001\u0000\u0000\u0000\u2f76\u2f4e\u0001"+
		"\u0000\u0000\u0000\u2f76\u2f5b\u0001\u0000\u0000\u0000\u2f76\u2f60\u0001"+
		"\u0000\u0000\u0000\u2f76\u2f6e\u0001\u0000\u0000\u0000\u2f77\u0469\u0001"+
		"\u0000\u0000\u0000\u2f78\u2f79\u0005\u0204\u0000\u0000\u2f79\u2f7a\u0005"+
		"\u037d\u0000\u0000\u2f7a\u2f85\u0003\u03ca\u01e5\u0000\u2f7b\u2f7c\u0005"+
		"\u01e9\u0000\u0000\u2f7c\u2f7d\u0005\u037d\u0000\u0000\u2f7d\u2f85\u0003"+
		"\u0208\u0104\u0000\u2f7e\u2f7f\u0005\u0231\u0000\u0000\u2f7f\u2f80\u0005"+
		"\u037d\u0000\u0000\u2f80\u2f85\u0003\u0208\u0104\u0000\u2f81\u2f82\u0005"+
		"\u01a0\u0000\u0000\u2f82\u2f83\u0005\u037d\u0000\u0000\u2f83\u2f85\u0007"+
		"l\u0000\u0000\u2f84\u2f78\u0001\u0000\u0000\u0000\u2f84\u2f7b\u0001\u0000"+
		"\u0000\u0000\u2f84\u2f7e\u0001\u0000\u0000\u0000\u2f84\u2f81\u0001\u0000"+
		"\u0000\u0000\u2f85\u046b\u0001\u0000\u0000\u0000\u2f86\u2f87\u0005\u010f"+
		"\u0000\u0000\u2f87\u2f8a\u0005\u038a\u0000\u0000\u2f88\u2f89\u0005\u0154"+
		"\u0000\u0000\u2f89\u2f8b\u0005\u037d\u0000\u0000\u2f8a\u2f88\u0001\u0000"+
		"\u0000\u0000\u2f8a\u2f8b\u0001\u0000\u0000\u0000\u2f8b\u2f8c\u0001\u0000"+
		"\u0000\u0000\u2f8c\u2f91\u0003\u03f6\u01fb\u0000\u2f8d\u2f8e\u0005\u0390"+
		"\u0000\u0000\u2f8e\u2f90\u0003\u046a\u0235\u0000\u2f8f\u2f8d\u0001\u0000"+
		"\u0000\u0000\u2f90\u2f93\u0001\u0000\u0000\u0000\u2f91\u2f8f\u0001\u0000"+
		"\u0000\u0000\u2f91\u2f92\u0001\u0000\u0000\u0000\u2f92\u2f94\u0001\u0000"+
		"\u0000\u0000\u2f93\u2f91\u0001\u0000\u0000\u0000\u2f94\u2f95\u0005\u038b"+
		"\u0000\u0000\u2f95\u046d\u0001\u0000\u0000\u0000\u2f96\u2f97\u0005\u02a9"+
		"\u0000\u0000\u2f97\u2f98\u0005\u038a\u0000\u0000\u2f98\u2f99\u0003\u03f6"+
		"\u01fb\u0000\u2f99\u2f9a\u0005\u0390\u0000\u0000\u2f9a\u2f9b\u0003\u03f6"+
		"\u01fb\u0000\u2f9b\u2f9c\u0005\u038b\u0000\u0000\u2f9c\u046f\u0001\u0000"+
		"\u0000\u0000\u2f9d\u2fa2\u0003\u0472\u0239\u0000\u2f9e\u2f9f\u0005\u0390"+
		"\u0000\u0000\u2f9f\u2fa1\u0003\u0472\u0239\u0000\u2fa0\u2f9e\u0001\u0000"+
		"\u0000\u0000\u2fa1\u2fa4\u0001\u0000\u0000\u0000\u2fa2\u2fa0\u0001\u0000"+
		"\u0000\u0000\u2fa2\u2fa3\u0001\u0000\u0000\u0000\u2fa3\u0471\u0001\u0000"+
		"\u0000\u0000\u2fa4\u2fa2\u0001\u0000\u0000\u0000\u2fa5\u2fa7\u0005\u0217"+
		"\u0000\u0000\u2fa6\u2fa5\u0001\u0000\u0000\u0000\u2fa6\u2fa7\u0001\u0000"+
		"\u0000\u0000\u2fa7\u2fa8\u0001\u0000\u0000\u0000\u2fa8\u2fa9\u0003\u03d0"+
		"\u01e8\u0000\u2fa9\u2fab\u0005\u0380\u0000\u0000\u2faa\u2fac\u0005\u0217"+
		"\u0000\u0000\u2fab\u2faa\u0001\u0000\u0000\u0000\u2fab\u2fac\u0001\u0000"+
		"\u0000\u0000\u2fac\u2fad\u0001\u0000\u0000\u0000\u2fad\u2fae\u0003\u03d0"+
		"\u01e8\u0000\u2fae\u0473\u0001\u0000\u0000\u0000\u2faf\u2fb1\u0007m\u0000"+
		"\u0000\u2fb0\u2fb2\u0005\u01e9\u0000\u0000\u2fb1\u2fb0\u0001\u0000\u0000"+
		"\u0000\u2fb1\u2fb2\u0001\u0000\u0000\u0000\u2fb2\u0475\u0001\u0000\u0000"+
		"\u0000\u2fb3\u2fb6\u0005\u0153\u0000\u0000\u2fb4\u2fb6\u0003\u0474\u023a"+
		"\u0000\u2fb5\u2fb3\u0001\u0000\u0000\u0000\u2fb5\u2fb4\u0001\u0000\u0000"+
		"\u0000\u2fb6\u0477\u0001\u0000\u0000\u0000\u2fb7\u2fb9\u0003\u0476\u023b"+
		"\u0000\u2fb8\u2fb7\u0001\u0000\u0000\u0000\u2fb8\u2fb9\u0001\u0000\u0000"+
		"\u0000\u2fb9\u2fba\u0001\u0000\u0000\u0000\u2fba\u2fbb\u0005\u0163\u0000"+
		"\u0000\u2fbb\u2fc7\u0003\u0468\u0234\u0000\u2fbc\u2fbd\u0005\u01d9\u0000"+
		"\u0000\u2fbd\u2fbf\u0003\u04ac\u0256\u0000\u2fbe\u2fbc\u0001\u0000\u0000"+
		"\u0000\u2fbe\u2fbf\u0001\u0000\u0000\u0000\u2fbf\u2fc8\u0001\u0000\u0000"+
		"\u0000\u2fc0\u2fc1\u0005\u0321\u0000\u0000\u2fc1\u2fc2\u0005\u038a\u0000"+
		"\u0000\u2fc2\u2fc3\u0003\u03e6\u01f3\u0000\u2fc3\u2fc4\u0005\u038b\u0000"+
		"\u0000\u2fc4\u2fc6\u0001\u0000\u0000\u0000\u2fc5\u2fc0\u0001\u0000\u0000"+
		"\u0000\u2fc5\u2fc6\u0001\u0000\u0000\u0000\u2fc6\u2fc8\u0001\u0000\u0000"+
		"\u0000\u2fc7\u2fbe\u0001\u0000\u0000\u0000\u2fc7\u2fc5\u0001\u0000\u0000"+
		"\u0000\u2fc8\u2fd3\u0001\u0000\u0000\u0000\u2fc9\u2fcb\u0005\u01aa\u0000"+
		"\u0000\u2fca\u2fcc\u0003\u0474\u023a\u0000\u2fcb\u2fca\u0001\u0000\u0000"+
		"\u0000\u2fcb\u2fcc\u0001\u0000\u0000\u0000\u2fcc\u2fcd\u0001\u0000\u0000"+
		"\u0000\u2fcd\u2fce\u0005\u0163\u0000\u0000\u2fce\u2fd3\u0003\u0468\u0234"+
		"\u0000\u2fcf\u2fd0\u0005\u009a\u0000\u0000\u2fd0\u2fd1\u0005\u0163\u0000"+
		"\u0000\u2fd1\u2fd3\u0003\u0468\u0234\u0000\u2fd2\u2fb8\u0001\u0000\u0000"+
		"\u0000\u2fd2\u2fc9\u0001\u0000\u0000\u0000\u2fd2\u2fcf\u0001\u0000\u0000"+
		"\u0000\u2fd3\u0479\u0001\u0000\u0000\u0000\u2fd4\u2fd5\u0005.\u0000\u0000"+
		"\u2fd5\u2fe2\u0005\u038a\u0000\u0000\u2fd6\u2fd7\u0005\u02e7\u0000\u0000"+
		"\u2fd7\u2fd8\u0005\u037d\u0000\u0000\u2fd8\u2fe3\u0003\u03f6\u01fb\u0000"+
		"\u2fd9\u2fda\u0005\u01d3\u0000\u0000\u2fda\u2fdb\u0005\u037d\u0000\u0000"+
		"\u2fdb\u2fe3\u0003\u03f6\u01fb\u0000\u2fdc\u2fdd\u0005\u02b6\u0000\u0000"+
		"\u2fdd\u2fde\u0005\u037d\u0000\u0000\u2fde\u2fe3\u0003\u03ca\u01e5\u0000"+
		"\u2fdf\u2fe0\u0005\u02c2\u0000\u0000\u2fe0\u2fe1\u0005\u037d\u0000\u0000"+
		"\u2fe1\u2fe3\u0003\u03ca\u01e5\u0000\u2fe2\u2fd6\u0001\u0000\u0000\u0000"+
		"\u2fe2\u2fd9\u0001\u0000\u0000\u0000\u2fe2\u2fdc\u0001\u0000\u0000\u0000"+
		"\u2fe2\u2fdf\u0001\u0000\u0000\u0000\u2fe3\u2fe4\u0001\u0000\u0000\u0000"+
		"\u2fe4\u2fe5\u0005\u038b\u0000\u0000\u2fe5\u2fee\u0001\u0000\u0000\u0000"+
		"\u2fe6\u2fe7\u0005Q\u0000\u0000\u2fe7\u2fe8\u0005\u038a\u0000\u0000\u2fe8"+
		"\u2fe9\u0005\u02b6\u0000\u0000\u2fe9\u2fea\u0005\u037d\u0000\u0000\u2fea"+
		"\u2feb\u0003\u03ca\u01e5\u0000\u2feb\u2fec\u0005\u038b\u0000\u0000\u2fec"+
		"\u2fee\u0001\u0000\u0000\u0000\u2fed\u2fd4\u0001\u0000\u0000\u0000\u2fed"+
		"\u2fe6\u0001\u0000\u0000\u0000\u2fee\u047b\u0001\u0000\u0000\u0000\u2fef"+
		"\u2ff0\u0005\u00db\u0000\u0000\u2ff0\u2ffa\u0005\u038a\u0000\u0000\u2ff1"+
		"\u2ff2\u0005\u02e7\u0000\u0000\u2ff2\u2ff3\u0005\u037d\u0000\u0000\u2ff3"+
		"\u2ffb\u0003\u03f6\u01fb\u0000\u2ff4\u2ff5\u0005\u01d3\u0000\u0000\u2ff5"+
		"\u2ff6\u0005\u037d\u0000\u0000\u2ff6\u2ffb\u0003\u03f6\u01fb\u0000\u2ff7"+
		"\u2ff8\u0005\u02b6\u0000\u0000\u2ff8\u2ff9\u0005\u037d\u0000\u0000\u2ff9"+
		"\u2ffb\u0003\u03ca\u01e5\u0000\u2ffa\u2ff1\u0001\u0000\u0000\u0000\u2ffa"+
		"\u2ff4\u0001\u0000\u0000\u0000\u2ffa\u2ff7\u0001\u0000\u0000\u0000\u2ffb"+
		"\u2ffc\u0001\u0000\u0000\u0000\u2ffc\u2ffd\u0005\u038b\u0000\u0000\u2ffd"+
		"\u047d\u0001\u0000\u0000\u0000\u2ffe\u2fff\u0005k\u0000\u0000\u2fff\u3000"+
		"\u0005\u038a\u0000\u0000\u3000\u3001\u0005\u014e\u0000\u0000\u3001\u3002"+
		"\u0005\u037d\u0000\u0000\u3002\u3003\u0003\u0480\u0240\u0000\u3003\u3004"+
		"\u0005\u038b\u0000\u0000\u3004\u3006\u0003\u047a\u023d\u0000\u3005\u3007"+
		"\u0003\u047c\u023e\u0000\u3006\u3005\u0001\u0000\u0000\u0000\u3006\u3007"+
		"\u0001\u0000\u0000\u0000\u3007\u047f\u0001\u0000\u0000\u0000\u3008\u3009"+
		"\u0007n\u0000\u0000\u3009\u0481\u0001\u0000\u0000\u0000\u300a\u300b\u0005"+
		"\u01f5\u0000\u0000\u300b\u300c\u0005`\u0000\u0000\u300c\u300d\u0003\u03f2"+
		"\u01f9\u0000\u300d\u0483\u0001\u0000\u0000\u0000\u300e\u300f\u0003\u03d0"+
		"\u01e8\u0000\u300f\u0485\u0001\u0000\u0000\u0000\u3010\u3012\u0003\u03f6"+
		"\u01fb\u0000\u3011\u3013\u0005+\u0000\u0000\u3012\u3011\u0001\u0000\u0000"+
		"\u0000\u3012\u3013\u0001\u0000\u0000\u0000\u3013\u3014\u0001\u0000\u0000"+
		"\u0000\u3014\u301e\u0003\u0484\u0242\u0000\u3015\u3016\u0005\u0390\u0000"+
		"\u0000\u3016\u3018\u0003\u03f6\u01fb\u0000\u3017\u3019\u0005+\u0000\u0000"+
		"\u3018\u3017\u0001\u0000\u0000\u0000\u3018\u3019\u0001\u0000\u0000\u0000"+
		"\u3019\u301a\u0001\u0000\u0000\u0000\u301a\u301b\u0003\u0484\u0242\u0000"+
		"\u301b\u301d\u0001\u0000\u0000\u0000\u301c\u3015\u0001\u0000\u0000\u0000"+
		"\u301d\u3020\u0001\u0000\u0000\u0000\u301e\u301c\u0001\u0000\u0000\u0000"+
		"\u301e\u301f\u0001\u0000\u0000\u0000\u301f\u0487\u0001\u0000\u0000\u0000"+
		"\u3020\u301e\u0001\u0000\u0000\u0000\u3021\u3022\u0005\u0195\u0000\u0000"+
		"\u3022\u3023\u0003\u0486\u0243\u0000\u3023\u0489\u0001\u0000\u0000\u0000"+
		"\u3024\u3025\u0005\u0293\u0000\u0000\u3025\u3026\u0005\u00d0\u0000\u0000"+
		"\u3026\u302e\u0005\u018c\u0000\u0000\u3027\u3028\u0005\u01d8\u0000\u0000"+
		"\u3028\u3029\u0005\u00d0\u0000\u0000\u3029\u302e\u0005\u018c\u0000\u0000"+
		"\u302a\u302b\u0005\u0336\u0000\u0000\u302b\u302c\u0005\u0310\u0000\u0000"+
		"\u302c\u302e\u0005\u0260\u0000\u0000\u302d\u3024\u0001\u0000\u0000\u0000"+
		"\u302d\u3027\u0001\u0000\u0000\u0000\u302d\u302a\u0001\u0000\u0000\u0000"+
		"\u302e\u048b\u0001\u0000\u0000\u0000\u302f\u3030\u0005\u01da\u0000\u0000"+
		"\u3030\u3031\u0005\u025f\u0000\u0000\u3031\u3032\u0005\u0206\u0000\u0000"+
		"\u3032\u3038\u0005\u018a\u0000\u0000\u3033\u3034\u0005\u0011\u0000\u0000"+
		"\u3034\u3035\u0005\u0260\u0000\u0000\u3035\u3036\u0005\u0206\u0000\u0000"+
		"\u3036\u3038\u0005\u018a\u0000\u0000\u3037\u302f\u0001\u0000\u0000\u0000"+
		"\u3037\u3033\u0001\u0000\u0000\u0000\u3038\u303a\u0001\u0000\u0000\u0000"+
		"\u3039\u303b\u0003\u048a\u0245\u0000\u303a\u3039\u0001\u0000\u0000\u0000"+
		"\u303a\u303b\u0001\u0000\u0000\u0000\u303b\u048d\u0001\u0000\u0000\u0000"+
		"\u303c\u303d\u0007o\u0000\u0000\u303d\u048f\u0001\u0000\u0000\u0000\u303e"+
		"\u303f\u0005\u0367\u0000\u0000\u303f\u0491\u0001\u0000\u0000\u0000\u3040"+
		"\u3041\u0005\u000e\u0000\u0000\u3041\u3042\u0005\u018a\u0000\u0000\u3042"+
		"\u304e\u0005\u0298\u0000\u0000\u3043\u3044\u0005\u0203\u0000\u0000\u3044"+
		"\u3045\u0005\u016e\u0000\u0000\u3045\u304f\u0005\u025f\u0000\u0000\u3046"+
		"\u3047\u0005\u02f9\u0000\u0000\u3047\u3048\u0005\u01ae\u0000\u0000\u3048"+
		"\u304f\u0005\u025f\u0000\u0000\u3049\u304b\u0005\u02f9\u0000\u0000\u304a"+
		"\u304c\u0003\u048e\u0247\u0000\u304b\u304a\u0001\u0000\u0000\u0000\u304b"+
		"\u304c\u0001\u0000\u0000\u0000\u304c\u304d\u0001\u0000\u0000\u0000\u304d"+
		"\u304f\u0003\u0490\u0248\u0000\u304e\u3043\u0001\u0000\u0000\u0000\u304e"+
		"\u3046\u0001\u0000\u0000\u0000\u304e\u3049\u0001\u0000\u0000\u0000\u304f"+
		"\u0493\u0001\u0000\u0000\u0000\u3050\u3051\u0003\u0490\u0248\u0000\u3051"+
		"\u3052\u0005+\u0000\u0000\u3052\u305a\u0003\u03f6\u01fb\u0000\u3053\u3054"+
		"\u0005\u0390\u0000\u0000\u3054\u3055\u0003\u0490\u0248\u0000\u3055\u3056"+
		"\u0005+\u0000\u0000\u3056\u3057\u0003\u03f6\u01fb\u0000\u3057\u3059\u0001"+
		"\u0000\u0000\u0000\u3058\u3053\u0001\u0000\u0000\u0000\u3059\u305c\u0001"+
		"\u0000\u0000\u0000\u305a\u3058\u0001\u0000\u0000\u0000\u305a\u305b\u0001"+
		"\u0000\u0000\u0000\u305b\u0495\u0001\u0000\u0000\u0000\u305c\u305a\u0001"+
		"\u0000\u0000\u0000\u305d\u305e\u0005\u00b7\u0000\u0000\u305e\u305f\u0003"+
		"\u0494\u024a\u0000\u305f\u0497\u0001\u0000\u0000\u0000\u3060\u3061\u0005"+
		"\u018e\u0000\u0000\u3061\u3063\u0005\u038a\u0000\u0000\u3062\u3064\u0003"+
		"\u0482\u0241\u0000\u3063\u3062\u0001\u0000\u0000\u0000\u3063\u3064\u0001"+
		"\u0000\u0000\u0000\u3064\u3066\u0001\u0000\u0000\u0000\u3065\u3067\u0003"+
		"\u04c4\u0262\u0000\u3066\u3065\u0001\u0000\u0000\u0000\u3066\u3067\u0001"+
		"\u0000\u0000\u0000\u3067\u3069\u0001\u0000\u0000\u0000\u3068\u306a\u0003"+
		"\u0488\u0244\u0000\u3069\u3068\u0001\u0000\u0000\u0000\u3069\u306a\u0001"+
		"\u0000\u0000\u0000\u306a\u306c\u0001\u0000\u0000\u0000\u306b\u306d\u0003"+
		"\u048c\u0246\u0000\u306c\u306b\u0001\u0000\u0000\u0000\u306c\u306d\u0001"+
		"\u0000\u0000\u0000\u306d\u306f\u0001\u0000\u0000\u0000\u306e\u3070\u0003"+
		"\u0492\u0249\u0000\u306f\u306e\u0001\u0000\u0000\u0000\u306f\u3070\u0001"+
		"\u0000\u0000\u0000\u3070\u3072\u0001\u0000\u0000\u0000\u3071\u3073\u0003"+
		"\u03e2\u01f1\u0000\u3072\u3071\u0001\u0000\u0000\u0000\u3072\u3073\u0001"+
		"\u0000\u0000\u0000\u3073\u3075\u0001\u0000\u0000\u0000\u3074\u3076\u0003"+
		"\u0496\u024b\u0000\u3075\u3074\u0001\u0000\u0000\u0000\u3075\u3076\u0001"+
		"\u0000\u0000\u0000\u3076\u3077\u0001\u0000\u0000\u0000\u3077\u3078\u0005"+
		"\u038b\u0000\u0000\u3078\u0499\u0001\u0000\u0000\u0000\u3079\u307a\u0005"+
		"\u020d\u0000\u0000\u307a\u307b\u0005\u038a\u0000\u0000\u307b\u307c\u0003"+
		"\u03d0\u01e8\u0000\u307c\u307d\u0005\u038a\u0000\u0000\u307d\u307e\u0003"+
		"\u03d0\u01e8\u0000\u307e\u307f\u0005\u038b\u0000\u0000\u307f\u3080\u0005"+
		"\u0110\u0000\u0000\u3080\u3081\u0003\u03d0\u01e8\u0000\u3081\u3082\u0005"+
		"\u014a\u0000\u0000\u3082\u3083\u0005\u038a\u0000\u0000\u3083\u3088\u0003"+
		"\u0420\u0210\u0000\u3084\u3085\u0005\u0390\u0000\u0000\u3085\u3087\u0003"+
		"\u0420\u0210\u0000\u3086\u3084\u0001\u0000\u0000\u0000\u3087\u308a\u0001"+
		"\u0000\u0000\u0000\u3088\u3086\u0001\u0000\u0000\u0000\u3088\u3089\u0001"+
		"\u0000\u0000\u0000\u3089\u308b\u0001\u0000\u0000\u0000\u308a\u3088\u0001"+
		"\u0000\u0000\u0000\u308b\u308c\u0005\u038b\u0000\u0000\u308c\u3091\u0005"+
		"\u038b\u0000\u0000\u308d\u308f\u0003\u0450\u0228\u0000\u308e\u3090\u0003"+
		"\u049c\u024e\u0000\u308f\u308e\u0001\u0000\u0000\u0000\u308f\u3090\u0001"+
		"\u0000\u0000\u0000\u3090\u3092\u0001\u0000\u0000\u0000\u3091\u308d\u0001"+
		"\u0000\u0000\u0000\u3091\u3092\u0001\u0000\u0000\u0000\u3092\u309f\u0001"+
		"\u0000\u0000\u0000\u3093\u3094\u0005\u0311\u0000\u0000\u3094\u3095\u0005"+
		"\u038a\u0000\u0000\u3095\u3096\u0003\u03d0\u01e8\u0000\u3096\u3097\u0005"+
		"\u0110\u0000\u0000\u3097\u3098\u0003\u03e4\u01f2\u0000\u3098\u3099\u0005"+
		"\u014a\u0000\u0000\u3099\u309a\u0005\u038a\u0000\u0000\u309a\u309b\u0003"+
		"\u03e6\u01f3\u0000\u309b\u309c\u0005\u038b\u0000\u0000\u309c\u309d\u0005"+
		"\u038b\u0000\u0000\u309d\u309f\u0001\u0000\u0000\u0000\u309e\u3079\u0001"+
		"\u0000\u0000\u0000\u309e\u3093\u0001\u0000\u0000\u0000\u309f\u049b\u0001"+
		"\u0000\u0000\u0000\u30a0\u30a1\u0005\u038a\u0000\u0000\u30a1\u30a6\u0003"+
		"\u03d0\u01e8\u0000\u30a2\u30a3\u0005\u0390\u0000\u0000\u30a3\u30a5\u0003"+
		"\u03d0\u01e8\u0000\u30a4\u30a2\u0001\u0000\u0000\u0000\u30a5\u30a8\u0001"+
		"\u0000\u0000\u0000\u30a6\u30a4\u0001\u0000\u0000\u0000\u30a6\u30a7\u0001"+
		"\u0000\u0000\u0000\u30a7\u30a9\u0001\u0000\u0000\u0000\u30a8\u30a6\u0001"+
		"\u0000\u0000\u0000\u30a9\u30aa\u0005\u038b\u0000\u0000\u30aa\u049d\u0001"+
		"\u0000\u0000\u0000\u30ab\u30ac\u0005\u038a\u0000\u0000\u30ac\u30ad\u0003"+
		"\u03f2\u01f9\u0000\u30ad\u30ae\u0005\u038b\u0000\u0000\u30ae\u049f\u0001"+
		"\u0000\u0000\u0000\u30af\u30b0\u0005\u038a\u0000\u0000\u30b0\u30b1\u0003"+
		"\u04a2\u0251\u0000\u30b1\u30b6\u0005\u038b\u0000\u0000\u30b2\u30b4\u0003"+
		"\u0450\u0228\u0000\u30b3\u30b5\u0003\u049c\u024e\u0000\u30b4\u30b3\u0001"+
		"\u0000\u0000\u0000\u30b4\u30b5\u0001\u0000\u0000\u0000\u30b5\u30b7\u0001"+
		"\u0000\u0000\u0000\u30b6\u30b2\u0001\u0000\u0000\u0000\u30b6\u30b7\u0001"+
		"\u0000\u0000\u0000\u30b7\u30c0\u0001\u0000\u0000\u0000\u30b8\u30bd\u0003"+
		"\u04a2\u0251\u0000\u30b9\u30bb\u0003\u0450\u0228\u0000\u30ba\u30bc\u0003"+
		"\u049c\u024e\u0000\u30bb\u30ba\u0001\u0000\u0000\u0000\u30bb\u30bc\u0001"+
		"\u0000\u0000\u0000\u30bc\u30be\u0001\u0000\u0000\u0000\u30bd\u30b9\u0001"+
		"\u0000\u0000\u0000\u30bd\u30be\u0001\u0000\u0000\u0000\u30be\u30c0\u0001"+
		"\u0000\u0000\u0000\u30bf\u30af\u0001\u0000\u0000\u0000\u30bf\u30b8\u0001"+
		"\u0000\u0000\u0000\u30c0\u04a1\u0001\u0000\u0000\u0000\u30c1\u30c2\u0005"+
		"\u0326\u0000\u0000\u30c2\u30c7\u0003\u049e\u024f\u0000\u30c3\u30c4\u0005"+
		"\u0390\u0000\u0000\u30c4\u30c6\u0003\u049e\u024f\u0000\u30c5\u30c3\u0001"+
		"\u0000\u0000\u0000\u30c6\u30c9\u0001\u0000\u0000\u0000\u30c7\u30c5\u0001"+
		"\u0000\u0000\u0000\u30c7\u30c8\u0001\u0000\u0000\u0000\u30c8\u04a3\u0001"+
		"\u0000\u0000\u0000\u30c9\u30c7\u0001\u0000\u0000\u0000\u30ca\u30cd\u0007"+
		"p\u0000\u0000\u30cb\u30cd\u0007q\u0000\u0000\u30cc\u30ca\u0001\u0000\u0000"+
		"\u0000\u30cc\u30cb\u0001\u0000\u0000\u0000\u30cd\u04a5\u0001\u0000\u0000"+
		"\u0000\u30ce\u30cf\u0007r\u0000\u0000\u30cf\u30d0\u0005\u038a\u0000\u0000"+
		"\u30d0\u30d1\u0003\u03f0\u01f8\u0000\u30d1\u30d2\u0005\u038b\u0000\u0000"+
		"\u30d2\u04a7\u0001\u0000\u0000\u0000\u30d3\u30d4\u0005\u038a\u0000\u0000"+
		"\u30d4\u30d6\u0003\u03f0\u01f8\u0000\u30d5\u30d7\u0005\u0260\u0000\u0000"+
		"\u30d6\u30d5\u0001\u0000\u0000\u0000\u30d6\u30d7\u0001\u0000\u0000\u0000"+
		"\u30d7\u30d8\u0001\u0000\u0000\u0000\u30d8\u30da\u0005\u038b\u0000\u0000"+
		"\u30d9\u30db\u0003\u04a6\u0253\u0000\u30da\u30d9\u0001\u0000\u0000\u0000"+
		"\u30da\u30db\u0001\u0000\u0000\u0000\u30db\u04a9\u0001\u0000\u0000\u0000"+
		"\u30dc\u30de\u0007s\u0000\u0000\u30dd\u30df\u0003\u04a4\u0252\u0000\u30de"+
		"\u30dd\u0001\u0000\u0000\u0000\u30de\u30df\u0001\u0000\u0000\u0000\u30df"+
		"\u30e0\u0001\u0000\u0000\u0000\u30e0\u30e1\u0003\u04a8\u0254\u0000\u30e1"+
		"\u04ab\u0001\u0000\u0000\u0000\u30e2\u30e6\u0006\u0256\uffff\uffff\u0000"+
		"\u30e3\u30e5\u0005\u01b5\u0000\u0000\u30e4\u30e3\u0001\u0000\u0000\u0000"+
		"\u30e5\u30e8\u0001\u0000\u0000\u0000\u30e6\u30e4\u0001\u0000\u0000\u0000"+
		"\u30e6\u30e7\u0001\u0000\u0000\u0000\u30e7\u30ee\u0001\u0000\u0000\u0000"+
		"\u30e8\u30e6\u0001\u0000\u0000\u0000\u30e9\u30ef\u0003\u04b4\u025a\u0000"+
		"\u30ea\u30eb\u0005\u038a\u0000\u0000\u30eb\u30ec\u0003\u04ac\u0256\u0000"+
		"\u30ec\u30ed\u0005\u038b\u0000\u0000\u30ed\u30ef\u0001\u0000\u0000\u0000"+
		"\u30ee\u30e9\u0001\u0000\u0000\u0000\u30ee\u30ea\u0001\u0000\u0000\u0000"+
		"\u30ef\u30f8\u0001\u0000\u0000\u0000\u30f0\u30f1\n\u0002\u0000\u0000\u30f1"+
		"\u30f2\u0005\u001d\u0000\u0000\u30f2\u30f7\u0003\u04ac\u0256\u0003\u30f3"+
		"\u30f4\n\u0001\u0000\u0000\u30f4\u30f5\u0005\u01e2\u0000\u0000\u30f5\u30f7"+
		"\u0003\u04ac\u0256\u0002\u30f6\u30f0\u0001\u0000\u0000\u0000\u30f6\u30f3"+
		"\u0001\u0000\u0000\u0000\u30f7\u30fa\u0001\u0000\u0000\u0000\u30f8\u30f6"+
		"\u0001\u0000\u0000\u0000\u30f8\u30f9\u0001\u0000\u0000\u0000\u30f9\u04ad"+
		"\u0001\u0000\u0000\u0000\u30fa\u30f8\u0001\u0000\u0000\u0000\u30fb\u30fc"+
		"\u0007t\u0000\u0000\u30fc\u04af\u0001\u0000\u0000\u0000\u30fd\u30ff\u0005"+
		"\u01b5\u0000\u0000\u30fe\u30fd\u0001\u0000\u0000\u0000\u30fe\u30ff\u0001"+
		"\u0000\u0000\u0000\u30ff\u3100\u0001\u0000\u0000\u0000\u3100\u3101\u0005"+
		"\u01bf\u0000\u0000\u3101\u04b1\u0001\u0000\u0000\u0000\u3102\u3103\u0003"+
		"\u042e\u0217\u0000\u3103\u04b3\u0001\u0000\u0000\u0000\u3104\u3105\u0005"+
		"\u00ef\u0000\u0000\u3105\u3106\u0005\u038a\u0000\u0000\u3106\u3107\u0003"+
		"\u04b2\u0259\u0000\u3107\u3108\u0005\u038b\u0000\u0000\u3108\u3150\u0001"+
		"\u0000\u0000\u0000\u3109\u310a\u0003\u03f6\u01fb\u0000\u310a\u310b\u0003"+
		"\u04ae\u0257\u0000\u310b\u310c\u0007u\u0000\u0000\u310c\u310d\u0005\u038a"+
		"\u0000\u0000\u310d\u310e\u0003\u04b2\u0259\u0000\u310e\u310f\u0005\u038b"+
		"\u0000\u0000\u310f\u3150\u0001\u0000\u0000\u0000\u3110\u3112\u0003\u03f6"+
		"\u01fb\u0000\u3111\u3113\u0005\u01b5\u0000\u0000\u3112\u3111\u0001\u0000"+
		"\u0000\u0000\u3112\u3113\u0001\u0000\u0000\u0000\u3113\u3114\u0001\u0000"+
		"\u0000\u0000\u3114\u3115\u0005T\u0000\u0000\u3115\u3116\u0003\u03f6\u01fb"+
		"\u0000\u3116\u3117\u0005\u001d\u0000\u0000\u3117\u3118\u0003\u03f6\u01fb"+
		"\u0000\u3118\u3150\u0001\u0000\u0000\u0000\u3119\u311b\u0003\u03f6\u01fb"+
		"\u0000\u311a\u311c\u0005\u01b5\u0000\u0000\u311b\u311a\u0001\u0000\u0000"+
		"\u0000\u311b\u311c\u0001\u0000\u0000\u0000\u311c\u311d\u0001\u0000\u0000"+
		"\u0000\u311d\u311e\u0005\u014a\u0000\u0000\u311e\u3121\u0005\u038a\u0000"+
		"\u0000\u311f\u3122\u0003\u04b2\u0259\u0000\u3120\u3122\u0003\u03f2\u01f9"+
		"\u0000\u3121\u311f\u0001\u0000\u0000\u0000\u3121\u3120\u0001\u0000\u0000"+
		"\u0000\u3122\u3123\u0001\u0000\u0000\u0000\u3123\u3124\u0005\u038b\u0000"+
		"\u0000\u3124\u3150\u0001\u0000\u0000\u0000\u3125\u3127\u0003\u03f6\u01fb"+
		"\u0000\u3126\u3128\u0005\u01b5\u0000\u0000\u3127\u3126\u0001\u0000\u0000"+
		"\u0000\u3127\u3128\u0001\u0000\u0000\u0000\u3128\u3129\u0001\u0000\u0000"+
		"\u0000\u3129\u312a\u0007Z\u0000\u0000\u312a\u312d\u0003\u03f6\u01fb\u0000"+
		"\u312b\u312c\u0005\u00e7\u0000\u0000\u312c\u312e\u0003\u03f6\u01fb\u0000"+
		"\u312d\u312b\u0001\u0000\u0000\u0000\u312d\u312e\u0001\u0000\u0000\u0000"+
		"\u312e\u3150\u0001\u0000\u0000\u0000\u312f\u3131\u0003\u03f6\u01fb\u0000"+
		"\u3130\u3132\u0005\u01b5\u0000\u0000\u3131\u3130\u0001\u0000\u0000\u0000"+
		"\u3131\u3132\u0001\u0000\u0000\u0000\u3132\u3133\u0001\u0000\u0000\u0000"+
		"\u3133\u3134\u0005\u0258\u0000\u0000\u3134\u3135\u0003\u03f6\u01fb\u0000"+
		"\u3135\u3150\u0001\u0000\u0000\u0000\u3136\u3138\u0003\u03f6\u01fb\u0000"+
		"\u3137\u3139\u0005\u01b5\u0000\u0000\u3138\u3137\u0001\u0000\u0000\u0000"+
		"\u3138\u3139\u0001\u0000\u0000\u0000\u3139\u313a\u0001\u0000\u0000\u0000"+
		"\u313a\u313b\u0007Z\u0000\u0000\u313b\u313c\u0005\u001e\u0000\u0000\u313c"+
		"\u313d\u0005\u038a\u0000\u0000\u313d\u3142\u0003\u03f6\u01fb\u0000\u313e"+
		"\u313f\u0005\u0390\u0000\u0000\u313f\u3141\u0003\u03f6\u01fb\u0000\u3140"+
		"\u313e\u0001\u0000\u0000\u0000\u3141\u3144\u0001\u0000\u0000\u0000\u3142"+
		"\u3140\u0001\u0000\u0000\u0000\u3142\u3143\u0001\u0000\u0000\u0000\u3143"+
		"\u3145\u0001\u0000\u0000\u0000\u3144\u3142\u0001\u0000\u0000\u0000\u3145"+
		"\u3148\u0005\u038b\u0000\u0000\u3146\u3147\u0005\u00e7\u0000\u0000\u3147"+
		"\u3149\u0003\u03f6\u01fb\u0000\u3148\u3146\u0001\u0000\u0000\u0000\u3148"+
		"\u3149\u0001\u0000\u0000\u0000\u3149\u3150\u0001\u0000\u0000\u0000\u314a"+
		"\u314b\u0003\u03f6\u01fb\u0000\u314b\u314c\u0005\u015d\u0000\u0000\u314c"+
		"\u314d\u0003\u04b0\u0258\u0000\u314d\u3150\u0001\u0000\u0000\u0000\u314e"+
		"\u3150\u0003\u03f6\u01fb\u0000\u314f\u3104\u0001\u0000\u0000\u0000\u314f"+
		"\u3109\u0001\u0000\u0000\u0000\u314f\u3110\u0001\u0000\u0000\u0000\u314f"+
		"\u3119\u0001\u0000\u0000\u0000\u314f\u3125\u0001\u0000\u0000\u0000\u314f"+
		"\u312f\u0001\u0000\u0000\u0000\u314f\u3136\u0001\u0000\u0000\u0000\u314f"+
		"\u314a\u0001\u0000\u0000\u0000\u314f\u314e\u0001\u0000\u0000\u0000\u3150"+
		"\u04b5\u0001\u0000\u0000\u0000\u3151\u3152\u0005\u0335\u0000\u0000\u3152"+
		"\u3153\u0003\u04ac\u0256\u0000\u3153\u04b7\u0001\u0000\u0000\u0000\u3154"+
		"\u3158\u0003\u044a\u0225\u0000\u3155\u3158\u0003\u03f0\u01f8\u0000\u3156"+
		"\u3158\u0003\u0452\u0229\u0000\u3157\u3154\u0001\u0000\u0000\u0000\u3157"+
		"\u3155\u0001\u0000\u0000\u0000\u3157\u3156\u0001\u0000\u0000\u0000\u3158"+
		"\u04b9\u0001\u0000\u0000\u0000\u3159\u315e\u0003\u04b8\u025c\u0000\u315a"+
		"\u315b\u0005\u0390\u0000\u0000\u315b\u315d\u0003\u04b8\u025c\u0000\u315c"+
		"\u315a\u0001\u0000\u0000\u0000\u315d\u3160\u0001\u0000\u0000\u0000\u315e"+
		"\u315c\u0001\u0000\u0000\u0000\u315e\u315f\u0001\u0000\u0000\u0000\u315f"+
		"\u04bb\u0001\u0000\u0000\u0000\u3160\u315e\u0001\u0000\u0000\u0000\u3161"+
		"\u3162\u0005\u012c\u0000\u0000\u3162\u3163\u0005`\u0000\u0000\u3163\u3165"+
		"\u0003\u04ba\u025d\u0000\u3164\u3166\u0003\u04be\u025f\u0000\u3165\u3164"+
		"\u0001\u0000\u0000\u0000\u3165\u3166\u0001\u0000\u0000\u0000\u3166\u3177"+
		"\u0001\u0000\u0000\u0000\u3167\u3168\u0005\u012c\u0000\u0000\u3168\u316d"+
		"\u0005`\u0000\u0000\u3169\u316e\u0005\u009d\u0000\u0000\u316a\u316b\u0005"+
		"\u012d\u0000\u0000\u316b\u316e\u0005\u028f\u0000\u0000\u316c\u316e\u0005"+
		"\u025c\u0000\u0000\u316d\u3169\u0001\u0000\u0000\u0000\u316d\u316a\u0001"+
		"\u0000\u0000\u0000\u316d\u316c\u0001\u0000\u0000\u0000\u316e\u316f\u0001"+
		"\u0000\u0000\u0000\u316f\u3170\u0005\u038a\u0000\u0000\u3170\u3171\u0003"+
		"\u04ba\u025d\u0000\u3171\u3172\u0005\u038b\u0000\u0000\u3172\u3177\u0001"+
		"\u0000\u0000\u0000\u3173\u3174\u0005\u012c\u0000\u0000\u3174\u3175\u0005"+
		"`\u0000\u0000\u3175\u3177\u0005\u0011\u0000\u0000\u3176\u3161\u0001\u0000"+
		"\u0000\u0000\u3176\u3167\u0001\u0000\u0000\u0000\u3176\u3173\u0001\u0000"+
		"\u0000\u0000\u3177\u04bd\u0001\u0000\u0000\u0000\u3178\u3179\u0005\u0134"+
		"\u0000\u0000\u3179\u317a\u0003\u04ac\u0256\u0000\u317a\u04bf\u0001\u0000"+
		"\u0000\u0000\u317b\u317c\u0005\u0223\u0000\u0000\u317c\u317d\u0003\u03f6"+
		"\u01fb\u0000\u317d\u04c1\u0001\u0000\u0000\u0000\u317e\u3182\u0003\u03d0"+
		"\u01e8\u0000\u317f\u3182\u0003\u03f0\u01f8\u0000\u3180\u3182\u0003\u03f6"+
		"\u01fb\u0000\u3181\u317e\u0001\u0000\u0000\u0000\u3181\u317f\u0001\u0000"+
		"\u0000\u0000\u3181\u3180\u0001\u0000\u0000\u0000\u3182\u3184\u0001\u0000"+
		"\u0000\u0000\u3183\u3185\u0007c\u0000\u0000\u3184\u3183\u0001\u0000\u0000"+
		"\u0000\u3184\u3185\u0001\u0000\u0000\u0000\u3185\u3188\u0001\u0000\u0000"+
		"\u0000\u3186\u3187\u0005\u01be\u0000\u0000\u3187\u3189\u0007o\u0000\u0000"+
		"\u3188\u3186\u0001\u0000\u0000\u0000\u3188\u3189\u0001\u0000\u0000\u0000"+
		"\u3189\u04c3\u0001\u0000\u0000\u0000\u318a\u318b\u0005\u01e5\u0000\u0000"+
		"\u318b\u318c\u0005`\u0000\u0000\u318c\u3191\u0003\u04c2\u0261\u0000\u318d"+
		"\u318e\u0005\u0390\u0000\u0000\u318e\u3190\u0003\u04c2\u0261\u0000\u318f"+
		"\u318d\u0001\u0000\u0000\u0000\u3190\u3193\u0001\u0000\u0000\u0000\u3191"+
		"\u318f\u0001\u0000\u0000\u0000\u3191\u3192\u0001\u0000\u0000\u0000\u3192"+
		"\u04c5\u0001\u0000\u0000\u0000\u3193\u3191\u0001\u0000\u0000\u0000\u3194"+
		"\u3195\u0007v\u0000\u0000\u3195\u04c7\u0001\u0000\u0000\u0000\u3196\u3197"+
		"\u0007w\u0000\u0000\u3197\u04c9\u0001\u0000\u0000\u0000\u3198\u3199\u0005"+
		"\u0178\u0000\u0000\u3199\u319c\u0003\u03f0\u01f8\u0000\u319a\u319b\u0005"+
		"\u01d3\u0000\u0000\u319b\u319d\u0003\u03f0\u01f8\u0000\u319c\u319a\u0001"+
		"\u0000\u0000\u0000\u319c\u319d\u0001\u0000\u0000\u0000\u319d\u31b1\u0001"+
		"\u0000\u0000\u0000\u319e\u319f\u0005\u01d3\u0000\u0000\u319f\u31a1\u0003"+
		"\u03f0\u01f8\u0000\u31a0\u319e\u0001\u0000\u0000\u0000\u31a0\u31a1\u0001"+
		"\u0000\u0000\u0000\u31a1\u31a3\u0001\u0000\u0000\u0000\u31a2\u31a4\u0003"+
		"\u04c6\u0263\u0000\u31a3\u31a2\u0001\u0000\u0000\u0000\u31a3\u31a4\u0001"+
		"\u0000\u0000\u0000\u31a4\u31a5\u0001\u0000\u0000\u0000\u31a5\u31a7\u0005"+
		"\u0105\u0000\u0000\u31a6\u31a8\u0003\u04c8\u0264\u0000\u31a7\u31a6\u0001"+
		"\u0000\u0000\u0000\u31a7\u31a8\u0001\u0000\u0000\u0000\u31a8\u31a9\u0001"+
		"\u0000\u0000\u0000\u31a9\u31ab\u0003\u03f0\u01f8\u0000\u31aa\u31ac\u0003"+
		"\u04c6\u0263\u0000\u31ab\u31aa\u0001\u0000\u0000\u0000\u31ab\u31ac\u0001"+
		"\u0000\u0000\u0000\u31ac\u31ae\u0001\u0000\u0000\u0000\u31ad\u31af\u0005"+
		"\u01db\u0000\u0000\u31ae\u31ad\u0001\u0000\u0000\u0000\u31ae\u31af\u0001"+
		"\u0000\u0000\u0000\u31af\u31b1\u0001\u0000\u0000\u0000\u31b0\u3198\u0001"+
		"\u0000\u0000\u0000\u31b0\u31a0\u0001\u0000\u0000\u0000\u31b1\u04cb\u0001"+
		"\u0000\u0000\u0000\u31b2\u31b3\u0007x\u0000\u0000\u31b3\u04cd\u0001\u0000"+
		"\u0000\u0000\u31b4\u31b5\u0005\u025d\u0000\u0000\u31b5\u31b6\u0005\u038a"+
		"\u0000\u0000\u31b6\u31b7\u0005\u00f2\u0000\u0000\u31b7\u31b8\u0005\u037d"+
		"\u0000\u0000\u31b8\u31b9\u0003\u03f6\u01fb\u0000\u31b9\u31ba\u0005\u0390"+
		"\u0000\u0000\u31ba\u31bb\u0005\u027a\u0000\u0000\u31bb\u31bc\u0005\u037d"+
		"\u0000\u0000\u31bc\u31c3\u0003\u03f6\u01fb\u0000\u31bd\u31be\u0005\u0390"+
		"\u0000\u0000\u31be\u31bf\u0005\u025e\u0000\u0000\u31bf\u31c0\u0005\u037d"+
		"\u0000\u0000\u31c0\u31c2\u0003\u04cc\u0266\u0000\u31c1\u31bd\u0001\u0000"+
		"\u0000\u0000\u31c2\u31c5\u0001\u0000\u0000\u0000\u31c3\u31c1\u0001\u0000"+
		"\u0000\u0000\u31c3\u31c4\u0001\u0000\u0000\u0000\u31c4\u31c6\u0001\u0000"+
		"\u0000\u0000\u31c5\u31c3\u0001\u0000\u0000\u0000\u31c6\u31c7\u0005\u038b"+
		"\u0000\u0000\u31c7\u31d7\u0001\u0000\u0000\u0000\u31c8\u31c9\u0005\u025d"+
		"\u0000\u0000\u31c9\u31ca\u0005\u038a\u0000\u0000\u31ca\u31cb\u0003\u03f6"+
		"\u01fb\u0000\u31cb\u31cc\u0005\u0390\u0000\u0000\u31cc\u31d1\u0003\u03f6"+
		"\u01fb\u0000\u31cd\u31ce\u0005\u0390\u0000\u0000\u31ce\u31d0\u0003\u04cc"+
		"\u0266\u0000\u31cf\u31cd\u0001\u0000\u0000\u0000\u31d0\u31d3\u0001\u0000"+
		"\u0000\u0000\u31d1\u31cf\u0001\u0000\u0000\u0000\u31d1\u31d2\u0001\u0000"+
		"\u0000\u0000\u31d2\u31d4\u0001\u0000\u0000\u0000\u31d3\u31d1\u0001\u0000"+
		"\u0000\u0000\u31d4\u31d5\u0005\u038b\u0000\u0000\u31d5\u31d7\u0001\u0000"+
		"\u0000\u0000\u31d6\u31b4\u0001\u0000\u0000\u0000\u31d6\u31c8\u0001\u0000"+
		"\u0000\u0000\u31d7\u04cf\u0001\u0000\u0000\u0000\u0680\u04d1\u04da\u04de"+
		"\u04e6\u04ec\u04f4\u04f8\u04fd\u0501\u0505\u050b\u0514\u0518\u051c\u0520"+
		"\u0528\u052b\u0534\u053c\u0542\u054d\u0553\u0559\u0560\u0564\u0572\u0576"+
		"\u057d\u0587\u0594\u0599\u059d\u05a1\u05a7\u05a9\u05af\u05b5\u05b7\u05bb"+
		"\u05c6\u05e1\u05e5\u05e9\u05ef\u05f1\u05fb\u05fe\u0601\u0604\u0609\u060f"+
		"\u0618\u0622\u0626\u0629\u062c\u0631\u0634\u0640\u064a\u0658\u0667\u066b"+
		"\u0673\u067b\u067e\u0681\u0684\u0689\u068c\u0690\u0696\u069d\u06a5\u06a9"+
		"\u06af\u06b6\u06bf\u06c4\u06c9\u06d2\u06de\u06e2\u06e5\u06f4\u06f6\u0700"+
		"\u0702\u070a\u0710\u0712\u0719\u071b\u0724\u072a\u072c\u0736\u073b\u073d"+
		"\u0748\u074a\u0757\u0759\u075e\u0760\u076a\u076c\u0770\u0776\u077d\u078d"+
		"\u079d\u07aa\u07ac\u07b3\u07bf\u07c6\u07e4\u07e9\u07f0\u07fd\u0802\u0814"+
		"\u0818\u0828\u082c\u0834\u0837\u083c\u0840\u0845\u084a\u0852\u0856\u0858"+
		"\u085f\u0864\u0869\u086e\u0873\u0879\u087c\u0882\u0887\u0889\u0890\u0892"+
		"\u089a\u08a0\u08a2\u08ac\u08b1\u08b3\u08bd\u08bf\u08cb\u08d0\u08d2\u08dc"+
		"\u08de\u08e2\u08e6\u08f6\u08ff\u0901\u090f\u0913\u0921\u092c\u0931\u093a"+
		"\u093d\u094a\u094f\u0979\u09a5\u09c0\u09fa\u0a59\u0a66\u0a6e\u0a74\u0a80"+
		"\u0a8b\u0a91\u0a95\u0a9c\u0aa1\u0aa6\u0aa9\u0ab1\u0ab9\u0abc\u0ac0\u0ac8"+
		"\u0ad0\u0ad4\u0add\u0ae0\u0aeb\u0af5\u0aff\u0b06\u0b0b\u0b0e\u0b11\u0b20"+
		"\u0b29\u0b37\u0b41\u0b59\u0b60\u0b69\u0b70\u0b79\u0b7b\u0b81\u0b88\u0b90"+
		"\u0b95\u0b9b\u0ba4\u0bad\u0bb4\u0bb9\u0bbf\u0bc4\u0bca\u0bd7\u0be4\u0beb"+
		"\u0bee\u0bf4\u0bfe\u0c0d\u0c19\u0c20\u0c2f\u0c37\u0c3f\u0c46\u0c51\u0c58"+
		"\u0c5b\u0c61\u0c69\u0c6f\u0c7b\u0c8a\u0c96\u0ca2\u0cb1\u0cbd\u0cc5\u0ccb"+
		"\u0cd7\u0cdc\u0ce2\u0ced\u0cf4\u0cf8\u0cfa\u0d1b\u0d28\u0d43\u0d48\u0d4d"+
		"\u0d56\u0d5d\u0d69\u0d74\u0d7a\u0d8e\u0d92\u0d95\u0d99\u0da2\u0da6\u0dab"+
		"\u0daf\u0db3\u0db7\u0dbc\u0dc0\u0dc4\u0dcc\u0dd4\u0ddc\u0de1\u0de6\u0de9"+
		"\u0df8\u0e03\u0e0c\u0e13\u0e18\u0e1a\u0e1f\u0e24\u0e2e\u0e33\u0e3c\u0e41"+
		"\u0e4a\u0e4f\u0e56\u0e5c\u0e67\u0e6e\u0e73\u0e79\u0e87\u0e8d\u0e93\u0e9f"+
		"\u0eae\u0eba\u0ec6\u0ed5\u0ee1\u0ee9\u0eef\u0efb\u0f04\u0f0d\u0f12\u0f24"+
		"\u0f33\u0f38\u0f3b\u0f43\u0f48\u0f4a\u0f53\u0f56\u0f58\u0f5d\u0f67\u0f70"+
		"\u0f79\u0f81\u0f86\u0f8d\u0f9a\u0fa6\u0fac\u0fb1\u0fbb\u0fc5\u0fcc\u0fd1"+
		"\u0fd4\u0fd7\u0fdc\u0fe4\u0fec\u0ff5\u0ffb\u1002\u1009\u1013\u1017\u101b"+
		"\u101e\u1021\u1026\u102b\u102f\u1034\u103a\u103e\u1047\u104c\u1051\u1056"+
		"\u105f\u1061\u1066\u106b\u1074\u1076\u107b\u1080\u1088\u1090\u1098\u109d"+
		"\u10a2\u10a6\u10aa\u10b3\u10b8\u10c0\u10c6\u10d0\u10d4\u10d8\u10df\u10e2"+
		"\u10e7\u10ec\u10f5\u10f7\u10fc\u1101\u110a\u110c\u1111\u1116\u111e\u1126"+
		"\u112e\u1135\u113d\u1141\u114a\u114f\u1157\u115d\u1163\u1167\u116e\u1171"+
		"\u1176\u117b\u1180\u1185\u118a\u118f\u1194\u1199\u119e\u11a3\u11a8\u11ad"+
		"\u11b2\u11b6\u11ba\u11c2\u11ca\u11d0\u11d4\u11d8\u11df\u11e4\u11e7\u11eb"+
		"\u11ef\u11f8\u11fd\u1205\u120b\u121b\u121e\u1224\u122b\u1232\u1238\u123e"+
		"\u1249\u124e\u1250\u1256\u125d\u1264\u126a\u1270\u127b\u1280\u1282\u1287"+
		"\u1292\u1298\u129d\u12a8\u12ae\u12b3\u12be\u12c1\u12c4\u12c9\u12d6\u12dc"+
		"\u12e0\u12e4\u12e9\u12ec\u12f4\u12fc\u12ff\u1303\u1307\u130e\u1316\u131a"+
		"\u1320\u1325\u132a\u132d\u1332\u133f\u1345\u134a\u1354\u135e\u1364\u1369"+
		"\u1371\u1379\u137e\u1386\u138b\u1390\u1395\u1398\u139b\u13a0\u13a8\u13b0"+
		"\u13ba\u13bf\u13c4\u13dc\u13e3\u13ef\u13f3\u13fb\u13ff\u1402\u1409\u1419"+
		"\u1423\u1426\u1436\u1439\u1448\u1451\u1456\u1459\u145c\u145f\u146b\u1472"+
		"\u1476\u1479\u1480\u1484\u1488\u148d\u1497\u149b\u149e\u14a3\u14ac\u14b2"+
		"\u14b6\u14c9\u14ce\u14d3\u14d7\u14db\u14dd\u14df\u14e3\u14f4\u14f7\u1507"+
		"\u150b\u1516\u1519\u151c\u1521\u152c\u152f\u153a\u153d\u153f\u1545\u1552"+
		"\u1565\u1568\u157d\u1589\u158c\u1593\u1597\u15a5\u15ac\u15b0\u15b3\u15b9"+
		"\u15bc\u15c8\u15d0\u15d8\u15e2\u15e9\u15ec\u15ef\u15f2\u15f5\u15f8\u15fb"+
		"\u1600\u1605\u1608\u160b\u160e\u1611\u1614\u1617\u161c\u1624\u162c\u1636"+
		"\u163d\u1642\u164a\u1654\u165d\u1672\u167a\u1682\u1690\u169c\u16b0\u16be"+
		"\u16cc\u16cf\u16d6\u16e2\u16ef\u16f6\u1709\u170d\u171c\u1722\u1729\u172f"+
		"\u174b\u1753\u1766\u1773\u177a\u177d\u1787\u178f\u1792\u1795\u17a0\u17a3"+
		"\u17a8\u17aa\u17ad\u17c4\u17ce\u17d1\u17d5\u17d8\u17db\u17e1\u17f0\u17f7"+
		"\u1807\u1811\u1840\u184e\u1853\u185b\u1863\u1868\u186b\u186f\u1873\u1889"+
		"\u188f\u1894\u18a0\u18ad\u18b3\u18b7\u18bc\u18cb\u18d8\u18de\u18f7\u18fd"+
		"\u18ff\u1903\u1907\u1917\u191b\u191f\u1927\u192a\u1930\u1935\u1939\u1944"+
		"\u1946\u194a\u194d\u1951\u1955\u195a\u195f\u1962\u1965\u1968\u1977\u197b"+
		"\u198b\u198e\u1993\u199a\u199f\u19ae\u19b4\u19ba\u19c4\u19c9\u19d3\u19d8"+
		"\u19dc\u19e1\u19e5\u19ea\u19ed\u19f0\u19f3\u19f6\u19f9\u19fd\u1a00\u1a0e"+
		"\u1a11\u1a17\u1a23\u1a25\u1a28\u1a2b\u1a38\u1a3d\u1a47\u1a4c\u1a51\u1a54"+
		"\u1a59\u1a5e\u1a65\u1a6a\u1a71\u1a74\u1a77\u1a7f\u1a84\u1a87\u1a8d\u1a90"+
		"\u1a93\u1a96\u1a99\u1a9d\u1aa2\u1aa9\u1aac\u1aaf\u1ab9\u1abc\u1abf\u1ac2"+
		"\u1ac6\u1acb\u1ad2\u1ad5\u1ad8\u1ae4\u1ae7\u1aea\u1aed\u1af0\u1af2\u1af9"+
		"\u1afc\u1b03\u1b0e\u1b14\u1b1e\u1b28\u1b2b\u1b34\u1b37\u1b40\u1b43\u1b4c"+
		"\u1b52\u1b57\u1b5d\u1b69\u1b6f\u1b74\u1b7a\u1b7f\u1b83\u1b88\u1b90\u1b99"+
		"\u1b9d\u1ba1\u1ba4\u1ba8\u1bb1\u1bb4\u1bc0\u1bc3\u1bc6\u1bc9\u1bcd\u1bd9"+
		"\u1bdc\u1be4\u1bea\u1bec\u1bf4\u1bfc\u1c01\u1c04\u1c0b\u1c0e\u1c18\u1c1b"+
		"\u1c27\u1c2a\u1c2d\u1c30\u1c3c\u1c3f\u1c42\u1c45\u1c4a\u1c5d\u1c61\u1c66"+
		"\u1c71\u1c79\u1c85\u1c88\u1c8d\u1c94\u1c99\u1c9d\u1ca0\u1ca3\u1ca6\u1ca9"+
		"\u1cb0\u1cb9\u1cc0\u1cc3\u1cc6\u1cd8\u1cf4\u1cf8\u1cfd\u1d08\u1d0c\u1d11"+
		"\u1d1f\u1d21\u1d25\u1d29\u1d2f\u1d34\u1d39\u1d3e\u1d41\u1d4e\u1d55\u1d5f"+
		"\u1d62\u1d6e\u1d71\u1d74\u1d77\u1d85\u1d88\u1d8b\u1d8e\u1d95\u1d98\u1da2"+
		"\u1da5\u1dab\u1db9\u1dbc\u1dbf\u1dc2\u1dc9\u1dcc\u1dd6\u1dd9\u1ddf\u1de8"+
		"\u1deb\u1dee\u1dfb\u1e06\u1e09\u1e0e\u1e14\u1e1e\u1e28\u1e2b\u1e34\u1e37"+
		"\u1e40\u1e43\u1e4c\u1e52\u1e57\u1e5d\u1e69\u1e6d\u1e74\u1e77\u1e7d\u1e7f"+
		"\u1e84\u1e87\u1e8d\u1e8f\u1e93\u1e97\u1e9b\u1e9e\u1ea2\u1ea8\u1eb2\u1ebb"+
		"\u1ebf\u1ec2\u1ec6\u1eca\u1ecf\u1ed4\u1ed9\u1edc\u1edf\u1ee2\u1ee6\u1eeb"+
		"\u1f01\u1f09\u1f12\u1f14\u1f1c\u1f24\u1f29\u1f2e\u1f36\u1f3b\u1f40\u1f46"+
		"\u1f4b\u1f58\u1f5d\u1f62\u1f67\u1f6f\u1f72\u1f76\u1f7b\u1f88\u1f8d\u1f92"+
		"\u1f97\u1f9f\u1fa7\u1fac\u1fb1\u1fb4\u1fb9\u1fbe\u1fc1\u1fc3\u1fc7\u1fcc"+
		"\u1fe1\u1fe6\u1feb\u1ff0\u1ff5\u1ffa\u1fff\u2004\u2009\u200d\u2012\u201f"+
		"\u2024\u2027\u2031\u2034\u203a\u203d\u2043\u2047\u204b\u204e\u2051\u2054"+
		"\u2057\u205b\u2060\u2066\u206e\u2074\u2079\u207f\u2087\u208d\u2092\u209d"+
		"\u20a3\u20b2\u20b8\u20be\u20c8\u20cf\u20da\u20e2\u20f6\u2129\u2132\u214b"+
		"\u2165\u216a\u216c\u2183\u2192\u21a7\u21ac\u21bb\u21ca\u21cd\u21d1\u21d7"+
		"\u21db\u21de\u21e4\u21e8\u21eb\u21f1\u21f5\u21f8\u21fa\u2213\u221b\u2224"+
		"\u2227\u2230\u2233\u2236\u223f\u2242\u2245\u2249\u224d\u2250\u2254\u2258"+
		"\u225b\u2269\u226c\u2270\u2278\u227b\u227e\u2282\u2285\u2289\u228e\u229c"+
		"\u229f\u22a3\u22ab\u22ae\u22b1\u22b3\u22b8\u22c2\u22ca\u22d2\u22d7\u22da"+
		"\u22e2\u22e5\u22e7\u22ec\u22f7\u22fa\u2305\u2310\u2318\u231d\u2325\u232a"+
		"\u233f\u2342\u2361\u2367\u236b\u236f\u2372\u2378\u237b\u237e\u2381\u2385"+
		"\u2389\u238d\u2390\u2397\u239a\u239d\u23a1\u23a5\u23a9\u23ac\u23b2\u23b4"+
		"\u23b9\u23be\u23c1\u23ca\u23d0\u23dd\u23e5\u23ee\u23f5\u240a\u240d\u240f"+
		"\u2419\u241d\u2423\u242d\u2430\u2437\u2439\u243d\u2440\u2443\u2447\u244a"+
		"\u244d\u2451\u2458\u245d\u2464\u246a\u246d\u2471\u2476\u2478\u247b\u2480"+
		"\u2482\u248a\u248d\u2490\u2493\u2496\u249e\u24a1\u24a4\u24a7\u24aa\u24ad"+
		"\u24b0\u24b3\u24b7\u24ba\u24be\u24c3\u24c5\u24cb\u24ce\u24d1\u24d4\u24d7"+
		"\u24da\u24e1\u24e4\u24e8\u24ee\u24f1\u24f5\u24f9\u24fd\u2500\u250c\u2514"+
		"\u2519\u251d\u2523\u2527\u252a\u2532\u2535\u2539\u2545\u254e\u2550\u256b"+
		"\u2571\u2577\u257b\u257f\u2582\u2585\u258d\u2590\u2593\u2597\u259e\u25a3"+
		"\u25a7\u25aa\u25ad\u25b0\u25b7\u25bb\u25bf\u25c4\u25c6\u25cb\u25d7\u25e9"+
		"\u25fe\u260a\u260c\u262f\u2654\u265b\u2664\u266b\u266f\u267a\u267e\u2684"+
		"\u268c\u2693\u269a\u269e\u26b0\u26b8\u26bf\u26c6\u26cf\u26db\u26e4\u26eb"+
		"\u26ef\u26f4\u26f8\u26fe\u2706\u2711\u2718\u271c\u2721\u2728\u272f\u2736"+
		"\u273d\u2745\u274d\u2764\u2770\u2775\u27b8\u27ce\u27d5\u27e3\u2806\u2834"+
		"\u2880\u2884\u2888\u288e\u2892\u2894\u2896\u2899\u289c\u28a1\u28a7\u28ab"+
		"\u28af\u28b2\u28b4\u28b9\u28bf\u28c3\u28c7\u28cc\u28cf\u28d1\u28d6\u28e0"+
		"\u28e4\u28e8\u28eb\u28ee\u28f1\u2911\u2917\u291d\u2920\u2923\u2925\u2927"+
		"\u292a\u292d\u2931\u2936\u293c\u293f\u2942\u2944\u2946\u2949\u294c\u2952"+
		"\u2956\u295b\u2961\u2964\u2967\u2969\u296b\u296e\u2971\u2979\u297f\u298a"+
		"\u298c\u2991\u299c\u299e\u29a4\u29a9\u29b7\u29c6\u29ce\u29d2\u29d6\u29dc"+
		"\u29e2\u29e8\u29eb\u29f6\u29fc\u2a00\u2a05\u2a0b\u2a0e\u2a17\u2a1a\u2a20"+
		"\u2a27\u2a2e\u2a32\u2a36\u2a38\u2a3d\u2a40\u2a44\u2a49\u2a4e\u2a51\u2a56"+
		"\u2a5c\u2a62\u2a6a\u2a72\u2a78\u2a7d\u2a84\u2a87\u2a8b\u2a8f\u2a92\u2a98"+
		"\u2a9a\u2a9c\u2a9f\u2aa2\u2aa7\u2aaa\u2ab7\u2aca\u2acd\u2ad2\u2ad5\u2ada"+
		"\u2ae5\u2ae9\u2aed\u2af3\u2af6\u2af9\u2afb\u2afd\u2b00\u2b03\u2b09\u2b0f"+
		"\u2b12\u2b16\u2b1a\u2b1f\u2b23\u2b27\u2b2c\u2b30\u2b34\u2b3a\u2b3d\u2b40"+
		"\u2b42\u2b44\u2b47\u2b4a\u2b4f\u2b5b\u2b69\u2b70\u2b86\u2b8f\u2b9e\u2bb4"+
		"\u2bbb\u2bc2\u2bcd\u2bd6\u2bdc\u2be2\u2be6\u2bf4\u2bfc\u2c04\u2c0d\u2c12"+
		"\u2c17\u2c1b\u2c2b\u2c36\u2c4d\u2c5a\u2c69\u2c6f\u2c75\u2c7b\u2c7f\u2c89"+
		"\u2c8f\u2c91\u2c93\u2ca6\u2cbb\u2cc3\u2cca\u2cd8\u2cdf\u2ceb\u2cef\u2cf6"+
		"\u2cfa\u2cfe\u2d02\u2d06\u2d0a\u2d0e\u2d12\u2d16\u2d1d\u2d26\u2d35\u2d41"+
		"\u2d4d\u2d57\u2d6c\u2d7f\u2d9c\u2da3\u2dbf\u2dc3\u2dcc\u2dd0\u2dd5\u2de2"+
		"\u2de7\u2df0\u2df2\u2df6\u2dfa\u2e00\u2e05\u2e09\u2e0d\u2e12\u2e16\u2e1b"+
		"\u2e20\u2e2a\u2e31\u2e35\u2e3d\u2e41\u2e45\u2e52\u2e58\u2e5d\u2e64\u2e6c"+
		"\u2e74\u2e79\u2e7d\u2e82\u2e86\u2e8f\u2e95\u2e99\u2e9c\u2e9f\u2ea3\u2ea6"+
		"\u2ea9\u2eb2\u2eb7\u2eba\u2ec3\u2ec7\u2ecb\u2ecf\u2ed3\u2ed5\u2ed8\u2edd"+
		"\u2ee1\u2ee5\u2eeb\u2ef0\u2ef3\u2ef9\u2f0a\u2f18\u2f21\u2f2a\u2f2d\u2f31"+
		"\u2f34\u2f37\u2f3a\u2f3d\u2f40\u2f43\u2f4c\u2f53\u2f56\u2f59\u2f5d\u2f60"+
		"\u2f66\u2f69\u2f6c\u2f71\u2f74\u2f76\u2f84\u2f8a\u2f91\u2fa2\u2fa6\u2fab"+
		"\u2fb1\u2fb5\u2fb8\u2fbe\u2fc5\u2fc7\u2fcb\u2fd2\u2fe2\u2fed\u2ffa\u3006"+
		"\u3012\u3018\u301e\u302d\u3037\u303a\u304b\u304e\u305a\u3063\u3066\u3069"+
		"\u306c\u306f\u3072\u3075\u3088\u308f\u3091\u309e\u30a6\u30b4\u30b6\u30bb"+
		"\u30bd\u30bf\u30c7\u30cc\u30d6\u30da\u30de\u30e6\u30ee\u30f6\u30f8\u30fe"+
		"\u3112\u311b\u3121\u3127\u312d\u3131\u3138\u3142\u3148\u314f\u3157\u315e"+
		"\u3165\u316d\u3176\u3181\u3184\u3188\u3191\u319c\u31a0\u31a3\u31a7\u31ab"+
		"\u31ae\u31b0\u31c3\u31d1\u31d6";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3,
			_serializedATNSegment4,
			_serializedATNSegment5
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}